@c Define the class index, method index, and selector cross-reference
@ifclear CLASS-INDICES
@set CLASS-INDICES
@defindex cl
@defcodeindex me
@defcodeindex sl 
@end ifclear

@c These are used for both TeX and HTML
@set BEFORE1
@set  AFTER1
@set BEFORE2
@set  AFTER2

@ifinfo
@c Use asis so that leading and trailing spaces are meaningful.
@c Remember we're inside a @menu command, hence the blanks are
@c kept in the output.
@set BEFORE1 @asis{* }
@set  AFTER1 @asis{::}
@set BEFORE2 @asis{  (}
@set  AFTER2 @asis{)}
@end ifinfo

@macro class {a,b}
@value{BEFORE1}\a\\a\@b{\b\}@value{AFTER1}
@end macro
@macro superclass {a,b}
\a\\a\@value{BEFORE2}@i{\b\}@value{AFTER2}
@end macro

@ifnotinfo
@macro begindetailmenu
@display
@end macro
@macro enddetailmenu
@end display
@end macro
@end ifnotinfo

@ifinfo
@macro begindetailmenu
@detailmenu
@end macro
@macro enddetailmenu
@end detailmenu
@end macro
@end ifinfo

@iftex
@macro beginmenu
@end macro
@macro endmenu
@end macro
@end iftex

@ifnottex
@macro beginmenu
@menu
@end macro
@macro endmenu
@end menu
@end macro
@end ifnottex

@beginmenu
@ifnottex
Alphabetic list:
* DBI.ColumnInfo::
* DBI.Connection::
* DBI.ConnectionInfo::
* DBI.FieldConverter::
* DBI.ResultSet::
* DBI.Row::
* DBI.Statement::
* DBI.Table::
@end ifnottex

@ifinfo
Class tree:
@end ifinfo
@iftex
@section Tree
@end iftex
@ifnotinfo

Classes documented in this manual are @b{boldfaced}.

@end ifnotinfo
@begindetailmenu
@superclass{@t{}, DBI.ROE.RASQLRelation}
@class{@t{ }, DBI.Table}
@superclass{@t{}, Object}
@class{@t{ }, DBI.ColumnInfo}
@class{@t{ }, DBI.Connection}
@class{@t{ }, DBI.ConnectionInfo}
@class{@t{ }, DBI.FieldConverter}
@class{@t{ }, DBI.Row}
@class{@t{ }, DBI.Statement}
@superclass{@t{ }, Iterable}
@superclass{@t{  }, Stream}
@class{@t{   }, DBI.ResultSet}
@enddetailmenu
@endmenu
@unmacro class
@unmacro superclass
@unmacro endmenu
@unmacro beginmenu
@unmacro enddetailmenu
@unmacro begindetailmenu
@node DBI.ColumnInfo
@section DBI.ColumnInfo
@clindex DBI.ColumnInfo

@table @b
@item Defined in namespace DBI
@itemx Superclass: Object
@itemx Category: DBI-Framework

@end table

@menu
* DBI.ColumnInfo-accessing::  (instance)
* DBI.ColumnInfo-printing::  (instance)
@end menu



@node DBI.ColumnInfo-accessing
@subsection DBI.ColumnInfo:@- accessing

@table @b
@meindex index
@item index
Return the 1-based index of the column in the result set (abstract).


@meindex isNullable
@item isNullable
Return whether the column can be NULL (always returns true in
ColumnInfo).


@meindex name
@item name
Return the name of the column (abstract).


@meindex size
@item size
Return the size of the column (abstract).


@meindex type
@item type
Return a string containing the type of the column (abstract).


@end table



@node DBI.ColumnInfo-printing
@subsection DBI.ColumnInfo:@- printing

@table @b
@meindex displayOn:@-
@item displayOn:@- aStream
Print a representation of the receiver on aStream.


@meindex printOn:@-
@item printOn:@- aStream
Print a representation of the receiver on aStream.


@end table

@node DBI.Connection
@section DBI.Connection
@clindex DBI.Connection

@table @b
@item Defined in namespace DBI
@itemx Superclass: Object
@itemx Category: DBI-Framework
I represent a connection to a database.
@end table

@menu
* DBI.Connection class-connecting::  (class)
* DBI.Connection class-initialization::  (class)
* DBI.Connection-accessing::  (instance)
* DBI.Connection-connecting::  (instance)
* DBI.Connection-querying::  (instance)
@end menu



@node DBI.Connection class-connecting
@subsection DBI.Connection class:@- connecting

@table @b
@meindex connect:@-user:@-password:@-
@item connect:@- aDSN user:@- aUserName password:@- aPassword
Connect to the database server identified by aDSN using the given
username and password.  The DSN is in the format
dbi:@-DriverName:@-dbname=database_name;host=hostname;port=port
Where dbi is constant, DriverName is the name of the driver, and
everything else is parameters in the form name1=value1;name2=value2;...

Individual drivers may parse the parameters differently, though
the existing ones all support parameters dbname, host and port.


@meindex paramConnect:@-user:@-password:@-
@item paramConnect:@- params user:@- aUserName password:@- aPassword
Connect to the database server using the parameters in params (a
Dictionary) and the given username and password (abstract).


@end table



@node DBI.Connection class-initialization
@subsection DBI.Connection class:@- initialization

@table @b
@meindex updateDriverList
@item updateDriverList
Private - Look for new subclasses of Connection.


@end table



@node DBI.Connection-accessing
@subsection DBI.Connection:@- accessing

@table @b
@meindex >>
@item >> aString
Returns a Table object corresponding to the given table.


@meindex database
@item database
Returns the database name for this connection.  This corresponds
to the catalog in SQL standard parlance (abstract).


@meindex fieldConverter
@item fieldConverter
Returns a FieldConverter that can be used to insert Smalltalk
objects into queries.


@meindex tableAt:@-
@item tableAt:@- aString
Returns a Table object corresponding to the given table.


@meindex tableAt:@-ifAbsent:@-
@item tableAt:@- aString ifAbsent:@- aBlock
Returns a Table object corresponding to the given table.


@end table



@node DBI.Connection-connecting
@subsection DBI.Connection:@- connecting

@table @b
@meindex close
@item close
Close the connection now; should happen on GC too (abstract).


@end table



@node DBI.Connection-querying
@subsection DBI.Connection:@- querying

@table @b
@meindex do:@-
@slindex rowsAffected
@item do:@- aSQLQuery
Executes a SQL statement (usually one that doesn't return a result set).
Return value is a ResultSet, to which you can send #rowsAffected
(abstract).


@meindex prepare:@-
@item prepare:@- aSQLQuery
Creates a statement object, that can be executed (with parameters, if
applicable) repeatedly (abstract).


@meindex primTableAt:@-ifAbsent:@-
@item primTableAt:@- aString ifAbsent:@- aBlock
Returns a Table object corresponding to the given table.  Should be
overridden by subclasses.


@meindex select:@-
@item select:@- aSQLQuery
Prepares and executes a SQL statement. Returns the result set or
throws an exception on failure (abstract).


@end table

@node DBI.ConnectionInfo
@section DBI.ConnectionInfo
@clindex DBI.ConnectionInfo

@table @b
@item Defined in namespace DBI
@itemx Superclass: Object
@itemx Category: DBI-Framework
A utility class to contain connection info.
@end table

@menu
* DBI.ConnectionInfo class-instance creation::  (class)
* DBI.ConnectionInfo-accessing::  (instance)
@end menu



@node DBI.ConnectionInfo class-instance creation
@subsection DBI.ConnectionInfo class:@- instance creation

@table @b
@meindex fromDSN:@-
@item fromDSN:@- aDSN
Parse a DSN in the format
dbi:@-DriverName:@-dbname=database_name;host=hostname;port=port where
dbi is constant, DriverName is the name of the driver, and everything
else is parameters in the form name1=value1;name2=value2;...


@end table



@node DBI.ConnectionInfo-accessing
@subsection DBI.ConnectionInfo:@- accessing

@table @b
@meindex driver
@item driver
Answer the driver; this is not the driver class.


@meindex driver:@-
@item driver:@- aString
Set the driver; this is not the driver class.


@meindex paramString:@-
@item paramString:@- aString
Set the parameter list.


@meindex params
@item params
Return the parsed parameters in a Dictionary.


@meindex scheme
@item scheme
Answer the scheme; the only supported one is 'dbi'.


@meindex scheme:@-
@item scheme:@- aString
Set the scheme; the only supported one is 'dbi'.


@end table

@node DBI.FieldConverter
@section DBI.FieldConverter
@clindex DBI.FieldConverter

@table @b
@item Defined in namespace DBI
@itemx Superclass: Object
@itemx Category: DBI

@end table

@menu
* DBI.FieldConverter class-instance creation::  (class)
* DBI.FieldConverter-actions::  (instance)
* DBI.FieldConverter-converting-smalltalk::  (instance)
@end menu



@node DBI.FieldConverter class-instance creation
@subsection DBI.FieldConverter class:@- instance creation

@table @b
@meindex new
@item new
Not commented.

@meindex uniqueInstance
@item uniqueInstance
Not commented.

@end table



@node DBI.FieldConverter-actions
@subsection DBI.FieldConverter:@- actions

@table @b
@meindex print:@-on:@-
@item print:@- aValue on:@- aStream
Not commented.

@meindex printString:@-
@item printString:@- aValue
Not commented.

@end table



@node DBI.FieldConverter-converting-smalltalk
@subsection DBI.FieldConverter:@- converting-smalltalk

@table @b
@meindex writeBoolean:@-on:@-
@item writeBoolean:@- aBoolean on:@- aStream
Not commented.

@meindex writeDate:@-on:@-
@item writeDate:@- aDate on:@- aStream
Not commented.

@meindex writeDateTime:@-on:@-
@item writeDateTime:@- aDateTime on:@- aStream
Not commented.

@meindex writeFloat:@-on:@-
@item writeFloat:@- aFloat on:@- aStream
Not commented.

@meindex writeInteger:@-on:@-
@item writeInteger:@- anInteger on:@- aStream
Not commented.

@meindex writeQuotedDate:@-on:@-
@item writeQuotedDate:@- aDate on:@- aStream
Not commented.

@meindex writeQuotedTime:@-on:@-
@item writeQuotedTime:@- aDate on:@- aStream
Not commented.

@meindex writeTime:@-on:@-
@item writeTime:@- aTime on:@- aStream
Not commented.

@end table

@node DBI.ResultSet
@section DBI.ResultSet
@clindex DBI.ResultSet

@table @b
@item Defined in namespace DBI
@itemx Superclass: Stream
@itemx Category: DBI-Framework
I represent a result set, ie. the set of rows returned from a SELECT statement.
I may also be returned for DML statements (INSERT, UPDATE, DELETE), in which
case I only hold the number of rows affected.
@end table

@menu
* DBI.ResultSet-accessing::  (instance)
* DBI.ResultSet-cursor access::  (instance)
* DBI.ResultSet-printing::  (instance)
* DBI.ResultSet-stream protocol::  (instance)
@end menu



@node DBI.ResultSet-accessing
@subsection DBI.ResultSet:@- accessing

@table @b
@meindex columnAt:@-
@item columnAt:@- aIndex
Answer the aIndex'th column name.


@meindex columnNames
@item columnNames
Answer an array of column names in order (abstract).


@meindex columns
@item columns
Answer a Dictionary of column name -> ColumnInfo pairs (abstract).


@meindex isDML
@item isDML
Returns true if the statement was not a SELECT or similar operation
(e.g. SHOW, DESCRIBE, EXPLAIN).


@meindex isSelect
@item isSelect
Returns true if the statement was a SELECT or similar operation
(e.g. SHOW, DESCRIBE, EXPLAIN), false otherwise.


@meindex rowCount
@item rowCount
Returns the number of rows in the result set;
error for DML statements.


@meindex rows
@item rows
Answer the contents of the execution result as array of Rows.


@meindex rowsAffected
@item rowsAffected
For DML statments, returns the number of rows affected;
error for SELECT statements.


@meindex statement
@item statement
Return the Statement, if any, that generated the result set.


@end table



@node DBI.ResultSet-cursor access
@subsection DBI.ResultSet:@- cursor access

@table @b
@meindex atEnd
@item atEnd
Return whether all the rows in the result set have been consumed.
(abstract).


@meindex fetch
@item fetch
Return the next row, or nil if at the end of the result set.


@meindex next
@item next
Return the next row, or raise an error if at the end of the stream
(abstract).


@end table



@node DBI.ResultSet-printing
@subsection DBI.ResultSet:@- printing

@table @b
@meindex printOn:@-
@item printOn:@- aStream
Print a representation of the receiver on aStream.


@end table



@node DBI.ResultSet-stream protocol
@subsection DBI.ResultSet:@- stream protocol

@table @b
@meindex position
@item position
Returns the current row index (0-based) in the result set (abstract).


@meindex position:@-
@item position:@- anInteger
Sets the current row index (0-based) in the result set (abstract).


@meindex size
@item size
Returns the number of rows in the result set.


@end table

@node DBI.Row
@section DBI.Row
@clindex DBI.Row

@table @b
@item Defined in namespace DBI
@itemx Superclass: Object
@itemx Category: DBI-Framework
I represent a row in a result set.
@end table

@menu
* DBI.Row-accessing::  (instance)
* DBI.Row-printing::  (instance)
@end menu



@node DBI.Row-accessing
@subsection DBI.Row:@- accessing

@table @b
@meindex asArray
@item asArray
Return the values of the columns.


@meindex asDictionary
@item asDictionary
Return the names and values of the columns as a dictionary.


@meindex at:@-
@item at:@- aColumnName
Return the value of the named column (abstract).


@meindex atIndex:@-
@item atIndex:@- aColumnIndex
Return the value of the column at the given 1-based index (abstract).


@meindex columnAt:@-
@item columnAt:@- aIndex
Return a ColumnInfo object for the aIndex-th column in the row.


@meindex columnCount
@item columnCount
Return the number of columns in the row.


@meindex columnNames
@item columnNames
Return an array of column names for the columns in the row.


@meindex columns
@item columns
Return a Dictionary of ColumnInfo objects for the columns in the row,
where the keys are the column names.


@meindex keysAndValuesDo:@-
@item keysAndValuesDo:@- aBlock
Pass to aBlock each column name and the corresponding value.


@meindex resultSet
@item resultSet
Return the result set that includes the receiver.


@end table



@node DBI.Row-printing
@subsection DBI.Row:@- printing

@table @b
@meindex printOn:@-
@item printOn:@- aStream
Print a representation of the receiver on aStream.


@end table

@node DBI.Statement
@section DBI.Statement
@clindex DBI.Statement

@table @b
@item Defined in namespace DBI
@itemx Superclass: Object
@itemx Category: DBI-Framework
I represent a prepared statement.
@end table

@menu
* DBI.Statement class-instance creation::  (class)
* DBI.Statement-querying::  (instance)
@end menu



@node DBI.Statement class-instance creation
@subsection DBI.Statement class:@- instance creation

@table @b
@meindex on:@-
@item on:@- aConnection
Return a new statement for this connection.


@end table



@node DBI.Statement-querying
@subsection DBI.Statement:@- querying

@table @b
@meindex execute
@item execute
Execute with no parameters (abstract).


@meindex executeWith:@-
@item executeWith:@- aParameter
Execute with one parameters.


@meindex executeWith:@-with:@-
@item executeWith:@- aParam1 with:@- aParam2
Execute with two parameters.


@meindex executeWith:@-with:@-with:@-
@item executeWith:@- aParam1 with:@- aParam2 with:@- aParam3
Execute with three parameters.


@meindex executeWithAll:@-
@item executeWithAll:@- aParams
Execute taking parameters from the Collection aParams (abstract).


@end table

@node DBI.Table
@section DBI.Table
@clindex DBI.Table

@table @b
@item Defined in namespace DBI
@itemx Superclass: DBI.ROE.RASQLRelation
@itemx Category: DBI

@end table

@menu
* DBI.Table-accessing::  (instance)
* DBI.Table-core::  (instance)
* DBI.Table-printing::  (instance)
@end menu



@node DBI.Table-accessing
@subsection DBI.Table:@- accessing

@table @b
@meindex columnAt:@-
@item columnAt:@- aIndex
Answer the aIndex'th column name.


@meindex columnNames
@item columnNames
Answer an array of column names in order (abstract).


@meindex columns
@item columns
Not commented.

@meindex database
@item database
Returns the database name for this table.  This corresponds
to the catalog in SQL standard parlance.


@end table



@node DBI.Table-core
@subsection DBI.Table:@- core

@table @b
@meindex size
@item size
Not commented.

@end table



@node DBI.Table-printing
@subsection DBI.Table:@- printing

@table @b
@meindex print:@-on:@-
@item print:@- anObject on:@- aStream
Not commented.

@end table


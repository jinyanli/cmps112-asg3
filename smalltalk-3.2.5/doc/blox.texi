@c Define the class index, method index, and selector cross-reference
@ifclear CLASS-INDICES
@set CLASS-INDICES
@defindex cl
@defcodeindex me
@defcodeindex sl 
@end ifclear

@c These are used for both TeX and HTML
@set BEFORE1
@set  AFTER1
@set BEFORE2
@set  AFTER2

@ifinfo
@c Use asis so that leading and trailing spaces are meaningful.
@c Remember we're inside a @menu command, hence the blanks are
@c kept in the output.
@set BEFORE1 @asis{* }
@set  AFTER1 @asis{::}
@set BEFORE2 @asis{  (}
@set  AFTER2 @asis{)}
@end ifinfo

@macro class {a,b}
@value{BEFORE1}\a\\a\@b{\b\}@value{AFTER1}
@end macro
@macro superclass {a,b}
\a\\a\@value{BEFORE2}@i{\b\}@value{AFTER2}
@end macro

@ifnotinfo
@macro begindetailmenu
@display
@end macro
@macro enddetailmenu
@end display
@end macro
@end ifnotinfo

@ifinfo
@macro begindetailmenu
@detailmenu
@end macro
@macro enddetailmenu
@end detailmenu
@end macro
@end ifinfo

@iftex
@macro beginmenu
@end macro
@macro endmenu
@end macro
@end iftex

@ifnottex
@macro beginmenu
@menu
@end macro
@macro endmenu
@end menu
@end macro
@end ifnottex

@beginmenu
@ifnottex
Alphabetic list:
* BLOX.BArc::
* BLOX.BBalloon::
* BLOX.BBoundingBox::
* BLOX.BButton::
* BLOX.BButtonLike::
* BLOX.BCanvas::
* BLOX.BCanvasObject::
* BLOX.BCheckMenuItem::
* BLOX.BColorButton::
* BLOX.BContainer::
* BLOX.BDialog::
* BLOX.BDropDown::
* BLOX.BDropDownEdit::
* BLOX.BDropDownList::
* BLOX.BEdit::
* BLOX.BEmbeddedImage::
* BLOX.BEmbeddedText::
* BLOX.BEventSet::
* BLOX.BEventTarget::
* BLOX.BExtended::
* BLOX.BForm::
* BLOX.BImage::
* BLOX.BLabel::
* BLOX.BLine::
* BLOX.BList::
* BLOX.Blox::
* BLOX.BMenu::
* BLOX.BMenuBar::
* BLOX.BMenuItem::
* BLOX.BMenuObject::
* BLOX.BOval::
* BLOX.BPolyline::
* BLOX.BPopupMenu::
* BLOX.BPopupWindow::
* BLOX.BPrimitive::
* BLOX.BProgress::
* BLOX.BRadioButton::
* BLOX.BRadioGroup::
* BLOX.BRectangle::
* BLOX.BScrolledCanvas::
* BLOX.BSpline::
* BLOX.BText::
* BLOX.BTextAttributes::
* BLOX.BTextBindings::
* BLOX.BTextTags::
* BLOX.BToggle::
* BLOX.BTransientWindow::
* BLOX.BViewport::
* BLOX.BWidget::
* BLOX.BWindow::
* BLOX.Gui::
@end ifnottex

@ifinfo
Class tree:
@end ifinfo
@iftex
@section Tree
@end iftex
@ifnotinfo

Classes documented in this manual are @b{boldfaced}.

@end ifnotinfo
@begindetailmenu
@superclass{@t{}, Object}
@class{@t{ }, BLOX.BEventTarget}
@class{@t{  }, BLOX.BCanvasObject}
@class{@t{   }, BLOX.BBoundingBox}
@class{@t{    }, BLOX.BEmbeddedImage}
@class{@t{    }, BLOX.BEmbeddedText}
@class{@t{    }, BLOX.BLine}
@class{@t{    }, BLOX.BRectangle}
@class{@t{     }, BLOX.BOval}
@class{@t{      }, BLOX.BArc}
@class{@t{   }, BLOX.BPolyline}
@class{@t{    }, BLOX.BSpline}
@class{@t{  }, BLOX.BEventSet}
@class{@t{   }, BLOX.BBalloon}
@class{@t{  }, BLOX.Blox}
@class{@t{   }, BLOX.BMenuObject}
@class{@t{    }, BLOX.BMenu}
@class{@t{     }, BLOX.BPopupMenu}
@class{@t{    }, BLOX.BMenuBar}
@class{@t{    }, BLOX.BMenuItem}
@class{@t{     }, BLOX.BCheckMenuItem}
@class{@t{   }, BLOX.BWidget}
@class{@t{    }, BLOX.BExtended}
@class{@t{     }, BLOX.BButtonLike}
@class{@t{      }, BLOX.BColorButton}
@class{@t{     }, BLOX.BDropDown}
@class{@t{      }, BLOX.BDropDownEdit}
@class{@t{      }, BLOX.BDropDownList}
@class{@t{     }, BLOX.BProgress}
@class{@t{    }, BLOX.BPrimitive}
@class{@t{     }, BLOX.BButton}
@class{@t{      }, BLOX.BRadioButton}
@class{@t{      }, BLOX.BToggle}
@class{@t{     }, BLOX.BEdit}
@class{@t{     }, BLOX.BForm}
@class{@t{      }, BLOX.BContainer}
@class{@t{       }, BLOX.BRadioGroup}
@class{@t{      }, BLOX.BDialog}
@class{@t{      }, BLOX.BWindow}
@class{@t{       }, BLOX.BPopupWindow}
@class{@t{       }, BLOX.BTransientWindow}
@class{@t{     }, BLOX.BImage}
@class{@t{     }, BLOX.BLabel}
@class{@t{     }, BLOX.BViewport}
@class{@t{      }, BLOX.BCanvas}
@class{@t{       }, BLOX.BScrolledCanvas}
@class{@t{      }, BLOX.BList}
@class{@t{      }, BLOX.BText}
@class{@t{  }, BLOX.BTextBindings}
@class{@t{ }, BLOX.BTextAttributes}
@class{@t{ }, BLOX.BTextTags}
@class{@t{ }, BLOX.Gui}
@enddetailmenu
@endmenu
@unmacro class
@unmacro superclass
@unmacro endmenu
@unmacro beginmenu
@unmacro enddetailmenu
@unmacro begindetailmenu
@node BLOX.BArc
@section BLOX.BArc
@clindex BLOX.BArc

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.BOval
@itemx Category: Graphics-Windows

I can draw arcs, pie slices (don't eat them!!), chords, and... nothing more.
@end table

@menu
* BLOX.BArc-accessing::  (instance)
@end menu



@node BLOX.BArc-accessing
@subsection BLOX.BArc:@- accessing

@table @b
@meindex endAngle
@item endAngle
Answer the ending of the angular range that is occupied by the arc,
expressed in degrees


@meindex endAngle:@-
@item endAngle:@- angle
Set the ending of the angular range that is occupied by the arc,
expressed in degrees


@meindex fillChord
@item fillChord
Specify that the arc will be filled by painting an area delimited
by the arc and the chord that joins the arc's endpoints.


@meindex fillSlice
@item fillSlice
Specify that the arc will be filled by painting an area delimited
by the arc and the two radii joins the center of the arc with
each of the endpoints (that is, that a pie slice will be drawn).


@meindex from
@item from
Answer the starting point of the arc in cartesian coordinates


@meindex from:@-
@item from:@- aPoint
Set the starting point of the arc in cartesian coordinates


@meindex from:@-to:@-
@item from:@- start to:@- end
Set the two starting points of the arc in cartesian coordinates


@meindex startAngle
@item startAngle
Answer the beginning of the angular range that is occupied by the arc,
expressed in degrees


@meindex startAngle:@-
@item startAngle:@- angle
Set the beginning of the angular range that is occupied by the arc,
expressed in degrees


@meindex sweepAngle
@item sweepAngle
Answer the size of the angular range that is occupied by the arc,
expressed in degrees


@meindex sweepAngle:@-
@item sweepAngle:@- angle
Set the size of the angular range that is occupied by the arc,
expressed in degrees


@meindex to
@item to
Answer the ending point of the arc in cartesian coordinates


@meindex to:@-
@item to:@- aPoint
Set the ending point of the arc in cartesian coordinates


@end table

@node BLOX.BBalloon
@section BLOX.BBalloon
@clindex BLOX.BBalloon

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.BEventSet
@itemx Category: Graphics-Examples
This event set allows a widget to show explanatory information when
the mouse lingers over it for a while.
@end table

@menu
* BLOX.BBalloon class-accessing::  (class)
* BLOX.BBalloon-accessing::  (instance)
* BLOX.BBalloon-initializing::  (instance)
@end menu



@node BLOX.BBalloon class-accessing
@subsection BLOX.BBalloon class:@- accessing

@table @b
@meindex balloonDelayTime
@item balloonDelayTime
Answer the time after which the balloon is shown (default is
half a second).


@meindex balloonDelayTime:@-
@item balloonDelayTime:@- milliseconds
Set the time after which the balloon is shown.


@meindex shown
@item shown
Answer whether a balloon is displayed


@end table



@node BLOX.BBalloon-accessing
@subsection BLOX.BBalloon:@- accessing

@table @b
@meindex shown
@item shown
Answer whether the receiver's balloon is displayed


@meindex text
@item text
Answer the text displayed in the balloon


@meindex text:@-
@item text:@- aString
Set the text displayed in the balloon to aString


@end table



@node BLOX.BBalloon-initializing
@subsection BLOX.BBalloon:@- initializing

@table @b
@meindex initialize:@-
@item initialize:@- aBWidget
Initialize the event sets for the receiver


@end table

@node BLOX.BBoundingBox
@section BLOX.BBoundingBox
@clindex BLOX.BBoundingBox

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.BCanvasObject
@itemx Category: Graphics-Windows
I am the ultimate ancestor of all items that you can put in a BCanvas and
which are well defined by their bounding box - i.e. everything except
BPolylines and BSplines.
@end table

@menu
* BLOX.BBoundingBox-accessing::  (instance)
@end menu



@node BLOX.BBoundingBox-accessing
@subsection BLOX.BBoundingBox:@- accessing

@table @b
@meindex boundingBox
@item boundingBox
Answer a Rectangle enclosing all of the receiver


@meindex center
@item center
Answer the center point of the receiver


@meindex center:@-extent:@-
@slindex create
@slindex redraw
@item center:@- center extent:@- extent
Move the object so that it is centered around the center Point and
its size is given by the extent Point.  No changes take place
until you invoke the #create (if the object has not been inserted
in the canvas yet) or the #redraw method.


@meindex corner
@item corner
Answer the Point specifying the lower-right corner of the receiver


@meindex corner:@-
@slindex create
@slindex redraw
@item corner:@- pointOrArray
Set the Point specifying the lower-right corner of the receiver;
pointOrArray can be a Point or a two-item Array.  No changes take place
until you invoke the #create (if the object has not been inserted
in the canvas yet) or the #redraw method.


@meindex extent
@item extent
Answer a Point specifying the size of the receiver


@meindex extent:@-
@slindex create
@slindex redraw
@item extent:@- pointOrArray
Set the Point specifying the size of the receiver;
pointOrArray can be a Point or a two-item Array.  No changes take place
until you invoke the #create (if the object has not been inserted
in the canvas yet) or the #redraw method.


@meindex moveBy:@-
@slindex create
@slindex redraw
@item moveBy:@- pointOrArray
Move the object by the amount indicated by pointOrArray:@- that is,
its whole bounding box is shifted by that amount.  No changes take place
until you invoke the #create (if the object has not been inserted
in the canvas yet) or the #redraw method.


@meindex origin
@item origin
Answer the Point specifying the top-left corner of the receiver


@meindex origin:@-
@slindex create
@slindex redraw
@item origin:@- pointOrArray
Set the Point specifying the top-left corner of the receiver;
pointOrArray can be a Point or a two-item Array.  No changes take place
until you invoke the #create (if the object has not been inserted
in the canvas yet) or the #redraw method.


@meindex origin:@-corner:@-
@slindex create
@slindex redraw
@item origin:@- originPointOrArray corner:@- cornerPointOrArray
Set the bounding box of the object, based on a Point specifying the
top-left corner of the receiver and another specifying the bottom-right
corner; the two parameters can both be Points or two-item Arrays.
No changes take place until you invoke the #create (if the object has
not been inserted in the canvas yet) or the #redraw method.


@meindex origin:@-extent:@-
@slindex create
@slindex redraw
@item origin:@- originPointOrArray extent:@- extentPointOrArray
Set the bounding box of the object, based on a Point specifying the
top-left corner of the receiver and another specifying its size;
the two parameters can both be Points or two-item Arrays.
No changes take place until you invoke the #create (if the object has
not been inserted in the canvas yet) or the #redraw method.


@end table

@node BLOX.BButton
@section BLOX.BButton
@clindex BLOX.BButton

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.BPrimitive
@itemx Category: Graphics-Windows
I am a button that a user can click. In fact I am at the head
of a small hierarchy of objects which exhibit button-like look
and behavior
@end table

@menu
* BLOX.BButton class-instance creation::  (class)
* BLOX.BButton-accessing::  (instance)
@end menu



@node BLOX.BButton class-instance creation
@subsection BLOX.BButton class:@- instance creation

@table @b
@meindex new:@-label:@-
@item new:@- parent label:@- label
Answer a new BButton widget laid inside the given parent widget,
showing by default the `label' String.


@end table



@node BLOX.BButton-accessing
@subsection BLOX.BButton:@- accessing

@table @b
@meindex backgroundColor
@item backgroundColor
Answer the value of the backgroundColor option for the widget.

Specifies the normal background color to use when displaying the widget.


@meindex backgroundColor:@-
@item backgroundColor:@- value
Set the value of the backgroundColor option for the widget.

Specifies the normal background color to use when displaying the widget.


@meindex callback
@item callback
Answer a DirectedMessage that is sent when the receiver is clicked,
or nil if none has been set up.


@meindex callback:@-message:@-
@item callback:@- aReceiver message:@- aSymbol
Set up so that aReceiver is sent the aSymbol message (the name of
a zero- or one-argument selector) when the receiver is clicked.
If the method accepts an argument, the receiver is passed.


@meindex font
@item font
Answer the value of the font option for the widget.

Specifies the font to use when drawing text inside the widget. The font
can be given as either an X font name or a Blox font description string.

X font names are given as many fields, each led by a minus, and each of
which can be replaced by an * to indicate a default value is ok:@-
foundry, family, weight, slant, setwidth, addstyle, pixel size, point size
(the same as pixel size for historical reasons), horizontal resolution,
vertical resolution, spacing, width, charset and character encoding.

Blox font description strings have three fields, which must be separated by
a space and of which only the first is mandatory:@- the font family, the font
size in points (or in pixels if a negative value is supplied), and a number
of styles separated by a space (valid styles are normal, bold, italic,
underline and overstrike). Examples of valid fonts are ``Helvetica 10 Bold'',
``Times -14'', ``Futura Bold Underline''.  You must enclose the font family
in braces if it is made of two or more words.


@meindex font:@-
@item font:@- value
Set the value of the font option for the widget.

Specifies the font to use when drawing text inside the widget. The font
can be given as either an X font name or a Blox font description string.

X font names are given as many fields, each led by a minus, and each of
which can be replaced by an * to indicate a default value is ok:@-
foundry, family, weight, slant, setwidth, addstyle, pixel size, point size
(the same as pixel size for historical reasons), horizontal resolution,
vertical resolution, spacing, width, charset and character encoding.

Blox font description strings have three fields, which must be separated by
a space and of which only the first is mandatory:@- the font family, the font
size in points (or in pixels if a negative value is supplied), and a number
of styles separated by a space (valid styles are normal, bold, italic,
underline and overstrike). Examples of valid fonts are ``Helvetica 10 Bold'',
``Times -14'', ``Futura Bold Underline''.  You must enclose the font family
in braces if it is made of two or more words.


@meindex foregroundColor
@item foregroundColor
Answer the value of the foregroundColor option for the widget.

Specifies the normal foreground color to use when displaying the widget.


@meindex foregroundColor:@-
@item foregroundColor:@- value
Set the value of the foregroundColor option for the widget.

Specifies the normal foreground color to use when displaying the widget.


@meindex invokeCallback
@item invokeCallback
Generate a synthetic callback


@meindex label
@item label
Answer the value of the label option for the widget.

Specifies a string to be displayed inside the widget. The way in which the
string is displayed depends on the particular widget and may be determined
by other options, such as anchor. For windows, this is the title of the window.


@meindex label:@-
@item label:@- value
Set the value of the label option for the widget.

Specifies a string to be displayed inside the widget. The way in which the
string is displayed depends on the particular widget and may be determined
by other options, such as anchor. For windows, this is the title of the window.


@end table

@node BLOX.BButtonLike
@section BLOX.BButtonLike
@clindex BLOX.BButtonLike

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.BExtended
@itemx Category: Graphics-Examples
I am an object whose 3-D appearance resembles that of buttons.
@end table

@menu
* BLOX.BButtonLike-accessing::  (instance)
@end menu



@node BLOX.BButtonLike-accessing
@subsection BLOX.BButtonLike:@- accessing

@table @b
@meindex callback
@item callback
Answer a DirectedMessage that is sent when the receiver is clicked,
or nil if none has been set up.


@meindex callback:@-message:@-
@item callback:@- aReceiver message:@- aSymbol
Set up so that aReceiver is sent the aSymbol message (the name of
a zero- or one-argument selector) when the receiver is clicked.
If the method accepts an argument, the receiver is passed.


@meindex invokeCallback
@item invokeCallback
Generate a synthetic callback


@meindex pressed
@item pressed
This is the default callback for the widget; it does
nothing if you don't override it. Of course if a subclass
overriddes this you (user of the class) might desire to
call this method from your own callback.


@end table

@node BLOX.BCanvas
@section BLOX.BCanvas
@clindex BLOX.BCanvas

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.BViewport
@itemx Category: Graphics-Windows

I am an host for whatever geometric shape you want. If you want to do some
fancy graphics with Smalltalk, I'll be happy to help. My friends derived
from BCanvasObject ask me all sort of things to do, so I am the real worker,
not they!

BCanvasObject:@- I am
BCanvas:@- No I am
BCanvasObject:@- No I am
BCanvas:@- No I am

well, you know, he always has something to object.
@end table

@menu
* BLOX.BCanvas-accessing::  (instance)
* BLOX.BCanvas-geometry management::  (instance)
* BLOX.BCanvas-widget protocol::  (instance)
@end menu



@node BLOX.BCanvas-accessing
@subsection BLOX.BCanvas:@- accessing

@table @b
@meindex backgroundColor
@item backgroundColor
Answer the value of the backgroundColor option for the widget.

Specifies the normal background color to use when displaying the widget.


@meindex backgroundColor:@-
@item backgroundColor:@- value
Set the value of the backgroundColor option for the widget.

Specifies the normal background color to use when displaying the widget.


@meindex foregroundColor
@item foregroundColor
Answer the value of the foregroundColor option for the widget.

Specifies the normal foreground color to use when displaying the widget.


@meindex foregroundColor:@-
@item foregroundColor:@- value
Set the value of the foregroundColor option for the widget.

Specifies the normal foreground color to use when displaying the widget.


@end table



@node BLOX.BCanvas-geometry management
@subsection BLOX.BCanvas:@- geometry management

@table @b
@meindex addChild:@-
@slindex basicAddChild:@-
@item addChild:@- child
The widget identified by child has been added to the receiver.
This method is public not because you can call it, but because
it can be useful to override it, not forgetting the call to
either the superclass implementation or #basicAddChild:@-, to
perform some initialization on the children just added. Answer
the new child.


@meindex child:@-height:@-
@item child:@- child height:@- value
Set the given child's height.


@meindex child:@-heightOffset:@-
@item child:@- child heightOffset:@- value
Offset the given child's height by value pixels.


@meindex child:@-width:@-
@item child:@- child width:@- value
Set the given child's width.


@meindex child:@-widthOffset:@-
@item child:@- child widthOffset:@- value
Offset the given child's width by value pixels.


@meindex child:@-x:@-
@item child:@- child x:@- value
Set the given child's top-left corner's x coordinate, in pixels
in the canvas' coordinate system.


@meindex child:@-xOffset:@-
@item child:@- child xOffset:@- value
Offset the given child's top-left x by value pixels.


@meindex child:@-y:@-
@item child:@- child y:@- value
Set the given child's top-left corner's y coordinate, in pixels
in the canvas' coordinate system.


@meindex child:@-yOffset:@-
@item child:@- child yOffset:@- value
Offset the given child's top-left y by value pixels.


@meindex heightChild:@-
@item heightChild:@- child
Answer the given child's height in pixels.


@meindex widthChild:@-
@item widthChild:@- child
Answer the given child's width in pixels.


@meindex xChild:@-
@item xChild:@- child
Answer the given child's top-left corner's x coordinate, in pixels
in the canvas' coordinate system.


@meindex yChild:@-
@item yChild:@- child
Answer the given child's top-left corner's y coordinate, in pixels
in the canvas' coordinate system.


@end table



@node BLOX.BCanvas-widget protocol
@subsection BLOX.BCanvas:@- widget protocol

@table @b
@meindex at:@-
@item at:@- aPoint
Selects the topmost item in the canvas overlapping
the point given by aPoint.


@meindex between:@-and:@-do:@-
@item between:@- origin and:@- corner do:@- aBlock
Evaluate aBlock for each item whose bounding box intersects the
rectangle between the two Points, origin and corner.  Pass the
item to the block.


@meindex boundingBox
@item boundingBox
Answer the bounding box of all the items in the canvas


@meindex destroyed
@item destroyed
The widget has been destroyed.  Tell all of its items about this
fact.


@meindex do:@-
@item do:@- aBlock
Evaluate aBlock, passing each item to it.


@meindex empty
@item empty
Remove all the items from the canvas, leaving it empty


@meindex extraSpace
@item extraSpace
Answer the amount of space that is left as a border around the
canvas items.


@meindex extraSpace:@-
@item extraSpace:@- aPoint
Set the amount of space that is left as a border around the
canvas items.


@meindex items
@item items
Answer an Array containing all the items in the canvas


@meindex mapPoint:@-
@item mapPoint:@- aPoint
Given aPoint, a point expressed in window coordinates, answer the
corresponding canvas coordinates that are displayed at that location.


@end table

@node BLOX.BCanvasObject
@section BLOX.BCanvasObject
@clindex BLOX.BCanvasObject

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.BEventTarget
@itemx Category: Graphics-Windows
I am the ultimate ancestor of all items that you can put in a BCanvas.
I provide some general methods to my concrete offspring.
@end table

@menu
* BLOX.BCanvasObject class-instance creation::  (class)
* BLOX.BCanvasObject-accessing::  (instance)
* BLOX.BCanvasObject-widget protocol::  (instance)
@end menu



@node BLOX.BCanvasObject class-instance creation
@subsection BLOX.BCanvasObject class:@- instance creation

@table @b
@meindex new
@item new
This method should not be called for instances of this class.

@meindex new:@-
@item new:@- parentCanvas
Answer a new instance of the receiver, displayed into the given
parentCanvas.


@end table



@node BLOX.BCanvasObject-accessing
@subsection BLOX.BCanvasObject:@- accessing

@table @b
@meindex blox
@item blox
Answer the parent canvas of the receiver


@meindex boundingBox
@item boundingBox
Answer a Rectangle enclosing all of the receiver


@meindex color
@item color
Answer the color to be used to fill this item's area.


@meindex color:@-
@item color:@- color
Set the color to be used to fill this item's area.


@meindex copyInto:@-
@item copyInto:@- newCanvas
Answer a new BCanvasObject identical to this but displayed
into another canvas, newCanvas.  The new instance is not
created at the time it is returned.


@meindex copyObject
@slindex copy
@slindex copyObject
@item copyObject
Answer a new BCanvasObject identical to this.  Unlike #copy,
which merely creates a new Smalltalk object with the same data
and referring to the same canvas item, the object created
with #copyObject is physically distinct from the original.
The new instance is not created at the time it is returned.


@meindex createCopy
@slindex copy
@slindex copyObject
@item createCopy
Answer a new BCanvasObject identical to this.  Unlike #copy,
which merely creates a new Smalltalk object with the same data
and referring to the same canvas item, the object created
with #copyObject is physically distinct from the original.
The new instance has already been created at the time it is
returned.


@meindex createCopyInto:@-
@item createCopyInto:@- newCanvas
Answer a new BCanvasObject identical to this but displayed
into another canvas, newCanvas.  The new instance has already
been created at the time it is returned.


@meindex deepCopy
@item deepCopy
It does not make sense to make a copy, because it would
make data inconsistent across different objects; so answer
the receiver


@meindex grayOut
@item grayOut
Apply a 50% gray stippling pattern to the object


@meindex shallowCopy
@item shallowCopy
It does not make sense to make a copy, because it would
make data inconsistent across different objects; so answer
the receiver


@end table



@node BLOX.BCanvasObject-widget protocol
@subsection BLOX.BCanvasObject:@- widget protocol

@table @b
@meindex create
@item create
If the object has not been created yet and has been initialized
correctly, insert it for real in the parent canvas


@meindex created
@item created
Answer whether the object is just a placeholder or has already
been inserted for real in the parent canvas


@meindex lower
@item lower
Move the item to the lowest position in the display list.
Child widgets always obscure other item types, and the stacking
order of window items is determined by sending methods to the
widget object directly.


@meindex raise
@item raise
Move the item to the highest position in the display list.
Child widgets always obscure other item types, and the stacking
order of window items is determined by sending methods to the
widget object directly.


@meindex redraw
@item redraw
Force the object to be displayed in the parent canvas, creating
it if it has not been inserted for real in the parent, and refresh
its position if it has changed.


@meindex remove
@item remove
Remove the object from the canvas


@meindex show
@item show
Ensure that the object is visible in the center of the canvas,
scrolling it if necessary.


@end table

@node BLOX.BCheckMenuItem
@section BLOX.BCheckMenuItem
@clindex BLOX.BCheckMenuItem

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.BMenuItem
@itemx Category: Graphics-Windows
I am a menu item which can be toggled between two states, marked
and unmarked.
@end table

@menu
* BLOX.BCheckMenuItem class-instance creation::  (class)
* BLOX.BCheckMenuItem-accessing::  (instance)
@end menu



@node BLOX.BCheckMenuItem class-instance creation
@subsection BLOX.BCheckMenuItem class:@- instance creation

@table @b
@meindex new:@-
@item new:@- parent
This method should not be called for instances of this class.

@end table



@node BLOX.BCheckMenuItem-accessing
@subsection BLOX.BCheckMenuItem:@- accessing

@table @b
@meindex invokeCallback
@item invokeCallback
Generate a synthetic callback


@meindex value
@item value
Answer whether the menu item is in a selected (checked) state.


@meindex value:@-
@item value:@- aBoolean
Set whether the button is in a selected (checked) state and
generates a callback accordingly.


@end table

@node BLOX.BColorButton
@section BLOX.BColorButton
@clindex BLOX.BColorButton

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.BButtonLike
@itemx Category: Graphics-Examples
I am a button that shows a color and that, unless a different callback is
used, lets you choose a color when it is clicked.
@end table

@menu
* BLOX.BColorButton-accessing::  (instance)
@end menu



@node BLOX.BColorButton-accessing
@subsection BLOX.BColorButton:@- accessing

@table @b
@meindex color
@item color
Set the color that the receiver is painted in.


@meindex color:@-
@item color:@- aString
Set the color that the receiver is painted in.


@meindex pressed
@item pressed
This is the default callback; it brings up a `choose-a-color'
window and, if `Ok' is pressed in the window, sets the receiver
to be painted in the chosen color.


@end table

@node BLOX.BContainer
@section BLOX.BContainer
@clindex BLOX.BContainer

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.BForm
@itemx Category: Graphics-Windows
I am used to group many widgets together. I can perform simple
management by putting widgets next to each other, from left to
right or from top to bottom.
@end table

@menu
* BLOX.BContainer-accessing::  (instance)
@end menu



@node BLOX.BContainer-accessing
@subsection BLOX.BContainer:@- accessing

@table @b
@meindex setVerticalLayout:@-
@item setVerticalLayout:@- aBoolean
Answer whether the container will align the widgets vertically or
horizontally.  Horizontal alignment means that widgets are
packed from left to right, while vertical alignment means that
widgets are packed from the top to the bottom of the widget.

Widgets that are set to be ``stretched'' will share all the
space that is not allocated to non-stretched widgets.

The layout of the widget can only be set before the first child
is inserted in the widget.


@end table

@node BLOX.BDialog
@section BLOX.BDialog
@clindex BLOX.BDialog

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.BForm
@itemx Category: Graphics-Windows
I am a facility for implementing dialogs with many possible choices
and requests. In addition I provide support for a few platform native
common dialog boxes, such as choose-a-file and choose-a-color.
@end table

@menu
* BLOX.BDialog class-instance creation::  (class)
* BLOX.BDialog class-prompters::  (class)
* BLOX.BDialog-accessing::  (instance)
* BLOX.BDialog-widget protocol::  (instance)
@end menu



@node BLOX.BDialog class-instance creation
@subsection BLOX.BDialog class:@- instance creation

@table @b
@meindex new:@-
@item new:@- parent
Answer a new dialog handler (containing a label widget and
some button widgets) laid out within the given parent window.
The label widget, when it is created, is empty.


@meindex new:@-label:@-
@item new:@- parent label:@- aLabel
Answer a new dialog handler (containing a label widget and
some button widgets) laid out within the given parent window.
The label widget, when it is created, contains aLabel.


@meindex new:@-label:@-prompt:@-
@item new:@- parent label:@- aLabel prompt:@- aString
Answer a new dialog handler (containing a label widget, some
button widgets, and an edit window showing aString by default)
laid out within the given parent window.
The label widget, when it is created, contains aLabel.


@end table



@node BLOX.BDialog class-prompters
@subsection BLOX.BDialog class:@- prompters

@table @b
@meindex chooseColor:@-label:@-default:@-
@item chooseColor:@- parent label:@- aLabel default:@- color
Prompt for a color.  The dialog box is created with the given
parent window and with aLabel as its title bar text, and initially
it selects the color given in the color parameter.

If the dialog box is canceled, nil is answered, else the
selected color is returned as a String with its RGB value.


@meindex chooseFileToOpen:@-label:@-default:@-defaultExtension:@-types:@-
@item chooseFileToOpen:@- parent label:@- aLabel default:@- name defaultExtension:@- ext types:@- typeList
Pop up a dialog box for the user to select a file to open.
Its purpose is for the user to select an existing file only.
If the user enters an non-existent file, the dialog box gives
the user an error prompt and requires the user to give an
alternative selection or to cancel the selection. If an
application allows the user to create new files, it should
do so by providing a separate New menu command.

If the dialog box is canceled, nil is answered, else the
selected file name is returned as a String.

The dialog box is created with the given parent window
and with aLabel as its title bar text.  The name parameter
indicates which file is initially selected, and the default
extension specifies  a string that will be appended to the
filename if the user enters a filename without an extension.

The typeList parameter is an array of arrays, like
#(('Text files' '.txt' '.diz') ('Smalltalk files' '.st')),
and is used to construct a listbox of file types.  When the user
chooses a file type in the listbox, only the files of that type
are listed.  Each item in the array contains a list of strings:@-
the first one is the name of the file type described by a particular
file pattern, and is the text string that appears in the File types
listbox, while the other ones are the possible extensions that
belong to this particular file type.


@meindex chooseFileToSave:@-label:@-default:@-defaultExtension:@-types:@-
@item chooseFileToSave:@- parent label:@- aLabel default:@- name defaultExtension:@- ext types:@- typeList
Pop up a dialog box for the user to select a file to save;
this differs from the file open dialog box in that non-existent
file names are accepted and existing file names trigger a
confirmation dialog box, asking the user whether the file
should be overwritten or not.

If the dialog box is canceled, nil is answered, else the
selected file name is returned as a String.

The dialog box is created with the given parent window
and with aLabel as its title bar text.  The name parameter
indicates which file is initially selected, and the default
extension specifies  a string that will be appended to the
filename if the user enters a filename without an extension.

The typeList parameter is an array of arrays, like
#(('Text files' '.txt' '.diz') ('Smalltalk files' '.st')),
and is used to construct a listbox of file types.  When the user
chooses a file type in the listbox, only the files of that type
are listed.  Each item in the array contains a list of strings:@-
the first one is the name of the file type described by a particular
file pattern, and is the text string that appears in the File types
listbox, while the other ones are the possible extensions that
belong to this particular file type.


@end table



@node BLOX.BDialog-accessing
@subsection BLOX.BDialog:@- accessing

@table @b
@meindex addButton:@-receiver:@-index:@-
@slindex dispatch:@-
@item addButton:@- aLabel receiver:@- anObject index:@- anInt
Add a button to the dialog box that, when clicked, will
cause the #dispatch:@- method to be triggered in anObject,
passing anInt as the argument of the callback.  The
caption of the button is set to aLabel.


@meindex addButton:@-receiver:@-message:@-
@item addButton:@- aLabel receiver:@- anObject message:@- aSymbol
Add a button to the dialog box that, when clicked, will
cause the aSymbol unary selector to be sent to anObject.
The caption of the button is set to aLabel.


@meindex addButton:@-receiver:@-message:@-argument:@-
@item addButton:@- aLabel receiver:@- anObject message:@- aSymbol argument:@- arg
Add a button to the dialog box that, when clicked, will
cause the aSymbol one-argument selector to be sent to anObject,
passing arg as the argument of the callback.  The
caption of the button is set to aLabel.


@meindex contents
@item contents
Answer the text that is displayed in the entry widget associated
to the dialog box.


@meindex contents:@-
@item contents:@- newText
Display newText in the entry widget associated to the dialog box.


@end table



@node BLOX.BDialog-widget protocol
@subsection BLOX.BDialog:@- widget protocol

@table @b
@meindex center
@item center
Center the dialog box's parent window in the screen


@meindex centerIn:@-
@item centerIn:@- view
Center the dialog box's parent window in the given widget


@meindex destroyed
@item destroyed
Private - The receiver has been destroyed, clear the corresponding
Tcl variable to avoid memory leaks.


@meindex invokeCallback:@-
@item invokeCallback:@- index
Generate a synthetic callback corresponding to the index-th
button being pressed, and destroy the parent window (triggering
its callback if one was established).


@meindex loop
@slindex modalMap
@item loop
Map the parent window modally.  In other words, an event loop
is started that ends only after the window has been destroyed.
For more information on the treatment of events for modal windows,
refer to BWindow>>@-#modalMap.


@end table

@node BLOX.BDropDown
@section BLOX.BDropDown
@clindex BLOX.BDropDown

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.BExtended
@itemx Category: Graphics-Examples
This class is an abstract superclass for widgets offering the ability
to pick items from a pre-built list.  The list is usually hidden, but
a button on the right of this widgets makes it pop up.  This widget
is thus composed of three parts:@- an unspecified text widget (shown on
the left of the button and always visible), the button widget (shown
on the right, it depicts a down arrow, and is always visible), and
the pop-up list widget.
@end table

@menu
* BLOX.BDropDown-accessing::  (instance)
* BLOX.BDropDown-callbacks::  (instance)
* BLOX.BDropDown-flexibility::  (instance)
* BLOX.BDropDown-list box accessing::  (instance)
* BLOX.BDropDown-widget protocol::  (instance)
@end menu



@node BLOX.BDropDown-accessing
@subsection BLOX.BDropDown:@- accessing

@table @b
@meindex backgroundColor
@item backgroundColor
Answer the value of the backgroundColor for the widget, which
in this class is only set for the list widget (that is, the
pop-up widget). Subclasses should override this method so that
the color is set properly for the text widget as well.

Specifies the normal background color to use when displaying the widget.


@meindex backgroundColor:@-
@item backgroundColor:@- aColor
Set the value of the backgroundColor for the widget, which
in this class is only set for the list widget (that is, the
pop-up widget). Subclasses should override this method so that
the color is set properly for the text widget as well.

Specifies the normal background color to use when displaying the widget.


@meindex droppedRows
@item droppedRows
Answer the number of items that are visible at any time in
the listbox.


@meindex droppedRows:@-
@item droppedRows:@- anInteger
Set the number of items that are visible at any time in
the listbox.


@meindex font
@item font
Answer the value of the font option for the widget, which
in this class is only set for the list widget (that is, the
pop-up widget). Subclasses should override this method so that
the color is set properly for the text widget as well.

Specifies the font to use when drawing text inside the widget. The font
can be given as either an X font name or a Blox font description string.

X font names are given as many fields, each led by a minus, and each of
which can be replaced by an * to indicate a default value is ok:@-
foundry, family, weight, slant, setwidth, addstyle, pixel size, point size
(the same as pixel size for historical reasons), horizontal resolution,
vertical resolution, spacing, width, charset and character encoding.

Blox font description strings have three fields, which must be separated by
a space and of which only the first is mandatory:@- the font family, the font
size in points (or in pixels if a negative value is supplied), and a number
of styles separated by a space (valid styles are normal, bold, italic,
underline and overstrike). Examples of valid fonts are ``Helvetica 10 Bold'',
``Times -14'', ``Futura Bold Underline''.  You must enclose the font family
in braces if it is made of two or more words.


@meindex font:@-
@item font:@- value
Set the value of the font option for the widget, which
in this class is only set for the list widget (that is, the
pop-up widget). Subclasses should override this method so that
the color is set properly for the text widget as well.

Specifies the font to use when drawing text inside the widget. The font
can be given as either an X font name or a Blox font description string.

X font names are given as many fields, each led by a minus, and each of
which can be replaced by an * to indicate a default value is ok:@-
foundry, family, weight, slant, setwidth, addstyle, pixel size, point size
(the same as pixel size for historical reasons), horizontal resolution,
vertical resolution, spacing, width, charset and character encoding.

Blox font description strings have three fields, which must be separated by
a space and of which only the first is mandatory:@- the font family, the font
size in points (or in pixels if a negative value is supplied), and a number
of styles separated by a space (valid styles are normal, bold, italic,
underline and overstrike). Examples of valid fonts are ``Helvetica 10 Bold'',
``Times -14'', ``Futura Bold Underline''.  You must enclose the font family
in braces if it is made of two or more words.


@meindex foregroundColor
@item foregroundColor
Answer the value of the foregroundColor for the widget, which
in this class is only set for the list widget (that is, the
pop-up widget). Subclasses should override this method so that
the color is set properly for the text widget as well.

Specifies the normal foreground color to use when displaying the widget.


@meindex foregroundColor:@-
@item foregroundColor:@- aColor
Set the value of the foregroundColor for the widget, which
in this class is only set for the list widget (that is, the
pop-up widget). Subclasses should override this method so that
the color is set properly for the text widget as well.

Specifies the normal foreground color to use when displaying the widget.


@meindex highlightBackground
@item highlightBackground
Answer the value of the highlightBackground option for the widget.

Specifies the background color to use when displaying selected items
in the list widget.


@meindex highlightBackground:@-
@item highlightBackground:@- aColor
Set the value of the highlightBackground option for the widget.

Specifies the background color to use when displaying selected items
in the list widget.


@meindex highlightForeground
@item highlightForeground
Answer the value of the highlightForeground option for the widget.

Specifies the foreground color to use when displaying selected items
in the list widget.


@meindex highlightForeground:@-
@item highlightForeground:@- aColor
Set the value of the highlightForeground option for the widget.

Specifies the foreground color to use when displaying selected items
in the list widget.


@end table



@node BLOX.BDropDown-callbacks
@subsection BLOX.BDropDown:@- callbacks

@table @b
@meindex callback
@item callback
Answer a DirectedMessage that is sent when the receiver is clicked,
or nil if none has been set up.


@meindex callback:@-message:@-
@item callback:@- aReceiver message:@- aSymbol
Set up so that aReceiver is sent the aSymbol message (the name of
a zero- or one-argument selector) when the receiver is clicked.
If the method accepts an argument, the receiver is passed.


@meindex invokeCallback
@item invokeCallback
Generate a synthetic callback


@end table



@node BLOX.BDropDown-flexibility
@subsection BLOX.BDropDown:@- flexibility

@table @b
@meindex createList
@item createList
Create the popup widget to be used for the
`drop-down list'.  It is a BList by default, but you can
use any other widget, overriding the `list box accessing'
methods if necessary.


@meindex createTextWidget
@item createTextWidget
Create the widget that will hold the string chosen from
the list box and answer it. The widget must be a child of `self
primitive'.


@meindex itemHeight
@slindex font
@item itemHeight
Answer the height of an item in the drop-down list. The
default implementation assumes that the receiver understands
#font, but you can modify it if you want.


@meindex listCallback
@item listCallback
Called when an item of the listbox is highlighted. Do
nothing by default


@meindex listSelectAt:@-
@item listSelectAt:@- aPoint
Select the item lying at the given position in the list
box. The default implementation assumes that list is a BList, but
you can modify it if you want.


@meindex listText
@item listText
Answer the text currently chosen in the list box. The
default implementation assumes that list is a BList, but you can
modify it if you want.


@meindex text
@item text
Answer the text that the user has picked from the widget and/or
typed in the control (the exact way the text is entered will be
established by subclasses, since this is an abstract method).


@meindex text:@-
@item text:@- aString
Set the text widget to aString


@end table



@node BLOX.BDropDown-list box accessing
@subsection BLOX.BDropDown:@- list box accessing

@table @b
@meindex add:@-afterIndex:@-
@item add:@- anObject afterIndex:@- index
Add an element with the given value after another element whose
index is contained in the index parameter.  The label displayed
in the widget is anObject's displayString.  Answer anObject.


@meindex add:@-element:@-afterIndex:@-
@item add:@- aString element:@- anObject afterIndex:@- index
Add an element with the aString label after another element whose
index is contained in the index parameter.  This method allows
the client to decide autonomously the label that the widget will
display.

If anObject is nil, then string is used as the element as well.
If aString is nil, then the element's displayString is used as
the label.

Answer anObject or, if it is nil, aString.


@meindex addLast:@-
@item addLast:@- anObject
Add an element with the given value at the end of the listbox.
The label displayed in the widget is anObject's displayString.
Answer anObject.


@meindex addLast:@-element:@-
@item addLast:@- aString element:@- anObject
Add an element with the given value at the end of the listbox.
This method allows the client to decide autonomously the label
that the widget will display.

If anObject is nil, then string is used as the element as well.
If aString is nil, then the element's displayString is used as
the label.

Answer anObject or, if it is nil, aString.


@meindex associationAt:@-
@item associationAt:@- anIndex
Answer an association whose key is the item at the given position
in the listbox and whose value is the label used to display that
item.


@meindex at:@-
@item at:@- anIndex
Answer the element displayed at the given position in the list
box.


@meindex contents:@-
@item contents:@- stringCollection
Set the elements displayed in the listbox, and set the labels
to be their displayStrings.


@meindex contents:@-elements:@-
@item contents:@- stringCollection elements:@- elementList
Set the elements displayed in the listbox to be those in elementList,
and set the labels to be the corresponding elements in stringCollection.
The two collections must have the same size.


@meindex do:@-
@item do:@- aBlock
Iterate over each element of the listbox and pass it to aBlock.


@meindex elements:@-
@item elements:@- elementList
Set the elements displayed in the listbox, and set the labels
to be their displayStrings.


@meindex index:@-
@item index:@- newIndex
Highlight the item at the given position in the listbox, and
transfer the text in the list box to the text widget.


@meindex labelAt:@-
@item labelAt:@- anIndex
Answer the label displayed at the given position in the list
box.


@meindex labelsDo:@-
@item labelsDo:@- aBlock
Iterate over the labels in the list widget and pass each of
them to aBlock.


@meindex numberOfStrings
@item numberOfStrings
Answer the number of items in the list box


@meindex removeAtIndex:@-
@slindex at:@-
@item removeAtIndex:@- index
Remove the item at the given index in the list box, answering
the object associated to the element (i.e. the value that #at:@-
would have returned for the given index)


@meindex size
@item size
Answer the number of items in the list box


@end table



@node BLOX.BDropDown-widget protocol
@subsection BLOX.BDropDown:@- widget protocol

@table @b
@meindex dropRectangle
@item dropRectangle
Answer the rectangle in which the list widget will pop-up.
If possible, this is situated below the drop-down widget's
bottom side, but if the screen space there is not enough
it could be above the drop-down widget's above side.  If
there is no screen space above as well, we pick the side
where we can offer the greatest number of lines in the
pop-up widget.


@meindex dropdown
@item dropdown
Force the pop-up list widget to be visible.


@meindex isDropdownVisible
@item isDropdownVisible
Answer whether the pop-up widget is visible


@meindex toggle
@item toggle
Toggle the visibility of the pop-up widget.


@meindex unmapList
@item unmapList
Unmap the pop-up widget from the screen, transfer its selected
item to the always visible text widget, and generate a callback.


@end table

@node BLOX.BDropDownEdit
@section BLOX.BDropDownEdit
@clindex BLOX.BDropDownEdit

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.BDropDown
@itemx Category: Graphics-Examples
This class resembles an edit widget, but it has an arrow button that 
allows the user to pick an item from a pre-built list.
@end table

@menu
* BLOX.BDropDownEdit-accessing::  (instance)
* BLOX.BDropDownEdit-accessing-overrides::  (instance)
* BLOX.BDropDownEdit-text accessing::  (instance)
@end menu



@node BLOX.BDropDownEdit-accessing
@subsection BLOX.BDropDownEdit:@- accessing

@table @b
@meindex backgroundColor:@-
@item backgroundColor:@- aColor
Set the value of the backgroundColor option for the widget.

Specifies the normal background color to use when displaying the widget.


@meindex font:@-
@item font:@- aString
Set the value of the font option for the widget.

Specifies the font to use when drawing text inside the widget. The font
can be given as either an X font name or a Blox font description string.

X font names are given as many fields, each led by a minus, and each of
which can be replaced by an * to indicate a default value is ok:@-
foundry, family, weight, slant, setwidth, addstyle, pixel size, point size
(the same as pixel size for historical reasons), horizontal resolution,
vertical resolution, spacing, width, charset and character encoding.

Blox font description strings have three fields, which must be separated by
a space and of which only the first is mandatory:@- the font family, the font
size in points (or in pixels if a negative value is supplied), and a number
of styles separated by a space (valid styles are normal, bold, italic,
underline and overstrike). Examples of valid fonts are ``Helvetica 10 Bold'',
``Times -14'', ``Futura Bold Underline''.  You must enclose the font family
in braces if it is made of two or more words.


@meindex foregroundColor:@-
@item foregroundColor:@- aColor
Set the value of the foregroundColor option for the widget.

Specifies the normal foreground color to use when displaying the widget.


@meindex highlightBackground:@-
@item highlightBackground:@- aColor
Set the value of the highlightBackground option for the widget.

Specifies the background color to use when displaying selected items
in the list widget and the selection in the text widget.


@meindex highlightForeground:@-
@item highlightForeground:@- aColor
Set the value of the highlightBackground option for the widget.

Specifies the background color to use when displaying selected items
in the list widget and the selection in the text widget.


@end table



@node BLOX.BDropDownEdit-accessing-overrides
@subsection BLOX.BDropDownEdit:@- accessing-overrides

@table @b
@meindex text
@item text
Answer the text shown in the widget


@end table



@node BLOX.BDropDownEdit-text accessing
@subsection BLOX.BDropDownEdit:@- text accessing

@table @b
@meindex insertAtEnd:@-
@item insertAtEnd:@- aString
Clear the selection and append aString at the end of the
text widget.


@meindex replaceSelection:@-
@item replaceSelection:@- aString
Insert aString in the text widget at the current insertion point,
replacing the currently selected text (if any), and leaving
the text selected.


@meindex selectAll
@item selectAll
Select the whole contents of the text widget


@meindex selectFrom:@-to:@-
@item selectFrom:@- first to:@- last
Sets the selection of the text widget to include the characters
starting with the one indexed by first (the very first character in
the widget having index 1) and ending with the one just before
last.  If last refers to the same character as first or an earlier
one, then the text widget's selection is cleared.


@meindex selection
@item selection
Answer an empty string if the text widget has no selection, else answer
the currently selected text


@meindex selectionRange
@item selectionRange
Answer nil if the text widget has no selection, else answer
an Interval object whose first item is the index of the
first character in the selection, and whose last item is the
index of the character just after the last one in the
selection.


@meindex text:@-
@item text:@- aString
Set the contents of the text widget and select them.


@end table

@node BLOX.BDropDownList
@section BLOX.BDropDownList
@clindex BLOX.BDropDownList

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.BDropDown
@itemx Category: Graphics-Examples
This class resembles a list box widget, but its actual list shows up
only when you click the arrow button beside the currently selected item.
@end table

@menu
* BLOX.BDropDownList-accessing::  (instance)
* BLOX.BDropDownList-callbacks::  (instance)
* BLOX.BDropDownList-list box accessing::  (instance)
@end menu



@node BLOX.BDropDownList-accessing
@subsection BLOX.BDropDownList:@- accessing

@table @b
@meindex backgroundColor:@-
@item backgroundColor:@- aColor
Set the value of the backgroundColor for the widget, which
in this class is set for the list widget and, when the focus is
outside the control, for the text widget as well.

Specifies the normal background color to use when displaying the widget.


@meindex font:@-
@item font:@- aString
Set the value of the font option for the widget.

Specifies the font to use when drawing text inside the widget. The font
can be given as either an X font name or a Blox font description string.

X font names are given as many fields, each led by a minus, and each of
which can be replaced by an * to indicate a default value is ok:@-
foundry, family, weight, slant, setwidth, addstyle, pixel size, point size
(the same as pixel size for historical reasons), horizontal resolution,
vertical resolution, spacing, width, charset and character encoding.

Blox font description strings have three fields, which must be separated by
a space and of which only the first is mandatory:@- the font family, the font
size in points (or in pixels if a negative value is supplied), and a number
of styles separated by a space (valid styles are normal, bold, italic,
underline and overstrike). Examples of valid fonts are ``Helvetica 10 Bold'',
``Times -14'', ``Futura Bold Underline''.  You must enclose the font family
in braces if it is made of two or more words.


@meindex foregroundColor:@-
@item foregroundColor:@- aColor
Set the value of the foregroundColor for the widget, which
in this class is set for the list widget and, when the focus is
outside the control, for the text widget as well.

Specifies the normal foreground color to use when displaying the widget.


@meindex highlightBackground:@-
@item highlightBackground:@- aColor
Answer the value of the highlightBackground option for the widget.

Specifies the background color to use when displaying selected items
in the list widget and, when the focus is inside the control, for the
text widget as well.


@meindex highlightForeground:@-
@item highlightForeground:@- aColor
Answer the value of the highlightForeground option for the widget.

Specifies the foreground color to use when displaying selected items
in the list widget and, when the focus is inside the control, for the
text widget as well.


@meindex text
@item text
Answer the text that the user has picked from the widget and/or
typed in the control (the exact way the text is entered will be
established by subclasses, since this is an abstract method).


@end table



@node BLOX.BDropDownList-callbacks
@subsection BLOX.BDropDownList:@- callbacks

@table @b
@meindex callback:@-message:@-
@item callback:@- aReceiver message:@- aSymbol
Set up so that aReceiver is sent the aSymbol message (the name of
a selector with at most two arguemtnts) when the active item in
the receiver changegs.  If the method accepts two arguments, the
receiver is  passed as the first parameter.  If the method accepts
one or two arguments, the selected index is passed as the last
parameter.


@meindex invokeCallback
@item invokeCallback
Generate a synthetic callback.


@end table



@node BLOX.BDropDownList-list box accessing
@subsection BLOX.BDropDownList:@- list box accessing

@table @b
@meindex index
@item index
Answer the value of the index option for the widget.  Since it is
not possible to modify an item once it has been picked from the
list widget, this is always defined for BDropDownList widgets.


@end table

@node BLOX.BEdit
@section BLOX.BEdit
@clindex BLOX.BEdit

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.BPrimitive
@itemx Category: Graphics-Windows
I am a widget showing one line of modifiable text.
@end table

@menu
* BLOX.BEdit class-instance creation::  (class)
* BLOX.BEdit-accessing::  (instance)
* BLOX.BEdit-widget protocol::  (instance)
@end menu



@node BLOX.BEdit class-instance creation
@subsection BLOX.BEdit class:@- instance creation

@table @b
@meindex new:@-contents:@-
@item new:@- parent contents:@- aString
Answer a new BEdit widget laid inside the given parent widget,
with a default content of aString


@end table



@node BLOX.BEdit-accessing
@subsection BLOX.BEdit:@- accessing

@table @b
@meindex backgroundColor
@item backgroundColor
Answer the value of the backgroundColor option for the widget.

Specifies the normal background color to use when displaying the widget.


@meindex backgroundColor:@-
@item backgroundColor:@- value
Set the value of the backgroundColor option for the widget.

Specifies the normal background color to use when displaying the widget.


@meindex callback
@item callback
Answer a DirectedMessage that is sent when the receiver is modified,
or nil if none has been set up.


@meindex callback:@-message:@-
@item callback:@- aReceiver message:@- aSymbol
Set up so that aReceiver is sent the aSymbol message (the name of
a zero- or one-argument selector) when the receiver is modified.
If the method accepts an argument, the receiver is passed.


@meindex contents
@item contents
Return the contents of the widget


@meindex contents:@-
@item contents:@- newText
Set the contents of the widget


@meindex font
@item font
Answer the value of the font option for the widget.

Specifies the font to use when drawing text inside the widget. The font
can be given as either an X font name or a Blox font description string.

X font names are given as many fields, each led by a minus, and each of
which can be replaced by an * to indicate a default value is ok:@-
foundry, family, weight, slant, setwidth, addstyle, pixel size, point size
(the same as pixel size for historical reasons), horizontal resolution,
vertical resolution, spacing, width, charset and character encoding.

Blox font description strings have three fields, which must be separated by
a space and of which only the first is mandatory:@- the font family, the font
size in points (or in pixels if a negative value is supplied), and a number
of styles separated by a space (valid styles are normal, bold, italic,
underline and overstrike). Examples of valid fonts are ``Helvetica 10 Bold'',
``Times -14'', ``Futura Bold Underline''.  You must enclose the font family
in braces if it is made of two or more words.


@meindex font:@-
@item font:@- value
Set the value of the font option for the widget.

Specifies the font to use when drawing text inside the widget. The font
can be given as either an X font name or a Blox font description string.

X font names are given as many fields, each led by a minus, and each of
which can be replaced by an * to indicate a default value is ok:@-
foundry, family, weight, slant, setwidth, addstyle, pixel size, point size
(the same as pixel size for historical reasons), horizontal resolution,
vertical resolution, spacing, width, charset and character encoding.

Blox font description strings have three fields, which must be separated by
a space and of which only the first is mandatory:@- the font family, the font
size in points (or in pixels if a negative value is supplied), and a number
of styles separated by a space (valid styles are normal, bold, italic,
underline and overstrike). Examples of valid fonts are ``Helvetica 10 Bold'',
``Times -14'', ``Futura Bold Underline''.  You must enclose the font family
in braces if it is made of two or more words.


@meindex foregroundColor
@item foregroundColor
Answer the value of the foregroundColor option for the widget.

Specifies the normal foreground color to use when displaying the widget.


@meindex foregroundColor:@-
@item foregroundColor:@- value
Set the value of the foregroundColor option for the widget.

Specifies the normal foreground color to use when displaying the widget.


@meindex selectBackground
@item selectBackground
Answer the value of the selectBackground option for the widget.

Specifies the background color to use when displaying selected parts
of the widget.


@meindex selectBackground:@-
@item selectBackground:@- value
Set the value of the selectBackground option for the widget.

Specifies the background color to use when displaying selected parts
of the widget.


@meindex selectForeground
@item selectForeground
Answer the value of the selectForeground option for the widget.

Specifies the foreground color to use when displaying selected parts
of the widget.


@meindex selectForeground:@-
@item selectForeground:@- value
Set the value of the selectForeground option for the widget.

Specifies the foreground color to use when displaying selected parts
of the widget.


@end table



@node BLOX.BEdit-widget protocol
@subsection BLOX.BEdit:@- widget protocol

@table @b
@meindex destroyed
@item destroyed
Private - The receiver has been destroyed, clear the corresponding
Tcl variable to avoid memory leaks.


@meindex hasSelection
@item hasSelection
Answer whether there is selected text in the widget


@meindex insertAtEnd:@-
@item insertAtEnd:@- aString
Clear the selection and append aString at the end of the
widget.


@meindex insertText:@-
@item insertText:@- aString
Insert aString in the widget at the current insertion point,
replacing the currently selected text (if any).


@meindex invokeCallback
@item invokeCallback
Generate a synthetic callback.


@meindex nextPut:@-
@item nextPut:@- aCharacter
Clear the selection and append aCharacter at the end of the
widget.


@meindex nextPutAll:@-
@item nextPutAll:@- aString
Clear the selection and append aString at the end of the
widget.


@meindex nl
@item nl
Clear the selection and append a linefeed character at the
end of the widget.


@meindex replaceSelection:@-
@item replaceSelection:@- aString
Insert aString in the widget at the current insertion point,
replacing the currently selected text (if any), and leaving
the text selected.


@meindex selectAll
@item selectAll
Select the whole contents of the widget.


@meindex selectFrom:@-to:@-
@item selectFrom:@- first to:@- last
Sets the selection to include the characters starting with the one
indexed by first (the very first character in the widget having
index 1) and ending with the one just before last.  If last
refers to the same character as first or an earlier one, then the
widget's selection is cleared.


@meindex selection
@item selection
Answer an empty string if the widget has no selection, else answer
the currently selected text


@meindex selectionRange
@item selectionRange
Answer nil if the widget has no selection, else answer
an Interval object whose first item is the index of the
first character in the selection, and whose last item is the
index of the character just after the last one in the
selection.


@meindex space
@item space
Clear the selection and append a space at the end of the
widget.


@end table

@node BLOX.BEmbeddedImage
@section BLOX.BEmbeddedImage
@clindex BLOX.BEmbeddedImage

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.BBoundingBox
@itemx Category: Graphics-Windows
I can draw a colorful image inside the canvas.
@end table

@menu
* BLOX.BEmbeddedImage-accessing::  (instance)
@end menu



@node BLOX.BEmbeddedImage-accessing
@subsection BLOX.BEmbeddedImage:@- accessing

@table @b
@meindex copyInto:@-
@item copyInto:@- aBlox
Answer a new BCanvasObject identical to this but displayed
into another canvas, newCanvas.  The new instance is not
created at the time it is returned.


@meindex data
@item data
Answer the data of the image.  The result will be a String containing
image data either as Base-64 encoded GIF data, as XPM data, or as PPM data.


@meindex data:@-
@item data:@- aString
Set the data of the image.  aString may contain the data either
as Base-64 encoded GIF data, as XPM data, or as PPM data.  No changes
are visible until you toggle a redraw using the appropriate method.


@meindex redraw
@item redraw
Force the object to be displayed in the parent canvas, creating
it if it has not been inserted for real in the parent, and refresh
its position and image data if it has changed.


@end table

@node BLOX.BEmbeddedText
@section BLOX.BEmbeddedText
@clindex BLOX.BEmbeddedText

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.BBoundingBox
@itemx Category: Graphics-Windows

I can draw text in all sorts of colors, sizes and fonts.
@end table

@menu
* BLOX.BEmbeddedText-accessing::  (instance)
@end menu



@node BLOX.BEmbeddedText-accessing
@subsection BLOX.BEmbeddedText:@- accessing

@table @b
@meindex font
@item font
Answer the value of the font option for the canvas object.

Specifies the font to use when drawing text inside the widget. The font
can be given as either an X font name or a Blox font description string.

X font names are given as many fields, each led by a minus, and each of
which can be replaced by an * to indicate a default value is ok:@-
foundry, family, weight, slant, setwidth, addstyle, pixel size, point size
(the same as pixel size for historical reasons), horizontal resolution,
vertical resolution, spacing, width, charset and character encoding.

Blox font description strings have three fields, which must be separated by
a space and of which only the first is mandatory:@- the font family, the font
size in points (or in pixels if a negative value is supplied), and a number
of styles separated by a space (valid styles are normal, bold, italic,
underline and overstrike). Examples of valid fonts are ``Helvetica 10 Bold'',
``Times -14'', ``Futura Bold Underline''.  You must enclose the font family
in braces if it is made of two or more words.


@meindex font:@-
@item font:@- font
Set the value of the font option for the canvas object.

Specifies the font to use when drawing text inside the widget. The font
can be given as either an X font name or a Blox font description string.

X font names are given as many fields, each led by a minus, and each of
which can be replaced by an * to indicate a default value is ok:@-
foundry, family, weight, slant, setwidth, addstyle, pixel size, point size
(the same as pixel size for historical reasons), horizontal resolution,
vertical resolution, spacing, width, charset and character encoding.

Blox font description strings have three fields, which must be separated by
a space and of which only the first is mandatory:@- the font family, the font
size in points (or in pixels if a negative value is supplied), and a number
of styles separated by a space (valid styles are normal, bold, italic,
underline and overstrike). Examples of valid fonts are ``Helvetica 10 Bold'',
``Times -14'', ``Futura Bold Underline''.  You must enclose the font family
in braces if it is made of two or more words.


@meindex justify
@item justify
Answer how to justify the text within its bounding region.


@meindex justify:@-
@slindex left
@slindex right
@slindex center
@item justify:@- aSymbol
Sets how to justify the text within its bounding region.  Can be
#left, #right or #center (the default).


@meindex redraw
@item redraw
Force the object to be displayed in the parent canvas, creating
it if it has not been inserted for real in the parent, and refresh
its position.


@meindex text
@item text
Answer the text that is printed by the object


@meindex text:@-
@item text:@- aString
Set the text that is printed by the object


@end table

@node BLOX.BEventSet
@section BLOX.BEventSet
@clindex BLOX.BEventSet

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.BEventTarget
@itemx Category: Graphics-Windows
I combine event handlers and let you apply them to many objects.
Basically, you derive a class from me, override the #initialize:@-
method to establish the handlers, then use the #addEventSet:@- method
understood by every Blox class to add the event handlers specified
by the receiver to the object.
@end table

@menu
* BLOX.BEventSet class-initializing::  (class)
* BLOX.BEventSet-accessing::  (instance)
* BLOX.BEventSet-initializing::  (instance)
@end menu



@node BLOX.BEventSet class-initializing
@subsection BLOX.BEventSet class:@- initializing

@table @b
@meindex new
@item new
This method should not be called for instances of this class.

@meindex new:@-
@slindex addEventSet:@-
@item new:@- widget
Private - Create a new event set object that will
attach to the given widget. Answer the object. Note:@- this
method should be called by #addEventSet:@-, not directly


@end table



@node BLOX.BEventSet-accessing
@subsection BLOX.BEventSet:@- accessing

@table @b
@meindex widget
@item widget
Answer the widget to which the receiver is attached.


@end table



@node BLOX.BEventSet-initializing
@subsection BLOX.BEventSet:@- initializing

@table @b
@meindex initialize:@-
@item initialize:@- aBWidget
Initialize the receiver's event handlers to attach to aBWidget.
You can override this of course, but don't forget to call the
superclass implementation first.


@end table

@node BLOX.BEventTarget
@section BLOX.BEventTarget
@clindex BLOX.BEventTarget

@table @b
@item Defined in namespace BLOX
@itemx Superclass: Object
@itemx Category: Graphics-Windows
I track all the event handling procedures that you apply to an object.
@end table

@menu
* BLOX.BEventTarget-intercepting events::  (instance)
@end menu



@node BLOX.BEventTarget-intercepting events
@subsection BLOX.BEventTarget:@- intercepting events

@table @b
@meindex addEventSet:@-
@item addEventSet:@- aBEventSetSublass
Add to the receiver the event handlers implemented by an instance of
aBEventSetSubclass. Answer the new instance of aBEventSetSublass.


@meindex onAsciiKeyEventSend:@-to:@-
@item onAsciiKeyEventSend:@- aSelector to:@- anObject
When an ASCII key is pressed and the receiver has the focus, send
the 1-argument message identified by aSelector to anObject,
passing to it a Character.


@meindex onDestroySend:@-to:@-
@item onDestroySend:@- aSelector to:@- anObject
When the receiver is destroyed, send the unary message identified
by aSelector to anObject.


@meindex onFocusEnterEventSend:@-to:@-
@item onFocusEnterEventSend:@- aSelector to:@- anObject
When the focus enters the receiver, send the unary message identified
by aSelector to anObject.


@meindex onFocusLeaveEventSend:@-to:@-
@item onFocusLeaveEventSend:@- aSelector to:@- anObject
When the focus leaves the receiver, send the unary message identified
by aSelector to anObject.


@meindex onKeyEvent:@-send:@-to:@-
@item onKeyEvent:@- key send:@- aSelector to:@- anObject
When the given key is pressed and the receiver has the focus,
send the unary message identified by aSelector to anObject.
Examples for key are:@-  'Ctrl-1', 'Alt-X', 'Meta-plus', 'enter'.
The last two cases include example of special key identifiers;
these include:@- 'backslash', 'exclam', 'quotedbl', 'dollar',
'asterisk', 'less', 'greater', 'asciicircum' (caret), 'question',
'equal', 'parenleft', 'parenright', 'colon', 'semicolon', 'bar' (pipe
sign), 'underscore', 'percent', 'minus', 'plus', 'BackSpace', 'Delete',
'Insert', 'Return', 'End', 'Home', 'Prior' (Pgup), 'Next' (Pgdn),
'F1'..'F24', 'Caps_Lock', 'Num_Lock', 'Tab', 'Left', 'Right', 'Up',
'Down'.  There are in addition four special identifiers which map
to platform-specific keys:@- '<Cut>', '<Copy>', '<Paste>', '<Clear>'
(all with the angular brackets!).


@meindex onKeyEventSend:@-to:@-
@slindex onKeyEvent:@-send:@-to:@-
@slindex eventTest
@item onKeyEventSend:@- aSelector to:@- anObject
When a key is pressed and the receiver has the focus, send the
1-argument message identified by aSelector to anObject. The pressed
key will be passed as a String parameter; some of the keys will
send special key identifiers such as those explained in the
documentation for #onKeyEvent:@-send:@-to:@- Look at the #eventTest
test program in the BloxTestSuite to find out the parameters
passed to such an event procedure


@meindex onKeyUpEventSend:@-to:@-
@slindex onKeyEvent:@-send:@-to:@-
@slindex eventTest
@item onKeyUpEventSend:@- aSelector to:@- anObject
When a key has been released and the receiver has the focus, send
the 1-argument message identified by aSelector to anObject. The
released key will be passed as a String parameter; some of the keys
will send special key identifiers such as those explained in the
documentation for #onKeyEvent:@-send:@-to:@- Look at the #eventTest
test program in the BloxTestSuite to find out the parameters
passed to such an event procedure


@meindex onMouseDoubleEvent:@-send:@-to:@-
@item onMouseDoubleEvent:@- button send:@- aSelector to:@- anObject
When the given button is double-clicked on the mouse, send the
1-argument message identified by aSelector to anObject. The
mouse position will be passed as a Point.


@meindex onMouseDoubleEventSend:@-to:@-
@item onMouseDoubleEventSend:@- aSelector to:@- anObject
When a button is double-clicked on the mouse, send the 2-argument
message identified by aSelector to anObject. The mouse
position will be passed as a Point in the first parameter,
the button number will be passed as an Integer in the second
parameter.


@meindex onMouseDownEvent:@-send:@-to:@-
@item onMouseDownEvent:@- button send:@- aSelector to:@- anObject
When the given button is pressed on the mouse, send the
1-argument message identified by aSelector to anObject. The
mouse position will be passed as a Point.


@meindex onMouseDownEventSend:@-to:@-
@item onMouseDownEventSend:@- aSelector to:@- anObject
When a button is pressed on the mouse, send the 2-argument
message identified by aSelector to anObject. The mouse
position will be passed as a Point in the first parameter,
the button number will be passed as an Integer in the second
parameter.


@meindex onMouseEnterEventSend:@-to:@-
@item onMouseEnterEventSend:@- aSelector to:@- anObject
When the mouse enters the widget, send the unary message
identified by aSelector to anObject.


@meindex onMouseLeaveEventSend:@-to:@-
@item onMouseLeaveEventSend:@- aSelector to:@- anObject
When the mouse leaves the widget, send the unary message
identified by aSelector to anObject.


@meindex onMouseMoveEvent:@-send:@-to:@-
@item onMouseMoveEvent:@- button send:@- aSelector to:@- anObject
When the mouse is moved while the given button is pressed
on the mouse, send the 1-argument message identified by aSelector
to anObject. The mouse position will be passed as a Point.


@meindex onMouseMoveEventSend:@-to:@-
@item onMouseMoveEventSend:@- aSelector to:@- anObject
When the mouse is moved, send the 1-argument message identified
by aSelector to anObject. The mouse position will be passed as a Point.


@meindex onMouseTripleEvent:@-send:@-to:@-
@item onMouseTripleEvent:@- button send:@- aSelector to:@- anObject
When the given button is triple-clicked on the mouse, send the
1-argument message identified by aSelector to anObject. The
mouse position will be passed as a Point.


@meindex onMouseTripleEventSend:@-to:@-
@item onMouseTripleEventSend:@- aSelector to:@- anObject
When a button is triple-clicked on the mouse, send the 2-argument
message identified by aSelector to anObject. The mouse
position will be passed as a Point in the first parameter,
the button number will be passed as an Integer in the second
parameter.


@meindex onMouseUpEvent:@-send:@-to:@-
@item onMouseUpEvent:@- button send:@- aSelector to:@- anObject
When the given button is released on the mouse, send the
1-argument message identified by aSelector to anObject. The
mouse position will be passed as a Point.


@meindex onMouseUpEventSend:@-to:@-
@item onMouseUpEventSend:@- aSelector to:@- anObject
When a button is released on the mouse, send the 2-argument
message identified by aSelector to anObject. The mouse
position will be passed as a Point in the first parameter,
the button number will be passed as an Integer in the second
parameter.


@meindex onResizeSend:@-to:@-
@item onResizeSend:@- aSelector to:@- anObject
When the receiver is resized, send the 1-argument message
identified by aSelector to anObject. The new size will be
passed as a Point.


@end table

@node BLOX.BExtended
@section BLOX.BExtended
@clindex BLOX.BExtended

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.BWidget
@itemx Category: Graphics-Windows
Just like Gui, I serve as a base for complex objects which expose
an individual protocol but internally use a Blox widget for
creating their user interface. Unlike Gui, however, the
instances of my subclasses understand the standard widget protocol.
Just override my newPrimitive method to return another widget,
and you'll get a class which interacts with the user like that
widget (a list box, a text box, or even a label) but exposes a
different protocol.
@end table

@menu
* BLOX.BExtended-accessing::  (instance)
* BLOX.BExtended-customization::  (instance)
@end menu



@node BLOX.BExtended-accessing
@subsection BLOX.BExtended:@- accessing

@table @b
@meindex asPrimitiveWidget
@item asPrimitiveWidget
Answer the primitive widget that implements the receiver.


@end table



@node BLOX.BExtended-customization
@subsection BLOX.BExtended:@- customization

@table @b
@meindex create
@slindex newPrimitive
@slindex create
@slindex newPrimitive
@item create
After this method is called (the call is made automatically)
the receiver will be attached to a `primitive' widget (which
can be in turn another extended widget).
This method is public not because you can call it, but because
it can be useful to override it, not forgetting the call to
super (which only calls #newPrimitive and saves the result),
to perform some initialization on the primitive widget
just created; overriding #create is in fact more generic than
overriding #newPrimitive. For an example of this, see the
implementation of BButtonLike.


@meindex newPrimitive
@item newPrimitive
Create and answer a new widget on which the implementation of the
receiver will be based. You should not call this method directly;
instead you must override it in BExtended's subclasses.


@end table

@node BLOX.BForm
@section BLOX.BForm
@clindex BLOX.BForm

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.BPrimitive
@itemx Category: Graphics-Windows
I am used to group many widgets together. I leave the heavy
task of managing their position to the user.
@end table

@menu
* BLOX.BForm-accessing::  (instance)
@end menu



@node BLOX.BForm-accessing
@subsection BLOX.BForm:@- accessing

@table @b
@meindex backgroundColor
@item backgroundColor
Answer the value of the backgroundColor option for the widget.

Specifies the normal background color to use when displaying the widget.


@meindex backgroundColor:@-
@item backgroundColor:@- value
Set the value of the backgroundColor option for the widget.

Specifies the normal background color to use when displaying the widget.


@meindex defaultHeight
@item defaultHeight
Answer the value of the defaultHeight option for the widget.

Specifies the desired height for the form in pixels. If this option
is less than or equal to zero then the window will not request any size at all.


@meindex defaultHeight:@-
@item defaultHeight:@- value
Set the value of the defaultHeight option for the widget.

Specifies the desired height for the form in pixels. If this option
is less than or equal to zero then the window will not request any size at all.


@meindex defaultWidth
@item defaultWidth
Answer the value of the defaultWidth option for the widget.

Specifies the desired width for the form in pixels. If this option
is less than or equal to zero then the window will not request any size at all.


@meindex defaultWidth:@-
@item defaultWidth:@- value
Set the value of the defaultWidth option for the widget.

Specifies the desired width for the form in pixels. If this option
is less than or equal to zero then the window will not request any size at all.


@end table

@node BLOX.BImage
@section BLOX.BImage
@clindex BLOX.BImage

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.BPrimitive
@itemx Category: Graphics-Windows
I can display colorful images.
@end table

@menu
* BLOX.BImage class-arrows::  (class)
* BLOX.BImage class-GNU::  (class)
* BLOX.BImage class-icons::  (class)
* BLOX.BImage class-instance creation::  (class)
* BLOX.BImage class-small icons::  (class)
* BLOX.BImage-accessing::  (instance)
* BLOX.BImage-image management::  (instance)
* BLOX.BImage-widget protocol::  (instance)
@end menu



@node BLOX.BImage class-arrows
@subsection BLOX.BImage class:@- arrows

@table @b
@meindex downArrow
@item downArrow
Answer the XPM representation of a 12x12 arrow pointing downwards.


@meindex leftArrow
@item leftArrow
Answer the XPM representation of a 12x12 arrow pointing leftwards.


@meindex rightArrow
@item rightArrow
Answer the XPM representation of a 12x12 arrow pointing rightwards.


@meindex upArrow
@item upArrow
Answer the XPM representation of a 12x12 arrow pointing upwards.


@end table



@node BLOX.BImage class-GNU
@subsection BLOX.BImage class:@- GNU

@table @b
@meindex gnu
@item gnu
Answer the XPM representation of a 48x48 GNU.


@end table



@node BLOX.BImage class-icons
@subsection BLOX.BImage class:@- icons

@table @b
@meindex exclaim
@item exclaim
Answer the XPM representation of a 32x32 exclamation mark icon.


@meindex info
@item info
Answer the XPM representation of a 32x32 `information' icon.


@meindex question
@item question
Answer the XPM representation of a 32x32 question mark icon.


@meindex stop
@item stop
Answer the XPM representation of a 32x32 `critical stop' icon.


@end table



@node BLOX.BImage class-instance creation
@subsection BLOX.BImage class:@- instance creation

@table @b
@meindex new:@-data:@-
@item new:@- parent data:@- aString
Answer a new BImage widget laid inside the given parent widget,
loading data from the given string (Base-64 encoded GIF, XPM,
PPM are supported).


@meindex new:@-image:@-
@item new:@- parent image:@- aFileStream
Answer a new BImage widget laid inside the given parent widget,
loading data from the given file (GIF, XPM, PPM are supported).


@meindex new:@-size:@-
@item new:@- parent size:@- aPoint
Answer a new BImage widget laid inside the given parent widget,
showing by default a transparent image of aPoint size.


@end table



@node BLOX.BImage class-small icons
@subsection BLOX.BImage class:@- small icons

@table @b
@meindex directory
@item directory
Answer the Base-64 GIF representation of a `directory folder' icon.


@meindex file
@item file
Answer the Base-64 GIF representation of a `file' icon.


@end table



@node BLOX.BImage-accessing
@subsection BLOX.BImage:@- accessing

@table @b
@meindex backgroundColor
@item backgroundColor
Answer the value of the backgroundColor option for the widget.

Specifies the normal background color to use when displaying the widget.


@meindex backgroundColor:@-
@item backgroundColor:@- value
Set the value of the backgroundColor option for the widget.

Specifies the normal background color to use when displaying the widget.


@meindex displayHeight
@item displayHeight
Answer the value of the displayHeight option for the widget.

Specifies the height of the image in pixels. This is not the height of the
widget, but specifies the area of the widget that will be taken by the image.


@meindex displayHeight:@-
@item displayHeight:@- value
Set the value of the displayHeight option for the widget.

Specifies the height of the image in pixels. This is not the height of the
widget, but specifies the area of the widget that will be taken by the image.


@meindex displayWidth
@item displayWidth
Answer the value of the displayWidth option for the widget.

Specifies the width of the image in pixels. This is not the width of the
widget, but specifies the area of the widget that will be taken by the image.


@meindex displayWidth:@-
@item displayWidth:@- value
Set the value of the displayWidth option for the widget.

Specifies the width of the image in pixels. This is not the width of the
widget, but specifies the area of the widget that will be taken by the image.


@meindex foregroundColor
@item foregroundColor
Answer the value of the foregroundColor option for the widget.

Specifies the normal foreground color to use when displaying the widget.


@meindex foregroundColor:@-
@item foregroundColor:@- value
Set the value of the foregroundColor option for the widget.

Specifies the normal foreground color to use when displaying the widget.


@meindex gamma
@item gamma
Answer the value of the gamma option for the widget.

Specifies that the colors allocated for displaying the image widget
should be corrected for a non-linear display with the specified gamma exponent
value. (The intensity produced by most CRT displays is a power function
of the input value, to a good approximation; gamma is the exponent and
is typically around 2). The value specified must be greater than zero. The
default value is one (no correction). In general, values greater than one
will make the image lighter, and values less than one will make it darker.


@meindex gamma:@-
@item gamma:@- value
Set the value of the gamma option for the widget.

Specifies that the colors allocated for displaying the image widget
should be corrected for a non-linear display with the specified gamma exponent
value. (The intensity produced by most CRT displays is a power function
of the input value, to a good approximation; gamma is the exponent and
is typically around 2). The value specified must be greater than zero. The
default value is one (no correction). In general, values greater than one
will make the image lighter, and values less than one will make it darker.


@end table



@node BLOX.BImage-image management
@subsection BLOX.BImage:@- image management

@table @b
@meindex blank
@item blank
Blank the corresponding image


@meindex data:@-
@item data:@- aString
Set the image to be drawn to aString, which can be a GIF
in Base-64 representation or an X pixelmap.


@meindex dither
@item dither
Recalculate the dithered image in the window where the
image is displayed.  The dithering algorithm used in
displaying images propagates quantization errors from
one pixel to its neighbors.  If the image data is supplied
in pieces, the dithered image may not be exactly correct.
Normally the difference is not noticeable, but if it is a
problem, this command can be used to fix it.


@meindex fillFrom:@-extent:@-color:@-
@item fillFrom:@- origin extent:@- extent color:@- color
Fill a rectangle with the given origin and extent, using
the given color.


@meindex fillFrom:@-to:@-color:@-
@item fillFrom:@- origin to:@- corner color:@- color
Fill a rectangle between the given corners, using
the given color.


@meindex fillRectangle:@-color:@-
@item fillRectangle:@- rectangle color:@- color
Fill a rectangle having the given bounding box, using
the given color.


@meindex image:@-
@item image:@- aFileStream
Read a GIF or XPM image from aFileStream.  The whole contents
of the file are read, not only from the file position.


@meindex imageHeight
@item imageHeight
Specifies the height of the image, in pixels.  This option is useful
primarily in situations where you wish to build up the contents of
the image piece by piece.  A value of zero (the default) allows the
image to expand or shrink vertically to fit the data stored in it.


@meindex imageWidth
@item imageWidth
Specifies the width of the image, in pixels.  This option is useful
primarily in situations where you wish to build up the contents of
the image piece by piece.  A value of zero (the default) allows the
image to expand or shrink horizontally to fit the data stored in it.


@meindex lineFrom:@-extent:@-color:@-
@item lineFrom:@- origin extent:@- extent color:@- color
Draw a line with the given origin and extent, using
the given color.


@meindex lineFrom:@-to:@-color:@-
@item lineFrom:@- origin to:@- corner color:@- color
This method's functionality has not been implemented yet.

@meindex lineFrom:@-toX:@-color:@-
@item lineFrom:@- origin toX:@- endX color:@- color
Draw an horizontal line between the given corners, using
the given color.


@meindex lineFrom:@-toY:@-color:@-
@item lineFrom:@- origin toY:@- endY color:@- color
Draw a vertical line between the given corners, using
the given color.


@meindex lineInside:@-color:@-
@item lineInside:@- rectangle color:@- color
Draw a line having the given bounding box, using
the given color.


@end table



@node BLOX.BImage-widget protocol
@subsection BLOX.BImage:@- widget protocol

@table @b
@meindex destroyed
@item destroyed
Private - The receiver has been destroyed, clear the corresponding
Tcl image to avoid memory leaks.


@end table

@node BLOX.BLabel
@section BLOX.BLabel
@clindex BLOX.BLabel

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.BPrimitive
@itemx Category: Graphics-Windows
I am a label showing static text.
@end table

@menu
* BLOX.BLabel class-initialization::  (class)
* BLOX.BLabel class-instance creation::  (class)
* BLOX.BLabel-accessing::  (instance)
@end menu



@node BLOX.BLabel class-initialization
@subsection BLOX.BLabel class:@- initialization

@table @b
@meindex initialize
@item initialize
Private - Initialize the receiver's class variables.


@end table



@node BLOX.BLabel class-instance creation
@subsection BLOX.BLabel class:@- instance creation

@table @b
@meindex new:@-label:@-
@item new:@- parent label:@- label
Answer a new BLabel widget laid inside the given parent widget,
showing by default the `label' String.


@end table



@node BLOX.BLabel-accessing
@subsection BLOX.BLabel:@- accessing

@table @b
@meindex alignment
@slindex topLeft
@slindex topCenter
@slindex topRight
@slindex leftCenter
@slindex center
@slindex rightCenter
@slindex bottomLeft
@slindex bottomCenter
@slindex bottomRight
@slindex topLeft
@item alignment
Answer the value of the anchor option for the widget.

Specifies how the information in a widget (e.g. text or a bitmap) is to be
displayed in the widget. Must be one of the symbols #topLeft, #topCenter,
#topRight, #leftCenter, #center, #rightCenter, #bottomLeft, #bottomCenter,
#bottomRight. For example, #topLeft means display the information such that
its top-left corner is at the top-left corner of the widget.


@meindex alignment:@-
@slindex topLeft
@slindex topCenter
@slindex topRight
@slindex leftCenter
@slindex center
@slindex rightCenter
@slindex bottomLeft
@slindex bottomCenter
@slindex bottomRight
@slindex topLeft
@item alignment:@- aSymbol
Set the value of the anchor option for the widget.

Specifies how the information in a widget (e.g. text or a bitmap) is to be
displayed in the widget. Must be one of the symbols #topLeft, #topCenter,
#topRight, #leftCenter, #center, #rightCenter, #bottomLeft, #bottomCenter,
#bottomRight. For example, #topLeft means display the information such that
its top-left corner is at the top-left corner of the widget.


@meindex backgroundColor
@item backgroundColor
Answer the value of the backgroundColor option for the widget.

Specifies the normal background color to use when displaying the widget.


@meindex backgroundColor:@-
@item backgroundColor:@- value
Set the value of the backgroundColor option for the widget.

Specifies the normal background color to use when displaying the widget.


@meindex font
@item font
Answer the value of the font option for the widget.

Specifies the font to use when drawing text inside the widget. The font
can be given as either an X font name or a Blox font description string.

X font names are given as many fields, each led by a minus, and each of
which can be replaced by an * to indicate a default value is ok:@-
foundry, family, weight, slant, setwidth, addstyle, pixel size, point size
(the same as pixel size for historical reasons), horizontal resolution,
vertical resolution, spacing, width, charset and character encoding.

Blox font description strings have three fields, which must be separated by
a space and of which only the first is mandatory:@- the font family, the font
size in points (or in pixels if a negative value is supplied), and a number
of styles separated by a space (valid styles are normal, bold, italic,
underline and overstrike). Examples of valid fonts are ``Helvetica 10 Bold'',
``Times -14'', ``Futura Bold Underline''.  You must enclose the font family
in braces if it is made of two or more words.


@meindex font:@-
@item font:@- value
Set the value of the font option for the widget.

Specifies the font to use when drawing text inside the widget. The font
can be given as either an X font name or a Blox font description string.

X font names are given as many fields, each led by a minus, and each of
which can be replaced by an * to indicate a default value is ok:@-
foundry, family, weight, slant, setwidth, addstyle, pixel size, point size
(the same as pixel size for historical reasons), horizontal resolution,
vertical resolution, spacing, width, charset and character encoding.

Blox font description strings have three fields, which must be separated by
a space and of which only the first is mandatory:@- the font family, the font
size in points (or in pixels if a negative value is supplied), and a number
of styles separated by a space (valid styles are normal, bold, italic,
underline and overstrike). Examples of valid fonts are ``Helvetica 10 Bold'',
``Times -14'', ``Futura Bold Underline''.  You must enclose the font family
in braces if it is made of two or more words.


@meindex foregroundColor
@item foregroundColor
Answer the value of the foregroundColor option for the widget.

Specifies the normal foreground color to use when displaying the widget.


@meindex foregroundColor:@-
@item foregroundColor:@- value
Set the value of the foregroundColor option for the widget.

Specifies the normal foreground color to use when displaying the widget.


@meindex label
@item label
Answer the value of the label option for the widget.

Specifies a string to be displayed inside the widget. The way in which the
string is displayed depends on the particular widget and may be determined
by other options, such as anchor. For windows, this is the title of the window.


@meindex label:@-
@item label:@- value
Set the value of the label option for the widget.

Specifies a string to be displayed inside the widget. The way in which the
string is displayed depends on the particular widget and may be determined
by other options, such as anchor. For windows, this is the title of the window.


@end table

@node BLOX.BLine
@section BLOX.BLine
@clindex BLOX.BLine

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.BBoundingBox
@itemx Category: Graphics-Windows
I only draw straight lines but I can do that very well, even without
a ruler...
@end table

@menu
* BLOX.BLine-accessing::  (instance)
@end menu



@node BLOX.BLine-accessing
@subsection BLOX.BLine:@- accessing

@table @b
@meindex cap
@slindex butt
@slindex projecting
@slindex round
@item cap
Answer the way in which caps are to be drawn at the endpoints
of the line.  The answer may be #butt (the default), #projecting, or
#round).


@meindex cap:@-
@slindex butt
@slindex projecting
@slindex round
@item cap:@- aSymbol
Set the way in which caps are to be drawn at the endpoints
of the line.  aSymbol may be #butt (the default), #projecting, or
#round).


@meindex width
@item width
Answer the width with which the line is drawn.


@meindex width:@-
@item width:@- pixels
Set the width with which the line is drawn.


@end table

@node BLOX.BList
@section BLOX.BList
@clindex BLOX.BList

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.BViewport
@itemx Category: Graphics-Windows
I represent a list box from which you can choose one or more
elements.
@end table

@menu
* BLOX.BList-accessing::  (instance)
* BLOX.BList-widget protocol::  (instance)
@end menu



@node BLOX.BList-accessing
@subsection BLOX.BList:@- accessing

@table @b
@meindex add:@-afterIndex:@-
@item add:@- anObject afterIndex:@- index
Add an element with the given value after another element whose
index is contained in the index parameter.  The label displayed
in the widget is anObject's displayString.  Answer anObject.


@meindex add:@-element:@-afterIndex:@-
@item add:@- aString element:@- anObject afterIndex:@- index
Add an element with the aString label after another element whose
index is contained in the index parameter.  This method allows
the client to decide autonomously the label that the widget will
display.

If anObject is nil, then string is used as the element as well.
If aString is nil, then the element's displayString is used as
the label.

Answer anObject or, if it is nil, aString.


@meindex addLast:@-
@item addLast:@- anObject
Add an element with the given value at the end of the listbox.
The label displayed in the widget is anObject's displayString.
Answer anObject.


@meindex addLast:@-element:@-
@item addLast:@- aString element:@- anObject
Add an element with the given value at the end of the listbox.
This method allows the client to decide autonomously the label
that the widget will display.

If anObject is nil, then string is used as the element as well.
If aString is nil, then the element's displayString is used as
the label.

Answer anObject or, if it is nil, aString.


@meindex associationAt:@-
@item associationAt:@- anIndex
Answer an association whose key is the item at the given position
in the listbox and whose value is the label used to display that
item.


@meindex at:@-
@item at:@- anIndex
Answer the element displayed at the given position in the list
box.


@meindex backgroundColor
@item backgroundColor
Answer the value of the backgroundColor option for the widget.

Specifies the normal background color to use when displaying the widget.


@meindex backgroundColor:@-
@item backgroundColor:@- value
Set the value of the backgroundColor option for the widget.

Specifies the normal background color to use when displaying the widget.


@meindex contents:@-
@item contents:@- elementList
Set the elements displayed in the listbox, and set the labels
to be their displayStrings.


@meindex contents:@-elements:@-
@item contents:@- stringCollection elements:@- elementList
Set the elements displayed in the listbox to be those in elementList,
and set the labels to be the corresponding elements in stringCollection.
The two collections must have the same size.


@meindex do:@-
@item do:@- aBlock
Iterate over each element of the listbox and pass it to aBlock.


@meindex elements
@item elements
Answer the collection of objects that represent the elements
displayed by the list box.


@meindex elements:@-
@item elements:@- elementList
Set the elements displayed in the listbox, and set the labels
to be their displayStrings.


@meindex font
@item font
Answer the value of the font option for the widget.

Specifies the font to use when drawing text inside the widget. The font
can be given as either an X font name or a Blox font description string.

X font names are given as many fields, each led by a minus, and each of
which can be replaced by an * to indicate a default value is ok:@-
foundry, family, weight, slant, setwidth, addstyle, pixel size, point size
(the same as pixel size for historical reasons), horizontal resolution,
vertical resolution, spacing, width, charset and character encoding.

Blox font description strings have three fields, which must be separated by
a space and of which only the first is mandatory:@- the font family, the font
size in points (or in pixels if a negative value is supplied), and a number
of styles separated by a space (valid styles are normal, bold, italic,
underline and overstrike). Examples of valid fonts are ``Helvetica 10 Bold'',
``Times -14'', ``Futura Bold Underline''.  You must enclose the font family
in braces if it is made of two or more words.


@meindex font:@-
@item font:@- value
Set the value of the font option for the widget.

Specifies the font to use when drawing text inside the widget. The font
can be given as either an X font name or a Blox font description string.

X font names are given as many fields, each led by a minus, and each of
which can be replaced by an * to indicate a default value is ok:@-
foundry, family, weight, slant, setwidth, addstyle, pixel size, point size
(the same as pixel size for historical reasons), horizontal resolution,
vertical resolution, spacing, width, charset and character encoding.

Blox font description strings have three fields, which must be separated by
a space and of which only the first is mandatory:@- the font family, the font
size in points (or in pixels if a negative value is supplied), and a number
of styles separated by a space (valid styles are normal, bold, italic,
underline and overstrike). Examples of valid fonts are ``Helvetica 10 Bold'',
``Times -14'', ``Futura Bold Underline''.  You must enclose the font family
in braces if it is made of two or more words.


@meindex foregroundColor
@item foregroundColor
Answer the value of the foregroundColor option for the widget.

Specifies the normal foreground color to use when displaying the widget.


@meindex foregroundColor:@-
@item foregroundColor:@- value
Set the value of the foregroundColor option for the widget.

Specifies the normal foreground color to use when displaying the widget.


@meindex highlightBackground
@item highlightBackground
Answer the value of the highlightBackground option for the widget.

Specifies the background color to use when displaying selected items
in the widget.


@meindex highlightBackground:@-
@item highlightBackground:@- value
Set the value of the highlightBackground option for the widget.

Specifies the background color to use when displaying selected items
in the widget.


@meindex highlightForeground
@item highlightForeground
Answer the value of the highlightForeground option for the widget.

Specifies the foreground color to use when displaying selected items
in the widget.


@meindex highlightForeground:@-
@item highlightForeground:@- value
Set the value of the highlightForeground option for the widget.

Specifies the foreground color to use when displaying selected items
in the widget.


@meindex index
@item index
Answer the value of the index option for the widget.

Indicates the element that has the location cursor. This item will be
displayed in the highlightForeground color, and with the corresponding
background color.


@meindex indexAt:@-
@item indexAt:@- point
Answer the index of the element that covers the point in the
listbox window specified by x and y (in pixel coordinates).  If no
element covers that point, then the closest element to that point
is used.


@meindex isSelected:@-
@item isSelected:@- index
Answer whether the element indicated by index is currently selected.


@meindex label
@item label
Return nil, it is here for Gtk+ support


@meindex label:@-
@item label:@- aString
Do nothing, it is here for Gtk+ support


@meindex labelAt:@-
@item labelAt:@- anIndex
Answer the label displayed at the given position in the list
box.


@meindex labels
@item labels
Answer the labels displayed by the list box.


@meindex labelsDo:@-
@item labelsDo:@- aBlock
Iterate over each listbox element's label and pass it to aBlock.


@meindex mode
@item mode
Answer the value of the mode option for the widget.

Specifies one of several styles for manipulating the selection. The value
of the option may be either single, browse, multiple, or extended.

If the selection mode is single or browse, at most one element can be selected in
the listbox at once. Clicking button 1 on an unselected element selects it and
deselects any other selected item, while clicking on a selected element
has no effect. In browse mode it is also possible to drag the selection
with button 1. That is, moving the mouse while button 1 is pressed keeps
the item under the cursor selected.

If the selection mode is multiple or extended, any number of elements may be
selected at once, including discontiguous ranges. In multiple mode, clicking button
1 on an element toggles its selection state without affecting any other elements.
In extended mode, pressing button 1 on an element selects it, deselects
everything else, and sets the anchor to the element under the mouse; dragging the
mouse with button 1 down extends the selection to include all the elements between
the anchor and the element under the mouse, inclusive.

In extended mode, the selected range can be adjusted by pressing button 1
with the Shift key down:@- this modifies the selection to consist of the elements
between the anchor and the element under the mouse, inclusive. The
un-anchored end of this new selection can also be dragged with the button
down. Also in extended mode, pressing button 1 with the Control key down starts a
toggle operation:@- the anchor is set to the element under the mouse, and its
selection state is reversed. The selection state of other elements is not
changed. If the mouse is dragged with button 1 down, then the selection
state of all elements between the anchor and the element under the mouse is
set to match that of the anchor element; the selection state of all other
elements remains what it was before the toggle operation began.

Most people will probably want to use browse mode for single selections and
extended mode for multiple selections; the other modes appear to be useful only in
special situations.


@meindex mode:@-
@item mode:@- value
Set the value of the mode option for the widget.

Specifies one of several styles for manipulating the selection. The value
of the option may be either single, browse, multiple, or extended.

If the selection mode is single or browse, at most one element can be selected in
the listbox at once. Clicking button 1 on an unselected element selects it and
deselects any other selected item, while clicking on a selected element
has no effect. In browse mode it is also possible to drag the selection
with button 1. That is, moving the mouse while button 1 is pressed keeps
the item under the cursor selected.

If the selection mode is multiple or extended, any number of elements may be
selected at once, including discontiguous ranges. In multiple mode, clicking button
1 on an element toggles its selection state without affecting any other elements.
In extended mode, pressing button 1 on an element selects it, deselects
everything else, and sets the anchor to the element under the mouse; dragging the
mouse with button 1 down extends the selection to include all the elements between
the anchor and the element under the mouse, inclusive.

In extended mode, the selected range can be adjusted by pressing button 1
with the Shift key down:@- this modifies the selection to consist of the elements
between the anchor and the element under the mouse, inclusive. The
un-anchored end of this new selection can also be dragged with the button
down. Also in extended mode, pressing button 1 with the Control key down starts a
toggle operation:@- the anchor is set to the element under the mouse, and its
selection state is reversed. The selection state of other elements is not
changed. If the mouse is dragged with button 1 down, then the selection
state of all elements between the anchor and the element under the mouse is
set to match that of the anchor element; the selection state of all other
elements remains what it was before the toggle operation began.

Most people will probably want to use browse mode for single selections and
extended mode for multiple selections; the other modes appear to be useful only in
special situations.


@meindex numberOfStrings
@item numberOfStrings
Answer the number of items in the list box


@meindex removeAtIndex:@-
@slindex at:@-
@item removeAtIndex:@- index
Remove the item at the given index in the list box, answering
the object associated to the element (i.e. the value that #at:@-
would have returned for the given index)


@meindex size
@item size
Answer the number of items in the list box


@end table



@node BLOX.BList-widget protocol
@subsection BLOX.BList:@- widget protocol

@table @b
@meindex callback
@item callback
Answer a DirectedMessage that is sent when the active item in
the receiver changes, or nil if none has been set up.


@meindex callback:@-message:@-
@item callback:@- aReceiver message:@- aSymbol
Set up so that aReceiver is sent the aSymbol message (the name of
a selector with at most two arguemtnts) when the active item in
the receiver changegs.  If the method accepts two arguments, the
receiver is  passed as the first parameter.  If the method accepts
one or two arguments, the selected index is passed as the last
parameter.


@meindex highlight:@-
@item highlight:@- index
Highlight the item at the given position in the listbox.


@meindex invokeCallback
@item invokeCallback
Generate a synthetic callback.


@meindex select:@-
@item select:@- index
Highlight the item at the given position in the listbox,
without unhighlighting other items.  This is meant for
multiple- or extended-mode listboxes, but can be used
with other selection mode in particular cases.


@meindex show:@-
@item show:@- index
Ensure that the item at the given position in the listbox is
visible.


@meindex unhighlight
@item unhighlight
Unhighlight all the items in the listbox.


@meindex unselect:@-
@item unselect:@- index
Unhighlight the item at the given position in the listbox,
without affecting the state of the other items.


@end table

@node BLOX.Blox
@section BLOX.Blox
@clindex BLOX.Blox

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.BEventTarget
@itemx Category: Graphics-Windows
I am the superclass for every visible user interface object (excluding
canvas items, which are pretty different). I provide common methods and
a simple Tcl interface for internal use. In addition, I expose class
methods that do many interesting event-handling things.

NOTE:@- some of the methods (notably geometry methods) may not be suitable for
all Blox subclasses and may be included only for backwards compatibility
towards 1.1.5 BLOX. You should use geometry methods only for subclasses of
BWidget.
@end table

@menu
* BLOX.Blox class-C call-outs::  (class)
* BLOX.Blox class-event dispatching::  (class)
* BLOX.Blox class-instance creation::  (class)
* BLOX.Blox class-utility::  (class)
* BLOX.Blox-accessing::  (instance)
* BLOX.Blox-basic::  (instance)
* BLOX.Blox-creating children::  (instance)
* BLOX.Blox-customization::  (instance)
* BLOX.Blox-widget protocol::  (instance)
@end menu



@node BLOX.Blox class-C call-outs
@subsection BLOX.Blox class:@- C call-outs

@table @b
@meindex evalIn:@-tcl:@-
@item evalIn:@- interp tcl:@- cmd
Not commented.

@meindex idle
@item idle
Not commented.

@meindex resultIn:@-
@item resultIn:@- interp
Not commented.

@meindex tclInit
@item tclInit
Not commented.

@end table



@node BLOX.Blox class-event dispatching
@subsection BLOX.Blox class:@- event dispatching

@table @b
@meindex dispatchEvents
@slindex terminateMainLoop
@slindex dispatchEvents
@item dispatchEvents
If this is the outermost dispatching loop that is started,
dispatch events until the number of calls to #terminateMainLoop
balances the number of calls to #dispatchEvents; return
instantly if this is not the outermost dispatching loop that
is started.


@meindex dispatchEvents:@-
@item dispatchEvents:@- mainWindow
Dispatch some events; return upon destruction of the `mainWindow'
widget (which can be any kind of BWidget, but will be typically a
BWindow).


@meindex terminateMainLoop
@slindex terminateMainLoop
@slindex dispatchEvents
@item terminateMainLoop
Terminate the event dispatching loop if this call to #terminateMainLoop
balances the number of calls to #dispatchEvents.


@meindex update:@-
@item update:@- aspect
Initialize the Tcl and Blox environments; executed automatically
on startup.


@end table



@node BLOX.Blox class-instance creation
@subsection BLOX.Blox class:@- instance creation

@table @b
@meindex new
@item new
This method should not be called for instances of this class.

@meindex new:@-
@item new:@- parent
Create a new widget of the type identified by the receiver, inside
the given parent widget. Answer the new widget


@end table



@node BLOX.Blox class-utility
@subsection BLOX.Blox class:@- utility

@table @b
@meindex active
@item active
Answer the currently active Blox, or nil if the focus does not
belong to a Smalltalk window.


@meindex at:@-
@item at:@- aPoint
Answer the Blox containing the given point on the screen, or
nil if no Blox contains the given point (either because
no Smalltalk window is there or because it is covered by
another window).


@meindex atMouse
@item atMouse
Answer the Blox under the mouse cursor's hot spot, or nil
if no Blox contains the given point (either because no
Smalltalk window is there or because it is covered by
another window).


@meindex beep
@item beep
Produce a bell


@meindex clearClipboard
@item clearClipboard
Clear the clipboard, answer its old contents.


@meindex clipboard
@item clipboard
Retrieve the text in the clipboard.


@meindex clipboard:@-
@item clipboard:@- aString
Set the contents of the clipboard to aString (or empty the clipboard
if aString is nil).


@meindex createColor:@-green:@-blue:@-
@item createColor:@- red green:@- green blue:@- blue
Answer a color that can be passed to methods such as `backgroundColor:@-'.
The color will have the given RGB components (range is 0~65535).


@meindex createColor:@-magenta:@-yellow:@-
@item createColor:@- cyan magenta:@- magenta yellow:@- yellow
Answer a color that can be passed to methods such as `backgroundColor:@-'.
The color will have the given CMY components (range is 0~65535).


@meindex createColor:@-magenta:@-yellow:@-black:@-
@item createColor:@- cyan magenta:@- magenta yellow:@- yellow black:@- black
Answer a color that can be passed to methods such as `backgroundColor:@-'.
The color will have the given CMYK components (range is 0~65535).


@meindex createColor:@-saturation:@-value:@-
@item createColor:@- hue saturation:@- sat value:@- value
Answer a color that can be passed to methods such as `backgroundColor:@-'.
The color will have the given HSV components (range is 0~65535).


@meindex defaultFont
@item defaultFont
Answer the default font used by Blox.


@meindex fonts
@item fonts
Answer the names of the font families in the system. Additionally,
`Times', `Courier' and `Helvetica' are always made available.


@meindex mousePointer
@item mousePointer
If the mouse pointer is on the same screen as the application's windows,
returns a Point containing the pointer's x and y coordinates measured
in pixels in the screen's root window (under X, if a virtual root window
is in use on the screen, the position is computed in the whole desktop,
not relative to the top-left corner of the currently shown portion).
If the mouse pointer isn't on the same screen as window then answer nil.


@meindex platform
@slindex unix
@slindex macintosh
@slindex windows
@item platform
Answer the platform on which Blox is running; it can be either
#unix, #macintosh or #windows.


@meindex screenOrigin
@item screenOrigin
Answer a Point indicating the coordinates of the upper left point of the
screen in the virtual root window on which the application's windows are
drawn (under Windows and the Macintosh, that's always 0 @@ 0)


@meindex screenResolution
@item screenResolution
Answer a Point containing the resolution in dots per inch of the screen,
in the x and y directions.


@meindex screenSize
@item screenSize
Answer a Point containing the size of the virtual root window on which the
application's windows are drawn (under Windows and the Macintosh, that's
the size of the screen)


@end table



@node BLOX.Blox-accessing
@subsection BLOX.Blox:@- accessing

@table @b
@meindex state
@item state
Answer the value of the state option for the widget.

Specifies one of three states for the button:@- normal, active, or disabled.
In normal state the button is displayed using the foreground and background
options. The active state is typically used when the pointer is over the
button. In active state the button is displayed using the activeForeground
and activeBackground options. Disabled state means that the button should
be insensitive:@- the application will refuse to activate the widget and
will ignore mouse button presses.


@meindex state:@-
@item state:@- value
Set the value of the state option for the widget.

Specifies one of three states for the button:@- normal, active, or disabled.
In normal state the button is displayed using the foreground and background
options. The active state is typically used when the pointer is over the
button. In active state the button is displayed using the activeForeground
and activeBackground options. Disabled state means that the button should
be insensitive:@- the application will refuse to activate the widget and
will ignore mouse button presses.


@end table



@node BLOX.Blox-basic
@subsection BLOX.Blox:@- basic

@table @b
@meindex deepCopy
@item deepCopy
It does not make sense to make a copy, because it would
make data inconsistent across different objects; so answer
the receiver


@meindex release
@item release
Destroy the receiver if it still exists, then perform the
usual task of removing the dependency links


@meindex shallowCopy
@item shallowCopy
It does not make sense to make a copy, because it would
make data inconsistent across different objects; so answer
the receiver


@end table



@node BLOX.Blox-creating children
@subsection BLOX.Blox:@- creating children

@table @b
@meindex make:@-
@slindex width:@-
@slindex height:@-
@slindex backgroundColor:@-
@item make:@- array
Create children of the receiver. Answer a Dictionary of the children.
Each element of array is an Array including:@- a string which becomes
the Dictionary's key, a binding like #@{Blox.BWindow@} identifying the
class name, an array with the parameters to be set (for example
#(@-#width:@- 50 #height:@- 30 #backgroundColor:@- 'blue')), and afterwards
the children of the widget, described as arrays with this same format.


@meindex make:@-on:@-
@slindex make:@-
@item make:@- array on:@- result
Private - Create children of the receiver, adding them to result;
answer result. array has the format described in the comment to #make:@-


@meindex makeChild:@-on:@-
@slindex make:@-
@item makeChild:@- each on:@- result
Private - Create a child of the receiver, adding them to result;
each is a single element of the array described in the comment to #make:@-


@end table



@node BLOX.Blox-customization
@subsection BLOX.Blox:@- customization

@table @b
@meindex addChild:@-
@slindex basicAddChild:@-
@item addChild:@- child
The widget identified by child has been added to the receiver.
This method is public not because you can call it, but because
it can be useful to override it, not forgetting the call to
either the superclass implementation or #basicAddChild:@-, to
perform some initialization on the children just added. Answer
the new child.


@meindex basicAddChild:@-
@slindex addChild:@-
@item basicAddChild:@- child
The widget identified by child has been added to the receiver.
Add it to the children collection and answer the new child.
This method is public because you can call it from #addChild:@-.


@end table



@node BLOX.Blox-widget protocol
@subsection BLOX.Blox:@- widget protocol

@table @b
@meindex asPrimitiveWidget
@item asPrimitiveWidget
Answer the primitive widget that implements the receiver.


@meindex childrenCount
@item childrenCount
Answer how many children the receiver has


@meindex childrenDo:@-
@item childrenDo:@- aBlock
Evaluate aBlock once for each of the receiver's child widgets, passing
the widget to aBlock as a parameter


@meindex destroy
@item destroy
Destroy the receiver


@meindex drawingArea
@item drawingArea
Answer a Rectangle identifying the receiver's drawing area.  The
rectangle's corners specify the upper-left and lower-right corners
of the client area.  Because coordinates are relative to the
upper-left corner of a window's drawing area, the coordinates of
the rectangle's corner are (0,0).


@meindex enabled
@slindex state
@item enabled
Answer whether the receiver is enabled to input. Although defined
here, this method is only used for widgets that define a
#state method


@meindex enabled:@-
@slindex state:@-
@item enabled:@- enabled
Set whether the receiver is enabled to input (enabled is a boolean).
Although defined here, this method is only used for widgets that
define a #state:@- method


@meindex exists
@item exists
Answer whether the receiver has been destroyed or not (answer false
in the former case, true in the latter).


@meindex fontHeight:@-
@slindex font
@item fontHeight:@- aString
Answer the height of aString in pixels, when displayed in the same
font as the receiver.  Although defined here, this method is only
used for widgets that define a #font method


@meindex fontWidth:@-
@slindex font
@item fontWidth:@- aString
Answer the width of aString in pixels, when displayed in the same
font as the receiver.  Although defined here, this method is only
used for widgets that define a #font method


@meindex isWindow
@item isWindow
Answer whether the receiver represents a window on the screen.


@meindex parent
@item parent
Answer the receiver's parent (or nil for a top-level window).


@meindex toplevel
@item toplevel
Answer the top-level object (typically a BWindow or BPopupWindow)
connected to the receiver.


@meindex window
@slindex toplevel
@item window
Answer the window in which the receiver stays. Note that while
#toplevel won't answer a BTransientWindow, this method will.


@meindex withChildrenDo:@-
@item withChildrenDo:@- aBlock
Evaluate aBlock passing the receiver, and then once for each of the
receiver's child widgets.


@end table

@node BLOX.BMenu
@section BLOX.BMenu
@clindex BLOX.BMenu

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.BMenuObject
@itemx Category: Graphics-Windows
I am a Menu that is part of a menu bar.
@end table

@menu
* BLOX.BMenu class-instance creation::  (class)
* BLOX.BMenu-accessing::  (instance)
* BLOX.BMenu-callback registration::  (instance)
@end menu



@node BLOX.BMenu class-instance creation
@subsection BLOX.BMenu class:@- instance creation

@table @b
@meindex new:@-label:@-
@item new:@- parent label:@- label
Add a new menu to the parent window's menu bar, with `label' as
its caption (for popup menus, parent is the widget over which the
menu pops up as the right button is pressed).


@end table



@node BLOX.BMenu-accessing
@subsection BLOX.BMenu:@- accessing

@table @b
@meindex label
@item label
Answer the value of the label option for the widget.

Specifies a string to be displayed inside the widget. The way in which the
string is displayed depends on the particular widget and may be determined
by other options, such as anchor. For windows, this is the title of the window.


@meindex label:@-
@item label:@- value
Set the value of the label option for the widget.

Specifies a string to be displayed inside the widget. The way in which the
string is displayed depends on the particular widget and may be determined
by other options, such as anchor. For windows, this is the title of the window.


@end table



@node BLOX.BMenu-callback registration
@subsection BLOX.BMenu:@- callback registration

@table @b
@meindex addLine
@item addLine
Add a separator item at the end of the menu


@meindex addMenuItemFor:@-notifying:@-
@item addMenuItemFor:@- anArray notifying:@- receiver
Add a menu item described by anArray at the end of the menu.
If anArray is empty, insert a separator line.  If anArray
has a single item, a menu item is created without a callback.
If anArray has two or three items, the second one is used as
the selector sent to receiver, and the third one (if present)
is passed to the selector.


@meindex callback:@-using:@-
@slindex addMenuItemFor:@-notifying:@-
@item callback:@- receiver using:@- selectorPairs
Add menu items described by anArray at the end of the menu.
Each element of selectorPairs must be in the format described
in BMenu>>@-#addMenuItemFor:@-notifying:@-.  All the callbacks will
be sent to receiver.


@meindex destroy
@item destroy
Destroy the menu widget; that is, simply remove ourselves from
the parent menu bar.


@meindex empty
@item empty
Empty the menu widget; that is, remove all the children


@end table

@node BLOX.BMenuBar
@section BLOX.BMenuBar
@clindex BLOX.BMenuBar

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.BMenuObject
@itemx Category: Graphics-Windows
I am the Menu Bar, the top widget in a full menu structure.
@end table

@menu
* BLOX.BMenuBar-accessing::  (instance)
@end menu



@node BLOX.BMenuBar-accessing
@subsection BLOX.BMenuBar:@- accessing

@table @b
@meindex add:@-
@item add:@- aMenu
Add aMenu to the menu bar


@meindex remove:@-
@item remove:@- aMenu
Remove aMenu from the menu bar


@end table

@node BLOX.BMenuItem
@section BLOX.BMenuItem
@clindex BLOX.BMenuItem

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.BMenuObject
@itemx Category: Graphics-Windows
I am the tiny and humble Menu Item, a single command choice in the
menu structure. But if it wasn't for me, nothing could be done...
eh eh eh!!
@end table

@menu
* BLOX.BMenuItem class-instance creation::  (class)
* BLOX.BMenuItem-accessing::  (instance)
@end menu



@node BLOX.BMenuItem class-instance creation
@subsection BLOX.BMenuItem class:@- instance creation

@table @b
@meindex new:@-
@item new:@- parent
Add a new separator item to the specified menu.


@meindex new:@-label:@-
@item new:@- parent label:@- label
Add a new menu item to the specified menu (parent) , with `label'
as its caption.


@end table



@node BLOX.BMenuItem-accessing
@subsection BLOX.BMenuItem:@- accessing

@table @b
@meindex label
@item label
Answer the value of the label option for the widget.

Specifies a string to be displayed inside the widget. The way in which the
string is displayed depends on the particular widget and may be determined
by other options, such as anchor. For windows, this is the title of the window.


@meindex label:@-
@item label:@- value
Set the value of the label option for the widget.

Specifies a string to be displayed inside the widget. The way in which the
string is displayed depends on the particular widget and may be determined
by other options, such as anchor. For windows, this is the title of the window.


@end table

@node BLOX.BMenuObject
@section BLOX.BMenuObject
@clindex BLOX.BMenuObject

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.Blox
@itemx Category: Graphics-Windows
I am an abstract superclass for widgets which make up a menu structure.
@end table

@menu
* BLOX.BMenuObject-accessing::  (instance)
* BLOX.BMenuObject-callback::  (instance)
@end menu



@node BLOX.BMenuObject-accessing
@subsection BLOX.BMenuObject:@- accessing

@table @b
@meindex activeBackground
@item activeBackground
Answer the value of the activeBackground option for the widget.

Specifies background color to use when drawing active elements. An element
(a widget or portion of a widget) is active if the mouse cursor is positioned
over the element and pressing a mouse button will cause some action
to occur. For some elements on Windows and Macintosh systems, the active
color will only be used while mouse button 1 is pressed over the element.


@meindex activeBackground:@-
@item activeBackground:@- value
Set the value of the activeBackground option for the widget.

Specifies background color to use when drawing active elements. An element
(a widget or portion of a widget) is active if the mouse cursor is positioned
over the element and pressing a mouse button will cause some action
to occur. For some elements on Windows and Macintosh systems, the active
color will only be used while mouse button 1 is pressed over the element.


@meindex activeForeground
@item activeForeground
Answer the value of the activeForeground option for the widget.

Specifies foreground color to use when drawing active elements. See above
for definition of active elements.


@meindex activeForeground:@-
@item activeForeground:@- value
Set the value of the activeForeground option for the widget.

Specifies foreground color to use when drawing active elements. See above
for definition of active elements.


@meindex asPrimitiveWidget
@item asPrimitiveWidget
Answer the primitive widget that implements the receiver.


@meindex backgroundColor
@item backgroundColor
Answer the value of the backgroundColor option for the widget.

Specifies the normal background color to use when displaying the widget.


@meindex backgroundColor:@-
@item backgroundColor:@- value
Set the value of the backgroundColor option for the widget.

Specifies the normal background color to use when displaying the widget.


@meindex foregroundColor
@item foregroundColor
Answer the value of the foregroundColor option for the widget.

Specifies the normal foreground color to use when displaying the widget.


@meindex foregroundColor:@-
@item foregroundColor:@- value
Set the value of the foregroundColor option for the widget.

Specifies the normal foreground color to use when displaying the widget.


@end table



@node BLOX.BMenuObject-callback
@subsection BLOX.BMenuObject:@- callback

@table @b
@meindex callback
@item callback
Answer a DirectedMessage that is sent when the receiver is modified,
or nil if none has been set up.


@meindex callback:@-message:@-
@item callback:@- aReceiver message:@- aSymbol
Set up so that aReceiver is sent the aSymbol message (the name of
a zero- or one-argument selector) when the receiver is clicked.
If the method accepts an argument, the receiver is passed.


@meindex callback:@-message:@-argument:@-
@item callback:@- aReceiver message:@- aSymbol argument:@- anObject
Set up so that aReceiver is sent the aSymbol message (the name of
a one- or two-argument selector) when the receiver is clicked.
If the method accepts two argument, the receiver is passed
together with anObject; if it accepts a single one, instead,
only anObject is passed.


@meindex invokeCallback
@item invokeCallback
Generate a synthetic callback


@end table

@node BLOX.BOval
@section BLOX.BOval
@clindex BLOX.BOval

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.BRectangle
@itemx Category: Graphics-Windows

I can draw ovals (ok, if you're a mathematic, they're really ellipses),
or even circles.
@end table

@menu
@end menu

@node BLOX.BPolyline
@section BLOX.BPolyline
@clindex BLOX.BPolyline

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.BCanvasObject
@itemx Category: Graphics-Windows

I can draw closed or open polylines, and even fill them!
@end table

@menu
* BLOX.BPolyline-accessing::  (instance)
@end menu



@node BLOX.BPolyline-accessing
@subsection BLOX.BPolyline:@- accessing

@table @b
@meindex boundingBox
@item boundingBox
Answer `boundingBox'.

@meindex cap
@item cap
Answer the way in which caps are to be drawn at the endpoints
of the line.

This option is only available for open polylines.  If you want to
set it for a closed polylines, draw an open one on top of it.


@meindex cap:@-
@slindex butt
@slindex projecting
@slindex round
@item cap:@- aSymbol
Set the way in which caps are to be drawn at the endpoints
of the line.  aSymbol may be #butt (the default), #projecting, or
#round).

This option is only available for open polylines.  If you want to
set it for a closed polylines, draw an open one on top of it.


@meindex closed
@item closed
Answer whether the polyline is an open or a closed one.


@meindex closed:@-
@item closed:@- aBoolean
Set whether the polyline is an open or a closed one.  This option
may be set only once.


@meindex join
@item join
Answer the way in which joints are to be drawn at the vertices of the
line.

This option is only available for open polylines.  If you want to
set it for a closed polylines, draw an open one on top of it.


@meindex join:@-
@slindex bevel
@slindex miter
@slindex round
@item join:@- aSymbol
Answer the way in which joints are to be drawn at the vertices of the
line.  aSymbol can be #bevel, #miter (the default) or #round.

This option is only available for open polylines.  If you want to
set it for a closed polylines, draw an open one on top of it.


@meindex outlineColor
@item outlineColor
Answer the color with which the outline of the polyline is drawn.
This option is only available for closed polylines.


@meindex outlineColor:@-
@item outlineColor:@- color
Set the color with which the outline of the polyline is drawn.
This option is only available for closed polylines.


@meindex points
@item points
Answer the points that are vertices of the polyline.


@meindex points:@-
@slindex create
@slindex redraw
@item points:@- arrayOfPointsOrArrays
Set the points that are vertices of the polyline.  Each of the items
of arrayOfPointsOrArrays can be a Point or a two-element Array.
Note that no changes take place until you invoke the #create (if
the object has not been inserted in the canvas yet) or the #redraw
method.


@meindex width
@item width
Answer the width with which the polyline (or its outline
if it is a closed one) is drawn.


@meindex width:@-
@item width:@- pixels
Set the width with which the polyline (or its outline
if it is a closed one) is drawn.


@end table

@node BLOX.BPopupMenu
@section BLOX.BPopupMenu
@clindex BLOX.BPopupMenu

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.BMenu
@itemx Category: Graphics-Windows
I am a class that provides the ability to show popup menus when the
right button (Button 3) is clicked on another window.
@end table

@menu
* BLOX.BPopupMenu-widget protocol::  (instance)
@end menu



@node BLOX.BPopupMenu-widget protocol
@subsection BLOX.BPopupMenu:@- widget protocol

@table @b
@meindex popup
@item popup
Generate a synthetic menu popup event


@end table

@node BLOX.BPopupWindow
@section BLOX.BPopupWindow
@clindex BLOX.BPopupWindow

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.BWindow
@itemx Category: Graphics-Windows
I am a pseudo-window that has no decorations and no ability to interact
with the user.  My main usage, as my name says, is to provide pop-up
functionality for other widgets.  Actually there should be no need to
directly use me - always rely on the #new and #popup:@- class methods.
@end table

@menu
* BLOX.BPopupWindow-geometry management::  (instance)
@end menu



@node BLOX.BPopupWindow-geometry management
@subsection BLOX.BPopupWindow:@- geometry management

@table @b
@meindex addChild:@-
@slindex basicAddChild:@-
@item addChild:@- w
Private - The widget identified by child has been added to the
receiver.  This method is public not because you can call it,
but because it can be useful to override it, not forgetting the
call to either the superclass implementation or #basicAddChild:@-,
to perform some initialization on the children just added. Answer
the new child.


@meindex child:@-height:@-
@item child:@- child height:@- value
Set the given child's height.  This is done by setting
its parent window's (that is, our) height.


@meindex child:@-heightOffset:@-
@item child:@- child heightOffset:@- value
This method should not be called for instances of this class.

@meindex child:@-width:@-
@item child:@- child width:@- value
Set the given child's width.  This is done by setting
its parent window's (that is, our) width.


@meindex child:@-widthOffset:@-
@item child:@- child widthOffset:@- value
This method should not be called for instances of this class.

@meindex child:@-x:@-
@item child:@- child x:@- value
Set the x coordinate of the given child's top-left corner.
This is done by setting its parent window's (that is, our) x.


@meindex child:@-xOffset:@-
@item child:@- child xOffset:@- value
This method should not be called for instances of this class.

@meindex child:@-y:@-
@item child:@- child y:@- value
Set the y coordinate of the given child's top-left corner.
This is done by setting its parent window's (that is, our) y.


@meindex child:@-yOffset:@-
@item child:@- child yOffset:@- value
This method should not be called for instances of this class.

@meindex heightChild:@-
@item heightChild:@- child
Answer the given child's height, which is the height that
was imposed on the popup window.


@meindex widthChild:@-
@item widthChild:@- child
Answer the given child's width in pixels, which is the width that
was imposed on the popup window.


@meindex xChild:@-
@item xChild:@- child
Answer the x coordinate of the given child's top-left corner,
which is desumed by the position of the popup window.


@meindex yChild:@-
@item yChild:@- child
Answer the y coordinate of the given child's top-left corner,
which is desumed by the position of the popup window.


@end table

@node BLOX.BPrimitive
@section BLOX.BPrimitive
@clindex BLOX.BPrimitive

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.BWidget
@itemx Category: Graphics-Windows

I am the superclass for every widget (except menus) directly
provided by the underlying GUI system.
@end table

@menu
* BLOX.BPrimitive-accessing::  (instance)
@end menu



@node BLOX.BPrimitive-accessing
@subsection BLOX.BPrimitive:@- accessing

@table @b
@meindex asPrimitiveWidget
@item asPrimitiveWidget
Answer the primitive widget that implements the receiver.


@end table

@node BLOX.BProgress
@section BLOX.BProgress
@clindex BLOX.BProgress

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.BExtended
@itemx Category: Graphics-Examples
I show how much of a task has been completed.
@end table

@menu
* BLOX.BProgress-accessing::  (instance)
@end menu



@node BLOX.BProgress-accessing
@subsection BLOX.BProgress:@- accessing

@table @b
@meindex backgroundColor
@item backgroundColor
Answer the background color of the widget.  This is used for
the background of the non-filled part, as well as for the
foreground of the filled part.


@meindex backgroundColor:@-
@item backgroundColor:@- aColor
Set the background color of the widget.  This is used for
the background of the non-filled part, as well as for the
foreground of the filled part.


@meindex filledColor
@item filledColor
Answer the background color of the widget's filled part.


@meindex filledColor:@-
@item filledColor:@- aColor
Set the background color of the widget's filled part.


@meindex foregroundColor
@item foregroundColor
Set the foreground color of the widget.  This is used for
the non-filled part, while the background color also works
as the foreground of the filled part.


@meindex foregroundColor:@-
@item foregroundColor:@- aColor
Set the foreground color of the widget.  This is used for
the non-filled part, while the background color also works
as the foreground of the filled part.


@meindex value
@item value
Answer the filled percentage of the receiver (0..1)


@meindex value:@-
@item value:@- newValue
Set the filled percentage of the receiver and update the appearance.
newValue must be between 0 and 1.


@end table

@node BLOX.BRadioButton
@section BLOX.BRadioButton
@clindex BLOX.BRadioButton

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.BButton
@itemx Category: Graphics-Windows
I am just one in a group of mutually exclusive buttons.
@end table

@menu
* BLOX.BRadioButton-accessing::  (instance)
@end menu



@node BLOX.BRadioButton-accessing
@subsection BLOX.BRadioButton:@- accessing

@table @b
@meindex callback:@-message:@-
@item callback:@- aReceiver message:@- aSymbol
Set up so that aReceiver is sent the aSymbol message (the name of
a selector accepting at most two arguments) when the receiver is
clicked.  If the method accepts two arguments, the receiver is
passed as the first parameter.  If the method accepts one or two
arguments, true is passed as the last parameter for interoperability
with BToggle widgets.


@meindex value
@item value
Answer whether this widget is the selected one in its radio
button group.


@meindex value:@-
@item value:@- aBoolean
Answer whether this widget is the selected one in its radio
button group.  Setting this property to false for a group's
currently selected button unhighlights all the buttons in that
group.


@end table

@node BLOX.BRadioGroup
@section BLOX.BRadioGroup
@clindex BLOX.BRadioGroup

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.BContainer
@itemx Category: Graphics-Windows
I am used to group many mutually-exclusive radio buttons together.
In addition, just like every BContainer I can perform simple management
by putting widgets next to each other, from left to right or (which is
more useful in this particular case...) from top to bottom.
@end table

@menu
* BLOX.BRadioGroup-accessing::  (instance)
* BLOX.BRadioGroup-widget protocol::  (instance)
@end menu



@node BLOX.BRadioGroup-accessing
@subsection BLOX.BRadioGroup:@- accessing

@table @b
@meindex value
@item value
Answer the index of the button that is currently selected,
1 being the first button added to the radio button group.
0 means that no button is selected


@meindex value:@-
@item value:@- value
Force the value-th button added to the radio button group
to be the selected one.


@end table



@node BLOX.BRadioGroup-widget protocol
@subsection BLOX.BRadioGroup:@- widget protocol

@table @b
@meindex destroyed
@item destroyed
Private - The receiver has been destroyed, clear the corresponding
Tcl variable to avoid memory leaks.


@end table

@node BLOX.BRectangle
@section BLOX.BRectangle
@clindex BLOX.BRectangle

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.BBoundingBox
@itemx Category: Graphics-Windows

I only draw rectangles but I can do that very well.
@end table

@menu
* BLOX.BRectangle-accessing::  (instance)
@end menu



@node BLOX.BRectangle-accessing
@subsection BLOX.BRectangle:@- accessing

@table @b
@meindex outlineColor
@item outlineColor
Answer the color with which the outline of the rectangle is drawn.


@meindex outlineColor:@-
@item outlineColor:@- color
Set the color with which the outline of the rectangle is drawn.


@meindex width
@item width
Answer the width with which the outline of the rectangle is drawn.


@meindex width:@-
@item width:@- pixels
Set the width with which the outline of the rectangle is drawn.


@end table

@node BLOX.BScrolledCanvas
@section BLOX.BScrolledCanvas
@clindex BLOX.BScrolledCanvas

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.BCanvas
@itemx Category: Graphics-Windows
I am much similar to BCanvas, but I sport, in addition, two fancy scroll
bars. This is just a convenience, since it could be easily done when
creating the canvas...
@end table

@menu
@end menu

@node BLOX.BSpline
@section BLOX.BSpline
@clindex BLOX.BSpline

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.BPolyline
@itemx Category: Graphics-Windows

Unlike my father BPolyline, I am more smooth at doing my job.
@end table

@menu
* BLOX.BSpline-accessing::  (instance)
@end menu



@node BLOX.BSpline-accessing
@subsection BLOX.BSpline:@- accessing

@table @b
@meindex smoothness
@item smoothness
Answer the degree of smoothness desired for curves.  Each spline
will be approximated with this number of line segments.


@meindex smoothness:@-
@item smoothness:@- anInteger
Set the degree of smoothness desired for curves.  Each spline
will be approximated with this number of line segments.


@end table

@node BLOX.BText
@section BLOX.BText
@clindex BLOX.BText

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.BViewport
@itemx Category: Graphics-Windows

I represent a text viewer with pretty good formatting options.
@end table

@menu
* BLOX.BText class-accessing::  (class)
* BLOX.BText class-instance creation::  (class)
* BLOX.BText-accessing::  (instance)
* BLOX.BText-attributes::  (instance)
* BLOX.BText-geometry management::  (instance)
* BLOX.BText-images::  (instance)
* BLOX.BText-inserting text::  (instance)
* BLOX.BText-position & lines::  (instance)
@end menu



@node BLOX.BText class-accessing
@subsection BLOX.BText class:@- accessing

@table @b
@meindex emacsLike
@item emacsLike
Answer whether we are using Emacs or Motif key bindings.


@meindex emacsLike:@-
@item emacsLike:@- aBoolean
Set whether we are using Emacs or Motif key bindings.


@end table



@node BLOX.BText class-instance creation
@subsection BLOX.BText class:@- instance creation

@table @b
@meindex newReadOnly:@-
@item newReadOnly:@- parent
Answer a new read-only text widget (read-only is achieved simply
by setting its state to be disabled)


@end table



@node BLOX.BText-accessing
@subsection BLOX.BText:@- accessing

@table @b
@meindex backgroundColor
@item backgroundColor
Answer the value of the backgroundColor option for the widget.

Specifies the normal background color to use when displaying the widget.


@meindex backgroundColor:@-
@item backgroundColor:@- value
Set the value of the backgroundColor option for the widget.

Specifies the normal background color to use when displaying the widget.


@meindex callback
@item callback
Answer a DirectedMessage that is sent when the receiver is modified,
or nil if none has been set up.


@meindex callback:@-message:@-
@item callback:@- aReceiver message:@- aSymbol
Set up so that aReceiver is sent the aSymbol message (the name of
a zero- or one-argument selector) when the receiver is modified.
If the method accepts an argument, the receiver is passed.


@meindex contents
@item contents
Return the contents of the widget


@meindex contents:@-
@item contents:@- aString
Set the contents of the widget


@meindex font
@item font
Answer the value of the font option for the widget.

Specifies the font to use when drawing text inside the widget. The font
can be given as either an X font name or a Blox font description string.

X font names are given as many fields, each led by a minus, and each of
which can be replaced by an * to indicate a default value is ok:@-
foundry, family, weight, slant, setwidth, addstyle, pixel size, point size
(the same as pixel size for historical reasons), horizontal resolution,
vertical resolution, spacing, width, charset and character encoding.

Blox font description strings have three fields, which must be separated by
a space and of which only the first is mandatory:@- the font family, the font
size in points (or in pixels if a negative value is supplied), and a number
of styles separated by a space (valid styles are normal, bold, italic,
underline and overstrike). Examples of valid fonts are ``Helvetica 10 Bold'',
``Times -14'', ``Futura Bold Underline''.  You must enclose the font family
in braces if it is made of two or more words.


@meindex font:@-
@item font:@- value
Set the value of the font option for the widget.

Specifies the font to use when drawing text inside the widget. The font
can be given as either an X font name or a Blox font description string.

X font names are given as many fields, each led by a minus, and each of
which can be replaced by an * to indicate a default value is ok:@-
foundry, family, weight, slant, setwidth, addstyle, pixel size, point size
(the same as pixel size for historical reasons), horizontal resolution,
vertical resolution, spacing, width, charset and character encoding.

Blox font description strings have three fields, which must be separated by
a space and of which only the first is mandatory:@- the font family, the font
size in points (or in pixels if a negative value is supplied), and a number
of styles separated by a space (valid styles are normal, bold, italic,
underline and overstrike). Examples of valid fonts are ``Helvetica 10 Bold'',
``Times -14'', ``Futura Bold Underline''.  You must enclose the font family
in braces if it is made of two or more words.


@meindex foregroundColor
@item foregroundColor
Answer the value of the foregroundColor option for the widget.

Specifies the normal foreground color to use when displaying the widget.


@meindex foregroundColor:@-
@item foregroundColor:@- value
Set the value of the foregroundColor option for the widget.

Specifies the normal foreground color to use when displaying the widget.


@meindex getSelection
@item getSelection
Answer an empty string if the widget has no selection, else answer
the currently selected text


@meindex selectBackground
@item selectBackground
Answer the value of the selectBackground option for the widget.

Specifies the background color to use when displaying selected parts
of the widget.


@meindex selectBackground:@-
@item selectBackground:@- value
Set the value of the selectBackground option for the widget.

Specifies the background color to use when displaying selected parts
of the widget.


@meindex selectForeground
@item selectForeground
Answer the value of the selectForeground option for the widget.

Specifies the foreground color to use when displaying selected parts
of the widget.


@meindex selectForeground:@-
@item selectForeground:@- value
Set the value of the selectForeground option for the widget.

Specifies the foreground color to use when displaying selected parts
of the widget.


@meindex wrap
@slindex none
@slindex char
@slindex word
@item wrap
Answer the value of the wrap option for the widget.

Specifies how to handle lines in the text that are too long to be displayed
in a single line of the text's window. The value must be #none or #char or
#word. A wrap mode of none means that each line of text appears as exactly
one line on the screen; extra characters that do not fit on the screen are
not displayed. In the other modes each line of text will be broken up into
several screen lines if necessary to keep all the characters visible. In
char mode a screen line break may occur after any character; in word mode a
line break will only be made at word boundaries.


@meindex wrap:@-
@slindex none
@slindex char
@slindex word
@item wrap:@- value
Set the value of the wrap option for the widget.

Specifies how to handle lines in the text that are too long to be displayed
in a single line of the text's window. The value must be #none or #char or
#word. A wrap mode of none means that each line of text appears as exactly
one line on the screen; extra characters that do not fit on the screen are
not displayed. In the other modes each line of text will be broken up into
several screen lines if necessary to keep all the characters visible. In
char mode a screen line break may occur after any character; in word mode a
line break will only be made at word boundaries.


@end table



@node BLOX.BText-attributes
@subsection BLOX.BText:@- attributes

@table @b
@meindex insertAtEnd:@-attribute:@-
@item insertAtEnd:@- aString attribute:@- attr
Clear the selection and append aString at the end of the
widget.  Use the given attributes to format the text.


@meindex insertText:@-attribute:@-
@item insertText:@- aString attribute:@- attr
Insert aString in the widget at the current insertion point,
replacing the currently selected text (if any).  Use the
given attributes to format the text.


@meindex removeAttributes
@item removeAttributes
Remove any kind of formatting from the text in the widget


@meindex removeAttributesFrom:@-to:@-
@item removeAttributesFrom:@- aPoint to:@- endPoint
Remove any kind of formatting from the text in the widget
between the given endpoints.  The two endpoints are Point
objects in which both coordinates are 1-based:@- the first
line is line 1, and the first character in the first line
is character 1.


@meindex setAttributes:@-from:@-to:@-
@item setAttributes:@- attr from:@- aPoint to:@- endPoint
Add the formatting given by attr to the text in the widget
between the given endpoints.  The two endpoints are Point
objects in which both coordinates are 1-based:@- the first
line is line 1, and the first character in the first line
is character 1.


@end table



@node BLOX.BText-geometry management
@subsection BLOX.BText:@- geometry management

@table @b
@meindex child:@-height:@-
@item child:@- child height:@- value
Set the height of the given child to be `value' pixels.


@meindex child:@-heightOffset:@-
@item child:@- child heightOffset:@- value
Adjust the height of the given child to be given by `value'
more pixels.


@meindex child:@-width:@-
@item child:@- child width:@- value
Set the width of the given child to be `value' pixels.


@meindex child:@-widthOffset:@-
@item child:@- child widthOffset:@- value
Adjust the width of the given child to be given by `value'
more pixels.


@meindex child:@-x:@-
@item child:@- child x:@- value
Never fail and do nothing, the children stay where
the text ended at the time each child was added in
the widget


@meindex child:@-xOffset:@-
@item child:@- child xOffset:@- value
This method should not be called for instances of this class.

@meindex child:@-y:@-
@item child:@- child y:@- value
Never fail and do nothing, the children stay where
the text ended at the time each child was added in
the widget


@meindex child:@-yOffset:@-
@item child:@- child yOffset:@- value
This method should not be called for instances of this class.

@meindex heightChild:@-
@item heightChild:@- child
Answer the given child's height in pixels.


@meindex widthChild:@-
@item widthChild:@- child
Answer the given child's width in pixels.


@meindex xChild:@-
@item xChild:@- child
Answer the given child's top-left border's x coordinate.
We always answer 0 since the children actually move when
the text widget scrolls


@meindex yChild:@-
@item yChild:@- child
Answer the given child's top-left border's y coordinate.
We always answer 0 since the children actually move when
the text widget scrolls


@end table



@node BLOX.BText-images
@subsection BLOX.BText:@- images

@table @b
@meindex insertImage:@-
@slindex registerImage:@-
@item insertImage:@- anObject
Insert an image where the insertion point currently lies in the widget.
anObject can be a String containing image data (either Base-64 encoded
GIF data, XPM data, or PPM data), or the result or registering an image
with #registerImage:@-


@meindex insertImage:@-at:@-
@slindex registerImage:@-
@item insertImage:@- anObject at:@- position
Insert an image at the given position in the widget.  The
position is a Point object in which both coordinates are 1-based:@-
the first line is line 1, and the first character in the first
line is character 1.

anObject can be a String containing image data (either Base-64 encoded
GIF data, XPM data, or PPM data), or the result or registering an image
with #registerImage:@-


@meindex insertImageAtEnd:@-
@slindex registerImage:@-
@item insertImageAtEnd:@- anObject
Insert an image at the end of the widgets text.
anObject can be a String containing image data (either Base-64 encoded
GIF data, XPM data, or PPM data), or the result or registering an image
with #registerImage:@-


@meindex registerImage:@-
@slindex registerImage:@-
@item registerImage:@- anObject
Register an image (whose data is in anObject, a String including
Base-64 encoded GIF data, XPM data, or PPM data) to be used
in the widget.  If the same image must be used a lot of times,
it is better to register it once and then pass the result of
#registerImage:@- to the image insertion methods.

Registered image are private within each BText widget.  Registering
an image with a widget and using it with another could give
unpredictable results.


@end table



@node BLOX.BText-inserting text
@subsection BLOX.BText:@- inserting text

@table @b
@meindex insertAtEnd:@-
@item insertAtEnd:@- aString
Clear the selection and append aString at the end of the
widget.


@meindex insertSelectedText:@-
@item insertSelectedText:@- aString
Insert aString in the widget at the current insertion point,
leaving the currently selected text (if any) in place, and
selecting the text.


@meindex insertText:@-
@item insertText:@- aString
Insert aString in the widget at the current insertion point,
replacing the currently selected text (if any).


@meindex insertText:@-at:@-
@item insertText:@- aString at:@- position
Insert aString in the widget at the given position,
replacing the currently selected text (if any).  The
position is a Point object in which both coordinates are 1-based:@-
the first line is line 1, and the first character in the first
line is character 1.


@meindex insertTextSelection:@-
@item insertTextSelection:@- aString
Insert aString in the widget after the current selection,
leaving the currently selected text (if any) intact.


@meindex invokeCallback
@item invokeCallback
Generate a synthetic callback.


@meindex nextPut:@-
@item nextPut:@- aCharacter
Clear the selection and append aCharacter at the end of the
widget.


@meindex nextPutAll:@-
@item nextPutAll:@- aString
Clear the selection and append aString at the end of the
widget.


@meindex nl
@item nl
Clear the selection and append a linefeed character at the
end of the widget.


@meindex refuseTabs
@item refuseTabs
Arrange so that Tab characters, instead of being inserted
in the widget, traverse the widgets in the parent window.


@meindex replaceSelection:@-
@item replaceSelection:@- aString
Insert aString in the widget at the current insertion point,
replacing the currently selected text (if any), and leaving
the text selected.


@meindex searchString:@-
@item searchString:@- aString
Search aString in the widget.  If it is not found,
answer zero, else answer the 1-based line number
and move the insertion point to the place where
the string was found.


@meindex space
@item space
Clear the selection and append a space at the end of the
widget.


@end table



@node BLOX.BText-position & lines
@subsection BLOX.BText:@- position & lines

@table @b
@meindex charsInLine:@-
@item charsInLine:@- number
Answer how many characters are there in the number-th line


@meindex currentColumn
@item currentColumn
Answer the 1-based column number where the insertion point
currently lies.


@meindex currentLine
@item currentLine
Answer the 1-based line number where the insertion point
currently lies.


@meindex currentPosition
@item currentPosition
Answer a Point representing where the insertion point
currently lies.  Both coordinates in the answer are 1-based:@-
the first line is line 1, and the first character in the first
line is character 1.


@meindex currentPosition:@-
@item currentPosition:@- aPoint
Move the insertion point to the position given by aPoint.
Both coordinates in aPoint are interpreted as 1-based:@-
the first line is line 1, and the first character in the first
line is character 1.


@meindex gotoLine:@-end:@-
@item gotoLine:@- line end:@- aBoolean
If aBoolean is true, move the insertion point to the last
character of the line-th line (1 being the first line
in the widget); if aBoolean is false, move it to the start
of the line-th line.


@meindex indexAt:@-
@item indexAt:@- point
Answer the position of the character that covers the
pixel whose coordinates within the text's window are
given by the supplied Point object.


@meindex lineAt:@-
@item lineAt:@- number
Answer the number-th line of text in the widget


@meindex numberOfLines
@item numberOfLines
Answer the number of lines in the widget


@meindex selectFrom:@-to:@-
@item selectFrom:@- first to:@- last
Select the text between the given endpoints.  The two endpoints
are Point objects in which both coordinates are 1-based:@- the
first line is line 1, and the first character in the first line
is character 1.


@meindex setToEnd
@item setToEnd
Move the insertion point to the end of the widget


@end table

@node BLOX.BTextAttributes
@section BLOX.BTextAttributes
@clindex BLOX.BTextAttributes

@table @b
@item Defined in namespace BLOX
@itemx Superclass: Object
@itemx Category: Graphics-Windows

I help you creating wonderful, colorful BTexts.
@end table

@menu
* BLOX.BTextAttributes class-instance-creation shortcuts::  (class)
* BLOX.BTextAttributes-colors::  (instance)
* BLOX.BTextAttributes-setting attributes::  (instance)
@end menu



@node BLOX.BTextAttributes class-instance-creation shortcuts
@subsection BLOX.BTextAttributes class:@- instance-creation shortcuts

@table @b
@meindex backgroundColor:@-
@item backgroundColor:@- color
Create a new BTextAttributes object resulting in text
with the given background color.


@meindex black
@item black
Create a new BTextAttributes object resulting in black text.


@meindex blue
@item blue
Create a new BTextAttributes object resulting in blue text.


@meindex center
@item center
Create a new BTextAttributes object resulting in centered
paragraphs.


@meindex cyan
@item cyan
Create a new BTextAttributes object resulting in cyan text.


@meindex darkCyan
@item darkCyan
Create a new BTextAttributes object resulting in dark cyan text.


@meindex darkGreen
@item darkGreen
Create a new BTextAttributes object resulting in dark green text.


@meindex darkMagenta
@item darkMagenta
Create a new BTextAttributes object resulting in dark purple text.


@meindex events:@-
@item events:@- aBTextBindings
Create a new BTextAttributes object for text that responds to
events according to the callbacks established in aBTextBindings.


@meindex font:@-
@item font:@- font
Create a new BTextAttributes object resulting in text with the given font.
The font can be given as either an X font name or a Blox font description
string.

X font names are given as many fields, each led by a minus, and each of
which can be replaced by an * to indicate a default value is ok:@-
foundry, family, weight, slant, setwidth, addstyle, pixel size, point size
(the same as pixel size for historical reasons), horizontal resolution,
vertical resolution, spacing, width, charset and character encoding.

Blox font description strings have three fields, which must be separated by
a space and of which only the first is mandatory:@- the font family, the font
size in points (or in pixels if a negative value is supplied), and a number
of styles separated by a space (valid styles are normal, bold, italic,
underline and overstrike). Examples of valid fonts are ``Helvetica 10 Bold'',
``Times -14'', ``Futura Bold Underline''.  You must enclose the font family
in braces if it is made of two or more words.


@meindex foregroundColor:@-
@item foregroundColor:@- color
Create a new BTextAttributes object resulting in text
with the given foreground color.


@meindex green
@item green
Create a new BTextAttributes object resulting in green text.


@meindex magenta
@item magenta
Create a new BTextAttributes object resulting in magenta text.


@meindex red
@item red
Create a new BTextAttributes object resulting in red text.


@meindex strikeout
@item strikeout
Create a new BTextAttributes object resulting in struck-out text.


@meindex underline
@item underline
Create a new BTextAttributes object resulting in underlined text.


@meindex white
@item white
Create a new BTextAttributes object resulting in white text.


@meindex yellow
@item yellow
Create a new BTextAttributes object resulting in yellow text.


@end table



@node BLOX.BTextAttributes-colors
@subsection BLOX.BTextAttributes:@- colors

@table @b
@meindex black
@item black
Set the receiver so that applying it results in black text.


@meindex blue
@item blue
Set the receiver so that applying it results in blue text.


@meindex cyan
@item cyan
Set the receiver so that applying it results in cyan text.


@meindex darkCyan
@item darkCyan
Set the receiver so that applying it results in dark cyan text.


@meindex darkGreen
@item darkGreen
Set the receiver so that applying it results in dark green text.


@meindex darkMagenta
@item darkMagenta
Set the receiver so that applying it results in dark magenta text.


@meindex green
@item green
Set the receiver so that applying it results in green text.


@meindex magenta
@item magenta
Set the receiver so that applying it results in magenta text.


@meindex red
@item red
Set the receiver so that applying it results in red text.


@meindex white
@item white
Set the receiver so that applying it results in white text.


@meindex yellow
@item yellow
Set the receiver so that applying it results in black text.


@end table



@node BLOX.BTextAttributes-setting attributes
@subsection BLOX.BTextAttributes:@- setting attributes

@table @b
@meindex backgroundColor
@item backgroundColor
Answer the value of the backgroundColor option for the text.

Specifies the background color to use when displaying text with
these attributes.  nil indicates that the default value is not
overridden.


@meindex backgroundColor:@-
@item backgroundColor:@- color
Set the value of the backgroundColor option for the text.

Specifies the background color to use when displaying text with
these attributes.  nil indicates that the default value is not
overridden.


@meindex center
@item center
Center the text to which these attributes are applied


@meindex events
@item events
Answer the event bindings which apply to text subject to these
attributes


@meindex events:@-
@item events:@- aBTextBindings
Set the event bindings which apply to text subject to these
attributes


@meindex font
@item font
Answer the value of the font option for the text.
The font can be given as either an X font name or a Blox font description
string, or nil if you want the widget's default font to apply.

X font names are given as many fields, each led by a minus, and each of
which can be replaced by an * to indicate a default value is ok:@-
foundry, family, weight, slant, setwidth, addstyle, pixel size, point size
(the same as pixel size for historical reasons), horizontal resolution,
vertical resolution, spacing, width, charset and character encoding.

Blox font description strings have three fields, which must be separated by
a space and of which only the first is mandatory:@- the font family, the font
size in points (or in pixels if a negative value is supplied), and a number
of styles separated by a space (valid styles are normal, bold, italic,
underline and overstrike). Examples of valid fonts are ``Helvetica 10 Bold'',
``Times -14'', ``Futura Bold Underline''.  You must enclose the font family
in braces if it is made of two or more words.


@meindex font:@-
@item font:@- fontName
Set the value of the font option for the text.
The font can be given as either an X font name or a Blox font description
string, or nil if you want the widget's default font to apply.

X font names are given as many fields, each led by a minus, and each of
which can be replaced by an * to indicate a default value is ok:@-
foundry, family, weight, slant, setwidth, addstyle, pixel size, point size
(the same as pixel size for historical reasons), horizontal resolution,
vertical resolution, spacing, width, charset and character encoding.

Blox font description strings have three fields, which must be separated by
a space and of which only the first is mandatory:@- the font family, the font
size in points (or in pixels if a negative value is supplied), and a number
of styles separated by a space (valid styles are normal, bold, italic,
underline and overstrike). Examples of valid fonts are ``Helvetica 10 Bold'',
``Times -14'', ``Futura Bold Underline''.  You must enclose the font family
in braces if it is made of two or more words.


@meindex foregroundColor
@item foregroundColor
Answer the value of the foregroundColor option for the text.

Specifies the foreground color to use when displaying text with
these attributes.  nil indicates that the default value is not
overridden.


@meindex foregroundColor:@-
@item foregroundColor:@- color
Set the value of the foregroundColor option for the text.

Specifies the foreground color to use when displaying text with
these attributes.  nil indicates that the default value is not
overridden.


@meindex isCentered
@item isCentered
Answer whether the text to which these attributes are applied
is centered


@meindex isStruckout
@item isStruckout
Answer whether the text to which these attributes are applied
is struckout


@meindex isUnderlined
@item isUnderlined
Answer whether the text to which these attributes are applied
is underlined


@meindex strikeout
@item strikeout
Strike out the text to which these attributes are applied


@meindex underline
@item underline
Underline the text to which these attributes are applied


@end table

@node BLOX.BTextBindings
@section BLOX.BTextBindings
@clindex BLOX.BTextBindings

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.BEventTarget
@itemx Category: Graphics-Windows
This object is used to assign event handlers to particular sections of
text in a BText widget.  To use it, you simply have to add event handlers
to it, and then create a BTextAttributes object that refers to it.
@end table

@menu
* BLOX.BTextBindings class-instance creation::  (class)
@end menu



@node BLOX.BTextBindings class-instance creation
@subsection BLOX.BTextBindings class:@- instance creation

@table @b
@meindex new
@item new
Create a new instance of the receiver.


@end table

@node BLOX.BTextTags
@section BLOX.BTextTags
@clindex BLOX.BTextTags

@table @b
@item Defined in namespace BLOX
@itemx Superclass: Object
@itemx Category: Graphics-Windows
I am a private class. I sit between a BText and BTextAttributes, helping
the latter in telling the former which attributes to use.
@end table

@menu
@end menu

@node BLOX.BToggle
@section BLOX.BToggle
@clindex BLOX.BToggle

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.BButton
@itemx Category: Graphics-Windows
I represent a button whose choice can be included (by checking
me) or excluded (by leaving me unchecked).
@end table

@menu
* BLOX.BToggle-accessing::  (instance)
@end menu



@node BLOX.BToggle-accessing
@subsection BLOX.BToggle:@- accessing

@table @b
@meindex callback:@-message:@-
@item callback:@- aReceiver message:@- aSymbol
Set up so that aReceiver is sent the aSymbol message (the name of
a selector accepting at most two arguments) when the receiver is
clicked.  If the method accepts two arguments, the receiver is
passed as the first parameter.  If the method accepts one or two
arguments, the state of the widget (true if it is selected, false
if it is not) is passed as the last parameter.


@meindex invokeCallback
@item invokeCallback
Generate a synthetic callback.


@meindex value
@item value
Answer whether the button is in a selected (checked) state.


@meindex value:@-
@item value:@- aBoolean
Set whether the button is in a selected (checked) state and
generates a callback accordingly.


@meindex variable:@-
@item variable:@- value
Set the value of Tk's variable option for the widget.


@end table

@node BLOX.BTransientWindow
@section BLOX.BTransientWindow
@clindex BLOX.BTransientWindow

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.BWindow
@itemx Category: Graphics-Windows
I am almost a boss. I represent a window which is logically linked
to another which sits higher in the widget hierarchy, e.g. a dialog
box
@end table

@menu
* BLOX.BTransientWindow class-instance creation::  (class)
* BLOX.BTransientWindow-widget protocol::  (instance)
@end menu



@node BLOX.BTransientWindow class-instance creation
@subsection BLOX.BTransientWindow class:@- instance creation

@table @b
@meindex new
@item new
This method should not be called for instances of this class.

@meindex new:@-
@item new:@- parentWindow
Answer a new transient window attached to the given
parent window and with nothing in its title bar caption.


@meindex new:@-in:@-
@item new:@- label in:@- parentWindow
Answer a new transient window attached to the given
parent window and with `label' as its title bar caption.


@end table



@node BLOX.BTransientWindow-widget protocol
@subsection BLOX.BTransientWindow:@- widget protocol

@table @b
@meindex map
@item map
Map the window and inform the windows manager that the
receiver is a transient window working on behalf of its
parent.  The window is also put in its parent window's
window group:@- the window manager might use this information,
for example, to unmap all of the windows in a group when the
group's leader is iconified.


@end table

@node BLOX.BViewport
@section BLOX.BViewport
@clindex BLOX.BViewport

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.BPrimitive
@itemx Category: Graphics-Windows
I represent an interface which is common to widgets that can be
scrolled, like list boxes or text widgets.
@end table

@menu
* BLOX.BViewport-accessing::  (instance)
* BLOX.BViewport-scrollbars::  (instance)
@end menu



@node BLOX.BViewport-accessing
@subsection BLOX.BViewport:@- accessing

@table @b
@meindex connected
@item connected
Private - Answer the name of Tk widget for the connected widget.


@end table



@node BLOX.BViewport-scrollbars
@subsection BLOX.BViewport:@- scrollbars

@table @b
@meindex horizontal
@item horizontal
Answer whether an horizontal scrollbar is drawn in the widget
if needed.


@meindex horizontal:@-
@item horizontal:@- aBoolean
Set whether an horizontal scrollbar is drawn in the widget if
needed.


@meindex horizontalNeeded
@item horizontalNeeded
Answer whether an horizontal scrollbar is needed to show all the
information in the widget.


@meindex horizontalShown
@item horizontalShown
Answer whether an horizontal scrollbar is drawn in the widget.


@meindex vertical
@item vertical
Answer whether a vertical scrollbar is drawn in the widget
if needed.


@meindex vertical:@-
@item vertical:@- aBoolean
Set whether a vertical scrollbar is drawn in the widget if
needed.


@meindex verticalNeeded
@item verticalNeeded
Answer whether a vertical scrollbar is needed to show all the
information in the widget.


@meindex verticalShown
@item verticalShown
Answer whether a vertical scrollbar is drawn in the widget.


@end table

@node BLOX.BWidget
@section BLOX.BWidget
@clindex BLOX.BWidget

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.Blox
@itemx Category: Graphics-Windows
I am the superclass for every widget except those related to
menus. I provide more common methods and geometry management
@end table

@menu
* BLOX.BWidget class-popups::  (class)
* BLOX.BWidget-accessing::  (instance)
* BLOX.BWidget-customization::  (instance)
* BLOX.BWidget-geometry management::  (instance)
* BLOX.BWidget-widget protocol::  (instance)
@end menu



@node BLOX.BWidget class-popups
@subsection BLOX.BWidget class:@- popups

@table @b
@meindex new
@slindex destroy
@item new
Create an instance of the receiver inside a BPopupWindow; do
not map the window, answer the new widget.  The created widget
will become a child of the window and be completely attached
to it (e.g. the geometry methods will modify the window's geometry).
Note that while the widget *seems* to be directly painted on
the root window, it actually belongs to the BPopupWindow; so
don't send #destroy to the widget to remove it, but rather
to the window.


@meindex popup:@-
@slindex destroy
@item popup:@- initializationBlock
Create an instance of the receiver inside a BPopupWindow; before
returning, pass the widget to the supplied initializationBlock,
then map the window.  Answer the new widget.  The created widget
will become a child of the window and be completely attached
to it (e.g. the geometry methods will modify the window's geometry).
Note that while the widget *seems* to be directly painted on
the root window, it actually belongs to the BPopupWindow; so
don't send #destroy to the widget to remove it, but rather
to the window.


@end table



@node BLOX.BWidget-accessing
@subsection BLOX.BWidget:@- accessing

@table @b
@meindex borderWidth
@item borderWidth
Answer the value of the borderWidth option for the widget.

Specifies a non-negative value indicating the width of the 3-D border to
draw around the outside of the widget (if such a border is being drawn; the
effect option typically determines this). The value may also be used when
drawing 3-D effects in the interior of the widget. The value is measured in
pixels.


@meindex borderWidth:@-
@item borderWidth:@- value
Set the value of the borderWidth option for the widget.

Specifies a non-negative value indicating the width of the 3-D border to
draw around the outside of the widget (if such a border is being drawn; the
effect option typically determines this). The value may also be used when
drawing 3-D effects in the interior of the widget. The value is measured in
pixels.


@meindex cursor
@item cursor
Answer the value of the cursor option for the widget.

Specifies the mouse cursor to be used for the widget. The value of the
option is given by the standard X cursor cursor, i.e., any of
the names defined in cursorcursor.h, without the leading XC_.


@meindex cursor:@-
@item cursor:@- value
Set the value of the cursor option for the widget.

Specifies the mouse cursor to be used for the widget. The value of the
option is given by the standard X cursor cursor, i.e., any of
the names defined in cursorcursor.h, without the leading XC_.


@meindex effect
@item effect
Answer the value of the effect option for the widget.

Specifies the effect desired for the widget's border. Acceptable values are
raised, sunken, flat, ridge, solid, and groove. The value indicates how the
interior of the widget should appear relative to its exterior; for example,
raised means the interior of the widget should appear to protrude from the
screen, relative to the exterior of the widget. Raised and sunken give the
traditional 3-D appearance (for example, that of Xaw3D), while ridge and groove
give a ``chiseled'' appearance like that of Swing or GTK+'s Metal theme. Flat
and solid are not 3-D.


@meindex effect:@-
@item effect:@- value
Set the value of the effect option for the widget.

Specifies the effect desired for the widget's border. Acceptable values are
raised, sunken, flat, ridge, solid, and groove. The value indicates how the
interior of the widget should appear relative to its exterior; for example,
raised means the interior of the widget should appear to protrude from the
screen, relative to the exterior of the widget. Raised and sunken give the
traditional 3-D appearance (for example, that of Xaw3D), while ridge and groove
give a ``chiseled'' appearance like that of Swing or GTK+'s Metal theme. Flat
and solid are not 3-D.


@meindex tabStop
@item tabStop
Answer the value of the tabStop option for the widget.

Determines whether the window accepts the focus during keyboard traversal
(e.g., Tab and Shift-Tab). Before setting the focus to a window, Blox
consults the value of the tabStop option. A value of false
means that the window should be skipped entirely during keyboard traversal.
true means that the window should receive the input focus as long as it is
viewable (it and all of its ancestors are mapped). If you do not set this
option, Blox makes the decision about whether or
not to focus on the window:@- the current algorithm is to skip the window if
it is disabled, it has no key bindings, or if it is not viewable. Of the
standard widgets, BForm, BContainer, BLabel and BImage have no key bindings
by default.


@meindex tabStop:@-
@item tabStop:@- value
Set the value of the tabStop option for the widget.

Determines whether the window accepts the focus during keyboard traversal
(e.g., Tab and Shift-Tab). Before setting the focus to a window, Blox
consults the value of the tabStop option. A value of false
means that the window should be skipped entirely during keyboard traversal.
true means that the window should receive the input focus as long as it is
viewable (it and all of its ancestors are mapped). If you do not set this
option, Blox makes the decision about whether or
not to focus on the window:@- the current algorithm is to skip the window if
it is disabled, it has no key bindings, or if it is not viewable. Of the
standard widgets, BForm, BContainer, BLabel and BImage have no key bindings
by default.


@end table



@node BLOX.BWidget-customization
@subsection BLOX.BWidget:@- customization

@table @b
@meindex addChild:@-
@item addChild:@- child
The widget identified by child has been added to the receiver.
This method is public not because you can call it, but because
it can be useful to override it, not forgetting the call to
basicAddChild, to perform some initialization on the children
just added. Answer the new child.


@meindex create
@item create
Make the receiver able to respond to its widget protocol.
This method is public not because you can call it, but because
it can be useful to override it, not forgetting the call to
super, to perform some initialization on the primitive
widget just created; for an example of this, see the
implementation of BButtonLike.


@meindex initialize:@-
@slindex new:@-
@item initialize:@- parentWidget
This is called by #new:@- to initialize the widget (as the name
says...). The default implementation calls all the other
methods in the `customization' protocol and some private
ones that take care of making the receiver's status consistent,
so you should usually call it instead of doing everything by
hand. This method is public not because you can call it, but
because it might be useful to override it. Always answer the
receiver.


@meindex setInitialSize
@slindex initialize:@-
@item setInitialSize
This is called by #initialize:@- to set the widget's initial size.
The whole area is occupied by default. This method is public
not because you can call it, but because it can be useful to
override it.


@end table



@node BLOX.BWidget-geometry management
@subsection BLOX.BWidget:@- geometry management

@table @b
@meindex boundingBox
@item boundingBox
Answer a Rectangle containing the bounding box of the receiver


@meindex boundingBox:@-
@item boundingBox:@- rect
Set the bounding box of the receiver to rect (a Rectangle).


@meindex child:@-height:@-
@slindex height
@slindex height:@-
@item child:@- child height:@- value
Set the given child's height to value.  The default implementation of
this method uses `rubber-sheet' geometry management as explained in
the comment to BWidget's #height method.  You should not use this
method, which is automatically called by the child's #height:@- method,
but you might want to override it.  The child's property slots whose
name ends with `Geom' are reserved for this method. This method
should never fail -- if it doesn't apply to the kind of geometry
management that the receiver does, just do nothing.


@meindex child:@-heightOffset:@-
@slindex height
@slindex heightOffset:@-
@slindex heightOffset:@-
@item child:@- child heightOffset:@- value
Adjust the given child's height by a fixed amount of value pixel.  This
is meaningful for the default implementation, using `rubber-sheet'
geometry management as explained in the comment to BWidget's #height and
#heightOffset:@- methods.  You should not use this method, which is
automatically called by the child's #heightOffset:@- method, but you
might want to override it.  if it doesn't apply to the kind of
geometry management that the receiver does, just add value to the
current height of the widget.


@meindex child:@-stretch:@-
@item child:@- child stretch:@- aBoolean
This method is only used when on the path from the receiver
to its toplevel there is a BContainer.  It decides whether child is
among the widgets that are stretched to fill the entire width of
the BContainer; if this has not been set for this widget, it
is propagated along the widget hierarchy.


@meindex child:@-width:@-
@slindex width
@slindex width:@-
@item child:@- child width:@- value
Set the given child's width to value.  The default implementation of
this method uses `rubber-sheet' geometry management as explained in
the comment to BWidget's #width method.  You should not use this
method, which is automatically called by the child's #width:@- method,
but you might want to override it.  The child's property slots whose
name ends with `Geom' are reserved for this method. This method
should never fail -- if it doesn't apply to the kind of geometry
management that the receiver does, just do nothing.


@meindex child:@-widthOffset:@-
@slindex width
@slindex widthOffset:@-
@slindex widthOffset:@-
@item child:@- child widthOffset:@- value
Adjust the given child's width by a fixed amount of value pixel.  This
is meaningful for the default implementation, using `rubber-sheet'
geometry management as explained in the comment to BWidget's #width and
#widthOffset:@- methods.  You should not use this method, which is
automatically called by the child's #widthOffset:@- method, but you
might want to override it.  if it doesn't apply to the kind of
geometry management that the receiver does, just add value to the
current width of the widget.


@meindex child:@-x:@-
@slindex x
@slindex x:@-
@item child:@- child x:@- value
Set the given child's x to value.  The default implementation of
this method uses `rubber-sheet' geometry management as explained in
the comment to BWidget's #x method.  You should not use this
method, which is automatically called by the child's #x:@- method,
but you might want to override it.  The child's property slots whose
name ends with `Geom' are reserved for this method. This method
should never fail -- if it doesn't apply to the kind of geometry
management that the receiver does, just do nothing.


@meindex child:@-xOffset:@-
@slindex x
@slindex xOffset:@-
@slindex xOffset:@-
@item child:@- child xOffset:@- value
Adjust the given child's x by a fixed amount of value pixel.  This
is meaningful for the default implementation, using `rubber-sheet'
geometry management as explained in the comment to BWidget's #x and
#xOffset:@- methods.  You should not use this method, which is
automatically called by the child's #xOffset:@- method, but you
might want to override it.  if it doesn't apply to the kind of
geometry management that the receiver does, just add value to the
current x of the widget.


@meindex child:@-y:@-
@slindex y
@slindex y:@-
@item child:@- child y:@- value
Set the given child's y to value.  The default implementation of
this method uses `rubber-sheet' geometry management as explained in
the comment to BWidget's #y method.  You should not use this
method, which is automatically called by the child's #y:@- method,
but you might want to override it.  The child's property slots whose
name ends with `Geom' are reserved for this method. This method
should never fail -- if it doesn't apply to the kind of geometry
management that the receiver does, just do nothing.


@meindex child:@-yOffset:@-
@slindex y
@slindex yOffset:@-
@slindex yOffset:@-
@item child:@- child yOffset:@- value
Adjust the given child's y by a fixed amount of value pixel.  This
is meaningful for the default implementation, using `rubber-sheet'
geometry management as explained in the comment to BWidget's #y and
#yOffset:@- methods.  You should not use this method, which is
automatically called by the child's #yOffset:@- method, but you
might want to override it.  if it doesn't apply to the kind of
geometry management that the receiver does, just add value to the
current y of the widget.


@meindex extent
@item extent
Answer a Point containing the receiver's size


@meindex extent:@-
@item extent:@- extent
Set the receiver's size to the width and height contained in extent
(a Point).


@meindex height
@slindex heightOffset:@-
@item height
Answer the `variable' part of the receiver's height within the parent
widget. The value returned does not include any fixed amount of
pixels indicated by #heightOffset:@- and must be interpreted in a relative
fashion:@- the ratio of the returned value to the current size of the
parent will be preserved upon resize. This apparently complicated
method is known as `rubber sheet' geometry management.  Behavior
if the left or right edges are not within the client area of the
parent is not defined -- the window might be clamped or might be
positioned according to the specification.


@meindex height:@-
@item height:@- value
Set to `value' the height of the widget within the parent widget. The
value is specified in a relative fashion as an integer, so that the
ratio of `value' to the current size of the parent will be
preserved upon resize. This apparently complicated method is known
as `rubber sheet' geometry management.


@meindex heightAbsolute
@item heightAbsolute
Force a recalculation of the layout of widgets in the receiver's
parent, then answer the current height of the receiver in pixels.


@meindex heightChild:@-
@slindex height
@slindex height
@item heightChild:@- child
Answer the given child's height.  The default implementation of this
method uses `rubber-sheet' geometry management as explained in
the comment to BWidget's #height method.  You should not use this
method, which is automatically called by the child's #height method,
but you might want to override.  The child's property slots whose
name ends with `Geom' are reserved for this method.  This method
should never fail -- if it doesn't apply to the kind of geometry
management that the receiver does, just return 0.


@meindex heightOffset
@slindex height:@-
@item heightOffset
Private - Answer the pixels to be added or subtracted to the height
of the receiver, with respect to the value set in a relative fashion
through the #height:@- method.


@meindex heightOffset:@-
@slindex height:@-
@slindex inset:@-
@item heightOffset:@- value
Add or subtract to the height of the receiver a fixed amount of `value'
pixels, with respect to the value set in a relative fashion through
the #height:@- method.  Usage of this method is deprecated; use #inset:@-
and BContainers instead.


@meindex heightPixels:@-
@slindex height
@slindex height
@slindex height:@-
@item heightPixels:@- value
Set the current height of the receiver to `value' pixels. Note that,
after calling this method, #height will answer 0, which is logical
considering that there is no `variable' part of the size (refer
to #height and #height:@- for more explanations).


@meindex inset:@-
@item inset:@- pixels
Inset the receiver's bounding box by the specified amount.


@meindex left:@-top:@-right:@-bottom:@-
@item left:@- left top:@- top right:@- right bottom:@- bottom
Set the bounding box of the receiver through its components.


@meindex pos:@-
@item pos:@- position
Set the receiver's origin to the width and height contained in position
(a Point).


@meindex posHoriz:@-
@item posHoriz:@- aBlox
Position the receiver immediately to the right of aBlox.


@meindex posVert:@-
@item posVert:@- aBlox
Position the receiver just below aBlox.


@meindex stretch:@-
@item stretch:@- aBoolean
This method is only considered when on the path from the receiver
to its toplevel there is a BContainer.  It decides whether we are
among the widgets that are stretched to fill the entire width of
the BContainer.


@meindex width
@slindex widthOffset:@-
@item width
Answer the `variable' part of the receiver's width within the parent
widget. The value returned does not include any fixed amount of
pixels indicated by #widthOffset:@- and must be interpreted in a relative
fashion:@- the ratio of the returned value to the current size of the
parent will be preserved upon resize. This apparently complicated
method is known as `rubber sheet' geometry management.  Behavior
if the left or right edges are not within the client area of the
parent is not defined -- the window might be clamped or might be
positioned according to the specification.


@meindex width:@-
@item width:@- value
Set to `value' the width of the widget within the parent widget. The
value is specified in a relative fashion as an integer, so that the
ratio of `value' to the current size of the parent will be
preserved upon resize. This apparently complicated method is known
as `rubber sheet' geometry management.


@meindex width:@-height:@-
@item width:@- xSize height:@- ySize
Set the size of the receiver through its components xSize and ySize.


@meindex widthAbsolute
@item widthAbsolute
Force a recalculation of the layout of widgets in the receiver's
parent, then answer the current width of the receiver in pixels.


@meindex widthChild:@-
@slindex width
@slindex width
@item widthChild:@- child
Answer the given child's width.  The default implementation of this
method uses `rubber-sheet' geometry management as explained in
the comment to BWidget's #width method.  You should not use this
method, which is automatically called by the child's #width method,
but you might want to override.  The child's property slots whose
name ends with `Geom' are reserved for this method.  This method
should never fail -- if it doesn't apply to the kind of geometry
management that the receiver does, just return 0.


@meindex widthOffset
@slindex width:@-
@item widthOffset
Private - Answer the pixels to be added or subtracted to the width
of the receiver, with respect to the value set in a relative fashion
through the #width:@- method.


@meindex widthOffset:@-
@slindex width:@-
@slindex inset:@-
@item widthOffset:@- value
Add or subtract to the width of the receiver a fixed amount of `value'
pixels, with respect to the value set in a relative fashion through
the #width:@- method.  Usage of this method is deprecated; use #inset:@-
and BContainers instead.


@meindex widthPixels:@-
@slindex width
@slindex width
@slindex width:@-
@item widthPixels:@- value
Set the current width of the receiver to `value' pixels. Note that,
after calling this method, #width will answer 0, which is logical
considering that there is no `variable' part of the size (refer
to #width and #width:@- for more explanations).


@meindex x
@slindex xOffset:@-
@item x
Answer the `variable' part of the receiver's x within the parent
widget. The value returned does not include any fixed amount of
pixels indicated by #xOffset:@- and must be interpreted in a relative
fashion:@- the ratio of the returned value to the current size of the
parent will be preserved upon resize. This apparently complicated
method is known as `rubber sheet' geometry management.  Behavior
if the left or right edges are not within the client area of the
parent is not defined -- the window might be clamped or might be
positioned according to the specification.


@meindex x:@-
@item x:@- value
Set to `value' the x of the widget within the parent widget. The
value is specified in a relative fashion as an integer, so that the
ratio of `value' to the current size of the parent will be
preserved upon resize. This apparently complicated method is known
as `rubber sheet' geometry management.


@meindex x:@-y:@-
@item x:@- xPos y:@- yPos
Set the origin of the receiver through its components xPos and yPos.


@meindex x:@-y:@-width:@-height:@-
@item x:@- xPos y:@- yPos width:@- xSize height:@- ySize
Set the bounding box of the receiver through its origin and
size.


@meindex xAbsolute
@item xAbsolute
Force a recalculation of the layout of widgets in the receiver's
parent, then answer the current x of the receiver in pixels.


@meindex xChild:@-
@slindex x
@slindex x
@item xChild:@- child
Answer the given child's x.  The default implementation of this
method uses `rubber-sheet' geometry management as explained in
the comment to BWidget's #x method.  You should not use this
method, which is automatically called by the child's #x method,
but you might want to override.  The child's property slots whose
name ends with `Geom' are reserved for this method.  This method
should never fail -- if it doesn't apply to the kind of geometry
management that the receiver does, just return 0.


@meindex xOffset
@slindex x:@-
@item xOffset
Private - Answer the pixels to be added or subtracted to the x
of the receiver, with respect to the value set in a relative fashion
through the #x:@- method.


@meindex xOffset:@-
@slindex x:@-
@slindex inset:@-
@item xOffset:@- value
Add or subtract to the x of the receiver a fixed amount of `value'
pixels, with respect to the value set in a relative fashion through
the #x:@- method.  Usage of this method is deprecated; use #inset:@-
and BContainers instead.


@meindex xPixels:@-
@slindex x
@slindex x
@slindex x:@-
@item xPixels:@- value
Set the current x of the receiver to `value' pixels. Note that,
after calling this method, #x will answer 0, which is logical
considering that there is no `variable' part of the size (refer
to #x and #x:@- for more explanations).


@meindex xRoot
@item xRoot
Answer the x position of the receiver with respect to the
top-left corner of the desktop (including the offset of the
virtual root window under X).


@meindex y
@slindex yOffset:@-
@item y
Answer the `variable' part of the receiver's y within the parent
widget. The value returned does not include any fixed amount of
pixels indicated by #yOffset:@- and must be interpreted in a relative
fashion:@- the ratio of the returned value to the current size of the
parent will be preserved upon resize. This apparently complicated
method is known as `rubber sheet' geometry management.  Behavior
if the left or right edges are not within the client area of the
parent is not defined -- the window might be clamped or might be
positioned according to the specification.


@meindex y:@-
@item y:@- value
Set to `value' the y of the widget within the parent widget. The
value is specified in a relative fashion as an integer, so that the
ratio of `value' to the current size of the parent will be
preserved upon resize. This apparently complicated method is known
as `rubber sheet' geometry management.


@meindex yAbsolute
@item yAbsolute
Force a recalculation of the layout of widgets in the receiver's
parent, then answer the current y of the receiver in pixels.


@meindex yChild:@-
@slindex y
@slindex y
@item yChild:@- child
Answer the given child's y.  The default implementation of this
method uses `rubber-sheet' geometry management as explained in
the comment to BWidget's #y method.  You should not use this
method, which is automatically called by the child's #y method,
but you might want to override.  The child's property slots whose
name ends with `Geom' are reserved for this method.  This method
should never fail -- if it doesn't apply to the kind of geometry
management that the receiver does, just return 0.


@meindex yOffset
@slindex y:@-
@item yOffset
Private - Answer the pixels to be added or subtracted to the y
of the receiver, with respect to the value set in a relative fashion
through the #y:@- method.


@meindex yOffset:@-
@slindex y:@-
@slindex inset:@-
@item yOffset:@- value
Add or subtract to the y of the receiver a fixed amount of `value'
pixels, with respect to the value set in a relative fashion through
the #y:@- method.  Usage of this method is deprecated; use #inset:@-
and BContainers instead.


@meindex yPixels:@-
@slindex y
@slindex y
@slindex y:@-
@item yPixels:@- value
Set the current y of the receiver to `value' pixels. Note that,
after calling this method, #y will answer 0, which is logical
considering that there is no `variable' part of the size (refer
to #y and #y:@- for more explanations).


@meindex yRoot
@item yRoot
Answer the y position of the receiver with respect to the
top-left corner of the desktop (including the offset of the
virtual root window under X).


@end table



@node BLOX.BWidget-widget protocol
@subsection BLOX.BWidget:@- widget protocol

@table @b
@meindex activate
@item activate
At any given time, one window on each display is designated
as the focus window; any key press or key release events for
the display are sent to that window. This method allows one
to choose which window will have the focus in the receiver's
display

If the application currently has the input focus on the receiver's
display, this method resets the input focus for the receiver's
display to the receiver. If the application doesn't currently have the
input focus on the receiver's display, Blox will remember the receiver
as the focus for its top-level; the next time the focus arrives at the
top-level, it will be redirected to the receiver (this is because
most window managers will set the focus only to top-level windows,
leaving it up to the application to redirect the focus among the
children of the top-level).


@meindex activateNext
@slindex tabStop:@-
@item activateNext
Activate the next widget in the focus `tabbing' order.  The focus
order depends on the widget creation order; you can set which widgets
are in the order with the #tabStop:@- method.


@meindex activatePrevious
@slindex tabStop:@-
@item activatePrevious
Activate the previous widget in the focus `tabbing' order.  The focus
order depends on the widget creation order; you can set which widgets
are in the order with the #tabStop:@- method.


@meindex bringToTop
@item bringToTop
Raise the receiver so that it is above all of its siblings in the
widgets' z-order; the receiver will not be obscured by any siblings and
will obscure any siblings that overlap it.


@meindex isActive
@item isActive
Return whether the receiver is the window that currently owns the focus
on its display.


@meindex sendToBack
@item sendToBack
Lower the receiver so that it is below all of its siblings in the
widgets' z-order; the receiver will be obscured by any siblings that
overlap it and will not obscure any siblings.


@end table

@node BLOX.BWindow
@section BLOX.BWindow
@clindex BLOX.BWindow

@table @b
@item Defined in namespace BLOX
@itemx Superclass: BLOX.BForm
@itemx Category: Graphics-Windows
I am the boss. Nothing else could be viewed or interacted with if
it wasn't for me... )):@-->
@end table

@menu
* BLOX.BWindow class-instance creation::  (class)
* BLOX.BWindow-accessing::  (instance)
* BLOX.BWindow-widget protocol::  (instance)
@end menu



@node BLOX.BWindow class-instance creation
@subsection BLOX.BWindow class:@- instance creation

@table @b
@meindex new
@item new
Answer a new top-level window.


@meindex new:@-
@item new:@- label
Answer a new top-level window with `label' as its title bar caption.


@meindex popup:@-
@item popup:@- initializationBlock
This method should not be called for instances of this class.

@end table



@node BLOX.BWindow-accessing
@subsection BLOX.BWindow:@- accessing

@table @b
@meindex callback
@item callback
Answer a DirectedMessage that is sent to verify whether the
receiver must be destroyed when the user asks to unmap it.


@meindex callback:@-message:@-
@item callback:@- aReceiver message:@- aSymbol
Set up so that aReceiver is sent the aSymbol message (the name of
a zero- or one-argument selector) when the user asks to unmap the
receiver.  If the method accepts an argument, the receiver is passed.

If the method returns true, the window and its children are
destroyed (which is the default action, taken if no callback is
set up).  If the method returns false, the window is left in
place.


@meindex invokeCallback
@item invokeCallback
Generate a synthetic callback, destroying the window if no
callback was set up or if the callback method answers true.


@meindex label
@item label
Answer the value of the label option for the widget.

Specifies a string to be displayed inside the widget. The way in which the
string is displayed depends on the particular widget and may be determined
by other options, such as anchor. For windows, this is the title of the window.


@meindex label:@-
@item label:@- value
Set the value of the label option for the widget.

Specifies a string to be displayed inside the widget. The way in which the
string is displayed depends on the particular widget and may be determined
by other options, such as anchor. For windows, this is the title of the window.


@meindex menu:@-
@item menu:@- value
Set the value of the menu option for the widget.

Specifies a menu widget to be used as a menubar. On the Macintosh, the
menubar will be displayed accross the top of the main monitor. On Microsoft
Windows and all UNIX platforms, the menu will appear accross the toplevel
window as part of the window dressing maintained by the window manager.


@meindex resizable
@item resizable
Answer the value of the resizable option for the widget.

Answer whether the user can be resize the window or not. If resizing is
disabled, then the window's size will be the size from the most recent
interactive resize or geometry-setting method. If there has been no such
operation then the window's natural size will be used.


@meindex resizable:@-
@item resizable:@- value
Set the value of the resizable option for the widget.

Answer whether the user can be resize the window or not. If resizing is
disabled, then the window's size will be the size from the most recent
interactive resize or geometry-setting method. If there has been no such
operation then the window's natural size will be used.


@end table



@node BLOX.BWindow-widget protocol
@subsection BLOX.BWindow:@- widget protocol

@table @b
@meindex center
@item center
Center the window in the screen


@meindex centerIn:@-
@item centerIn:@- view
Center the window in the given widget


@meindex height
@item height
Answer the height of the window, as deduced from the geometry
that the window manager imposed on the window.


@meindex height:@-
@item height:@- anInteger
Ask the window manager to give the given height to the window.


@meindex heightAbsolute
@item heightAbsolute
Answer the height of the window, as deduced from the geometry
that the window manager imposed on the window.


@meindex heightOffset:@-
@item heightOffset:@- value
This method should not be called for instances of this class.

@meindex iconify
@item iconify
Map a window and in iconified state.  If a window has not been
mapped yet, this is achieved by mapping the window in withdrawn
state first, and then iconifying it.


@meindex isMapped
@item isMapped
Answer whether the window is mapped


@meindex isWindow
@item isWindow
Answer `true'.

@meindex map
@item map
Map the window and bring it to the topmost position in the Z-order.


@meindex modalMap
@item modalMap
Map the window while establishing an application-local grab for it.
An event loop is started that ends only after the window has been
destroyed.

When a grab is set for a particular window, all pointer events are
restructed to the grab window and its descendants in Blox's window
hierarchy.  Whenever the pointer is within the grab window's subtree,
the pointer will behave exactly the same as if there had been no grab
grab at all and all events will be reported in the normal fashion.
When the pointer is outside the window's tree, button presses and
releases and mouse motion events are reported to the grabbing window,
and window entry and window exit events are ignored. In other words,
windows outside the grab subtree will be visible on the screen but
they will be insensitive until the grab is released.  The
tree of windows underneath the grab window can include top-level windows,
in which case all of those top-level windows and their descendants will
continue to receive mouse events during the grab.  Keyboard events (key
presses and key releases) are delivered as usual:@-  the window manager
controls which application receives keyboard events, and
if they are sent to any window in the grabbing application then
they are redirected to the window owning the focus.


@meindex state
@item state
Set the value of the state option for the window.

Specifies one of four states for the window:@- either normal, iconic,
withdrawn, or (Windows only) zoomed.


@meindex state:@-
@slindex map
@slindex unmap
@item state:@- aSymbol
Raise an error. To set a BWindow's state, use #map and #unmap.


@meindex unmap
@item unmap
Unmap a window, causing it to be forgotten about by the window manager


@meindex width
@item width
Answer the width of the window, as deduced from the geometry
that the window manager imposed on the window.


@meindex width:@-
@item width:@- anInteger
Ask the window manager to give the given width to the window.


@meindex width:@-height:@-
@item width:@- xSize height:@- ySize
Ask the window manager to give the given width and height to
the window.


@meindex widthAbsolute
@item widthAbsolute
Answer the width of the window, as deduced from the geometry
that the window manager imposed on the window.


@meindex widthOffset:@-
@item widthOffset:@- value
This method should not be called for instances of this class.

@meindex window
@item window
Answer the receiver.

@meindex x
@item x
Answer the x coordinate of the window's top-left corner, as
deduced from the geometry that the window manager imposed on
the window.


@meindex x:@-
@item x:@- anInteger
Ask the window manager to move the window's left border
to the given x coordinate, keeping the size unchanged


@meindex x:@-y:@-
@item x:@- xPos y:@- yPos
Ask the window manager to move the window's top-left corner
to the given coordinates, keeping the size unchanged


@meindex x:@-y:@-width:@-height:@-
@item x:@- xPos y:@- yPos width:@- xSize height:@- ySize
Ask the window manager to give the requested geometry
to the window.


@meindex xAbsolute
@item xAbsolute
Answer the x coordinate of the window's top-left corner, as
deduced from the geometry that the window manager imposed on
the window.


@meindex xOffset:@-
@item xOffset:@- value
This method should not be called for instances of this class.

@meindex y
@item y
Answer the y coordinate of the window's top-left corner, as
deduced from the geometry that the window manager imposed on
the window.


@meindex y:@-
@item y:@- anInteger
Ask the window manager to move the window's left border
to the given y coordinate, keeping the size unchanged


@meindex yAbsolute
@item yAbsolute
Answer the y coordinate of the window's top-left corner, as
deduced from the geometry that the window manager imposed on
the window.


@meindex yOffset:@-
@item yOffset:@- value
This method should not be called for instances of this class.

@end table

@node BLOX.Gui
@section BLOX.Gui
@clindex BLOX.Gui

@table @b
@item Defined in namespace BLOX
@itemx Superclass: Object
@itemx Category: Graphics-Windows
I am a small class which serves as a base for complex objects which
expose an individual protocol but internally use a Blox widget for
creating their user interface.
@end table

@menu
* BLOX.Gui-accessing::  (instance)
@end menu



@node BLOX.Gui-accessing
@subsection BLOX.Gui:@- accessing

@table @b
@meindex blox
@item blox
Return instance of blox subclass which implements window


@meindex blox:@-
@item blox:@- aBlox
Set instance of blox subclass which implements window


@end table


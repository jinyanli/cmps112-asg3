This is gst-libs.info, produced by makeinfo version 4.13 from
/home/ich/source/smalltalk/release/smalltalk/doc/gst-libs-fixed.texi.

INFO-DIR-SECTION Software development
START-INFO-DIR-ENTRY
* Smalltalk libraries: (gst-libs).      The GNU Smalltalk class libraries.
END-INFO-DIR-ENTRY

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.2 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with no Front-Cover Texts,
     and with no Back-Cover Texts.  A copy of the license is included
     in the section entitled "GNU Free Documentation License".


File: gst-libs.info,  Node: Sockets.AbstractSocket class-well known ports,  Next: Sockets.AbstractSocket-accessing,  Prev: Sockets.AbstractSocket class-timed-out operations,  Up: Sockets.AbstractSocket

6.1.4 Sockets.AbstractSocket class: well known ports
----------------------------------------------------

defaultPortAt: protocol
     Answer the port that is used (by default) for the given service
     (high level protocol)

defaultPortAt: protocol ifAbsent: port
     Answer the port that is used (by default) for the given service
     (high level protocol), or the specified port if none is registered.

defaultPortAt: protocol put: port
     Associate the given port to the service specified by `protocol'.

portCmdServer
     Answer the port on which the rsh daemon listens

portDNS
     Answer the port on which the DNS listens

portDayTime
     Answer the port on which the TOD service listens

portDiscard
     Answer the port on which the DISCARD service listens

portEcho
     Answer the port on which the ECHO service listens

portExecServer
     Answer the port on which the exec server listens

portFTP
     Answer the port on which the FTP daemon listens

portFinger
     Answer the port on which the finger daemon listens

portGopher
     Answer the port on which the Gopher daemon listens

portHTTP
     Answer the port on which the http daemon listens

portLoginServer
     Answer the port on which the rlogin daemon listens

portNNTP
     Answer the port on which the nntp daemon listens

portNetStat
     Answer the port on which the NETSTAT service listens

portPOP3
     Answer the port on which the pop3 daemon listens

portReserved
     Answer the last port reserved to privileged processes

portSMTP
     Answer the port on which the SMTP daemon listens

portSSH
     Answer the port on which the SSH daemon listens

portSystat
     Answer the port on which the SYSTAT service listens

portTelnet
     Answer the port on which the TELNET daemon listens

portTimeServer
     Answer the port on which the time server listens

portWhois
     Answer the port on which the WHOIS daemon listens



File: gst-libs.info,  Node: Sockets.AbstractSocket-accessing,  Next: Sockets.AbstractSocket-printing,  Prev: Sockets.AbstractSocket class-well known ports,  Up: Sockets.AbstractSocket

6.1.5 Sockets.AbstractSocket: accessing
---------------------------------------

address
     Answer an IP address that is of common interest (this can be either
     the local or the remote address, according to the definition in the
     subclass).

available
     Answer whether there is data available on the socket.  Same as
     #canRead, present for backwards compatibility.

canRead
     Answer whether there is data available on the socket.

canWrite
     Answer whether there is free space in the socket's write buffer.

close
     Close the socket represented by the receiver.

flush
     Flush any buffers used by the receiver.

isOpen
     Answer whether the connection between the receiver and the remote
     endpoint is still alive.

isPeerAlive
     Answer whether the connection with the peer remote machine is still
     valid.

localAddress
     Answer the local IP address of the socket.

localPort
     Answer the local IP port of the socket.

port
     Answer an IP port that is of common interest (this can be the port
     for either the local or remote endpoint, according to the
     definitions in the subclass

remoteAddress
     Answer the IP address of the socket's remote endpoint.

remotePort
     Answer the IP port of the socket's remote endpoint.



File: gst-libs.info,  Node: Sockets.AbstractSocket-printing,  Next: Sockets.AbstractSocket-socket options,  Prev: Sockets.AbstractSocket-accessing,  Up: Sockets.AbstractSocket

6.1.6 Sockets.AbstractSocket: printing
--------------------------------------

printOn: aStream
     Print a representation of the receiver on aStream



File: gst-libs.info,  Node: Sockets.AbstractSocket-socket options,  Next: Sockets.AbstractSocket-stream protocol,  Prev: Sockets.AbstractSocket-printing,  Up: Sockets.AbstractSocket

6.1.7 Sockets.AbstractSocket: socket options
--------------------------------------------

soLinger
     Answer the number of seconds that the socket is allowed to wait if
     it promises reliable delivery but has unacknowledged/untransmitted
     packets when it is closed, or nil if those packets are left to
     their destiny or discarded.

soLinger: linger
     Set the number of seconds that the socket is allowed to wait if it
     promises reliable delivery but has unacknowledged/untransmitted
     packets when it is closed.

soLingerOff
     Specify that, even if the socket promises reliable delivery, any
     packets that are unacknowledged/untransmitted when it is closed
     are to be left to their destiny or discarded.

species
     Answer `String'.



File: gst-libs.info,  Node: Sockets.AbstractSocket-stream protocol,  Next: Sockets.AbstractSocket-testing,  Prev: Sockets.AbstractSocket-socket options,  Up: Sockets.AbstractSocket

6.1.8 Sockets.AbstractSocket: stream protocol
---------------------------------------------

atEnd
     By default, answer whether the connection is still open.

next
     Read another character from the socket, failing if the connection
     is dead.

next: n putAll: aCollection startingAt: pos
     Write `char' to the socket, failing if the connection is dead.  The
     SIGPIPE signal is automatically caught and ignored by the system.

nextPut: char
     Write `char' to the socket, failing if the connection is dead.  The
     SIGPIPE signal is automatically caught and ignored by the system.



File: gst-libs.info,  Node: Sockets.AbstractSocket-testing,  Prev: Sockets.AbstractSocket-stream protocol,  Up: Sockets.AbstractSocket

6.1.9 Sockets.AbstractSocket: testing
-------------------------------------

isExternalStream
     Answer whether the receiver streams on a file or socket.



File: gst-libs.info,  Node: Sockets.AbstractSocketImpl,  Next: Sockets.CAddrInfoStruct,  Prev: Sockets.AbstractSocket,  Up: Sockets package

6.2 Sockets.AbstractSocketImpl
==============================

Defined in namespace Sockets
Superclass: FileDescriptor
Category: Sockets-Protocols
     This abstract class serves as the parent class for socket
     implementations.  The implementation class serves an intermediary
     to routines that perform the actual socket operations.  It hides
     the buffering and blocking behavior of the Socket classes.

     A default implementation is provided by each address family, but
     this can be changed by class methods on SocketAddress sublcasses.

* Menu:

* Sockets.AbstractSocketImpl class-abstract::  (class)
* Sockets.AbstractSocketImpl class-C call-outs::  (class)
* Sockets.AbstractSocketImpl class-C constants::  (class)
* Sockets.AbstractSocketImpl class-socket creation::  (class)
* Sockets.AbstractSocketImpl-accessing::  (instance)
* Sockets.AbstractSocketImpl-asynchronous operations::  (instance)
* Sockets.AbstractSocketImpl-C call-outs::  (instance)
* Sockets.AbstractSocketImpl-C constants::  (instance)
* Sockets.AbstractSocketImpl-socket operations::  (instance)
* Sockets.AbstractSocketImpl-socket options::  (instance)


File: gst-libs.info,  Node: Sockets.AbstractSocketImpl class-abstract,  Next: Sockets.AbstractSocketImpl class-C call-outs,  Up: Sockets.AbstractSocketImpl

6.2.1 Sockets.AbstractSocketImpl class: abstract
------------------------------------------------

addressClass
     Answer the class responsible for handling addresses for the
     receiver

protocol
     Answer the protocol parameter for `create'

socketType
     Answer the socket type parameter for `create'.



File: gst-libs.info,  Node: Sockets.AbstractSocketImpl class-C call-outs,  Next: Sockets.AbstractSocketImpl class-C constants,  Prev: Sockets.AbstractSocketImpl class-abstract,  Up: Sockets.AbstractSocketImpl

6.2.2 Sockets.AbstractSocketImpl class: C call-outs
---------------------------------------------------

accept: socket peer: peer addrLen: len
     Not commented.

bind: socket to: addr addrLen: len
     Not commented.

connect: socket to: addr addrLen: len
     Not commented.

create: family type: type protocol: protocol
     Not commented.

getPeerName: socket addr: addr addrLen: len
     Not commented.

getSockName: socket addr: addr addrLen: len
     Not commented.

listen: socket log: len
     Not commented.

option: socket level: level at: name get: value size: len
     Not commented.

option: socket level: level at: name put: value size: len
     Not commented.

receive: socket buffer: buf size: len flags: flags from: addr size: addrLen
     Not commented.

send: socket buffer: buf size: len flags: flags to: addr size: addrLen
     Not commented.



File: gst-libs.info,  Node: Sockets.AbstractSocketImpl class-C constants,  Next: Sockets.AbstractSocketImpl class-socket creation,  Prev: Sockets.AbstractSocketImpl class-C call-outs,  Up: Sockets.AbstractSocketImpl

6.2.3 Sockets.AbstractSocketImpl class: C constants
---------------------------------------------------

soLinger
     Not commented.

soReuseAddr
     Not commented.

sockDgram
     Not commented.

sockRDM
     Not commented.

sockRaw
     Not commented.

sockStream
     Not commented.

solSocket
     Not commented.



File: gst-libs.info,  Node: Sockets.AbstractSocketImpl class-socket creation,  Next: Sockets.AbstractSocketImpl-accessing,  Prev: Sockets.AbstractSocketImpl class-C constants,  Up: Sockets.AbstractSocketImpl

6.2.4 Sockets.AbstractSocketImpl class: socket creation
-------------------------------------------------------

newFor: addressClass
     Create a socket for the receiver.



File: gst-libs.info,  Node: Sockets.AbstractSocketImpl-accessing,  Next: Sockets.AbstractSocketImpl-asynchronous operations,  Prev: Sockets.AbstractSocketImpl class-socket creation,  Up: Sockets.AbstractSocketImpl

6.2.5 Sockets.AbstractSocketImpl: accessing
-------------------------------------------

connectTo: ipAddress port: port
     Connect the receiver to the given IP address and port. `Connecting'
     means attaching the remote endpoint of the socket.

localAddress
     Answer the address of the local endpoint of the socket (even if IP
     is not being used, this identifies the machine that is bound to the
     socket).

localPort
     Answer the port of the local endpoint of the socket (even if IP is
     not being used, this identifies the service or process that is
     bound to the socket).

remoteAddress
     Answer the address of the remote endpoint of the socket (even if IP
     is not being used, this identifies the machine to which the socket
     is connected).

remotePort
     Answer the port of the remote endpoint of the socket (even if IP
     is not being used, this identifies the service or process to which
     the socket is connected).



File: gst-libs.info,  Node: Sockets.AbstractSocketImpl-asynchronous operations,  Next: Sockets.AbstractSocketImpl-C call-outs,  Prev: Sockets.AbstractSocketImpl-accessing,  Up: Sockets.AbstractSocketImpl

6.2.6 Sockets.AbstractSocketImpl: asynchronous operations
---------------------------------------------------------

ensureReadable
     If the file is open, wait until data can be read from it.  The wait
     allows other Processes to run.

ensureWriteable
     If the file is open, wait until we can write to it.  The wait
     allows other Processes to run.

waitForException
     If the file is open, wait until an exceptional condition (such as
     presence of out of band data) has occurred on it.  The wait allows
     other Processes to run.



File: gst-libs.info,  Node: Sockets.AbstractSocketImpl-C call-outs,  Next: Sockets.AbstractSocketImpl-C constants,  Prev: Sockets.AbstractSocketImpl-asynchronous operations,  Up: Sockets.AbstractSocketImpl

6.2.7 Sockets.AbstractSocketImpl: C call-outs
---------------------------------------------

accept: socket peer: peer addrLen: len
     Not commented.

bind: socket to: addr addrLen: len
     Not commented.

connect: socket to: addr addrLen: len
     Not commented.

create: family type: type protocol: protocol
     Not commented.

getPeerName: socket addr: addr addrLen: len
     Not commented.

getSockName: socket addr: addr addrLen: len
     Not commented.

listen: socket log: len
     Not commented.

option: socket level: level at: name get: value size: len
     Not commented.

option: socket level: level at: name put: value size: len
     Not commented.

receive: socket buffer: buf size: len flags: flags from: addr size: addrLen
     Not commented.

send: socket buffer: buf size: len flags: flags to: addr size: addrLen
     Not commented.



File: gst-libs.info,  Node: Sockets.AbstractSocketImpl-C constants,  Next: Sockets.AbstractSocketImpl-socket operations,  Prev: Sockets.AbstractSocketImpl-C call-outs,  Up: Sockets.AbstractSocketImpl

6.2.8 Sockets.AbstractSocketImpl: C constants
---------------------------------------------

soError: socket
     Not commented.



File: gst-libs.info,  Node: Sockets.AbstractSocketImpl-socket operations,  Next: Sockets.AbstractSocketImpl-socket options,  Prev: Sockets.AbstractSocketImpl-C constants,  Up: Sockets.AbstractSocketImpl

6.2.9 Sockets.AbstractSocketImpl: socket operations
---------------------------------------------------

accept: implementationClass
     Accept a connection on the receiver, and create a new instance of
     implementationClass that will deal with the newly created active
     server socket.

bindTo: ipAddress port: port
     Bind the receiver to the given IP address and port. `Binding' means
     attaching the local endpoint of the socket.

fileOp: ioFuncIndex
     Private - Used to limit the number of primitives used by
     FileStreams

fileOp: ioFuncIndex ifFail: aBlock
     Private - Used to limit the number of primitives used by
     FileStreams.

fileOp: ioFuncIndex with: arg1
     Private - Used to limit the number of primitives used by
     FileStreams

fileOp: ioFuncIndex with: arg1 ifFail: aBlock
     Private - Used to limit the number of primitives used by
     FileStreams.

fileOp: ioFuncIndex with: arg1 with: arg2
     Private - Used to limit the number of primitives used by
     FileStreams

fileOp: ioFuncIndex with: arg1 with: arg2 ifFail: aBlock
     Private - Used to limit the number of primitives used by
     FileStreams.

fileOp: ioFuncIndex with: arg1 with: arg2 with: arg3
     Private - Used to limit the number of primitives used by
     FileStreams

fileOp: ioFuncIndex with: arg1 with: arg2 with: arg3 ifFail: aBlock
     Private - Used to limit the number of primitives used by
     FileStreams.

getSockName
     Retrieve a ByteArray containing a sockaddr_in struct for the local
     endpoint of the socket.

listen: backlog
     Make the receiver a passive server socket with a pending
     connections queue of the given size.



File: gst-libs.info,  Node: Sockets.AbstractSocketImpl-socket options,  Prev: Sockets.AbstractSocketImpl-socket operations,  Up: Sockets.AbstractSocketImpl

6.2.10 Sockets.AbstractSocketImpl: socket options
-------------------------------------------------

optionAt: opt level: level put: anObject
     Modify the value of a socket option.  The option identifier is in
     `opt' and the level is in `level'.  anObject can be a boolean,
     integer, socket address or ByteArray. A layer over this method is
     provided for the most common socket options, so this will be rarely
     used.

optionAt: opt level: level size: size
     Answer in a ByteArray of the given size the value of a socket
     option.  The option identifier is in `opt' and the level is in
     `level'.  A layer over this method is provided for the most common
     socket options, so this will be rarely used.

soLinger
     Answer the number of seconds by which a `close' operation can block
     to ensure that all the packets have reliably reached the
     destination, or nil if those packets are left to their destiny.

soLinger: linger
     Set the number of seconds by which a `close' operation can block
     to ensure that all the packets have reliably reached the
     destination.  If linger is nil, those packets are left to their
     destiny.

soReuseAddr
     Answer whether another socket can be bound the same local address
     as this one.  If you enable this option, you can actually have two
     sockets with the same Internet port number; but the system won't
     allow you to use the two identically-named sockets in a way that
     would confuse the Internet.  The reason for this option is that
     some higher-level Internet protocols, including FTP, require you
     to keep reusing the same socket number.

soReuseAddr: aBoolean
     Set whether another socket can be bound the same local address as
     this one.

valueWithoutBuffering: aBlock
     Evaluate aBlock, ensuring that any data that it writes to the
     socket is sent immediately to the network.



File: gst-libs.info,  Node: Sockets.CAddrInfoStruct,  Next: Sockets.CSockAddrIn6Struct,  Prev: Sockets.AbstractSocketImpl,  Up: Sockets package

6.3 Sockets.CAddrInfoStruct
===========================

Defined in namespace Sockets
Superclass: CStruct
Category:

* Menu:

* Sockets.CAddrInfoStruct class-C call-outs::  (class)
* Sockets.CAddrInfoStruct-C call-outs::  (instance)
* Sockets.CAddrInfoStruct-C function wrappers::  (instance)


File: gst-libs.info,  Node: Sockets.CAddrInfoStruct class-C call-outs,  Next: Sockets.CAddrInfoStruct-C call-outs,  Up: Sockets.CAddrInfoStruct

6.3.1 Sockets.CAddrInfoStruct class: C call-outs
------------------------------------------------

getaddrinfo: name service: servname hints: hints result: res
     Not commented.



File: gst-libs.info,  Node: Sockets.CAddrInfoStruct-C call-outs,  Next: Sockets.CAddrInfoStruct-C function wrappers,  Prev: Sockets.CAddrInfoStruct class-C call-outs,  Up: Sockets.CAddrInfoStruct

6.3.2 Sockets.CAddrInfoStruct: C call-outs
------------------------------------------

aiAddr
     Not commented.

aiCanonname
     Not commented.

free
     Not commented.



File: gst-libs.info,  Node: Sockets.CAddrInfoStruct-C function wrappers,  Prev: Sockets.CAddrInfoStruct-C call-outs,  Up: Sockets.CAddrInfoStruct

6.3.3 Sockets.CAddrInfoStruct: C function wrappers
--------------------------------------------------

getaddrinfo: name
     Not commented.

getaddrinfo: name service: service
     Not commented.



File: gst-libs.info,  Node: Sockets.CSockAddrIn6Struct,  Next: Sockets.Datagram,  Prev: Sockets.CAddrInfoStruct,  Up: Sockets package

6.4 Sockets.CSockAddrIn6Struct
==============================

Defined in namespace Sockets
Superclass: CStruct
Category:

* Menu:


File: gst-libs.info,  Node: Sockets.Datagram,  Next: Sockets.DatagramSocket,  Prev: Sockets.CSockAddrIn6Struct,  Up: Sockets package

6.5 Sockets.Datagram
====================

Defined in namespace Sockets
Superclass: Object
Category: Sockets-Protocols
     This class models a packet of data that is to be sent across the
     network using a connectionless protocol such as UDP.  It contains
     the data to be send, as well as the destination address and port.
     Note that datagram packets can arrive in any order and are not
     guaranteed to be delivered at all.

     This class can also be used for receiving data from the network.

* Menu:

* Sockets.Datagram class-instance creation::  (class)
* Sockets.Datagram-accessing::  (instance)


File: gst-libs.info,  Node: Sockets.Datagram class-instance creation,  Next: Sockets.Datagram-accessing,  Up: Sockets.Datagram

6.5.1 Sockets.Datagram class: instance creation
-----------------------------------------------

data: aByteArray
     Answer a new datagram with the specified data.

data: aByteArray address: ipAddress port: port
     Answer a new datagram with the specified target socket, and
     aByteArray as its data.

object: object address: ipAddress port: port
     Serialize the object onto a ByteArray, and create a Datagram with
     the object as its contents, and the specified receiver.  Note that
     each invocation of this method creates a separate ObjectDumper; if
     different objects that you're sending are likely to contain
     references to the same objects, you should use
     #object:objectDumper:address:port:.

object: object objectDumper: od address: ipAddress port: port
     Serialize the object onto a ByteArray, and create a Datagram with
     the object as its contents, and the specified receiver.
     Serialization takes place through ObjectDumper passed as `od', and
     the stream attached to the ObjectDumper is resetted every time.
     Using this method is indicated if different objects that you're
     sending are likely to contain references to the same objects.



File: gst-libs.info,  Node: Sockets.Datagram-accessing,  Prev: Sockets.Datagram class-instance creation,  Up: Sockets.Datagram

6.5.2 Sockets.Datagram: accessing
---------------------------------

address
     Answer the address of the target socket

address: ipAddress
     Set the address of the target socket

data
     Answer the data attached to the datagram

data: aByteArray
     Set the data attached to the datagram

dataSize
     Answer the size of the message.

dataSize: aSize
     I am called to update the size...

get
     Parse the data attached to the datagram through a newly created
     ObjectDumper, and answer the resulting object.  This method is
     complementary to #object:address:port:.

getThrough: objectDumper
     Parse the data attached to the datagram through the given
     ObjectDumper without touching the stream to which it is attached,
     and answer the resulting object.  The state of the ObjectDumper,
     though, is updated.  This method is complementary to
     #object:objectDumper:address:port:.

port
     Answer the IP port of the target socket

port: thePort
     Set the IP port of the target socket

size
     I determine the size of the datagram. It is either an explicitly
     specified dataSize, or the size of the whole collection.



File: gst-libs.info,  Node: Sockets.DatagramSocket,  Next: Sockets.DatagramSocketImpl,  Prev: Sockets.Datagram,  Up: Sockets package

6.6 Sockets.DatagramSocket
==========================

Defined in namespace Sockets
Superclass: Sockets.AbstractSocket
Category: Sockets-Streams
     This class models a connectionless datagram socket that sends
     individual packets of data across the network.  In the TCP/IP
     world, this means UDP.  Datagram packets do not have guaranteed
     delivery, or any guarantee about the order the data will be
     received on the remote host.

     This class uses an underlying socket implementation object which is
     a subclass of DatagramSocketImpl.  This is less necessary for
     datagram sockets than for stream sockets (except for hiding some
     methods in FileDescriptor that are not relevant to sockets), but
     it is done for cleanliness and symmetry.

* Menu:

* Sockets.DatagramSocket class-accessing::  (class)
* Sockets.DatagramSocket class-initialization::  (class)
* Sockets.DatagramSocket class-instance creation::  (class)
* Sockets.DatagramSocket-accessing::  (instance)
* Sockets.DatagramSocket-direct operations::  (instance)


File: gst-libs.info,  Node: Sockets.DatagramSocket class-accessing,  Next: Sockets.DatagramSocket class-initialization,  Up: Sockets.DatagramSocket

6.6.1 Sockets.DatagramSocket class: accessing
---------------------------------------------

defaultBufferSize
     Answer the default maximum size for input datagrams.

defaultBufferSize: size
     Set the default maximum size for input datagrams.

defaultImplementationClassFor: aSocketAddressClass
     Answer the default implementation class.  Depending on the
     subclass, this might be the default stream socket implementation
     class of the given address class, or rather its default datagram
     socket implementation class.



File: gst-libs.info,  Node: Sockets.DatagramSocket class-initialization,  Next: Sockets.DatagramSocket class-instance creation,  Prev: Sockets.DatagramSocket class-accessing,  Up: Sockets.DatagramSocket

6.6.2 Sockets.DatagramSocket class: initialization
--------------------------------------------------

initialize
     Initialize the class to use an input datagram size of 128.



File: gst-libs.info,  Node: Sockets.DatagramSocket class-instance creation,  Next: Sockets.DatagramSocket-accessing,  Prev: Sockets.DatagramSocket class-initialization,  Up: Sockets.DatagramSocket

6.6.3 Sockets.DatagramSocket class: instance creation
-----------------------------------------------------

local: ipAddressOrString port: remotePort
     Create a new socket and bind it to the given host (passed as a
     String to be resolved or as an IPAddress), on the given port.

new
     Answer a new datagram socket (by default an UDP socket), without a
     specified local address and port.

port: localPort
     Create a new socket and bind it to the local host on the given
     port.

remote: ipAddressOrString port: remotePort local: ipAddress port: localPort
     Create a new socket and bind it to the given host (passed as a
     String to be resolved or as a SocketAddress), and to the given
     remotePort.  The default destination for the datagrams will be
     ipAddressOrString (if not nil), on the remotePort port.



File: gst-libs.info,  Node: Sockets.DatagramSocket-accessing,  Next: Sockets.DatagramSocket-direct operations,  Prev: Sockets.DatagramSocket class-instance creation,  Up: Sockets.DatagramSocket

6.6.4 Sockets.DatagramSocket: accessing
---------------------------------------

address
     Answer the local address.

bufferSize
     Answer the size of the buffer in which datagrams are stored.

bufferSize: size
     Set the size of the buffer in which datagrams are stored.

datagramClass
     Answer the class used by the socket to return datagrams.

next
     Read a datagram on the socket and answer it.

nextPut: aDatagram
     Send the given datagram on the socket.

peek
     Peek for a datagram on the socket and answer it.

peek: datagram
     Peek for a datagram on the socket, store it in `datagram', and
     answer the datagram itself.

port
     Answer the local port.

receive: datagram
     Read a datagram from the socket, store it in `datagram', and
     answer the datagram itself.



File: gst-libs.info,  Node: Sockets.DatagramSocket-direct operations,  Prev: Sockets.DatagramSocket-accessing,  Up: Sockets.DatagramSocket

6.6.5 Sockets.DatagramSocket: direct operations
-----------------------------------------------

nextFrom: ipAddress port: port
     Answer the next datagram from the given address and port.



File: gst-libs.info,  Node: Sockets.DatagramSocketImpl,  Next: Sockets.DummyStream,  Prev: Sockets.DatagramSocket,  Up: Sockets package

6.7 Sockets.DatagramSocketImpl
==============================

Defined in namespace Sockets
Superclass: Sockets.AbstractSocketImpl
Category: Sockets-Protocols
     This abstract class serves as the parent class for datagram socket
     implementations.

* Menu:

* Sockets.DatagramSocketImpl class-parameters::  (class)
* Sockets.DatagramSocketImpl-accessing::  (instance)
* Sockets.DatagramSocketImpl-C constants::  (instance)
* Sockets.DatagramSocketImpl-socket operations::  (instance)


File: gst-libs.info,  Node: Sockets.DatagramSocketImpl class-parameters,  Next: Sockets.DatagramSocketImpl-accessing,  Up: Sockets.DatagramSocketImpl

6.7.1 Sockets.DatagramSocketImpl class: parameters
--------------------------------------------------

datagramClass
     Answer the datagram class returned by default by instances of this
     class.

socketType
     Answer the socket type parameter for `create'.



File: gst-libs.info,  Node: Sockets.DatagramSocketImpl-accessing,  Next: Sockets.DatagramSocketImpl-C constants,  Prev: Sockets.DatagramSocketImpl class-parameters,  Up: Sockets.DatagramSocketImpl

6.7.2 Sockets.DatagramSocketImpl: accessing
-------------------------------------------

bufferSize
     Answer the size of the buffer in which datagrams are stored.

bufferSize: size
     Set the size of the buffer in which datagrams are stored.



File: gst-libs.info,  Node: Sockets.DatagramSocketImpl-C constants,  Next: Sockets.DatagramSocketImpl-socket operations,  Prev: Sockets.DatagramSocketImpl-accessing,  Up: Sockets.DatagramSocketImpl

6.7.3 Sockets.DatagramSocketImpl: C constants
---------------------------------------------

ipAddMembership
     Not commented.

ipDropMembership
     Not commented.

ipMulticastIf
     Not commented.

ipMulticastTtl
     Not commented.

msgPeek
     Not commented.



File: gst-libs.info,  Node: Sockets.DatagramSocketImpl-socket operations,  Prev: Sockets.DatagramSocketImpl-C constants,  Up: Sockets.DatagramSocketImpl

6.7.4 Sockets.DatagramSocketImpl: socket operations
---------------------------------------------------

next
     Retrieve a datagram from the receiver, answer a new object of the
     receiver's datagram class.

nextPut: aDatagram
     Send aDatagram on the socket

peek
     Peek for a datagram on the receiver, answer a new object of the
     receiver's datagram class.

peek: aDatagram
     Peek for a datagram on the receiver, answer aDatagram modified to
     contain information on the newly received datagram.

receive: aDatagram
     Retrieve a datagram from the receiver, answer aDatagram modified
     to contain information on the newly received datagram.

receive: flags datagram: aDatagram
     Receive a new datagram into `datagram', with the given flags, and
     answer `datagram' itself; this is an abstract method.  The flags
     can be zero to receive the datagram, or `self msgPeek' to only
     peek for it without removing it from the queue.

send: aDatagram to: theReceiver port: port
     Send aDatagram on the socket to the given receiver and port



File: gst-libs.info,  Node: Sockets.DummyStream,  Next: Sockets.ICMP6SocketImpl,  Prev: Sockets.DatagramSocketImpl,  Up: Sockets package

6.8 Sockets.DummyStream
=======================

Defined in namespace Sockets
Superclass: Stream
Category: Sockets-Tests

* Menu:


File: gst-libs.info,  Node: Sockets.ICMP6SocketImpl,  Next: Sockets.ICMPSocketImpl,  Prev: Sockets.DummyStream,  Up: Sockets package

6.9 Sockets.ICMP6SocketImpl
===========================

Defined in namespace Sockets
Superclass: Sockets.RawSocketImpl
Category: Sockets-Protocols
     Unless the application installs its own implementation, this is the
     default socket implementation that will be used for IPv6 raw
     sockets.  It uses C call-outs to implement standard BSD style
     sockets of family AF_INET, type SOCK_RAW, protocol IPPROTO_ICMPV6.

* Menu:

* Sockets.ICMP6SocketImpl class-C constants::  (class)


File: gst-libs.info,  Node: Sockets.ICMP6SocketImpl class-C constants,  Up: Sockets.ICMP6SocketImpl

6.9.1 Sockets.ICMP6SocketImpl class: C constants
------------------------------------------------

protocol
     Not commented.



File: gst-libs.info,  Node: Sockets.ICMPSocketImpl,  Next: Sockets.IP6Address,  Prev: Sockets.ICMP6SocketImpl,  Up: Sockets package

6.10 Sockets.ICMPSocketImpl
===========================

Defined in namespace Sockets
Superclass: Sockets.RawSocketImpl
Category: Sockets-Protocols
     Unless the application installs its own implementation, this is the
     default socket implementation that will be used for IPv4 raw
     sockets.  It uses C call-outs to implement standard BSD style
     sockets of family AF_INET, type SOCK_RAW, protocol IPPROTO_ICMP.

* Menu:

* Sockets.ICMPSocketImpl class-C constants::  (class)


File: gst-libs.info,  Node: Sockets.ICMPSocketImpl class-C constants,  Up: Sockets.ICMPSocketImpl

6.10.1 Sockets.ICMPSocketImpl class: C constants
------------------------------------------------

protocol
     Not commented.



File: gst-libs.info,  Node: Sockets.IP6Address,  Next: Sockets.IPAddress,  Prev: Sockets.ICMPSocketImpl,  Up: Sockets package

6.11 Sockets.IP6Address
=======================

Defined in namespace Sockets
Superclass: Sockets.SocketAddress
Category: Sockets-Protocols
     This class models an IPv6 address.  It also acts as a factory for
     IPv6 stream (TCP), datagram (UDP) and raw sockets.

* Menu:

* Sockets.IP6Address class-C constants::  (class)
* Sockets.IP6Address class-constants::  (class)
* Sockets.IP6Address class-initialization::  (class)
* Sockets.IP6Address class-instance creation::  (class)
* Sockets.IP6Address-accessing::  (instance)
* Sockets.IP6Address-printing::  (instance)


File: gst-libs.info,  Node: Sockets.IP6Address class-C constants,  Next: Sockets.IP6Address class-constants,  Up: Sockets.IP6Address

6.11.1 Sockets.IP6Address class: C constants
--------------------------------------------

addressFamily
     Not commented.

aiAll
     Not commented.

aiV4mapped
     Not commented.

protocolFamily
     Not commented.



File: gst-libs.info,  Node: Sockets.IP6Address class-constants,  Next: Sockets.IP6Address class-initialization,  Prev: Sockets.IP6Address class-C constants,  Up: Sockets.IP6Address

6.11.2 Sockets.IP6Address class: constants
------------------------------------------

addressSize
     Answer the size of an IPv4 address.

version
     Answer the version of IP that the receiver implements.



File: gst-libs.info,  Node: Sockets.IP6Address class-initialization,  Next: Sockets.IP6Address class-instance creation,  Prev: Sockets.IP6Address class-constants,  Up: Sockets.IP6Address

6.11.3 Sockets.IP6Address class: initialization
-----------------------------------------------

createLoopbackHost
     Answer an object representing the loopback host in the address
     family for the receiver.  This is ::1 for IPv4.

createUnknownAddress
     Answer an object representing an unkown address in the address
     family for the receiver

initialize
     Set up the default implementation classes for the receiver



File: gst-libs.info,  Node: Sockets.IP6Address class-instance creation,  Next: Sockets.IP6Address-accessing,  Prev: Sockets.IP6Address class-initialization,  Up: Sockets.IP6Address

6.11.4 Sockets.IP6Address class: instance creation
--------------------------------------------------

fromArray: parts
     Answer a new IP6Address from an array of numbers; the numbers are
     to be thought as the colon-separated numbers in the standard
     numbers-and-colons notation for IPv4 addresses.

fromBytes: aByteArray
     Answer a new IP6Address from a ByteArray containing the bytes in
     the same order as the digit form: 131.175.6.2 would be represented
     as #[131 175 6 2].

fromSockAddr: aByteArray port: portAdaptor
     Private - Answer a new IP6Address from a ByteArray containing a C
     sockaddr_in structure.  The portAdaptor's value is changed to
     contain the port that the structure refers to.

fromString: aString
     Answer a new IP6Address from a String containing the requested
     address in digit form.

new
     This method should not be called for instances of this class.



File: gst-libs.info,  Node: Sockets.IP6Address-accessing,  Next: Sockets.IP6Address-printing,  Prev: Sockets.IP6Address class-instance creation,  Up: Sockets.IP6Address

6.11.5 Sockets.IP6Address: accessing
------------------------------------

asByteArray
     Answer a read-only ByteArray of size four containing the
     receiver's bytes in network order (big-endian)

isMulticast
     Answer whether the receiver reprensents an address reserved for
     multicast datagram connections



File: gst-libs.info,  Node: Sockets.IP6Address-printing,  Prev: Sockets.IP6Address-accessing,  Up: Sockets.IP6Address

6.11.6 Sockets.IP6Address: printing
-----------------------------------

printOn: aStream
     Print the receiver in dot notation.



File: gst-libs.info,  Node: Sockets.IPAddress,  Next: Sockets.MulticastSocket,  Prev: Sockets.IP6Address,  Up: Sockets package

6.12 Sockets.IPAddress
======================

Defined in namespace Sockets
Superclass: Sockets.SocketAddress
Category: Sockets-Protocols
     This class models an IPv4 address.  It also acts as a factory for
     IPv4 stream (TCP), datagram (UDP) and raw sockets.

* Menu:

* Sockets.IPAddress class-C constants::  (class)
* Sockets.IPAddress class-constants::  (class)
* Sockets.IPAddress class-initialization::  (class)
* Sockets.IPAddress class-instance creation::  (class)
* Sockets.IPAddress-accessing::  (instance)
* Sockets.IPAddress-printing::  (instance)


File: gst-libs.info,  Node: Sockets.IPAddress class-C constants,  Next: Sockets.IPAddress class-constants,  Up: Sockets.IPAddress

6.12.1 Sockets.IPAddress class: C constants
-------------------------------------------

addressFamily
     Not commented.

protocolFamily
     Not commented.



File: gst-libs.info,  Node: Sockets.IPAddress class-constants,  Next: Sockets.IPAddress class-initialization,  Prev: Sockets.IPAddress class-C constants,  Up: Sockets.IPAddress

6.12.2 Sockets.IPAddress class: constants
-----------------------------------------

addressSize
     Answer the size of an IPv4 address.

version
     Answer the version of IP that the receiver implements.



File: gst-libs.info,  Node: Sockets.IPAddress class-initialization,  Next: Sockets.IPAddress class-instance creation,  Prev: Sockets.IPAddress class-constants,  Up: Sockets.IPAddress

6.12.3 Sockets.IPAddress class: initialization
----------------------------------------------

createLoopbackHost
     Answer an object representing the loopback host in the address
     family for the receiver.  This is 127.0.0.1 for IPv4.

createUnknownAddress
     Answer an object representing an unkown address in the address
     family for the receiver

initialize
     Set up the default implementation classes for the receiver



File: gst-libs.info,  Node: Sockets.IPAddress class-instance creation,  Next: Sockets.IPAddress-accessing,  Prev: Sockets.IPAddress class-initialization,  Up: Sockets.IPAddress

6.12.4 Sockets.IPAddress class: instance creation
-------------------------------------------------

fromArray: parts
     Answer a new IPAddress from an array of numbers; the numbers are
     to be thought as the dot-separated numbers in the standard
     numbers-and-dots notation for IPv4 addresses.

fromBytes: aByteArray
     Answer a new IPAddress from a ByteArray containing the bytes in
     the same order as the digit form: 131.175.6.2 would be represented
     as #[131 175 6 2].

fromSockAddr: aByteArray port: portAdaptor
     Private - Answer a new IPAddress from a ByteArray containing a C
     sockaddr_in structure.  The portAdaptor's value is changed to
     contain the port that the structure refers to.

fromString: aString
     Answer a new IPAddress from a String containing the requested
     address in digit form.  Hexadecimal forms are not allowed.

     An Internet host address is a number containing four bytes of data.
     These are divided into two parts, a network number and a local
     network address number within that network. The network number
     consists of the first one, two or three bytes; the rest of the
     bytes are the local address.

     Network numbers are registered with the Network Information Center
     (NIC), and are divided into three classes-A, B, and C. The local
     network address numbers of individual machines are registered with
     the administrator of the particular network.

     Class A networks have single-byte numbers in the range 0 to 127.
     There are only a small number of Class A networks, but they can
     each support a very large number of hosts (several millions).
     Medium-sized Class B networks have two-byte network numbers, with
     the first byte in the range 128 to 191; they support several
     thousands of host, but are almost exhausted. Class C networks are
     the smallest and the most commonly available; they have three-byte
     network numbers, with the first byte in the range 192-223. Class D
     (multicast, 224.0.0.0 to 239.255.255.255) and E (research,
     240.0.0.0 to 255.255.255.255) also have three-byte network numbers.

     Thus, the first 1, 2, or 3 bytes of an Internet address specifies a
     network. The remaining bytes of the Internet address specify the
     address within that network.  The Class A network 0 is reserved
     for broadcast to all networks. In addition, the host number 0
     within each network is reserved for broadcast to all hosts in that
     network.  The Class A network 127 is reserved for loopback; you
     can always use the Internet address `127.0.0.1' to refer to the
     host machine (this is answered by the #loopbackHost class method).

     Since a single machine can be a member of multiple networks, it
     can have multiple Internet host addresses. However, there is never
     supposed to be more than one machine with the same host address.

     There are four forms of the standard numbers-and-dots notation for
     Internet addresses: a.b.c.d specifies all four bytes of the address
     individually; a.b.c interprets as a 2-byte quantity, which is
     useful for specifying host addresses in a Class B network with
     network address number a.b; a.b intrprets the last part of the
     address as a 3-byte quantity, which is useful for specifying host
     addresses in a Class A network with network address number a.

     If only one part is given, this corresponds directly to the host
     address number.

new
     This method should not be called for instances of this class.

with: b1 with: b2 with: b3 with: b4
     Answer a new IPAddress whose bytes (from most-significant to
     least-significant) are in the parameters.



File: gst-libs.info,  Node: Sockets.IPAddress-accessing,  Next: Sockets.IPAddress-printing,  Prev: Sockets.IPAddress class-instance creation,  Up: Sockets.IPAddress

6.12.5 Sockets.IPAddress: accessing
-----------------------------------

addressClass
     Answer the `address class' of the receiver (see IPAddress
     class>>#fromString:)

asByteArray
     Answer a read-only ByteArray of size four containing the
     receiver's bytes in network order (big-endian)

host
     Answer an host number for the receiver; this is given by the last
     three bytes for class A addresses, by the last two bytes for class
     B addresses, else by the last byte.

isMulticast
     Answer whether the receiver reprensents an address reserved for
     multicast datagram connections

network
     Answer a network number for the receiver; this is given by the
     first three bytes for class C/D/E addresses, by the first two
     bytes for class B addresses, else by the first byte.

subnet
     Answer an host number for the receiver; this is 0 for class A
     addresses, while it is given by the last byte of the network
     number for class B/C/D/E addresses.



File: gst-libs.info,  Node: Sockets.IPAddress-printing,  Prev: Sockets.IPAddress-accessing,  Up: Sockets.IPAddress

6.12.6 Sockets.IPAddress: printing
----------------------------------

printOn: aStream
     Print the receiver in dot notation.



File: gst-libs.info,  Node: Sockets.MulticastSocket,  Next: Sockets.MulticastSocketImpl,  Prev: Sockets.IPAddress,  Up: Sockets package

6.13 Sockets.MulticastSocket
============================

Defined in namespace Sockets
Superclass: Sockets.DatagramSocket
Category: Sockets-Streams
     This class models a multicast socket that sends packets to a
     multicast group.  All members of the group listening on that
     address and port will receive all the messages sent to the group.

     In the TCP/IP world, these sockets are UDP-based and a multicast
     group consists of a multicast address (a class D internet address,
     i.e. one whose most significant bits are 1110), and a well known
     port number.

* Menu:

* Sockets.MulticastSocket-instance creation::  (instance)


File: gst-libs.info,  Node: Sockets.MulticastSocket-instance creation,  Up: Sockets.MulticastSocket

6.13.1 Sockets.MulticastSocket: instance creation
-------------------------------------------------

interface
     Answer the local device supporting the multicast socket.  This is
     usually set to any local address.

interface: ipAddress
     Set the local device supporting the multicast socket.  This is
     usually set to any local address.

join: ipAddress
     Join the multicast socket at the given IP address

leave: ipAddress
     Leave the multicast socket at the given IP address

nextPut: packet timeToLive: timeToLive
     Send the datagram with a specific TTL (time-to-live)

timeToLive
     Answer the socket's datagrams' default time-to-live

timeToLive: newTTL
     Set the default time-to-live for the socket's datagrams



File: gst-libs.info,  Node: Sockets.MulticastSocketImpl,  Next: Sockets.OOBSocketImpl,  Prev: Sockets.MulticastSocket,  Up: Sockets package

6.14 Sockets.MulticastSocketImpl
================================

Defined in namespace Sockets
Superclass: Sockets.DatagramSocketImpl
Category: Sockets-Protocols
     This abstract class serves as the parent class for datagram socket
     implementations that support multicast.

* Menu:

* Sockets.MulticastSocketImpl-multicasting::  (instance)


File: gst-libs.info,  Node: Sockets.MulticastSocketImpl-multicasting,  Up: Sockets.MulticastSocketImpl

6.14.1 Sockets.MulticastSocketImpl: multicasting
------------------------------------------------

ipMulticastIf
     Answer the local device for a multicast socket (in the form of an
     address)

ipMulticastIf: interface
     Set the local device for a multicast socket (in the form of an
     address, usually anyLocalAddress)

join: ipAddress
     Join the multicast socket at the given address

leave: ipAddress
     Leave the multicast socket at the given address

timeToLive
     Answer the time to live of the datagrams sent through the receiver
     to a multicast socket.

timeToLive: ttl
     Set the time to live of the datagrams sent through the receiver to
     a multicast socket.



File: gst-libs.info,  Node: Sockets.OOBSocketImpl,  Next: Sockets.RawSocketImpl,  Prev: Sockets.MulticastSocketImpl,  Up: Sockets package

6.15 Sockets.OOBSocketImpl
==========================

Defined in namespace Sockets
Superclass: Sockets.DatagramSocketImpl
Category: Sockets-Protocols
     This abstract class serves as the parent class for socket
     implementations that send out-of-band data over a stream socket.

* Menu:

* Sockets.OOBSocketImpl-C constants::  (instance)
* Sockets.OOBSocketImpl-implementation::  (instance)


File: gst-libs.info,  Node: Sockets.OOBSocketImpl-C constants,  Next: Sockets.OOBSocketImpl-implementation,  Up: Sockets.OOBSocketImpl

6.15.1 Sockets.OOBSocketImpl: C constants
-----------------------------------------

msgOOB
     Not commented.



File: gst-libs.info,  Node: Sockets.OOBSocketImpl-implementation,  Prev: Sockets.OOBSocketImpl-C constants,  Up: Sockets.OOBSocketImpl

6.15.2 Sockets.OOBSocketImpl: implementation
--------------------------------------------

canRead
     Answer whether out-of-band data is available on the socket

ensureReadable
     Stop the process until an error occurs or out-of-band data becomes
     available on the socket



File: gst-libs.info,  Node: Sockets.RawSocketImpl,  Next: Sockets.ReadBuffer,  Prev: Sockets.OOBSocketImpl,  Up: Sockets package

6.16 Sockets.RawSocketImpl
==========================

Defined in namespace Sockets
Superclass: Sockets.DatagramSocketImpl
Category: Sockets-Protocols
     This abstract class serves as the parent class for raw socket
     implementations.  Raw socket packets are modeled as datagrams.

* Menu:

* Sockets.RawSocketImpl class-parameters::  (class)


File: gst-libs.info,  Node: Sockets.RawSocketImpl class-parameters,  Up: Sockets.RawSocketImpl

6.16.1 Sockets.RawSocketImpl class: parameters
----------------------------------------------

socketType
     Answer the socket type parameter for `create'.



File: gst-libs.info,  Node: Sockets.ReadBuffer,  Next: Sockets.ServerSocket,  Prev: Sockets.RawSocketImpl,  Up: Sockets package

6.17 Sockets.ReadBuffer
=======================

Defined in namespace Sockets
Superclass: ReadStream
Category: Examples-Useful tools
     I'm a ReadStream that, when the end of the stream is reached,
     evaluates an user defined block to try to get some more data.

* Menu:

* Sockets.ReadBuffer class-instance creation::  (class)
* Sockets.ReadBuffer-accessing-reading::  (instance)
* Sockets.ReadBuffer-buffer handling::  (instance)


File: gst-libs.info,  Node: Sockets.ReadBuffer class-instance creation,  Next: Sockets.ReadBuffer-accessing-reading,  Up: Sockets.ReadBuffer

6.17.1 Sockets.ReadBuffer class: instance creation
--------------------------------------------------

on: aCollection
     Answer a Stream that uses aCollection as a buffer.  You should
     ensure that the fillBlock is set before the first operation,
     because the buffer will report that the data has ended until you
     set the fillBlock.



File: gst-libs.info,  Node: Sockets.ReadBuffer-accessing-reading,  Next: Sockets.ReadBuffer-buffer handling,  Prev: Sockets.ReadBuffer class-instance creation,  Up: Sockets.ReadBuffer

6.17.2 Sockets.ReadBuffer: accessing-reading
--------------------------------------------

nextAvailable: anInteger into: aCollection startingAt: pos
     Place the next anInteger objects from the receiver into
     aCollection, starting at position pos.  Return the number of items
     stored.

nextAvailable: anInteger putAllOn: aStream
     Copy the next anInteger objects from the receiver to aStream.
     Return the number of items stored.

upTo: anObject
     Returns a collection of the same type that the stream accesses, up
     to but not including the object anObject.  Returns the entire rest
     of the stream's contents if anObject is not present.

upToEnd
     Returns a collection of the same type that the stream accesses, up
     to but not including the object anObject.  Returns the entire rest
     of the stream's contents if anObject is not present.



File: gst-libs.info,  Node: Sockets.ReadBuffer-buffer handling,  Prev: Sockets.ReadBuffer-accessing-reading,  Up: Sockets.ReadBuffer

6.17.3 Sockets.ReadBuffer: buffer handling
------------------------------------------

atEnd
     Answer whether the data stream has ended.

availableBytes
     Answer how many bytes are available in the buffer.

bufferContents
     Answer the data that is in the buffer, and empty it.

close
     Not commented.

fill
     Fill the buffer with more data if it is empty, and answer true if
     the fill block was able to read more data.

fillBlock: block
     Set the block that fills the buffer. It receives a collection and
     the number of bytes to fill in it, and must return the number of
     bytes actually read

isEmpty
     Answer whether the next input operation will force a buffer fill

isFull
     Answer whether the buffer has been just filled

notEmpty
     Check whether the next input operation will force a buffer fill
     and answer true if it will not.

pastEnd
     Try to fill the buffer if the data stream has ended.



File: gst-libs.info,  Node: Sockets.ServerSocket,  Next: Sockets.Socket,  Prev: Sockets.ReadBuffer,  Up: Sockets package

6.18 Sockets.ServerSocket
=========================

Defined in namespace Sockets
Superclass: Sockets.AbstractSocket
Category: Sockets-Streams
     This class models server side sockets.  The basic model is that the
     server socket is created and bound to some well known port.  It
     then listens for and accepts connections.  At that point the
     client and server sockets are ready to communicate with one
     another utilizing whatever application layer protocol they desire.

     As with the other AbstractSocket subclasses, most instance methods
     of this class simply redirect their calls to an implementation
     class.

* Menu:

* Sockets.ServerSocket class-accessing::  (class)
* Sockets.ServerSocket class-instance creation::  (class)
* Sockets.ServerSocket-accessing::  (instance)
* Sockets.ServerSocket-initializing::  (instance)


File: gst-libs.info,  Node: Sockets.ServerSocket class-accessing,  Next: Sockets.ServerSocket class-instance creation,  Up: Sockets.ServerSocket

6.18.1 Sockets.ServerSocket class: accessing
--------------------------------------------

defaultImplementationClassFor: aSocketAddressClass
     Answer the default implementation class.



File: gst-libs.info,  Node: Sockets.ServerSocket class-instance creation,  Next: Sockets.ServerSocket-accessing,  Prev: Sockets.ServerSocket class-accessing,  Up: Sockets.ServerSocket

6.18.2 Sockets.ServerSocket class: instance creation
----------------------------------------------------

defaultQueueSize
     Answer the default length of the queue for pending connections.
     When the queue fills, new clients attempting to connect fail until
     the server has sent #accept to accept a connection from the queue.

port: anInteger
     Answer a new ServerSocket serving on any local address, on the
     given port, with a pending connections queue of the default length.

port: anInteger bindTo: ipAddress
     Answer a new ServerSocket serving on the given address and port,
     with a pending connections queue of the default length.

port: anInteger queueSize: backlog
     Answer a new ServerSocket serving on any local address, on the
     given port, with a pending connections queue of the given length.

port: anInteger queueSize: backlog bindTo: ipAddress
     Answer a new ServerSocket serving on the given address and port,
     and with a pending connections queue of the given length.

queueSize: backlog
     Answer a new ServerSocket serving on any local address and port,
     with a pending connections queue of the given length.

queueSize: backlog bindTo: ipAddress
     Answer a new ServerSocket serving on the given local address, and
     on any port, with a pending connections queue of the given length.



File: gst-libs.info,  Node: Sockets.ServerSocket-accessing,  Next: Sockets.ServerSocket-initializing,  Prev: Sockets.ServerSocket class-instance creation,  Up: Sockets.ServerSocket

6.18.3 Sockets.ServerSocket: accessing
--------------------------------------

accept
     Accept a new connection and create a new instance of Socket if
     there is one, else answer nil.

accept: socketClass
     Accept a new connection and create a new instance of socketClass if
     there is one, else answer nil.  This is usually needed only to
     create DatagramSockets.

address
     Answer the local address

port
     Answer the local port (the port that the passive socket is
     listening on).

primAccept: socketClass
     Accept a new connection and create a new instance of Socket if
     there is one, else fail.

waitForConnection
     Wait for a connection to be available, and suspend the currently
     executing process in the meanwhile.



File: gst-libs.info,  Node: Sockets.ServerSocket-initializing,  Prev: Sockets.ServerSocket-accessing,  Up: Sockets.ServerSocket

6.18.4 Sockets.ServerSocket: initializing
-----------------------------------------

port: anInteger queueSize: backlog bindTo: localAddr
     Initialize the ServerSocket so that it serves on the given address
     and port, and has a pending connections queue of the given length.



File: gst-libs.info,  Node: Sockets.Socket,  Next: Sockets.SocketAddress,  Prev: Sockets.ServerSocket,  Up: Sockets package

6.19 Sockets.Socket
===================

Defined in namespace Sockets
Superclass: Sockets.StreamSocket
Category: Sockets-Streams
     This class adds read and write buffers to the basic model of
     AbstractSocket.

* Menu:

* Sockets.Socket class-accessing::  (class)
* Sockets.Socket class-tests::  (class)
* Sockets.Socket class-well known ports::  (class)
* Sockets.Socket-stream protocol::  (instance)


File: gst-libs.info,  Node: Sockets.Socket class-accessing,  Next: Sockets.Socket class-tests,  Up: Sockets.Socket

6.19.1 Sockets.Socket class: accessing
--------------------------------------

writeBufferSize
     Answer the size of the write buffer for newly-created sockets

writeBufferSize: anInteger
     Set the size of the write buffer for newly-created sockets



File: gst-libs.info,  Node: Sockets.Socket class-tests,  Next: Sockets.Socket class-well known ports,  Prev: Sockets.Socket class-accessing,  Up: Sockets.Socket

6.19.2 Sockets.Socket class: tests
----------------------------------

datagramLoopbackTest
     Send data from one datagram socket to another on the local
     machine. Tests most of the socket primitives and works with
     different processes.

datagramLoopbackTestOn: addressClass
     Send data from one datagram socket to another on the local
     machine. Tests most of the socket primitives and works with
     different processes.

loopbackTest
     Send data from one socket to another on the local machine. Tests
     most of the socket primitives.

loopbackTest: bufferSizes
     Send data from one socket to another on the local machine. Tests
     most of the socket primitives.  The parameter is the size of the
     input and output buffer sizes.

loopbackTest: bufferSizes addressClass: addressClass
     Send data from one socket to another on the local machine. Tests
     most of the socket primitives.  The parameters are the size of the
     input and output buffer sizes, and the address class (family) to
     use.

loopbackTestOn: addressClass
     Send data from one socket to another on the local machine. Tests
     most of the socket primitives.  The parameter is the address class
     (family) to use.

microTest
     Extremely small test (try to receive SMTP header)

producerConsumerTest
     Send data from one datagram socket to another on the local
     machine. Tests most of the socket primitives and works with
     different processes.

producerConsumerTestOn: addressClass
     Send data from one socket to another on the local machine. Tests
     most of the socket primitives and works with different processes.

sendTest
     Send data to the 'discard' socket of localhost.

sendTest: host
     Send data to the 'discard' socket of the given host. Tests the
     speed of one-way data transfers across the network to the given
     host. Note that many hosts do not run a discard server.

testPort2For: anAddressClass
     Not commented.

testPortFor: anAddressClass
     Not commented.

tweakedLoopbackTest
     Send data from one socket to another on the local machine, trying
     to avoid buffering overhead.  Tests most of the socket primitives.
     Comparison of the results of loopbackTest and tweakedLoopbackTest
     should give a measure of the overhead of buffering when
     sending/receiving large quantities of data.



File: gst-libs.info,  Node: Sockets.Socket class-well known ports,  Next: Sockets.Socket-stream protocol,  Prev: Sockets.Socket class-tests,  Up: Sockets.Socket

6.19.3 Sockets.Socket class: well known ports
---------------------------------------------

initialize
     Initialize the receiver's defaults



File: gst-libs.info,  Node: Sockets.Socket-stream protocol,  Prev: Sockets.Socket class-well known ports,  Up: Sockets.Socket

6.19.4 Sockets.Socket: stream protocol
--------------------------------------

canWrite
     Answer whether more data is available in the socket's read buffer
     or from the operating system.

ensureWriteable
     Answer whether more data is available in the socket's read buffer
     or from the operating system.

flush
     Flush the write buffer to the operating system

next: n putAll: aCollection startingAt: pos
     Write aString to the socket; this acts as a bit-bucket when the
     socket is closed.  This might yield control to other Smalltalk
     Processes.

nextPut: char
     Write a character to the socket; this acts as a bit-bucket when
     the socket is closed.  This might yield control to other Smalltalk
     Processes.

writeBufferSize: size
     Create a new write buffer of the given size, flushing the old one
     is needed.  This might yield control to other Smalltalk Processes.



File: gst-libs.info,  Node: Sockets.SocketAddress,  Next: Sockets.SocketImpl,  Prev: Sockets.Socket,  Up: Sockets package

6.20 Sockets.SocketAddress
==========================

Defined in namespace Sockets
Superclass: Object
Category: Sockets-Protocols
     This class is the abstract class for machine addresses over a
     network.  It also fulfills the function of the C style functions
     gethostname(), gethostbyname(), and gethostbyaddr(), resolves
     machine names into their corresponding numeric addresses (via DNS,
     /etc/hosts, or other mechanisms) and vice versa.

* Menu:

* Sockets.SocketAddress class-abstract::  (class)
* Sockets.SocketAddress class-accessing::  (class)
* Sockets.SocketAddress class-C call-outs::  (class)
* Sockets.SocketAddress class-C constants::  (class)
* Sockets.SocketAddress class-creating sockets::  (class)
* Sockets.SocketAddress class-host name lookup::  (class)
* Sockets.SocketAddress class-initialization::  (class)
* Sockets.SocketAddress-accessing::  (instance)
* Sockets.SocketAddress-testing::  (instance)


File: gst-libs.info,  Node: Sockets.SocketAddress class-abstract,  Next: Sockets.SocketAddress class-accessing,  Up: Sockets.SocketAddress

6.20.1 Sockets.SocketAddress class: abstract
--------------------------------------------

extractFromSockAddr: aByteArray port: portAdaptor
     Private - Answer a new SocketAddress from a ByteArray containing a
     C sockaddr structure.  The portAdaptor's value is changed to
     contain the port that the structure refers to.

fromSockAddr: aByteArray port: portAdaptor
     Private - Answer a new IPAddress from a ByteArray containing a C
     sockaddr structure.  The portAdaptor's value is changed to contain
     the port that the structure refers to.  Raise an error if the
     address family is unknown.



File: gst-libs.info,  Node: Sockets.SocketAddress class-accessing,  Next: Sockets.SocketAddress class-C call-outs,  Prev: Sockets.SocketAddress class-abstract,  Up: Sockets.SocketAddress

6.20.2 Sockets.SocketAddress class: accessing
---------------------------------------------

anyLocalAddress
     Answer an IPAddress representing a local address.

at: host cache: aBlock
     Private - Answer the list of addresses associated to the given
     host in the cache.  If the host is not cached yet, evaluate aBlock
     and cache and answer the result.

defaultDatagramSocketImplClass
     Answer the class that, by default, is used to map between the
     Socket's protocol and a low-level C interface.

defaultDatagramSocketImplClass: aClass
     Set which class will be used by default to map between the
     receiver's protocol and a low-level C interface.

defaultRawSocketImplClass
     Answer the class that, by default, is used to map between the
     Socket's protocol and a low-level C interface.

defaultRawSocketImplClass: aClass
     Set which class will be used by default to map between the
     receiver's protocol and a low-level C interface.

defaultStreamSocketImplClass
     Answer the class that, by default, is used to map between the
     Socket's protocol and a low-level C interface.

defaultStreamSocketImplClass: aClass
     Set which class will be used by default to map between the
     receiver's protocol and a low-level C interface.

isDigitAddress: aString
     Answer whether the receiver can interpret aString as a valid
     address without going through a resolver.

localHostName
     Answer the name of the local machine.

loopbackHost
     Answer an instance of the receiver representing the local machine
     (127.0.0.1 in the IPv4 family).

unknownAddress
     Answer an instance of the receiver representing an unknown machine
     (0.0.0.0 in the IPv4 family).



File: gst-libs.info,  Node: Sockets.SocketAddress class-C call-outs,  Next: Sockets.SocketAddress class-C constants,  Prev: Sockets.SocketAddress class-accessing,  Up: Sockets.SocketAddress

6.20.3 Sockets.SocketAddress class: C call-outs
-----------------------------------------------

primLocalName
     Not commented.

primName: address len: len type: addressFamily
     Not commented.



File: gst-libs.info,  Node: Sockets.SocketAddress class-C constants,  Next: Sockets.SocketAddress class-creating sockets,  Prev: Sockets.SocketAddress class-C call-outs,  Up: Sockets.SocketAddress

6.20.4 Sockets.SocketAddress class: C constants
-----------------------------------------------

addressFamily
     Not commented.

aiAddrconfig
     Not commented.

aiCanonname
     Not commented.

protocolFamily
     Not commented.



File: gst-libs.info,  Node: Sockets.SocketAddress class-creating sockets,  Next: Sockets.SocketAddress class-host name lookup,  Prev: Sockets.SocketAddress class-C constants,  Up: Sockets.SocketAddress

6.20.5 Sockets.SocketAddress class: creating sockets
----------------------------------------------------

newRawSocket
     Create a new raw socket, providing access to low-level network
     protocols and interfaces for the protocol family represented by
     the receiver (for example, the C protocol family PF_INET for the
     IPAddress class) Ordinary user programs usually have no need to
     use this method.



File: gst-libs.info,  Node: Sockets.SocketAddress class-host name lookup,  Next: Sockets.SocketAddress class-initialization,  Prev: Sockets.SocketAddress class-creating sockets,  Up: Sockets.SocketAddress

6.20.6 Sockets.SocketAddress class: host name lookup
----------------------------------------------------

allByName: aString
     Answer all the IP addresses that refer to the the given host.  If
     a digit address is passed in aString, the result is an array
     containing the single passed address.  If the host could not be
     resolved to an IP address, answer nil.

byName: aString
     Answer a single IP address that refer to the the given host.  If a
     digit address is passed in aString, the result is the same as
     using #fromString:.  If the host could not be resolved to an IP
     address, answer nil.



File: gst-libs.info,  Node: Sockets.SocketAddress class-initialization,  Next: Sockets.SocketAddress-accessing,  Prev: Sockets.SocketAddress class-host name lookup,  Up: Sockets.SocketAddress

6.20.7 Sockets.SocketAddress class: initialization
--------------------------------------------------

anyLocalAddress: anObject
     Private - Store an object representing a local address in the
     address family for the receiver

createLoopbackHost
     Answer an object representing the loopback host in the address
     family for the receiver.

createUnknownAddress
     Answer an object representing an unkown address in the address
     family for the receiver

flush
     Flush the cached IP addresses.

initLocalAddresses
     Private - Initialize the anyLocalAddress class-instance variable
     for the entire hierarchy.

update: aspect
     Flush all the caches for IPAddress subclasses



File: gst-libs.info,  Node: Sockets.SocketAddress-accessing,  Next: Sockets.SocketAddress-testing,  Prev: Sockets.SocketAddress class-initialization,  Up: Sockets.SocketAddress

6.20.8 Sockets.SocketAddress: accessing
---------------------------------------

= aSocketAddress
     Answer whether the receiver and aSocketAddress represent the same
     machine.  The host name is not checked because an IPAddress
     created before a DNS is activated is named after its
     numbers-and-dots notation, while the same IPAddress, created when
     a DNS is active, is named after its resolved name.

asByteArray
     Convert the receiver to a ByteArray passed to the operating
     system's socket functions)

hash
     Answer an hash value for the receiver

name
     Answer the host name (or the digit notation if the DNS could not
     resolve the address).  If the DNS answers a different IP address
     for the same name, the second response is not cached and the digit
     notation is also returned (somebody's likely playing strange jokes
     with your DNS).



File: gst-libs.info,  Node: Sockets.SocketAddress-testing,  Prev: Sockets.SocketAddress-accessing,  Up: Sockets.SocketAddress

6.20.9 Sockets.SocketAddress: testing
-------------------------------------

isMulticast
     Answer whether an address is reserved for multicast connections.



File: gst-libs.info,  Node: Sockets.SocketImpl,  Next: Sockets.StreamSocket,  Prev: Sockets.SocketAddress,  Up: Sockets package

6.21 Sockets.SocketImpl
=======================

Defined in namespace Sockets
Superclass: Sockets.AbstractSocketImpl
Category: Sockets-Protocols
     This abstract class serves as the parent class for stream socket
     implementations.

* Menu:

* Sockets.SocketImpl class-parameters::  (class)
* Sockets.SocketImpl-abstract::  (instance)
* Sockets.SocketImpl-socket operations::  (instance)


File: gst-libs.info,  Node: Sockets.SocketImpl class-parameters,  Next: Sockets.SocketImpl-abstract,  Up: Sockets.SocketImpl

6.21.1 Sockets.SocketImpl class: parameters
-------------------------------------------

socketType
     Answer the socket type parameter for `create'.



File: gst-libs.info,  Node: Sockets.SocketImpl-abstract,  Next: Sockets.SocketImpl-socket operations,  Prev: Sockets.SocketImpl class-parameters,  Up: Sockets.SocketImpl

6.21.2 Sockets.SocketImpl: abstract
-----------------------------------

outOfBandImplClass
     Return an implementation class to be used for out-of-band data on
     the receiver.



File: gst-libs.info,  Node: Sockets.SocketImpl-socket operations,  Prev: Sockets.SocketImpl-abstract,  Up: Sockets.SocketImpl

6.21.3 Sockets.SocketImpl: socket operations
--------------------------------------------

connectTo: ipAddress port: port
     Try to connect the socket represented by the receiver to the given
     remote machine.

getPeerName
     Retrieve a ByteArray containing a sockaddr_in struct for the
     remote endpoint of the socket.



File: gst-libs.info,  Node: Sockets.StreamSocket,  Next: Sockets.TCPSocketImpl,  Prev: Sockets.SocketImpl,  Up: Sockets package

6.22 Sockets.StreamSocket
=========================

Defined in namespace Sockets
Superclass: Sockets.AbstractSocket
Category: Sockets-Streams
     This class adds a read buffer to the basic model of AbstractSocket.

* Menu:

* Sockets.StreamSocket class-accessing::  (class)
* Sockets.StreamSocket class-initialize::  (class)
* Sockets.StreamSocket class-instance creation::  (class)
* Sockets.StreamSocket-accessing::  (instance)
* Sockets.StreamSocket-accessing-reading::  (instance)
* Sockets.StreamSocket-out-of-band data::  (instance)
* Sockets.StreamSocket-printing::  (instance)
* Sockets.StreamSocket-stream protocol::  (instance)


File: gst-libs.info,  Node: Sockets.StreamSocket class-accessing,  Next: Sockets.StreamSocket class-initialize,  Up: Sockets.StreamSocket

6.22.1 Sockets.StreamSocket class: accessing
--------------------------------------------

defaultImplementationClassFor: aSocketAddressClass
     Answer the default implementation class.  Depending on the
     subclass, this might be the default stream socket implementation
     class of the given address class, or rather its default datagram
     socket implementation class.

readBufferSize
     Answer the size of the read buffer for newly-created sockets

readBufferSize: anInteger
     Set the size of the read buffer for newly-created sockets



File: gst-libs.info,  Node: Sockets.StreamSocket class-initialize,  Next: Sockets.StreamSocket class-instance creation,  Prev: Sockets.StreamSocket class-accessing,  Up: Sockets.StreamSocket

6.22.2 Sockets.StreamSocket class: initialize
---------------------------------------------

initialize
     Initialize the receiver's defaults



File: gst-libs.info,  Node: Sockets.StreamSocket class-instance creation,  Next: Sockets.StreamSocket-accessing,  Prev: Sockets.StreamSocket class-initialize,  Up: Sockets.StreamSocket

6.22.3 Sockets.StreamSocket class: instance creation
----------------------------------------------------

remote: ipAddressOrString port: remotePort
     Create a new socket and connect to the given host (passed as a
     String to be resolved or as a SocketAddress), and to the given
     port.

remote: ipAddressOrString port: remotePort local: ipAddress port: localPort
     Create a new socket and connect to the given host (passed as a
     String to be resolved or as a SocketAddress), and to the given
     remotePort.  Then bind it to the local address passed in
     ipAddress, on the localPort port; if the former is nil, any local
     address will do, and if the latter is 0, any local port will do.



File: gst-libs.info,  Node: Sockets.StreamSocket-accessing,  Next: Sockets.StreamSocket-accessing-reading,  Prev: Sockets.StreamSocket class-instance creation,  Up: Sockets.StreamSocket

6.22.4 Sockets.StreamSocket: accessing
--------------------------------------

address
     Answer the address of the remote endpoint

port
     Answer the port of the remote endpoint



File: gst-libs.info,  Node: Sockets.StreamSocket-accessing-reading,  Next: Sockets.StreamSocket-out-of-band data,  Prev: Sockets.StreamSocket-accessing,  Up: Sockets.StreamSocket

6.22.5 Sockets.StreamSocket: accessing-reading
----------------------------------------------

nextAvailable: anInteger into: aCollection startingAt: pos
     Place up to anInteger objects from the receiver into aCollection,
     starting from position pos and stopping if no more data is
     available.

nextAvailable: anInteger putAllOn: aStream
     Copy up to anInteger objects from the receiver to aStream,
     stopping if no more data is available.



File: gst-libs.info,  Node: Sockets.StreamSocket-out-of-band data,  Next: Sockets.StreamSocket-printing,  Prev: Sockets.StreamSocket-accessing-reading,  Up: Sockets.StreamSocket

6.22.6 Sockets.StreamSocket: out-of-band data
---------------------------------------------

outOfBand
     Return a datagram socket to be used for receiving out-of-band data
     on the receiver.



File: gst-libs.info,  Node: Sockets.StreamSocket-printing,  Next: Sockets.StreamSocket-stream protocol,  Prev: Sockets.StreamSocket-out-of-band data,  Up: Sockets.StreamSocket

6.22.7 Sockets.StreamSocket: printing
-------------------------------------

printOn: aStream
     Print a representation of the receiver on aStream



File: gst-libs.info,  Node: Sockets.StreamSocket-stream protocol,  Prev: Sockets.StreamSocket-printing,  Up: Sockets.StreamSocket

6.22.8 Sockets.StreamSocket: stream protocol
--------------------------------------------

atEnd
     Answer whether more data is available on the socket

availableBytes
     Answer how many bytes are available in the socket's read buffer or
     from the operating system.

bufferContents
     Answer the current contents of the read buffer

canRead
     Answer whether more data is available in the socket's read buffer
     or from the operating system.

close
     Flush and close the socket.

fill
     Fill the read buffer with data read from the socket

isPeerAlive
     Answer whether the connection with the peer remote machine is still
     valid.

next
     Read a byte from the socket.  This might yield control to other
     Smalltalk Processes.

peek
     Read a byte from the socket, without advancing the buffer; answer
     nil if no more data is available.  This might yield control to
     other Smalltalk Processes.

peekFor: anObject
     Read a byte from the socket, advancing the buffer only if it
     matches anObject; answer whether they did match or not.  This
     might yield control to other Smalltalk Processes.

readBufferSize: size
     Create a new read buffer of the given size (which is only possible
     before the first read or if the current buffer is empty).



File: gst-libs.info,  Node: Sockets.TCPSocketImpl,  Next: Sockets.UDPSocketImpl,  Prev: Sockets.StreamSocket,  Up: Sockets package

6.23 Sockets.TCPSocketImpl
==========================

Defined in namespace Sockets
Superclass: Sockets.SocketImpl
Category: Sockets-Protocols
     Unless the application installs its own implementation, this is the
     default socket implementation that will be used for IPv4 stream
     sockets.  It uses C call-outs to implement standard BSD style
     sockets of family AF_INET and type SOCK_STREAM.

* Menu:

* Sockets.TCPSocketImpl class-C constants::  (class)
* Sockets.TCPSocketImpl-socket options::  (instance)


File: gst-libs.info,  Node: Sockets.TCPSocketImpl class-C constants,  Next: Sockets.TCPSocketImpl-socket options,  Up: Sockets.TCPSocketImpl

6.23.1 Sockets.TCPSocketImpl class: C constants
-----------------------------------------------

ipprotoTcp
     Not commented.

protocol
     Not commented.

tcpNodelay
     Not commented.



File: gst-libs.info,  Node: Sockets.TCPSocketImpl-socket options,  Prev: Sockets.TCPSocketImpl class-C constants,  Up: Sockets.TCPSocketImpl

6.23.2 Sockets.TCPSocketImpl: socket options
--------------------------------------------

valueWithoutBuffering: aBlock
     Evaluate aBlock, ensuring that any data that it writes to the
     socket is sent immediately to the network.



File: gst-libs.info,  Node: Sockets.UDPSocketImpl,  Next: Sockets.UnixAddress,  Prev: Sockets.TCPSocketImpl,  Up: Sockets package

6.24 Sockets.UDPSocketImpl
==========================

Defined in namespace Sockets
Superclass: Sockets.MulticastSocketImpl
Category: Sockets-Protocols
     Unless the application installs its own implementation, this is the
     default socket implementation that will be used for IPv4 datagram
     sockets.  It uses C call-outs to implement standard BSD style
     sockets of family AF_INET and type SOCK_DGRAM.

* Menu:

* Sockets.UDPSocketImpl class-C constants::  (class)
* Sockets.UDPSocketImpl-multicasting::  (instance)


File: gst-libs.info,  Node: Sockets.UDPSocketImpl class-C constants,  Next: Sockets.UDPSocketImpl-multicasting,  Up: Sockets.UDPSocketImpl

6.24.1 Sockets.UDPSocketImpl class: C constants
-----------------------------------------------

ipprotoIp
     Not commented.

protocol
     Not commented.



File: gst-libs.info,  Node: Sockets.UDPSocketImpl-multicasting,  Prev: Sockets.UDPSocketImpl class-C constants,  Up: Sockets.UDPSocketImpl

6.24.2 Sockets.UDPSocketImpl: multicasting
------------------------------------------

ipMulticastIf
     Answer the local device for a multicast socket (in the form of an
     address)

ipMulticastIf: interface
     Set the local device for a multicast socket (in the form of an
     address, usually anyLocalAddress)

join: ipAddress
     Join the multicast socket at the given address

leave: ipAddress
     Leave the multicast socket at the given address

primJoinLeave: ipAddress option: opt
     Private - Used to join or leave a multicast service.

timeToLive
     Answer the time to live of the datagrams sent through the receiver
     to a multicast socket.

timeToLive: ttl
     Set the time to live of the datagrams sent through the receiver to
     a multicast socket.



File: gst-libs.info,  Node: Sockets.UnixAddress,  Next: Sockets.UnixDatagramSocketImpl,  Prev: Sockets.UDPSocketImpl,  Up: Sockets package

6.25 Sockets.UnixAddress
========================

Defined in namespace Sockets
Superclass: Sockets.SocketAddress
Category: Sockets-Protocols
     This class represents an address for a machine using the AF_UNIX
     address family.  Since this address family is only used for local
     sockets, the class is a singleton; the filesystem path to the
     socket is represented using the port argument to socket functions,
     as either a String or a File object.


* Menu:

* Sockets.UnixAddress class-C constants::  (class)
* Sockets.UnixAddress class-initialization::  (class)
* Sockets.UnixAddress class-instance creation::  (class)
* Sockets.UnixAddress-accessing::  (instance)
* Sockets.UnixAddress-printing::  (instance)
* Sockets.UnixAddress-testing::  (instance)


File: gst-libs.info,  Node: Sockets.UnixAddress class-C constants,  Next: Sockets.UnixAddress class-initialization,  Up: Sockets.UnixAddress

6.25.1 Sockets.UnixAddress class: C constants
---------------------------------------------

addressFamily
     Not commented.

protocolFamily
     Not commented.



File: gst-libs.info,  Node: Sockets.UnixAddress class-initialization,  Next: Sockets.UnixAddress class-instance creation,  Prev: Sockets.UnixAddress class-C constants,  Up: Sockets.UnixAddress

6.25.2 Sockets.UnixAddress class: initialization
------------------------------------------------

createLoopbackHost
     Answer an object representing the loopback host in the address
     family for the receiver.  This is 127.0.0.1 for IPv4.

createUnknownAddress
     Answer an object representing an unkown address in the address
     family for the receiver

initialize
     Set up the default implementation classes for the receiver



File: gst-libs.info,  Node: Sockets.UnixAddress class-instance creation,  Next: Sockets.UnixAddress-accessing,  Prev: Sockets.UnixAddress class-initialization,  Up: Sockets.UnixAddress

6.25.3 Sockets.UnixAddress class: instance creation
---------------------------------------------------

fromSockAddr: aByteArray port: portAdaptor
     Private - Answer the unique UnixAddress instance, filling in the
     portAdaptor's value from a ByteArray containing a C sockaddr_in
     structure.

uniqueInstance
     Not commented.



File: gst-libs.info,  Node: Sockets.UnixAddress-accessing,  Next: Sockets.UnixAddress-printing,  Prev: Sockets.UnixAddress class-instance creation,  Up: Sockets.UnixAddress

6.25.4 Sockets.UnixAddress: accessing
-------------------------------------

= aSocketAddress
     Answer whether the receiver and aSocketAddress represent the same
     socket on the same machine.

hash
     Answer an hash value for the receiver



File: gst-libs.info,  Node: Sockets.UnixAddress-printing,  Next: Sockets.UnixAddress-testing,  Prev: Sockets.UnixAddress-accessing,  Up: Sockets.UnixAddress

6.25.5 Sockets.UnixAddress: printing
------------------------------------

printOn: aStream
     Print the receiver in dot notation.



File: gst-libs.info,  Node: Sockets.UnixAddress-testing,  Prev: Sockets.UnixAddress-printing,  Up: Sockets.UnixAddress

6.25.6 Sockets.UnixAddress: testing
-----------------------------------

isMulticast
     Answer whether an address is reserved for multicast connections.



File: gst-libs.info,  Node: Sockets.UnixDatagramSocketImpl,  Next: Sockets.UnixSocketImpl,  Prev: Sockets.UnixAddress,  Up: Sockets package

6.26 Sockets.UnixDatagramSocketImpl
===================================

Defined in namespace Sockets
Superclass: Sockets.DatagramSocketImpl
Category: Sockets-Protocols
     This class represents a datagram socket using the AF_UNIX address
     family.  It unlinks the filesystem path when the socket is closed.


* Menu:

* Sockets.UnixDatagramSocketImpl-socket operations::  (instance)


File: gst-libs.info,  Node: Sockets.UnixDatagramSocketImpl-socket operations,  Up: Sockets.UnixDatagramSocketImpl

6.26.1 Sockets.UnixDatagramSocketImpl: socket operations
--------------------------------------------------------

close
     Not commented.



File: gst-libs.info,  Node: Sockets.UnixSocketImpl,  Next: Sockets.WriteBuffer,  Prev: Sockets.UnixDatagramSocketImpl,  Up: Sockets package

6.27 Sockets.UnixSocketImpl
===========================

Defined in namespace Sockets
Superclass: Sockets.SocketImpl
Category: Sockets-Protocols
     This class represents a stream socket using the AF_UNIX address
     family.  It unlinks the filesystem path when the socket is closed.


* Menu:

* Sockets.UnixSocketImpl-socket operations::  (instance)


File: gst-libs.info,  Node: Sockets.UnixSocketImpl-socket operations,  Up: Sockets.UnixSocketImpl

6.27.1 Sockets.UnixSocketImpl: socket operations
------------------------------------------------

close
     Not commented.



File: gst-libs.info,  Node: Sockets.WriteBuffer,  Prev: Sockets.UnixSocketImpl,  Up: Sockets package

6.28 Sockets.WriteBuffer
========================

Defined in namespace Sockets
Superclass: WriteStream
Category: Examples-Useful tools
     I'm a WriteStream that, instead of growing the collection,
     evaluates an user defined block and starts over with the same
     collection.

* Menu:

* Sockets.WriteBuffer-accessing-writing::  (instance)
* Sockets.WriteBuffer-buffer handling::  (instance)
* Sockets.WriteBuffer-testing::  (instance)


File: gst-libs.info,  Node: Sockets.WriteBuffer-accessing-writing,  Next: Sockets.WriteBuffer-buffer handling,  Up: Sockets.WriteBuffer

6.28.1 Sockets.WriteBuffer: accessing-writing
---------------------------------------------

next: n putAll: aCollection startingAt: pos
     Put n characters or bytes of aCollection, starting at the pos-th,
     in the collection buffer.



File: gst-libs.info,  Node: Sockets.WriteBuffer-buffer handling,  Next: Sockets.WriteBuffer-testing,  Prev: Sockets.WriteBuffer-accessing-writing,  Up: Sockets.WriteBuffer

6.28.2 Sockets.WriteBuffer: buffer handling
-------------------------------------------

close
     Not commented.

flush
     Evaluate the flushing block and reset the stream

flushBlock: block
     Set which block will be used to flush the buffer.  The block will
     be evaluated with a collection and an Integer n as parameters, and
     will have to write the first n elements of the collection.



File: gst-libs.info,  Node: Sockets.WriteBuffer-testing,  Prev: Sockets.WriteBuffer-buffer handling,  Up: Sockets.WriteBuffer

6.28.3 Sockets.WriteBuffer: testing
-----------------------------------

isFull
     Not commented.



File: gst-libs.info,  Node: ZLib package,  Next: Class index,  Prev: XML/XPath/XSL packages,  Up: Top

7 Compressing and decompressing data with ZLib
**********************************************

* Menu:


Alphabetic list:
* ZLib.DeflateStream::
* ZLib.DeflateWriteStream::
* ZLib.GZipDeflateStream::
* ZLib.GZipDeflateWriteStream::
* ZLib.GZipInflateStream::
* ZLib.InflateStream::
* ZLib.RawDeflateStream::
* ZLib.RawDeflateWriteStream::
* ZLib.RawInflateStream::
* ZLib.ZlibError::
* ZLib.ZlibReadStream::
* ZLib.ZlibStream::
* ZLib.ZlibWriteStream::


Class tree:
  (Object)
    (Exception)
      (Error)
*       ZLib.ZlibError::
    (Iterable)
      (Stream)
*       ZLib.ZlibStream::
*         ZLib.ZlibReadStream::
*           ZLib.RawDeflateStream::
*             ZLib.DeflateStream::
*             ZLib.GZipDeflateStream::
*           ZLib.RawInflateStream::
*             ZLib.GZipInflateStream::
*             ZLib.InflateStream::
*         ZLib.ZlibWriteStream::
*           ZLib.RawDeflateWriteStream::
*             ZLib.DeflateWriteStream::
*             ZLib.GZipDeflateWriteStream::


File: gst-libs.info,  Node: ZLib.DeflateStream,  Next: ZLib.DeflateWriteStream,  Up: ZLib package

7.1 ZLib.DeflateStream
======================

Defined in namespace ZLib
Superclass: ZLib.RawDeflateStream
Category: Examples-Useful
     Instances of this class produce "standard" (zlib, RFC1950)
     deflated data.

* Menu:

* ZLib.DeflateStream class-instance creation::  (class)


File: gst-libs.info,  Node: ZLib.DeflateStream class-instance creation,  Up: ZLib.DeflateStream

7.1.1 ZLib.DeflateStream class: instance creation
-------------------------------------------------

compressingTo: aStream
     Answer a stream that receives data via #nextPut: and compresses it
     onto aStream.

compressingTo: aStream level: level
     Answer a stream that receives data via #nextPut: and compresses it
     onto aStream with the given compression level.



File: gst-libs.info,  Node: ZLib.DeflateWriteStream,  Next: ZLib.GZipDeflateStream,  Prev: ZLib.DeflateStream,  Up: ZLib package

7.2 ZLib.DeflateWriteStream
===========================

Defined in namespace ZLib
Superclass: ZLib.RawDeflateWriteStream
Category: Examples-Useful
     Instances of this class produce "standard" (zlib, RFC1950)
     deflated data.

* Menu:


File: gst-libs.info,  Node: ZLib.GZipDeflateStream,  Next: ZLib.GZipDeflateWriteStream,  Prev: ZLib.DeflateWriteStream,  Up: ZLib package

7.3 ZLib.GZipDeflateStream
==========================

Defined in namespace ZLib
Superclass: ZLib.RawDeflateStream
Category: Examples-Useful
     Instances of this class produce GZip (RFC1952) deflated data.

* Menu:

* ZLib.GZipDeflateStream class-instance creation::  (class)


File: gst-libs.info,  Node: ZLib.GZipDeflateStream class-instance creation,  Up: ZLib.GZipDeflateStream

7.3.1 ZLib.GZipDeflateStream class: instance creation
-----------------------------------------------------

compressingTo: aStream
     Answer a stream that receives data via #nextPut: and compresses it
     onto aStream.

compressingTo: aStream level: level
     Answer a stream that receives data via #nextPut: and compresses it
     onto aStream with the given compression level.



File: gst-libs.info,  Node: ZLib.GZipDeflateWriteStream,  Next: ZLib.GZipInflateStream,  Prev: ZLib.GZipDeflateStream,  Up: ZLib package

7.4 ZLib.GZipDeflateWriteStream
===============================

Defined in namespace ZLib
Superclass: ZLib.RawDeflateWriteStream
Category: Examples-Useful
     Instances of this class produce GZip (RFC1952) deflated data.

* Menu:


File: gst-libs.info,  Node: ZLib.GZipInflateStream,  Next: ZLib.InflateStream,  Prev: ZLib.GZipDeflateWriteStream,  Up: ZLib package

7.5 ZLib.GZipInflateStream
==========================

Defined in namespace ZLib
Superclass: ZLib.RawInflateStream
Category: Examples-Useful
     Instances of this class reinflate GZip (RFC1952) deflated data.

* Menu:


File: gst-libs.info,  Node: ZLib.InflateStream,  Next: ZLib.RawDeflateStream,  Prev: ZLib.GZipInflateStream,  Up: ZLib package

7.6 ZLib.InflateStream
======================

Defined in namespace ZLib
Superclass: ZLib.RawInflateStream
Category: Examples-Useful
     Instances of this class reinflate "standard" (zlib, RFC1950)
     deflated data.

* Menu:


File: gst-libs.info,  Node: ZLib.RawDeflateStream,  Next: ZLib.RawDeflateWriteStream,  Prev: ZLib.InflateStream,  Up: ZLib package

7.7 ZLib.RawDeflateStream
=========================

Defined in namespace ZLib
Superclass: ZLib.ZlibReadStream
Category: Examples-Useful
     Instances of this class produce "raw" (PKZIP) deflated data.

* Menu:

* ZLib.RawDeflateStream class-instance creation::  (class)


File: gst-libs.info,  Node: ZLib.RawDeflateStream class-instance creation,  Up: ZLib.RawDeflateStream

7.7.1 ZLib.RawDeflateStream class: instance creation
----------------------------------------------------

compressingTo: aStream
     Answer a stream that receives data via #nextPut: and compresses it
     onto aStream.

compressingTo: aStream level: level
     Answer a stream that receives data via #nextPut: and compresses it
     onto aStream with the given compression level.

on: aStream
     Answer a stream that compresses the data in aStream with the
     default compression level.

on: aStream level: compressionLevel
     Answer a stream that compresses the data in aStream with the given
     compression level.



File: gst-libs.info,  Node: ZLib.RawDeflateWriteStream,  Next: ZLib.RawInflateStream,  Prev: ZLib.RawDeflateStream,  Up: ZLib package

7.8 ZLib.RawDeflateWriteStream
==============================

Defined in namespace ZLib
Superclass: ZLib.ZlibWriteStream
Category: Examples-Useful
     Instances of this class produce "raw" (PKZIP) deflated data.

* Menu:

* ZLib.RawDeflateWriteStream class-instance creation::  (class)


File: gst-libs.info,  Node: ZLib.RawDeflateWriteStream class-instance creation,  Up: ZLib.RawDeflateWriteStream

7.8.1 ZLib.RawDeflateWriteStream class: instance creation
---------------------------------------------------------

on: aWriteStream
     Answer a stream that compresses the data in aStream with the
     default compression level.

on: aWriteStream level: compressionLevel
     Answer a stream that compresses the data in aStream with the given
     compression level.



File: gst-libs.info,  Node: ZLib.RawInflateStream,  Next: ZLib.ZlibError,  Prev: ZLib.RawDeflateWriteStream,  Up: ZLib package

7.9 ZLib.RawInflateStream
=========================

Defined in namespace ZLib
Superclass: ZLib.ZlibReadStream
Category: Examples-Useful
     Instances of this class reinflate "raw" (PKZIP) deflated data.

* Menu:

* ZLib.RawInflateStream-positioning::  (instance)


File: gst-libs.info,  Node: ZLib.RawInflateStream-positioning,  Up: ZLib.RawInflateStream

7.9.1 ZLib.RawInflateStream: positioning
----------------------------------------

copyFrom: start to: end
     Answer the data on which the receiver is streaming, from the
     start-th item to the end-th.  Note that this method is 0-based,
     unlike the one in Collection, because a Stream's #position method
     returns 0-based values.  Notice that this class can only provide
     the illusion of random access, by appropriately rewinding the input
     stream or skipping compressed data.

isPositionable
     Answer true if the stream supports moving backwards with #skip:.

position: anInteger
     Set the current position in the stream to anInteger.  Notice that
     this class can only provide the illusion of random access, by
     appropriately rewinding the input stream or skipping compressed
     data.

reset
     Reset the stream to the beginning of the compressed data.

skip: anInteger
     Move the current position by anInteger places, either forwards or
     backwards.



File: gst-libs.info,  Node: ZLib.ZlibError,  Next: ZLib.ZlibReadStream,  Prev: ZLib.RawInflateStream,  Up: ZLib package

7.10 ZLib.ZlibError
===================

Defined in namespace ZLib
Superclass: Error
Category: Examples-Useful
     This exception is raised whenever there is an error in a
     compressed stream.

* Menu:

* ZLib.ZlibError-accessing::  (instance)


File: gst-libs.info,  Node: ZLib.ZlibError-accessing,  Up: ZLib.ZlibError

7.10.1 ZLib.ZlibError: accessing
--------------------------------

stream
     Answer the ZlibStream that caused the error.

stream: anObject
     Set the ZlibStream that caused the error.



File: gst-libs.info,  Node: ZLib.ZlibReadStream,  Next: ZLib.ZlibStream,  Prev: ZLib.ZlibError,  Up: ZLib package

7.11 ZLib.ZlibReadStream
========================

Defined in namespace ZLib
Superclass: ZLib.ZlibStream
Category: Examples-Useful
     This abstract class implements the basic buffering that is used
     for communication with zlib.

* Menu:

* ZLib.ZlibReadStream-accessing-reading::  (instance)
* ZLib.ZlibReadStream-streaming::  (instance)


File: gst-libs.info,  Node: ZLib.ZlibReadStream-accessing-reading,  Next: ZLib.ZlibReadStream-streaming,  Up: ZLib.ZlibReadStream

7.11.1 ZLib.ZlibReadStream: accessing-reading
---------------------------------------------

nextAvailable: anInteger into: aCollection startingAt: pos
     Place up to anInteger objects from the receiver into aCollection,
     starting from position pos and stopping if no more data is
     available.

nextAvailable: anInteger putAllOn: aStream
     Copy up to anInteger objects from the receiver to aStream,
     stopping if no more data is available.



File: gst-libs.info,  Node: ZLib.ZlibReadStream-streaming,  Prev: ZLib.ZlibReadStream-accessing-reading,  Up: ZLib.ZlibReadStream

7.11.2 ZLib.ZlibReadStream: streaming
-------------------------------------

atEnd
     Answer whether the stream has got to an end

next
     Return the next object (character or byte) in the receiver.

peek
     Returns the next element of the stream without moving the pointer.
     Returns nil when at end of stream.

peekFor: anObject
     Returns true and gobbles the next element from the stream of it is
     equal to anObject, returns false and doesn't gobble the next
     element if the next element is not equal to anObject.

position
     Answer the current value of the stream pointer.  Note that only
     inflating streams support random access to the stream data.



File: gst-libs.info,  Node: ZLib.ZlibStream,  Next: ZLib.ZlibWriteStream,  Prev: ZLib.ZlibReadStream,  Up: ZLib package

7.12 ZLib.ZlibStream
====================

Defined in namespace ZLib
Superclass: Stream
Category: Examples-Useful
     This abstract class implements the basic interface to the zlib
     module.  Its layout matches what is expected by the C code.

* Menu:

* ZLib.ZlibStream class-accessing::  (class)
* ZLib.ZlibStream class-instance creation::  (class)
* ZLib.ZlibStream-streaming::  (instance)


File: gst-libs.info,  Node: ZLib.ZlibStream class-accessing,  Next: ZLib.ZlibStream class-instance creation,  Up: ZLib.ZlibStream

7.12.1 ZLib.ZlibStream class: accessing
---------------------------------------

bufferSize
     Answer the size of the output buffers that are passed to zlib.
     Each zlib stream uses a buffer of this size.

bufferSize: anInteger
     Set the size of the output buffers that are passed to zlib.  Each
     zlib stream uses a buffer of this size.

defaultCompressionLevel
     Return the default compression level used by deflating streams.

defaultCompressionLevel: anInteger
     Set the default compression level used by deflating streams.  It
     should be a number between 1 and 9.



File: gst-libs.info,  Node: ZLib.ZlibStream class-instance creation,  Next: ZLib.ZlibStream-streaming,  Prev: ZLib.ZlibStream class-accessing,  Up: ZLib.ZlibStream

7.12.2 ZLib.ZlibStream class: instance creation
-----------------------------------------------

new
     This method should not be called for instances of this class.

on: aStream
     Answer an instance of the receiver that decorates aStream.



File: gst-libs.info,  Node: ZLib.ZlibStream-streaming,  Prev: ZLib.ZlibStream class-instance creation,  Up: ZLib.ZlibStream

7.12.3 ZLib.ZlibStream: streaming
---------------------------------

isExternalStream
     Answer whether the receiver streams on a file or socket.

name
     Return the name of the underlying stream.

species
     Return the type of the collections returned by #upTo: etc.

stream
     Answer the wrapped stream.



File: gst-libs.info,  Node: ZLib.ZlibWriteStream,  Prev: ZLib.ZlibStream,  Up: ZLib package

7.13 ZLib.ZlibWriteStream
=========================

Defined in namespace ZLib
Superclass: ZLib.ZlibStream
Category: Examples-Useful
     This abstract class implements the basic buffering that is used
     for communication with zlib in a WriteStream decorator.

* Menu:

* ZLib.ZlibWriteStream-streaming::  (instance)


File: gst-libs.info,  Node: ZLib.ZlibWriteStream-streaming,  Up: ZLib.ZlibWriteStream

7.13.1 ZLib.ZlibWriteStream: streaming
--------------------------------------

close
     Finish the deflated output to the destination stream using
     Z_FINISH.  The destination stream is closed, which implies
     flushing.

contents
     Finish the deflated output to the destination stream using
     Z_FINISH and return the deflated data (requires the destination
     stream to support #contents).

finish
     Finish the deflated output to the destination stream using
     Z_FINISH.  The destination stream is not flushed.

flush
     Flush the deflated output to the destination stream, and flush the
     destination stream.

flushBuffer
     Flush the deflated output to the destination stream.

flushDictionary
     Flush the deflated output to the destination stream using
     Z_FULL_FLUSH, and flush the destination stream.

next: n putAll: aCollection startingAt: pos
     Put n characters or bytes of aCollection, starting at the pos-th,
     in the deflation buffer.

nextPut: aByte
     Append a character or byte (depending on whether the destination
     stream works on a ByteArray or String) to the deflation buffer.

partialFlush
     Flush the deflated output to the destination stream using
     Z_PARTIAL_FLUSH, and flush the destination stream.

position
     Answer the number of compressed bytes written.

readStream
     Finish the deflated output to the destination stream using
     Z_FINISH and return a ReadStream on the deflated data (requires
     the destination stream to support #readStream).

syncFlush
     Flush the deflated output to the destination stream using
     Z_SYNC_FLUSH, and flush the destination stream.  Note that this
     includes the four bytes 0/0/255/255 at the end of the flush.



File: gst-libs.info,  Node: XML/XPath/XSL packages,  Next: ZLib package,  Prev: Iconv/I18N packages,  Up: Top

8 Libraries for the SAX, DOM, XPath and XSLT standards
******************************************************

_by Thomas Gagne, edited by Paolo Bonzini_

* Menu:

* Building a DOM from XML::
* Building XML::
* Using DTDs::
* XSL Processing::
* Attributions::


File: gst-libs.info,  Node: Building a DOM from XML,  Next: Building XML,  Up: XML/XPath/XSL packages

8.1 Building a DOM from XML
===========================

If you're like me, the first thing you may be trying to do is build a
Document Object Model (DOM) tree from some kind of XML input.  Assuming
you've got the XML in a String the following code will build an XML
Document:

     XML.SAXParser defaultParserClass processDocumentString: theXMLString
     	beforeScanDo: [ :p | p validate: false].

   Though the code above appears as though it should be easy to use,
there's some hidden features you should know about.  First,
`theXMLString' can not contain any null bytes.  Depending on where your
XML comes from it may have a NULL byte at the end (like mine did).
Many languages implement strings as an array of bytes (usually
printable ones) ending with a null (a character with integer value 0).
In my case, the XML was coming from a remote client written in C using
middleware to send the message to my server.  Since the middleware
doesn't assume to know anything about the message it received, it's
received into a String, null-byte and all.  To remove it I used:

     XML.SAXParser defaultParserClass
         processDocumentString: (aString copyWithout: 0 asCharacter)
         beforeScanDo: [ :p | p validate: false].

   Starting out, I didn't know much about the value of DTDs either
(Document Type Definitions), so I wasn't using them (more on why you
should later).  What you need to know is XML comes in two flavors,
(three if you include broken as a flavor) _well-formed_ and _valid_.

   _Well-formed XML_ is simply XML following the basic rules, like only
one top-level (the document's root), no overlapping tags, and a few
other contraints.  Valid XML means not only is the XML well-formed, but
it's also compliant with some kind of rule base about which elements
are allowed to follow which other ones, whether or not attributes are
permitted and what their values and defaults should be, etc.

   There's no way to get around well-formedness.  Most XML tools
complain vociferously about missing or open tags.  What you may not
have lying around, though, is a DTD describing how the XML should be
assembled.  If you need to skip validation for any reason you must
include the selector:

     beforeScanDo: [ :p | p validate: false].

   Now that you have your XML document, you probably want to access its
contents (why else would you want one, right?).  Let's take the
following (brief) XML as an example:

     <porder porder_num="10351">
       <porder_head>
         <order_date>01/04/2000</order_date>
       </porder_head>
       <porder_line>
         <part>widget</part>
         <quantity>1.0000</quantity>
       </porder_line>
       <porder_line>
         <part>doodad</part>
         <quantity>2.0000</quantity>
       </porder_line>
     </porder>

   The first thing you probably want to know is how to access the
different tags, and more specifically, how to access the contents of
those tags.  First, by way of providing a roadmap to the elements I'll
show you the Smalltalk code for getting different pieces of the
document, assuming the variable you've assigned the document to is
named _doc_.  I'll also create instance variables for the various
elements as I go along:

_Element you want_                   _Code to get it_
porder element                       `doc root'
porder_head                          `doc root elementNamed:
                                     'porder_head''
order_date (as a String)             `(porderHead elementNamed:
                                     'order_date') characterData'
order_date (as a Date)               `(Date readFrom: (porderHead
                                     elementNamed: 'order_date')
                                     characterData readStream)'
a collection with both porder_lines  `doc root elementsNamed:
                                     'porder_line''

   I've deliberately left-out accessing `porder''s attribute because
accessing them is different from accessing other nodes.  You can get an
OrderedCollection of attributes using:

     attributes := doc root attributes.

but the ordered collection isn't really useful.  To access any single
attribute you'd need to look for it in the collection:

     porderNum := (attributes detect: [ :each | each key type = 'porder_num' ]) value.

   But that's not a whole lot of fun, especially if there's a lot you
need to get, and if there's any possibility the attribute may not
exist.  Then you have to do the whole `detect:ifNone:' thing, and boy,
does that make the code readable!  What I did instead was create a
method in my objects' abstract:

     dictionaryForAttributes: aCollection
         ^Dictionary withAll: (aCollection
     	collect: [ :each | each key type -> each value ])

   Now what you have is an incrementally more useful method for getting
attributes:

     attributes := self dictionaryForAttributes: doc root attributes.
     porderNum := attributes at: 'porder_num'.

   At first this appears like more code, and for a single attribute it
probably is.  But if an element includes more than one attribute the
payoff is fairly decent.  Of course, you still need to handle the
absence of an attribute in the dictionary but I think it reads a little
better using a Dictionary than an OrderedCollection:

     porderNum := attributes at: 'porder_num' ifAbsent: [].


File: gst-libs.info,  Node: Building XML,  Next: Using DTDs,  Prev: Building a DOM from XML,  Up: XML/XPath/XSL packages

8.2 Building XML
================

There's little reason to build an XML document if its not going to be
processed by something down the road.  Most XML tools require XML
documents have a document root.  A root is a tag inside which all other
tags exist, or put another way, a single parent node from which all
other nodes descend.  In my case, a co-worker was attempting to use
Sablot's sabcmd to transform the XML from my server into HTML.  So
start your document with the root ready to go:

     replyDoc := XML.Document new.
     replyDoc addNode: (XML.Element tag: 'response').

   Before doing anything more complex, we can play with our new XML
document.  Assuming you're going to want to send the XML text to
someone or write it to a file, you may first want to capture it in a
string.  Even if you don't want to first capture it into a string our
example is going to:

     replyStream := String new writeStream.
     replyDoc printOn: replyStream.

   If we examine'd the contents of our replyStream (`replyStream
contents') we'd see:

     <response/>

   Which is what an empty tag looks like.

   Let's add some text to our XML document now.  Let's say we want it
to look like:

     <response>Hello, world!</response>

   Building this actually requires two nodes be added to a new XML
document.  The first node (or element) is named `response'.  The second
node adds text to the first:

     replyDoc := XML.Document new.
     replyDoc addNode: (XML.Element tag: response). "our root node"
     replyDoc root addNode: (XML.Text text: 'Hello, world!').

   Another way of writing it, and the way I've adopted in my code is to
create the whole node before adding it.  This is not just to reduce the
appearance of assignments, but it suggests a template for cascading
`#addNode:' messages to an element, which, if you're building any kind
of nontrivial XML, you'll be doing a lot of:

     replyDoc := XML.Document new.
     replyDoc addNode: (
         (XML.Element tag: response)
             addNode: (XML.Text text: 'Hello, world!')
     ).

   Unless you're absolutely sure you'll never accidentally add text
nodes that have an ampersand (&) in them, you'll need to escape it to
get past XML parsers.  The way I got around this was to escape them
whenever I added text nodes.  To make it easier, I (again) created a
method in my objects' abstract superclass:

     asXMLElement: tag value: aValue
         | n |

         n := XML.Element tag: tag.
         aValue isNil ifFalse: [
     	n addNode: (XML.Text
     	    text: (aValue displayString copyReplaceAll: '&' with: '&amp;'))].
         ^n

   Calls to `self asXMLElement: 'sometagname' value:
anInstanceVariable' are littered throughout my code.

   Adding attributes to documents is, thankfully, easier than accessing
them.  If we wanted to add an attribute to our document above we can do
so with a single statement:

     replyDoc root addAttribute: (XML.Attribute name: 'isExample' value: 'yes').

   Now, our XML looks like:

     <response isExample="yes">Hello, world!</response>


File: gst-libs.info,  Node: Using DTDs,  Next: XSL Processing,  Prev: Building XML,  Up: XML/XPath/XSL packages

8.3 Using DTDs
==============

What I didn't appreciate in my first XML project (this one) was how
much error checking I was doing just to verify the format of incoming
XML.  During testing I'd go looking for attributes or elements that
_should_ have been there but for various reasons were not.  Because I
was coding fast and furious I overlooked some and ignored others.
Testing quickly ferreted out my carelessnes and my application started
throwing exceptions faster than election officials throw chads.

   The cure, at least for formatting, is having a DTD, or Document Type
Definition describing the XML format.  You can read more about the
syntax of DTDs in the XML specification.

   There's not a lot programmers are able to do with DTDs in
VisualWorks, except requiring incoming XML to include DOCTYPE
statements.  There is something programmers need to do to handle the
exceptions the XML parser throws when it finds errors.

   I'm not an expert at writing Smalltalk exception handling code, and I
haven't decided on what those exceptions should look like to the client
who sent the poorly formatted XML in the first place.  The code below
does a decent job of catching the errors and putting the description of
the error into an XML response.  It's also a fairly decent example of
XML document building as discussed earlier.

     replyDoc := XML.Document new.
     replyDoc addNode: (XML.Element tag: 'response').

     [
         doc := XML.SAXParser defaultParserClass processDocumentString: (anIsdMessage message copyWithout: 0) asString
     ] on: Exception do: [ :ex |
         replyDoc root
             addAttribute: (XML.Attribute name: 'type' value: 'Exception');
             addNode: ((XML.Element tag: 'description')
                 addNode: (XML.Text text: ex signal description));
             addNode: ((XML.Element tag: 'message')
                 addNode: (XML.Text text: ex messageText))
     ].

   I said before there's not a lot programmers can do with DTDs, but
there are some things I wish the XML library would do:

   * I'd like to make sure the documents I build are built correctly.
     It would be great if a DTD could be attached to an empty XML
     document so that exceptions could be thrown as misplaced elements
     were added.

   * It would be great to specify which DTD the XML parser should use
     when parsing incoming XML so that the incoming XML wouldn't always
     have to include a <!DOCTYPE> tag.  Though it's fairly easy to add
     the tag at the start of XML text, it's really not that simple.
     You need to know the XML's root element before adding the
     <!DOCTYPE> tag but you really don't know that until after you've
     parsed the XML   You would have to parse the XML, determine the
     root tag, then parse the output of the first into a new XML
     document with validation turned-on.

   * Another reason to be able to create a DTD document to use with
     subsequent parsing is to avoid the overhead of parsing the same
     DTD over and over again.  In transaction processing systems this
     kind of redundant task could be eliminated and the spare CPU
     cycles put to better use.


File: gst-libs.info,  Node: XSL Processing,  Next: Attributions,  Prev: Using DTDs,  Up: XML/XPath/XSL packages

8.4 XSL Processing
==================

I spent a night the other week trying to figure out how to get the XSL
libraries to do anything.  I no longer need it now, but I did discover
some things others with an immediate need may want to be aware of.

   * Transforming an XML document requires you parse the XSL and XML
     documents separately first.  After that, you tell the
     XSL.RuleDatabase to process the XML document.  The result is
     another XML document with the transformations.

     A code snippet for doing just that appears below.
          | rules xmlDoc htmlDoc |

          rules := XSL.RuleDatabase new readFileNamed: 'paymentspending.xsl'.
          xmlDoc := XML.SAXParser defaultParserClass
                       processDocumentInFilename: 'paymentspending.xml'
                       beforeScanDo: [ :p | p validate: false ].
          htmlDoc := rules process: xmlDoc.

     There is also a `readString:' method which can be used instead of
     `readFileNamed:'.

   * The XSL library doesn't use the W3-approved stylesheet, but
     instead uses the draft version (same one Microsoft uses).
     `<xsl:stylesheet xmlns:xsl="http://www.w3.org/TR/WD-xsl">'

   * The functions `position()' and `count()' aren't implemented, or if
     they are, aren't implemented in the way other XSL tools implement
     it.


File: gst-libs.info,  Node: Attributions,  Prev: XSL Processing,  Up: XML/XPath/XSL packages

8.5 Attributions
================

Cincom, for supporting Smalltalk and the Smalltalk community by making
the library available for GNU Smalltalk under the LGPL.

   Thanks also to Randy Ynchausti, Bijan Parsia, Reinout Heeck, and
Joseph Bacanskas for answering many questions on the XML library.


File: gst-libs.info,  Node: Class index,  Next: Method index,  Prev: ZLib package,  Up: Top

Class index
***********

 [index ]
* Menu:

* BLOX.BArc:                             BLOX.BArc.             (line 6)
* BLOX.BBalloon:                         BLOX.BBalloon.         (line 6)
* BLOX.BBoundingBox:                     BLOX.BBoundingBox.     (line 6)
* BLOX.BButton:                          BLOX.BButton.          (line 6)
* BLOX.BButtonLike:                      BLOX.BButtonLike.      (line 6)
* BLOX.BCanvas:                          BLOX.BCanvas.          (line 6)
* BLOX.BCanvasObject:                    BLOX.BCanvasObject.    (line 6)
* BLOX.BCheckMenuItem:                   BLOX.BCheckMenuItem.   (line 6)
* BLOX.BColorButton:                     BLOX.BColorButton.     (line 6)
* BLOX.BContainer:                       BLOX.BContainer.       (line 6)
* BLOX.BDialog:                          BLOX.BDialog.          (line 6)
* BLOX.BDropDown:                        BLOX.BDropDown.        (line 6)
* BLOX.BDropDownEdit:                    BLOX.BDropDownEdit.    (line 6)
* BLOX.BDropDownList:                    BLOX.BDropDownList.    (line 6)
* BLOX.BEdit:                            BLOX.BEdit.            (line 6)
* BLOX.BEmbeddedImage:                   BLOX.BEmbeddedImage.   (line 6)
* BLOX.BEmbeddedText:                    BLOX.BEmbeddedText.    (line 6)
* BLOX.BEventSet:                        BLOX.BEventSet.        (line 6)
* BLOX.BEventTarget:                     BLOX.BEventTarget.     (line 6)
* BLOX.BExtended:                        BLOX.BExtended.        (line 6)
* BLOX.BForm:                            BLOX.BForm.            (line 6)
* BLOX.BImage:                           BLOX.BImage.           (line 6)
* BLOX.BLabel:                           BLOX.BLabel.           (line 6)
* BLOX.BLine:                            BLOX.BLine.            (line 6)
* BLOX.BList:                            BLOX.BList.            (line 6)
* BLOX.Blox:                             BLOX.Blox.             (line 6)
* BLOX.BMenu:                            BLOX.BMenu.            (line 6)
* BLOX.BMenuBar:                         BLOX.BMenuBar.         (line 6)
* BLOX.BMenuItem:                        BLOX.BMenuItem.        (line 6)
* BLOX.BMenuObject:                      BLOX.BMenuObject.      (line 6)
* BLOX.BOval:                            BLOX.BOval.            (line 6)
* BLOX.BPolyline:                        BLOX.BPolyline.        (line 6)
* BLOX.BPopupMenu:                       BLOX.BPopupMenu.       (line 6)
* BLOX.BPopupWindow:                     BLOX.BPopupWindow.     (line 6)
* BLOX.BPrimitive:                       BLOX.BPrimitive.       (line 6)
* BLOX.BProgress:                        BLOX.BProgress.        (line 6)
* BLOX.BRadioButton:                     BLOX.BRadioButton.     (line 6)
* BLOX.BRadioGroup:                      BLOX.BRadioGroup.      (line 6)
* BLOX.BRectangle:                       BLOX.BRectangle.       (line 6)
* BLOX.BScrolledCanvas:                  BLOX.BScrolledCanvas.  (line 6)
* BLOX.BSpline:                          BLOX.BSpline.          (line 6)
* BLOX.BText:                            BLOX.BText.            (line 6)
* BLOX.BTextAttributes:                  BLOX.BTextAttributes.  (line 6)
* BLOX.BTextBindings:                    BLOX.BTextBindings.    (line 6)
* BLOX.BTextTags:                        BLOX.BTextTags.        (line 6)
* BLOX.BToggle:                          BLOX.BToggle.          (line 6)
* BLOX.BTransientWindow:                 BLOX.BTransientWindow. (line 6)
* BLOX.BViewport:                        BLOX.BViewport.        (line 6)
* BLOX.BWidget:                          BLOX.BWidget.          (line 6)
* BLOX.BWindow:                          BLOX.BWindow.          (line 6)
* BLOX.Gui:                              BLOX.Gui.              (line 6)
* Complex:                               Complex.               (line 6)
* DBI.ColumnInfo:                        DBI.ColumnInfo.        (line 6)
* DBI.Connection:                        DBI.Connection.        (line 6)
* DBI.ConnectionInfo:                    DBI.ConnectionInfo.    (line 6)
* DBI.FieldConverter:                    DBI.FieldConverter.    (line 6)
* DBI.ResultSet:                         DBI.ResultSet.         (line 6)
* DBI.Row:                               DBI.Row.               (line 6)
* DBI.Statement:                         DBI.Statement.         (line 6)
* DBI.Table:                             DBI.Table.             (line 6)
* Debugger:                              Debugger.              (line 6)
* I18N.BigEndianFileStream:              I18N.BigEndianFileStream.
                                                                (line 6)
* I18N.EncodedStream:                    I18N.EncodedStream.    (line 6)
* I18N.EncodedString:                    I18N.EncodedString.    (line 6)
* I18N.EncodedStringFactory:             I18N.EncodedStringFactory.
                                                                (line 6)
* I18N.Encoder:                          I18N.Encoder.          (line 6)
* I18N.FileStreamSegment:                I18N.FileStreamSegment.
                                                                (line 6)
* I18N.IncompleteSequenceError:          I18N.IncompleteSequenceError.
                                                                (line 6)
* I18N.InvalidCharsetError:              I18N.InvalidCharsetError.
                                                                (line 6)
* I18N.InvalidSequenceError:             I18N.InvalidSequenceError.
                                                                (line 6)
* I18N.LcMessages:                       I18N.LcMessages.       (line 6)
* I18N.LcMessagesCatalog:                I18N.LcMessagesCatalog.
                                                                (line 6)
* I18N.LcMessagesDomain:                 I18N.LcMessagesDomain. (line 6)
* I18N.LcMessagesDummyDomain:            I18N.LcMessagesDummyDomain.
                                                                (line 6)
* I18N.LcMessagesMoFileVersion0:         I18N.LcMessagesMoFileVersion0.
                                                                (line 6)
* I18N.LcMessagesTerritoryDomain:        I18N.LcMessagesTerritoryDomain.
                                                                (line 6)
* I18N.LcMonetary:                       I18N.LcMonetary.       (line 6)
* I18N.LcMonetaryISO:                    I18N.LcMonetaryISO.    (line 6)
* I18N.LcNumeric:                        I18N.LcNumeric.        (line 6)
* I18N.LcPrintFormats:                   I18N.LcPrintFormats.   (line 6)
* I18N.LcTime:                           I18N.LcTime.           (line 6)
* I18N.Locale:                           I18N.Locale.           (line 6)
* I18N.LocaleConventions:                I18N.LocaleConventions.
                                                                (line 6)
* I18N.LocaleData:                       I18N.LocaleData.       (line 6)
* I18N.RTEAlternativeNode:               I18N.RTEAlternativeNode.
                                                                (line 6)
* I18N.RTEBinaryNode:                    I18N.RTEBinaryNode.    (line 6)
* I18N.RTELiteralNode:                   I18N.RTELiteralNode.   (line 6)
* I18N.RTENegationNode:                  I18N.RTENegationNode.  (line 6)
* I18N.RTEParameterNode:                 I18N.RTEParameterNode. (line 6)
* I18N.RunTimeExpression:                I18N.RunTimeExpression.
                                                                (line 6)
* Sockets.AbstractSocket:                Sockets.AbstractSocket.
                                                                (line 6)
* Sockets.AbstractSocketImpl:            Sockets.AbstractSocketImpl.
                                                                (line 6)
* Sockets.CAddrInfoStruct:               Sockets.CAddrInfoStruct.
                                                                (line 6)
* Sockets.CSockAddrIn6Struct:            Sockets.CSockAddrIn6Struct.
                                                                (line 6)
* Sockets.Datagram:                      Sockets.Datagram.      (line 6)
* Sockets.DatagramSocket:                Sockets.DatagramSocket.
                                                                (line 6)
* Sockets.DatagramSocketImpl:            Sockets.DatagramSocketImpl.
                                                                (line 6)
* Sockets.DummyStream:                   Sockets.DummyStream.   (line 6)
* Sockets.ICMP6SocketImpl:               Sockets.ICMP6SocketImpl.
                                                                (line 6)
* Sockets.ICMPSocketImpl:                Sockets.ICMPSocketImpl.
                                                                (line 6)
* Sockets.IP6Address:                    Sockets.IP6Address.    (line 6)
* Sockets.IPAddress:                     Sockets.IPAddress.     (line 6)
* Sockets.MulticastSocket:               Sockets.MulticastSocket.
                                                                (line 6)
* Sockets.MulticastSocketImpl:           Sockets.MulticastSocketImpl.
                                                                (line 6)
* Sockets.OOBSocketImpl:                 Sockets.OOBSocketImpl. (line 6)
* Sockets.RawSocketImpl:                 Sockets.RawSocketImpl. (line 6)
* Sockets.ReadBuffer:                    Sockets.ReadBuffer.    (line 6)
* Sockets.ServerSocket:                  Sockets.ServerSocket.  (line 6)
* Sockets.Socket:                        Sockets.Socket.        (line 6)
* Sockets.SocketAddress:                 Sockets.SocketAddress. (line 6)
* Sockets.SocketImpl:                    Sockets.SocketImpl.    (line 6)
* Sockets.StreamSocket:                  Sockets.StreamSocket.  (line 6)
* Sockets.TCPSocketImpl:                 Sockets.TCPSocketImpl. (line 6)
* Sockets.UDPSocketImpl:                 Sockets.UDPSocketImpl. (line 6)
* Sockets.UnixAddress:                   Sockets.UnixAddress.   (line 6)
* Sockets.UnixDatagramSocketImpl:        Sockets.UnixDatagramSocketImpl.
                                                                (line 6)
* Sockets.UnixSocketImpl:                Sockets.UnixSocketImpl.
                                                                (line 6)
* Sockets.WriteBuffer:                   Sockets.WriteBuffer.   (line 6)
* ZLib.DeflateStream:                    ZLib.DeflateStream.    (line 6)
* ZLib.DeflateWriteStream:               ZLib.DeflateWriteStream.
                                                                (line 6)
* ZLib.GZipDeflateStream:                ZLib.GZipDeflateStream.
                                                                (line 6)
* ZLib.GZipDeflateWriteStream:           ZLib.GZipDeflateWriteStream.
                                                                (line 6)
* ZLib.GZipInflateStream:                ZLib.GZipInflateStream.
                                                                (line 6)
* ZLib.InflateStream:                    ZLib.InflateStream.    (line 6)
* ZLib.RawDeflateStream:                 ZLib.RawDeflateStream. (line 6)
* ZLib.RawDeflateWriteStream:            ZLib.RawDeflateWriteStream.
                                                                (line 6)
* ZLib.RawInflateStream:                 ZLib.RawInflateStream. (line 6)
* ZLib.ZlibError:                        ZLib.ZlibError.        (line 6)
* ZLib.ZlibReadStream:                   ZLib.ZlibReadStream.   (line 6)
* ZLib.ZlibStream:                       ZLib.ZlibStream.       (line 6)
* ZLib.ZlibWriteStream:                  ZLib.ZlibWriteStream.  (line 6)


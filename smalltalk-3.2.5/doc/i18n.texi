@c Define the class index, method index, and selector cross-reference
@ifclear CLASS-INDICES
@set CLASS-INDICES
@defindex cl
@defcodeindex me
@defcodeindex sl 
@end ifclear

@c These are used for both TeX and HTML
@set BEFORE1
@set  AFTER1
@set BEFORE2
@set  AFTER2

@ifinfo
@c Use asis so that leading and trailing spaces are meaningful.
@c Remember we're inside a @menu command, hence the blanks are
@c kept in the output.
@set BEFORE1 @asis{* }
@set  AFTER1 @asis{::}
@set BEFORE2 @asis{  (}
@set  AFTER2 @asis{)}
@end ifinfo

@macro class {a,b}
@value{BEFORE1}\a\\a\@b{\b\}@value{AFTER1}
@end macro
@macro superclass {a,b}
\a\\a\@value{BEFORE2}@i{\b\}@value{AFTER2}
@end macro

@ifnotinfo
@macro begindetailmenu
@display
@end macro
@macro enddetailmenu
@end display
@end macro
@end ifnotinfo

@ifinfo
@macro begindetailmenu
@detailmenu
@end macro
@macro enddetailmenu
@end detailmenu
@end macro
@end ifinfo

@iftex
@macro beginmenu
@end macro
@macro endmenu
@end macro
@end iftex

@ifnottex
@macro beginmenu
@menu
@end macro
@macro endmenu
@end menu
@end macro
@end ifnottex

@beginmenu
@ifnottex
Alphabetic list:
* I18N.BigEndianFileStream::
* I18N.EncodedStream::
* I18N.EncodedString::
* I18N.EncodedStringFactory::
* I18N.Encoder::
* I18N.FileStreamSegment::
* I18N.IncompleteSequenceError::
* I18N.InvalidCharsetError::
* I18N.InvalidSequenceError::
* I18N.LcMessages::
* I18N.LcMessagesCatalog::
* I18N.LcMessagesDomain::
* I18N.LcMessagesDummyDomain::
* I18N.LcMessagesMoFileVersion0::
* I18N.LcMessagesTerritoryDomain::
* I18N.LcMonetary::
* I18N.LcMonetaryISO::
* I18N.LcNumeric::
* I18N.LcPrintFormats::
* I18N.LcTime::
* I18N.Locale::
* I18N.LocaleConventions::
* I18N.LocaleData::
* I18N.RTEAlternativeNode::
* I18N.RTEBinaryNode::
* I18N.RTELiteralNode::
* I18N.RTENegationNode::
* I18N.RTEParameterNode::
* I18N.RunTimeExpression::
@end ifnottex

@ifinfo
Class tree:
@end ifinfo
@iftex
@section Tree
@end iftex
@ifnotinfo

Classes documented in this manual are @b{boldfaced}.

@end ifnotinfo
@begindetailmenu
@superclass{@t{}, Object}
@superclass{@t{ }, Exception}
@superclass{@t{  }, Error}
@class{@t{   }, I18N.IncompleteSequenceError}
@class{@t{   }, I18N.InvalidSequenceError}
@superclass{@t{   }, SystemExceptions.InvalidValue}
@superclass{@t{    }, SystemExceptions.SystemExceptions.InvalidArgument}
@class{@t{     }, I18N.InvalidCharsetError}
@superclass{@t{ }, FileSegment}
@class{@t{  }, I18N.FileStreamSegment}
@class{@t{ }, I18N.EncodedStringFactory}
@class{@t{ }, I18N.LocaleData}
@class{@t{  }, I18N.LcMessagesDomain}
@class{@t{   }, I18N.LcMessagesCatalog}
@class{@t{    }, I18N.LcMessagesMoFileVersion0}
@class{@t{   }, I18N.LcMessagesDummyDomain}
@class{@t{   }, I18N.LcMessagesTerritoryDomain}
@class{@t{  }, I18N.Locale}
@class{@t{  }, I18N.LocaleConventions}
@class{@t{   }, I18N.LcMessages}
@class{@t{   }, I18N.LcPrintFormats}
@class{@t{    }, I18N.LcNumeric}
@class{@t{     }, I18N.LcMonetary}
@class{@t{      }, I18N.LcMonetaryISO}
@class{@t{    }, I18N.LcTime}
@class{@t{ }, I18N.RunTimeExpression}
@class{@t{  }, I18N.RTEAlternativeNode}
@class{@t{  }, I18N.RTEBinaryNode}
@class{@t{  }, I18N.RTELiteralNode}
@class{@t{  }, I18N.RTENegationNode}
@class{@t{  }, I18N.RTEParameterNode}
@superclass{@t{ }, Iterable}
@superclass{@t{  }, Collection}
@superclass{@t{   }, SequenceableCollection}
@superclass{@t{    }, ArrayedCollection}
@superclass{@t{     }, CharacterArray}
@class{@t{      }, I18N.EncodedString}
@superclass{@t{  }, Stream}
@superclass{@t{   }, FileDescriptor}
@superclass{@t{    }, FileStream}
@class{@t{     }, I18N.BigEndianFileStream}
@class{@t{   }, I18N.EncodedStream}
@class{@t{   }, I18N.Encoder}
@enddetailmenu
@endmenu
@unmacro class
@unmacro superclass
@unmacro endmenu
@unmacro beginmenu
@unmacro enddetailmenu
@unmacro begindetailmenu
@node I18N.BigEndianFileStream
@section I18N.BigEndianFileStream
@clindex I18N.BigEndianFileStream

@table @b
@item Defined in namespace I18N
@itemx Superclass: FileStream
@itemx Category: i18n-Messages
Unlike ByteStream and FileStream, this retrieves integer numbers in
big-endian (68000, PowerPC, SPARC) order.
@end table

@menu
@end menu

@node I18N.EncodedStream
@section I18N.EncodedStream
@clindex I18N.EncodedStream

@table @b
@item Defined in namespace I18N
@itemx Superclass: Stream
@itemx Category: i18n-Character sets
This class is a factory for subclasses of Encoder.  Encoders
act as parts of a pipe, hence this class provides methods that
construct an appropriate pipe.
@end table

@menu
* I18N.EncodedStream class-initializing::  (class)
* I18N.EncodedStream class-instance creation::  (class)
@end menu



@node I18N.EncodedStream class-initializing
@subsection I18N.EncodedStream class:@- initializing

@table @b
@meindex initialize
@item initialize
Initialize the registry of the encoders to include the standard
encoders contained in the library.


@meindex registerEncoderFor:@-toUTF32:@-fromUTF32:@-
@slindex next
@item registerEncoderFor:@- arrayOfAliases toUTF32:@- toUTF32Class fromUTF32:@- fromUTF32Class
Register the two classes that will respectively convert from the
charsets in arrayOfAliases to UTF-32 and vice versa.

The former class is a stream that accepts characters and returns
(via #next) integers representing UTF-32 character codes, while
the latter accepts UTF-32 character codes and converts them to
characters.  For an example see respectively FromUTF7 and ToUTF7
(I admit it is not a trivial example).


@end table



@node I18N.EncodedStream class-instance creation
@subsection I18N.EncodedStream class:@- instance creation

@table @b
@meindex encoding:@-
@item encoding:@- anUnicodeString
Answer a pipe of encoders that converts anUnicodeString to default
encoding for strings (the current locale's default charset if none
is specified).


@meindex encoding:@-as:@-
@item encoding:@- aStringOrStream as:@- toEncoding
Answer a pipe of encoders that converts anUnicodeString (which contains
to the supplied encoding (which can be an ASCII String or Symbol).


@meindex on:@-from:@-
@item on:@- aStringOrStream from:@- fromEncoding
Answer a pipe of encoders that converts aStringOrStream
(which can be a string or another stream) from the given
encoding to the default locale's default charset.


@meindex on:@-from:@-to:@-
@item on:@- aStringOrStream from:@- fromEncoding to:@- toEncoding
Answer a pipe of encoders that converts aStringOrStream
(which can be a string or another stream) between the
two supplied encodings (which can be ASCII Strings or
Symbols)


@meindex on:@-to:@-
@item on:@- aStringOrStream to:@- toEncoding
Answer a pipe of encoders that converts aStringOrStream
(which can be a string or another stream) from the default
locale's default charset to the given encoding.


@meindex unicodeOn:@-
@item unicodeOn:@- aStringOrStream
Answer a pipe of encoders that converts aStringOrStream (which can
be a string or another stream) from its encoding (or the current
locale's default charset, if the encoding cannot be determined)
to integers representing Unicode character codes.


@meindex unicodeOn:@-encoding:@-
@item unicodeOn:@- aStringOrStream encoding:@- fromEncoding
Answer a pipe of encoders that converts aStringOrStream
(which can be a string or another stream) from the supplied
encoding (which can be an ASCII String or Symbol) to
integers representing Unicode character codes.


@end table

@node I18N.EncodedString
@section I18N.EncodedString
@clindex I18N.EncodedString

@table @b
@item Defined in namespace I18N
@itemx Superclass: CharacterArray
@itemx Category: i18n-Character sets
An EncodedString, like a String, is a sequence of bytes representing
a specific encoding of a UnicodeString.  Unlike a String, however,
the encoding name is known, rather than detected, irrelevant or
assumed to be the system default.
@end table

@menu
* I18N.EncodedString class-accessing::  (class)
* I18N.EncodedString class-instance creation::  (class)
* I18N.EncodedString-accessing::  (instance)
* I18N.EncodedString-copying::  (instance)
* I18N.EncodedString-initializing::  (instance)
* I18N.EncodedString-printing::  (instance)
@end menu



@node I18N.EncodedString class-accessing
@subsection I18N.EncodedString class:@- accessing

@table @b
@meindex isUnicode
@item isUnicode
Answer false; the receiver stores bytes (i.e. an encoded
form), not characters.


@end table



@node I18N.EncodedString class-instance creation
@subsection I18N.EncodedString class:@- instance creation

@table @b
@meindex fromString:@-
@item fromString:@- aString
Not commented.

@meindex fromString:@-encoding:@-
@item fromString:@- aString encoding:@- encoding
Not commented.

@meindex new
@item new
This method should not be called for instances of this class.

@meindex new:@-
@item new:@- size
This method should not be called for instances of this class.

@end table



@node I18N.EncodedString-accessing
@subsection I18N.EncodedString:@- accessing

@table @b
@meindex asString
@item asString
Answer `string'.

@meindex asUnicodeString
@item asUnicodeString
Not commented.

@meindex at:@-
@item at:@- anIndex
Not commented.

@meindex at:@-put:@-
@item at:@- anIndex put:@- anObject
Not commented.

@meindex do:@-
@item do:@- aBlock
Not commented.

@meindex encoding
@item encoding
Not commented.

@meindex hash
@item hash
Not commented.

@meindex size
@item size
Not commented.

@meindex species
@item species
Not commented.

@meindex utf16Encoding
@item utf16Encoding
Not commented.

@meindex utf32Encoding
@item utf32Encoding
Not commented.

@meindex valueAt:@-
@item valueAt:@- anIndex
Not commented.

@meindex valueAt:@-put:@-
@item valueAt:@- anIndex put:@- anObject
Not commented.

@end table



@node I18N.EncodedString-copying
@subsection I18N.EncodedString:@- copying

@table @b
@meindex copy
@item copy
Not commented.

@meindex copyEmpty
@item copyEmpty
Not commented.

@meindex copyEmpty:@-
@item copyEmpty:@- size
Not commented.

@end table



@node I18N.EncodedString-initializing
@subsection I18N.EncodedString:@- initializing

@table @b
@meindex encoding:@-
@item encoding:@- aString
Not commented.

@meindex setString:@-
@item setString:@- aString
Not commented.

@end table



@node I18N.EncodedString-printing
@subsection I18N.EncodedString:@- printing

@table @b
@meindex displayOn:@-
@slindex printOn:@-
@item displayOn:@- aStream
Print a representation of the receiver on aStream. Unlike
#printOn:@-, this method does not display the encoding and
enclosing quotes.


@meindex printOn:@-
@item printOn:@- aStream
Print a representation of the receiver on aStream.


@end table

@node I18N.EncodedStringFactory
@section I18N.EncodedStringFactory
@clindex I18N.EncodedStringFactory

@table @b
@item Defined in namespace I18N
@itemx Superclass: Object
@itemx Category: i18n-Character sets
An EncodedStringFactory is used (in place of class objects) so that
Encoders can return EncodedString objects with the correct encoding.
@end table

@menu
* I18N.EncodedStringFactory class-instance creation::  (class)
* I18N.EncodedStringFactory-accessing::  (instance)
* I18N.EncodedStringFactory-instance creation::  (instance)
@end menu



@node I18N.EncodedStringFactory class-instance creation
@subsection I18N.EncodedStringFactory class:@- instance creation

@table @b
@meindex encoding:@-
@item encoding:@- aString
Answer a new EncodedStringFactory, creating strings with the
given encoding.


@end table



@node I18N.EncodedStringFactory-accessing
@subsection I18N.EncodedStringFactory:@- accessing

@table @b
@meindex isUnicode
@item isUnicode
Answer false; the receiver stores bytes (i.e. an encoded
form), not characters.


@end table



@node I18N.EncodedStringFactory-instance creation
@subsection I18N.EncodedStringFactory:@- instance creation

@table @b
@meindex encoding
@item encoding
Answer the encoding used for the created Strings.


@meindex encoding:@-
@item encoding:@- aString
Set the encoding used for the created Strings.


@meindex fromString:@-
@item fromString:@- aString
Answer an EncodedString based on aString and in the encoding
represented by the receiver.


@meindex new
@item new
Answer a new, empty EncodedString using the encoding
represented by the receiver.


@meindex new:@-
@item new:@- size
Answer a new EncodedString of the given size, using the encoding
represented by the receiver.


@end table

@node I18N.Encoder
@section I18N.Encoder
@clindex I18N.Encoder

@table @b
@item Defined in namespace I18N
@itemx Superclass: Stream
@itemx Category: i18n-Character sets
This class is the superclass of streams that take an origin
and encode it to another character set.  The subclasses are
are for internal use unless you are writing support for your own
encodings.
@end table

@menu
* I18N.Encoder class-instance creation::  (class)
* I18N.Encoder-stream operations::  (instance)
@end menu



@node I18N.Encoder class-instance creation
@subsection I18N.Encoder class:@- instance creation

@table @b
@meindex on:@-from:@-to:@-
@item on:@- aStringOrStream from:@- fromEncoding to:@- toEncoding
Answer a new encoder that translates from fromEncoding
to toEncoding.  The encodings are guaranteed to be
those for which the encoder was registered.


@end table



@node I18N.Encoder-stream operations
@subsection I18N.Encoder:@- stream operations

@table @b
@meindex atEnd
@item atEnd
Return whether the receiver can produce another character in
the receiver; by default, this is true if there is another
character in the origin.


@meindex atEndOfInput
@item atEndOfInput
Return whether there is another character in the origin.  This
method is for private use by encoders, calling it outside won't
corrupt the internal state of the encoder but the result
probably won't be meaningful (depending on the innards of the
encoder).


@meindex next
@item next
Return the next character in the receiver; by default,
this is the next character in the origin.


@meindex nextInput
@item nextInput
Return the next character in the origin.  This method is for
private use by encoders, calling it outside may corrupt the
internal state of the encoder.


@meindex nextInputAvailable:@-into:@-startingAt:@-
@item nextInputAvailable:@- n into:@- aCollection startingAt:@- pos
Place up to N characters from the origin in aCollection.  This method is for
private use by encoders, calling it outside may corrupt the
internal state of the encoder.


@meindex peekInput
@item peekInput
Return the next character in the origin without advancing it.


@meindex species
@item species
We answer a string of Characters encoded in our destination
encoding.


@end table

@node I18N.FileStreamSegment
@section I18N.FileStreamSegment
@clindex I18N.FileStreamSegment

@table @b
@item Defined in namespace I18N
@itemx Superclass: FileSegment
@itemx Category: i18n-Messages
Unlike FileSegment, this object assumes that the `file' instance
variable is a FileStream, not a file name.
@end table

@menu
* I18N.FileStreamSegment-basic::  (instance)
@end menu



@node I18N.FileStreamSegment-basic
@subsection I18N.FileStreamSegment:@- basic

@table @b
@meindex fileName
@item fileName
Answer the name of the file containing the segment


@meindex withFileDo:@-
@item withFileDo:@- aBlock
Evaluate aBlock, passing a FileStream corresponding to the file


@end table

@node I18N.IncompleteSequenceError
@section I18N.IncompleteSequenceError
@clindex I18N.IncompleteSequenceError

@table @b
@item Defined in namespace I18N
@itemx Superclass: Error
@itemx Category: i18n-Character sets
I am raised if an invalid sequence is found while converting a
string from a charset to another.  In particular, I am raised
if the input stream ends abruptly in the middle of a multi-byte
sequence.
@end table

@menu
* I18N.IncompleteSequenceError-accessing::  (instance)
@end menu



@node I18N.IncompleteSequenceError-accessing
@subsection I18N.IncompleteSequenceError:@- accessing

@table @b
@meindex description
@item description
Answer a textual description of the exception.


@end table

@node I18N.InvalidCharsetError
@section I18N.InvalidCharsetError
@clindex I18N.InvalidCharsetError

@table @b
@item Defined in namespace I18N
@itemx Superclass: SystemExceptions.SystemExceptions.InvalidArgument
@itemx Category: i18n-Character sets
I am raised if the user tries to encode from or to an unknown
encoding
@end table

@menu
* I18N.InvalidCharsetError-accessing::  (instance)
@end menu



@node I18N.InvalidCharsetError-accessing
@subsection I18N.InvalidCharsetError:@- accessing

@table @b
@meindex description
@item description
Answer a textual description of the exception.


@end table

@node I18N.InvalidSequenceError
@section I18N.InvalidSequenceError
@clindex I18N.InvalidSequenceError

@table @b
@item Defined in namespace I18N
@itemx Superclass: Error
@itemx Category: i18n-Character sets
I am raised if an invalid sequence is found while converting a
string from a charset to another
@end table

@menu
* I18N.InvalidSequenceError-accessing::  (instance)
@end menu



@node I18N.InvalidSequenceError-accessing
@subsection I18N.InvalidSequenceError:@- accessing

@table @b
@meindex description
@item description
Answer a textual description of the exception.


@end table

@node I18N.LcMessages
@section I18N.LcMessages
@clindex I18N.LcMessages

@table @b
@item Defined in namespace I18N
@itemx Superclass: I18N.LocaleConventions
@itemx Category: i18n-Messages
This object is a factory of LcMessagesDomain objects
@end table

@menu
* I18N.LcMessages class-accessing::  (class)
* I18N.LcMessages-accessing::  (instance)
* I18N.LcMessages-opening MO files::  (instance)
@end menu



@node I18N.LcMessages class-accessing
@subsection I18N.LcMessages class:@- accessing

@table @b
@meindex category
@item category
Answer the environment variable used to determine the default
locale


@meindex selector
@item selector
Answer the selector that accesses the receiver when sent to a Locale
object.


@end table



@node I18N.LcMessages-accessing
@subsection I18N.LcMessages:@- accessing

@table @b
@meindex languageDirectory
@item languageDirectory
Answer the directory holding MO files for the language


@meindex languageDirectory:@-
@item languageDirectory:@- rootDirectory
Answer the directory holding MO files for the language, given the
root directory of the locale data.


@meindex territoryDirectory
@item territoryDirectory
Answer the directory holding MO files for the language, specific to
the territory


@meindex territoryDirectory:@-
@item territoryDirectory:@- rootDirectory
Answer the directory holding MO files for the language, specific to
the territory, given the root directory of the locale data.


@end table



@node I18N.LcMessages-opening MO files
@subsection I18N.LcMessages:@- opening MO files

@table @b
@meindex ?
@item ? aString
Answer an object for the aString domain, querying both the
language catalog (e.g. pt) and the territory catalog (e.g. pt_BR
or pt_PT).


@meindex domain:@-
@item domain:@- aString
Answer an object for the aString domain, querying both the
language catalog (e.g. pt) and the territory catalog (e.g. pt_BR
or pt_PT).


@meindex domain:@-localeDirectory:@-
@item domain:@- aString localeDirectory:@- rootDirectory
Answer an object for the aString domain, querying both the
language catalog (e.g. pt) and the territory catalog (e.g. pt_BR
or pt_PT). The localeDirectory is usually '<installprefix>/share/locale'.


@end table

@node I18N.LcMessagesCatalog
@section I18N.LcMessagesCatalog
@clindex I18N.LcMessagesCatalog

@table @b
@item Defined in namespace I18N
@itemx Superclass: I18N.LcMessagesDomain
@itemx Category: i18n-Messages
This object is an abstract superclass of objects that retrieve
translated strings from a file.
@end table

@menu
@end menu

@node I18N.LcMessagesDomain
@section I18N.LcMessagesDomain
@clindex I18N.LcMessagesDomain

@table @b
@item Defined in namespace I18N
@itemx Superclass: I18N.LocaleData
@itemx Category: i18n-Messages
This object is an abstract superclass for message domains (catalogs).
It contains methods to create instances of its subclasses, but they are
commonly used only by LcMessages.

Translations are accessed using either #at:@- or the shortcut binary
messages `?'.       This way, common idioms to access translated strings
will be

     string := NLS? 'abc'.
     string := self? 'abc'.

(in the first case NLS is a class variable, in the second the receiver
implements #? through delegation) which is only five or six characters
longer than the traditional

     string := 'abc'.

(cfr. the _("abc") idiom used by GNU gettext)
@end table

@menu
* I18N.LcMessagesDomain class-opening MO files::  (class)
* I18N.LcMessagesDomain-handling the cache::  (instance)
* I18N.LcMessagesDomain-querying::  (instance)
@end menu



@node I18N.LcMessagesDomain class-opening MO files
@subsection I18N.LcMessagesDomain class:@- opening MO files

@table @b
@meindex id:@-on:@-
@item id:@- anArray on:@- aFileName
Create an instance of the receiver with a given locale identifier
from a path to the MO file


@end table



@node I18N.LcMessagesDomain-handling the cache
@subsection I18N.LcMessagesDomain:@- handling the cache

@table @b
@meindex flush
@item flush
Flush the receiver's cache of translations


@meindex shouldCache
@item shouldCache
Answer whether translations should be cached.  Never override
this method to always answer false, because that would cause
bugs when transliteration is being used.


@end table



@node I18N.LcMessagesDomain-querying
@subsection I18N.LcMessagesDomain:@- querying

@table @b
@meindex ?
@item ? aString
Answer the translation of `aString', or answer aString itself
if none is available.


@meindex at:@-
@item at:@- aString
Answer the translation of `aString', or answer aString itself
if none is available.


@meindex at:@-plural:@-with:@-
@item at:@- singularString plural:@- pluralString with:@- n
Answer either the translation of pluralString with `%1' replaced by
n if n ~= 1, or the translation of singularString if n = 1.


@meindex at:@-put:@-
@item at:@- aString put:@- anotherString
This method should not be called for instances of this class.

@meindex translatorInformation
@item translatorInformation
Answer information on the translation, or nil if there is none.
This information is stored as the `translation' of an empty string.


@meindex translatorInformationAt:@-
@item translatorInformationAt:@- key
Answer information on the translation associated to a given key


@meindex translatorInformationAt:@-at:@-
@item translatorInformationAt:@- key at:@- subkey
Answer information on the translation associated to a given key
and to a subkey of the key


@end table

@node I18N.LcMessagesDummyDomain
@section I18N.LcMessagesDummyDomain
@clindex I18N.LcMessagesDummyDomain

@table @b
@item Defined in namespace I18N
@itemx Superclass: I18N.LcMessagesDomain
@itemx Category: i18n-Messages
This object does no attempt to translate strings, returning
instead the same string passed as an argument to #?.
@end table

@menu
@end menu

@node I18N.LcMessagesMoFileVersion0
@section I18N.LcMessagesMoFileVersion0
@clindex I18N.LcMessagesMoFileVersion0

@table @b
@item Defined in namespace I18N
@itemx Superclass: I18N.LcMessagesCatalog
@itemx Category: i18n-Messages
This object is an concrete class that retrieves translated strings
from a GNU gettext MO file.  The class method #fileFormatDescription
contains an explanation of the file format.
@end table

@menu
* I18N.LcMessagesMoFileVersion0 class-documentation::  (class)
* I18N.LcMessagesMoFileVersion0 class-plurals::  (class)
* I18N.LcMessagesMoFileVersion0-flushing the cache::  (instance)
@end menu



@node I18N.LcMessagesMoFileVersion0 class-documentation
@subsection I18N.LcMessagesMoFileVersion0 class:@- documentation

@table @b
@meindex fileFormatDescription
@item fileFormatDescription
The Format of GNU MO Files (excerpt of the GNU gettext manual)
==============================================================

The format of the generated MO files is best described by a picture,
which appears below.

The first two words serve the identification of the file.  The magic
number will always signal GNU MO files.   The number is stored in the
byte order of the generating machine, so the magic number really is two
numbers:@- `0x950412de' and `0xde120495'.     The second word describes the
current revision of the file format.  For now the revision is 0.  This
might change in future versions, and ensures that the readers of MO
files can distinguish new formats from old ones, so that both can be
handled correctly.  The version is kept separate from the magic number,
instead of using different magic numbers for different formats, mainly
because `/etc/magic' is not updated often.  It might be better to have
magic separated from internal format version identification.

Follow a number of pointers to later tables in the file, allowing
for the extension of the prefix part of MO files without having to
recompile programs reading them.  This might become useful for later
inserting a few flag bits, indication about the charset used, new
tables, or other things.

Then, at offset O and offset T in the picture, two tables of string
descriptors can be found.  In both tables, each string descriptor uses
two 32 bits integers, one for the string length, another for the offset
of the string in the MO file, counting in bytes from the start of the
file.  The first table contains descriptors for the original strings,
and is sorted so the original strings are in increasing lexicographical
order.  The second table contains descriptors for the translated
strings, and is parallel to the first table:@- to find the corresponding
translation one has to access the array slot in the second array with
the same index.

Having the original strings sorted enables the use of simple binary
search, for when the MO file does not contain an hashing table, or for
when it is not practical to use the hashing table provided in the MO
file.  This also has another advantage, as the empty string in a PO
file GNU `gettext' is usually *translated* into some system information
attached to that particular MO file, and the empty string necessarily
becomes the first in both the original and translated tables, making
the system information very easy to find.

The size S of the hash table can be zero.  In this case, the hash
table itself is not contained in the MO file.  Some people might prefer
this because a precomputed hashing table takes disk space, and does not
win *that* much speed.       The hash table contains indices to the sorted
array of strings in the MO file.  Conflict resolution is done by double
hashing.  The precise hashing algorithm used is fairly dependent of GNU
`gettext' code, and is not documented here.

As for the strings themselves, they follow the hash file, and each
is terminated with a <NUL>, and this <NUL> is not counted in the length
which appears in the string descriptor.    The `msgfmt' program has an
option selecting the alignment for MO file strings.  With this option,
each string is separately aligned so it starts at an offset which is a
multiple of the alignment value.  On some RISC machines, a correct
alignment will speed things up.

Nothing prevents a MO file from having embedded <NUL>s in strings.
However, the program interface currently used already presumes that
strings are <NUL> terminated, so embedded <NUL>s are somewhat useless.
But MO file format is general enough so other interfaces would be later
possible, if for example, we ever want to implement wide characters
right in MO files, where <NUL> bytes may accidently appear.

This particular issue has been strongly debated in the GNU `gettext'
development forum, and it is expectable that MO file format will evolve
or change over time.  It is even possible that many formats may later
be supported concurrently.  But surely, we have to start somewhere, and
the MO file format described here is a good start.  Nothing is cast in
concrete, and the format may later evolve fairly easily, so we should
feel comfortable with the current approach.

byte
+------------------------------------------+
0  | magic number = 0x950412de                  |
|                                             |
4  | file format revision = 0                 |
|                                             |
8  | number of strings                        |  == N
|                                       |
12  | offset of table with original strings    | == O
|                                       |
16  | offset of table with translation strings | == T
|                                       |
20  | size of hashing table                   |  == S
|                                       |
24  | offset of hashing table                 |  == H
|                                       |
.                                             .
.    (possibly more entries later)            .
.                                             .
|                                             |
O  | length & offset 0th string  ----------------.
O + 8  | length & offset 1st string   ------------------.
...                                   ...   | |
O + ((N-1)*8)| length & offset (N-1)th string            |  | |
|                                        |  | |
T  | length & offset 0th translation  ---------------.
T + 8  | length & offset 1st translation  -----------------.
...                                       ...   | | | |
T + ((N-1)*8)| length & offset (N-1)th translation           |  | | | |
|                                            |  | | | |
H  | start hash table                        |  | | | |
...                                       ...   | | | |
H + S * 4  | end hash table                          |  | | | |
|                                            |  | | | |
| NUL terminated 0th string  <----------------' | | |
|                                      |    | | |
| NUL terminated 1st string  <------------------' | |
|                                      |      | |
...                                       ...       | |
|                                            |      | |
| NUL terminated 0th translation  <---------------' |
|                                      |        |
| NUL terminated 1st translation  <-----------------'
|                                      |
...                                        ...
|                                      |
+------------------------------------------+

Locating Message Catalog Files
------------------------------

Because many different languages for many different packages have to
be stored we need some way to add these information to file message
catalog files.     The way usually used in Unix environments is have this
encoding in the file name.  This is also done here.  The directory name
given in `bindtextdomain's second argument (or the default directory),
followed by the value and name of the locale and the domain name are
concatenated:@-

DIR_NAME/LOCALE/LC_CATEGORY/DOMAIN_NAME.mo

The default value for DIR_NAME is system specific.  For the GNU
library, and for packages adhering to its conventions, it's:@-
/usr/local/share/locale

LOCALE is the value of the locale whose name is this `LC_CATEGORY'.
For `gettext' and `dgettext' this locale is always `LC_MESSAGES'.


@end table



@node I18N.LcMessagesMoFileVersion0 class-plurals
@subsection I18N.LcMessagesMoFileVersion0 class:@- plurals

@table @b
@meindex initialize
@item initialize
Initialize a table with the expressions computing the plurals
for the most common languages


@meindex pluralExpressionFor:@-ifAbsent:@-
@item pluralExpressionFor:@- locale ifAbsent:@- aBlock
Answer a RunTimeExpression yielding the plural form for the given
language and territory, if one is known, else evaluate aBlock and
answer it.


@end table



@node I18N.LcMessagesMoFileVersion0-flushing the cache
@subsection I18N.LcMessagesMoFileVersion0:@- flushing the cache

@table @b
@meindex flush
@item flush
Flush the cache and reread the catalog's metadata.


@meindex shouldCache
@item shouldCache
Answer true, we always cache translations if they are read from
a file


@end table

@node I18N.LcMessagesTerritoryDomain
@section I18N.LcMessagesTerritoryDomain
@clindex I18N.LcMessagesTerritoryDomain

@table @b
@item Defined in namespace I18N
@itemx Superclass: I18N.LcMessagesDomain
@itemx Category: i18n-Messages
This object asks for strings to a primary domain (e.g. it_IT)
and a secondary one (e.g. it).
@end table

@menu
* I18N.LcMessagesTerritoryDomain class-instance creation::  (class)
@end menu



@node I18N.LcMessagesTerritoryDomain class-instance creation
@subsection I18N.LcMessagesTerritoryDomain class:@- instance creation

@table @b
@meindex primary:@-secondary:@-
@item primary:@- domain1 secondary:@- domain2
Answer an instance of the receiver that queries, in sequence,
domain1 and domain2


@end table

@node I18N.LcMonetary
@section I18N.LcMonetary
@clindex I18N.LcMonetary

@table @b
@item Defined in namespace I18N
@itemx Superclass: I18N.LcNumeric
@itemx Category: i18n-Printing
Sending either #?, #printString:@- or #print:@-on:@- converts a Number to
a String according to the rules that are mandated by ISO for printing
currency amounts in the current locale.
@end table

@menu
* I18N.LcMonetary class-accessing::  (class)
* I18N.LcMonetary-printing::  (instance)
@end menu



@node I18N.LcMonetary class-accessing
@subsection I18N.LcMonetary class:@- accessing

@table @b
@meindex category
@item category
Answer the environment variable used to determine the default
locale


@meindex selector
@item selector
Answer the selector that accesses the receiver when sent to a Locale
object.


@end table



@node I18N.LcMonetary-printing
@subsection I18N.LcMonetary:@- printing

@table @b
@meindex print:@-on:@-
@item print:@- aNumber on:@- aStream
Print aNumber on aStream according to the receiver's
formatting conventions.  Always print a currency sign
and don't force to print negative numbers by putting
parentheses around them.


@meindex print:@-on:@-currency:@-parentheses:@-
@item print:@- aNumber on:@- aStream currency:@- currency parentheses:@- p
Print aNumber on aStream according to the receiver's
formatting conventions.  If currency is true, print a
currency sign, and if p is true force to print negative
numbers by putting parentheses around them.  If p is true,
for positive numbers spaces are put around the number
to keep them aligned.


@end table

@node I18N.LcMonetaryISO
@section I18N.LcMonetaryISO
@clindex I18N.LcMonetaryISO

@table @b
@item Defined in namespace I18N
@itemx Superclass: I18N.LcMonetary
@itemx Category: i18n-Printing

@end table

@menu
* I18N.LcMonetaryISO class-accessing::  (class)
@end menu



@node I18N.LcMonetaryISO class-accessing
@subsection I18N.LcMonetaryISO class:@- accessing

@table @b
@meindex selector
@item selector
Answer the selector that accesses the receiver when sent to a Locale
object.


@end table

@node I18N.LcNumeric
@section I18N.LcNumeric
@clindex I18N.LcNumeric

@table @b
@item Defined in namespace I18N
@itemx Superclass: I18N.LcPrintFormats
@itemx Category: i18n-Printing
Sending either #?, #printString:@- or #print:@-on:@- converts a Number to
a String according to the rules that are used in the given locale.
@end table

@menu
* I18N.LcNumeric class-accessing::  (class)
* I18N.LcNumeric-printing::  (instance)
@end menu



@node I18N.LcNumeric class-accessing
@subsection I18N.LcNumeric class:@- accessing

@table @b
@meindex category
@item category
Answer the environment variable used to determine the default
locale


@meindex selector
@item selector
Answer the selector that accesses the receiver when sent to a Locale
object.


@end table



@node I18N.LcNumeric-printing
@subsection I18N.LcNumeric:@- printing

@table @b
@meindex basicPrint:@-on:@-
@item basicPrint:@- aNumber on:@- aStream
Print aNumber on aStream according to the receiver's
formatting conventions, without currency signs or
anything like that.  This method must not be overridden.


@meindex print:@-on:@-
@item print:@- aNumber on:@- aStream
Print aNumber on aStream according to the receiver's
formatting conventions.


@end table

@node I18N.LcPrintFormats
@section I18N.LcPrintFormats
@clindex I18N.LcPrintFormats

@table @b
@item Defined in namespace I18N
@itemx Superclass: I18N.LocaleConventions
@itemx Category: i18n-Messages
LcPrintFormats subclasses have instances that understand #?,
#printString:@- and #print:@-on:@- (the last of which is abstract) which
provide a means to convert miscellaneous objects to Strings according
to the rules that are used in the given locale.
@end table

@menu
* I18N.LcPrintFormats-printing::  (instance)
@end menu



@node I18N.LcPrintFormats-printing
@subsection I18N.LcPrintFormats:@- printing

@table @b
@meindex ?
@item ? anObject
Answer how anObject must be printed according to the receiver's
formatting conventions.


@meindex print:@-on:@-
@item print:@- anObject on:@- aStream
Print anObject on aStream according to the receiver's
formatting conventions.


@meindex printString:@-
@item printString:@- anObject
Answer how anObject must be printed according to the receiver's
formatting conventions.


@end table

@node I18N.LcTime
@section I18N.LcTime
@clindex I18N.LcTime

@table @b
@item Defined in namespace I18N
@itemx Superclass: I18N.LcPrintFormats
@itemx Category: i18n-Printing
Sending either #?, #printString:@- or #print:@-on:@- converts a Date or Time
to a String according to the rules that are used in the given locale.
@end table

@menu
* I18N.LcTime class-accessing::  (class)
* I18N.LcTime-printing::  (instance)
* I18N.LcTime-tests::  (instance)
@end menu



@node I18N.LcTime class-accessing
@subsection I18N.LcTime class:@- accessing

@table @b
@meindex category
@item category
Answer the environment variable used to determine the default
locale


@meindex selector
@item selector
Answer the selector that accesses the receiver when sent to a Locale
object.


@end table



@node I18N.LcTime-printing
@subsection I18N.LcTime:@- printing

@table @b
@meindex print:@-on:@-
@item print:@- aDateOrTimeOrArray on:@- aStream
Print aDateOrTimeOrArray on aStream according to the receiver's
formatting conventions.  It can be a Date, Time, DateTime, or
an array made of a Date and a Time


@meindex print:@-on:@-ifFull:@-ifDate:@-ifTime:@-
@slindex print:@-time:@-format:@-on:@-
@item print:@- aDateOrTimeOrArray on:@- aStream ifFull:@- fullFmt ifDate:@- dateFmt ifTime:@- timeFmt
Print aDateOrTimeOrArray on aStream according to the receiver's
formatting conventions.  It can be a Date, Time, DateTime, or
an array made of a Date and a Time:@- Date is printed with
dateFmt and Time with timeFmt, while in the other cases
fullFmt is used.  For information on the formatting codes,
see #print:@-time:@-format:@-on:@-.


@meindex print:@-time:@-format:@-on:@-
@item print:@- aDate time:@- aTime format:@- aString on:@- aStream
Print the specified date and time on aStream according to the
receiver's formatting conventions, using the given format.
The valid abbreviations are the same used by the C function
strftime:@-
abbreviated weekday            (%a)
weekday                            (%A)
abbreviated month          (%b)
month                              (%B)
date & time                (%c)
century                            (%C)
day of the month           (%d)
date (US)                  (%D)
day of the month           (%e)
year for the ISO week              (%g)
year for the ISO week              (%G)
abbreviated month          (%h)
hours                              (%H)
hours (AM/PM)                      (%I)
day of the year                    (%j)
hours                              (%k)
hours (AM/PM)                      (%l)
month                              (%m)
minutes                            (%M)
AM/PM                              (%p)
lowercase AM/PM                    (%P)
AM/PM time                 (%r)
time (US)                  (%R)
time_t                             (%s)
seconds                            (%S)
time (US)                  (%T)
day of the week                    (%u)
week number starting at Sun   (%U)
week number starting at Thu   (%V)
day of the week, Sunday=0     (%w)
week number starting at Mon   (%W)
date                           (%x)
time                       (%X)
year (2-digit)                     (%y)
year (4-digit)                     (%Y).


@end table



@node I18N.LcTime-tests
@subsection I18N.LcTime:@- tests

@table @b
@meindex allFormatsExample
@item allFormatsExample
Answer a long string that includes all the possible formats


@end table

@node I18N.Locale
@section I18N.Locale
@clindex I18N.Locale

@table @b
@item Defined in namespace I18N
@itemx Superclass: I18N.LocaleData
@itemx Category: i18n-Messages
This object is an abstract superclass of objects related to the territory
and language in which the program is being used.  Instances of it are
asked about information on the current locale, and provide a means to be
asked for things with a common idiom, the #? binary message.
@end table

@menu
* I18N.Locale class-C call-outs::  (class)
* I18N.Locale class-initialization::  (class)
* I18N.Locale class-instance creation::  (class)
* I18N.Locale-C call-outs::  (instance)
* I18N.Locale-subobjects::  (instance)
@end menu



@node I18N.Locale class-C call-outs
@subsection I18N.Locale class:@- C call-outs

@table @b
@meindex primRootDirectory
@item primRootDirectory
Not commented.

@end table



@node I18N.Locale class-initialization
@subsection I18N.Locale class:@- initialization

@table @b
@meindex rootDirectory
@item rootDirectory
Answer the directory under which locale definition files are found.


@meindex rootDirectory:@-
@item rootDirectory:@- aString
Set under which directory locale definition files are found.


@end table



@node I18N.Locale class-instance creation
@subsection I18N.Locale class:@- instance creation

@table @b
@meindex default
@item default
Answer an instance of the receiver that accesses the default locale.


@meindex flush
@item flush
Flush the information on locales that are not valid across an
image save/load.


@meindex fromString:@-
@item fromString:@- aString
Answer an instance of the receiver that accesses the given locale
(in the form language[_territory][.charset]).


@meindex posix
@item posix
Answer an instance of the receiver that accesses the POSIX locale.


@end table



@node I18N.Locale-C call-outs
@subsection I18N.Locale:@- C call-outs

@table @b
@meindex load:@-
@item load:@- name
Not commented.

@end table



@node I18N.Locale-subobjects
@subsection I18N.Locale:@- subobjects

@table @b
@meindex messages
@item messages
Answer the LcMessages object for the locale represented by the receiver.


@meindex monetary
@item monetary
Answer the LcMonetary object for the locale represented by the receiver.


@meindex monetaryIso
@item monetaryIso
Answer the LcMonetaryISO object for the locale represented by the
receiver.


@meindex numeric
@item numeric
Answer the LcNumeric object for the locale represented by the receiver.


@meindex time
@item time
Answer the LcTime object for the locale represented by the receiver.


@end table

@node I18N.LocaleConventions
@section I18N.LocaleConventions
@clindex I18N.LocaleConventions

@table @b
@item Defined in namespace I18N
@itemx Superclass: I18N.LocaleData
@itemx Category: i18n-Messages
I am an abstract superclass of objects that are referred to by a Locale
object.
@end table

@menu
* I18N.LocaleConventions class-accessing::  (class)
* I18N.LocaleConventions-accessing::  (instance)
@end menu



@node I18N.LocaleConventions class-accessing
@subsection I18N.LocaleConventions class:@- accessing

@table @b
@meindex ?
@item ? anObject
Query the default object, forwarding the message to it.


@meindex default
@item default
Answer an instance of the receiver that accesses the default locale.


@meindex fromString:@-
@item fromString:@- aString
Answer an instance of the receiver that accesses the given locale
(in the form language[_territory][.charset]).


@meindex posix
@item posix
Answer an instance of the receiver that accesses the POSIX locale.


@meindex selector
@item selector
This method's functionality should be implemented by subclasses of LocaleConventions

@end table



@node I18N.LocaleConventions-accessing
@subsection I18N.LocaleConventions:@- accessing

@table @b
@meindex ?
@item ? anObject
This method's functionality should be implemented by subclasses of LocaleConventions

@end table

@node I18N.LocaleData
@section I18N.LocaleData
@clindex I18N.LocaleData

@table @b
@item Defined in namespace I18N
@itemx Superclass: Object
@itemx Category: i18n-Messages
I am an abstract superclass of objects that represent localization
information.
@end table

@menu
* I18N.LocaleData class-accessing::  (class)
* I18N.LocaleData class-database::  (class)
* I18N.LocaleData-accessing::  (instance)
* I18N.LocaleData-initialization::  (instance)
@end menu



@node I18N.LocaleData class-accessing
@subsection I18N.LocaleData class:@- accessing

@table @b
@meindex category
@item category
Answer `nil'.

@meindex default
@item default
This method's functionality should be implemented by subclasses of LocaleData

@meindex flush
@item flush
Flush the contents of the instances of each subclass of LocaleData.


@meindex fromString:@-
@item fromString:@- lang
This method's functionality should be implemented by subclasses of LocaleData

@meindex language:@-
@item language:@- lang
Answer the local object for the given language.


@meindex language:@-territory:@-
@item language:@- lang territory:@- territory
Answer the local object for the given language and territory.


@meindex language:@-territory:@-charset:@-
@item language:@- lang territory:@- territory charset:@- charset
Answer the local object for the given language, territory and charset.


@meindex new
@item new
This method should not be called for instances of this class.

@meindex posix
@item posix
This method's functionality should be implemented by subclasses of LocaleData

@meindex update:@-
@item update:@- aspect
Flush instances of the receiver when an image is loaded.


@end table



@node I18N.LocaleData class-database
@subsection I18N.LocaleData class:@- database

@table @b
@meindex defaultCharset
@item defaultCharset
Answer the default charset used when nothing is specified.


@meindex defaultCharset:@-
@item defaultCharset:@- aString
Set the default charset used when nothing is specified.


@meindex defaults
@item defaults
Answer the default territory-language and language-charset
associations.


@meindex initialize
@item initialize
Initialize the receiver's class variables.


@meindex languages
@item languages
ISO639 language codes


@meindex territories
@item territories
ISO3166 territory codes


@end table



@node I18N.LocaleData-accessing
@subsection I18N.LocaleData:@- accessing

@table @b
@meindex charset
@item charset
Return the charset supported by the receiver.


@meindex id
@item id
Return the identifier of the locale supported by the receiver.


@meindex isPosixLocale
@item isPosixLocale
Answer whether the receiver implements the default POSIX behavior
for a locale.


@meindex language
@item language
Return the language supported by the receiver.


@meindex languageDirectory
@item languageDirectory
Answer the directory where data files for the current language reside.


@meindex languageDirectory:@-
@item languageDirectory:@- rootDirectory
Answer the directory where data files for the current language reside,
given the root directory of the locale data.


@meindex territory
@item territory
Return the territory supported by the receiver.


@meindex territoryDirectory
@item territoryDirectory
Answer the directory where data files for the current language,
specific to the territory, reside.


@meindex territoryDirectory:@-
@item territoryDirectory:@- rootDirectory
Answer the directory where data files for the current language,
specific to the territory, reside, given the root directory of the
locale data.


@end table



@node I18N.LocaleData-initialization
@subsection I18N.LocaleData:@- initialization

@table @b
@meindex id:@-
@item id:@- anArray
Private - Set which locale the receiver contains data for


@meindex initialize:@-
@item initialize:@- aString
Set which locale the receiver contains data for, starting
from a string describing the locale.


@end table

@node I18N.RTEAlternativeNode
@section I18N.RTEAlternativeNode
@clindex I18N.RTEAlternativeNode

@table @b
@item Defined in namespace I18N
@itemx Superclass: I18N.RunTimeExpression
@itemx Category: i18n-Messages

@end table

@menu
* I18N.RTEAlternativeNode class-compiling::  (class)
* I18N.RTEAlternativeNode-computing::  (instance)
@end menu



@node I18N.RTEAlternativeNode class-compiling
@subsection I18N.RTEAlternativeNode class:@- compiling

@table @b
@meindex condition:@-ifTrue:@-ifFalse:@-
@item condition:@- cond ifTrue:@- trueNode ifFalse:@- falseNode
Private - Create a node in the parse tree for the run-time expression,
mapping s to a Smalltalk arithmetic selector


@end table



@node I18N.RTEAlternativeNode-computing
@subsection I18N.RTEAlternativeNode:@- computing

@table @b
@meindex condition:@-ifTrue:@-ifFalse:@-
@item condition:@- condNode ifTrue:@- trueNode ifFalse:@- falseNode
Initialize the children of the receiver and the conditional expression
to choose between them


@meindex printOn:@-
@item printOn:@- aStream
Print a representation of the receiver on aStream


@meindex send:@-
@item send:@- parameter
Evaluate the receiver by conditionally choosing one of its children
and evaluating it


@end table

@node I18N.RTEBinaryNode
@section I18N.RTEBinaryNode
@clindex I18N.RTEBinaryNode

@table @b
@item Defined in namespace I18N
@itemx Superclass: I18N.RunTimeExpression
@itemx Category: i18n-Messages

@end table

@menu
* I18N.RTEBinaryNode class-compiling::  (class)
* I18N.RTEBinaryNode-compiling::  (instance)
* I18N.RTEBinaryNode-computing::  (instance)
@end menu



@node I18N.RTEBinaryNode class-compiling
@subsection I18N.RTEBinaryNode class:@- compiling

@table @b
@meindex lhs:@-op:@-rhs:@-
@item lhs:@- lhs op:@- op rhs:@- rhs
Private - Create a node in the parse tree for the run-time expression,
mapping s to a Smalltalk arithmetic selector


@end table



@node I18N.RTEBinaryNode-compiling
@subsection I18N.RTEBinaryNode:@- compiling

@table @b
@meindex lhs
@item lhs
Answer `lhs'.

@meindex op
@item op
Answer `op'.

@meindex rhs
@item rhs
Answer `rhs'.

@end table



@node I18N.RTEBinaryNode-computing
@subsection I18N.RTEBinaryNode:@- computing

@table @b
@meindex lhs:@-op:@-rhs:@-
@item lhs:@- lhsNode op:@- aSymbol rhs:@- rhsNode
Initialize the children of the receiver and the operation
to be done between them


@meindex printOn:@-
@item printOn:@- aStream
Print a representation of the receiver on aStream


@meindex send:@-
@item send:@- parameter
Private - Evaluate the receiver by evaluating both children
and performing an arithmetic operation between them.


@end table

@node I18N.RTELiteralNode
@section I18N.RTELiteralNode
@clindex I18N.RTELiteralNode

@table @b
@item Defined in namespace I18N
@itemx Superclass: I18N.RunTimeExpression
@itemx Category: i18n-Messages

@end table

@menu
* I18N.RTELiteralNode class-initializing::  (class)
* I18N.RTELiteralNode-computing::  (instance)
@end menu



@node I18N.RTELiteralNode class-initializing
@subsection I18N.RTELiteralNode class:@- initializing

@table @b
@meindex parseFrom:@-
@item parseFrom:@- aStream
Parse a literal number from aStream and return a new node


@end table



@node I18N.RTELiteralNode-computing
@subsection I18N.RTELiteralNode:@- computing

@table @b
@meindex n:@-
@item n:@- value
Set the value of the literal that the node represents


@meindex printOn:@-
@item printOn:@- aStream
Print a representation of the receiver on aStream


@meindex send:@-
@item send:@- parameter
Answer a fixed value, the literal encoded in the node


@end table

@node I18N.RTENegationNode
@section I18N.RTENegationNode
@clindex I18N.RTENegationNode

@table @b
@item Defined in namespace I18N
@itemx Superclass: I18N.RunTimeExpression
@itemx Category: i18n-Messages

@end table

@menu
* I18N.RTENegationNode class-initializing::  (class)
* I18N.RTENegationNode-computing::  (instance)
@end menu



@node I18N.RTENegationNode class-initializing
@subsection I18N.RTENegationNode class:@- initializing

@table @b
@meindex child:@-
@item child:@- aNode
Answer a new node representing the logical negation of aNode


@end table



@node I18N.RTENegationNode-computing
@subsection I18N.RTENegationNode:@- computing

@table @b
@meindex child:@-
@item child:@- value
Set the child of which the receiver will compute the negation


@meindex printOn:@-
@item printOn:@- aStream
Print a representation of the receiver on aStream


@meindex send:@-
@item send:@- parameter
Evaluate the receiver by computing the child's logical negation


@end table

@node I18N.RTEParameterNode
@section I18N.RTEParameterNode
@clindex I18N.RTEParameterNode

@table @b
@item Defined in namespace I18N
@itemx Superclass: I18N.RunTimeExpression
@itemx Category: i18n-Messages

@end table

@menu
* I18N.RTEParameterNode-computing::  (instance)
@end menu



@node I18N.RTEParameterNode-computing
@subsection I18N.RTEParameterNode:@- computing

@table @b
@meindex printOn:@-
@item printOn:@- aStream
Print a representation of the receiver on aStream


@meindex send:@-
@item send:@- parameter
Evaluate the receiver by answering the parameter


@end table

@node I18N.RunTimeExpression
@section I18N.RunTimeExpression
@clindex I18N.RunTimeExpression

@table @b
@item Defined in namespace I18N
@itemx Superclass: Object
@itemx Category: i18n-Messages

@end table

@menu
* I18N.RunTimeExpression class-compiling::  (class)
* I18N.RunTimeExpression class-initializing::  (class)
* I18N.RunTimeExpression class-instance creation::  (class)
* I18N.RunTimeExpression-computing::  (instance)
@end menu



@node I18N.RunTimeExpression class-compiling
@subsection I18N.RunTimeExpression class:@- compiling

@table @b
@meindex parseExpression:@-
@item parseExpression:@- stream
Private - Compile the expression in the stream


@meindex parseOperand:@-
@item parseOperand:@- stream
Parse an operand from the stream (i.e. an unary negation,
a parenthesized subexpression, `n' or a number) and answer
the corresponding parse node.


@meindex parseOperator:@-
@item parseOperator:@- stream
Answer a Symbol for an operator read from stream, or nil if something
else is found.


@end table



@node I18N.RunTimeExpression class-initializing
@subsection I18N.RunTimeExpression class:@- initializing

@table @b
@meindex initialize
@item initialize
Private - Initialize internal tables for the parser


@end table



@node I18N.RunTimeExpression class-instance creation
@subsection I18N.RunTimeExpression class:@- instance creation

@table @b
@meindex on:@-
@item on:@- aString
Compile aString and answer a RunTimeExpression


@end table



@node I18N.RunTimeExpression-computing
@subsection I18N.RunTimeExpression:@- computing

@table @b
@meindex send:@-
@item send:@- parameter
This method's functionality should be implemented by subclasses of RunTimeExpression

@meindex value:@-
@item value:@- parameter
Evaluate the receiver, and answer its value as an integer


@end table


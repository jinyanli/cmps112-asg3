This is gst-libs.info, produced by makeinfo version 4.13 from
/home/ich/source/smalltalk/release/smalltalk/doc/gst-libs-fixed.texi.

INFO-DIR-SECTION Software development
START-INFO-DIR-ENTRY
* Smalltalk libraries: (gst-libs).      The GNU Smalltalk class libraries.
END-INFO-DIR-ENTRY

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.2 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with no Front-Cover Texts,
     and with no Back-Cover Texts.  A copy of the license is included
     in the section entitled "GNU Free Documentation License".


File: gst-libs.info,  Node: Top,  Up: (DIR)

GNU Smalltalk Library Reference
*******************************

GNU Smalltalk Library Reference

   This document describes the class libraries that are distributed
together with the GNU Smalltalk programming language.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.2 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with no Front-Cover Texts,
     and with no Back-Cover Texts.  A copy of the license is included
     in the section entitled "GNU Free Documentation License".

* Menu:

* BLOX package::           The GUI library
* Complex package::        Complex number computations
* DBI package::            The database connectivity library
* DebugTools package::     Controlling the execution of Smalltalk processes
* Sockets package::        The sockets library
* Iconv/I18N packages::    The internationalization library
* XML/XPath/XSL packages:: Using the XML library
* ZLib package::           Bindings to the popular data compression library

* Class index::            Index to the classes in the class reference
* Method index::           Index to the method selectors in the class reference
* Cross-reference::        Cross-reference between selectors


File: gst-libs.info,  Node: BLOX package,  Next: Complex package,  Prev: Top,  Up: Top

1 Graphical users interfaces with BLOX
**************************************

* Menu:


Alphabetic list:
* BLOX.BArc::
* BLOX.BBalloon::
* BLOX.BBoundingBox::
* BLOX.BButton::
* BLOX.BButtonLike::
* BLOX.BCanvas::
* BLOX.BCanvasObject::
* BLOX.BCheckMenuItem::
* BLOX.BColorButton::
* BLOX.BContainer::
* BLOX.BDialog::
* BLOX.BDropDown::
* BLOX.BDropDownEdit::
* BLOX.BDropDownList::
* BLOX.BEdit::
* BLOX.BEmbeddedImage::
* BLOX.BEmbeddedText::
* BLOX.BEventSet::
* BLOX.BEventTarget::
* BLOX.BExtended::
* BLOX.BForm::
* BLOX.BImage::
* BLOX.BLabel::
* BLOX.BLine::
* BLOX.BList::
* BLOX.Blox::
* BLOX.BMenu::
* BLOX.BMenuBar::
* BLOX.BMenuItem::
* BLOX.BMenuObject::
* BLOX.BOval::
* BLOX.BPolyline::
* BLOX.BPopupMenu::
* BLOX.BPopupWindow::
* BLOX.BPrimitive::
* BLOX.BProgress::
* BLOX.BRadioButton::
* BLOX.BRadioGroup::
* BLOX.BRectangle::
* BLOX.BScrolledCanvas::
* BLOX.BSpline::
* BLOX.BText::
* BLOX.BTextAttributes::
* BLOX.BTextBindings::
* BLOX.BTextTags::
* BLOX.BToggle::
* BLOX.BTransientWindow::
* BLOX.BViewport::
* BLOX.BWidget::
* BLOX.BWindow::
* BLOX.Gui::


Class tree:
  (Object)
*   BLOX.BEventTarget::
*     BLOX.BCanvasObject::
*       BLOX.BBoundingBox::
*         BLOX.BEmbeddedImage::
*         BLOX.BEmbeddedText::
*         BLOX.BLine::
*         BLOX.BRectangle::
*           BLOX.BOval::
*             BLOX.BArc::
*       BLOX.BPolyline::
*         BLOX.BSpline::
*     BLOX.BEventSet::
*       BLOX.BBalloon::
*     BLOX.Blox::
*       BLOX.BMenuObject::
*         BLOX.BMenu::
*           BLOX.BPopupMenu::
*         BLOX.BMenuBar::
*         BLOX.BMenuItem::
*           BLOX.BCheckMenuItem::
*       BLOX.BWidget::
*         BLOX.BExtended::
*           BLOX.BButtonLike::
*             BLOX.BColorButton::
*           BLOX.BDropDown::
*             BLOX.BDropDownEdit::
*             BLOX.BDropDownList::
*           BLOX.BProgress::
*         BLOX.BPrimitive::
*           BLOX.BButton::
*             BLOX.BRadioButton::
*             BLOX.BToggle::
*           BLOX.BEdit::
*           BLOX.BForm::
*             BLOX.BContainer::
*               BLOX.BRadioGroup::
*             BLOX.BDialog::
*             BLOX.BWindow::
*               BLOX.BPopupWindow::
*               BLOX.BTransientWindow::
*           BLOX.BImage::
*           BLOX.BLabel::
*           BLOX.BViewport::
*             BLOX.BCanvas::
*               BLOX.BScrolledCanvas::
*             BLOX.BList::
*             BLOX.BText::
*     BLOX.BTextBindings::
*   BLOX.BTextAttributes::
*   BLOX.BTextTags::
*   BLOX.Gui::


File: gst-libs.info,  Node: BLOX.BArc,  Next: BLOX.BBalloon,  Up: BLOX package

1.1 BLOX.BArc
=============

Defined in namespace BLOX
Superclass: BLOX.BOval
Category: Graphics-Windows
     I can draw arcs, pie slices (don't eat them!!), chords, and...
     nothing more.

* Menu:

* BLOX.BArc-accessing::  (instance)


File: gst-libs.info,  Node: BLOX.BArc-accessing,  Up: BLOX.BArc

1.1.1 BLOX.BArc: accessing
--------------------------

endAngle
     Answer the ending of the angular range that is occupied by the arc,
     expressed in degrees

endAngle: angle
     Set the ending of the angular range that is occupied by the arc,
     expressed in degrees

fillChord
     Specify that the arc will be filled by painting an area delimited
     by the arc and the chord that joins the arc's endpoints.

fillSlice
     Specify that the arc will be filled by painting an area delimited
     by the arc and the two radii joins the center of the arc with each
     of the endpoints (that is, that a pie slice will be drawn).

from
     Answer the starting point of the arc in cartesian coordinates

from: aPoint
     Set the starting point of the arc in cartesian coordinates

from: start to: end
     Set the two starting points of the arc in cartesian coordinates

startAngle
     Answer the beginning of the angular range that is occupied by the
     arc, expressed in degrees

startAngle: angle
     Set the beginning of the angular range that is occupied by the arc,
     expressed in degrees

sweepAngle
     Answer the size of the angular range that is occupied by the arc,
     expressed in degrees

sweepAngle: angle
     Set the size of the angular range that is occupied by the arc,
     expressed in degrees

to
     Answer the ending point of the arc in cartesian coordinates

to: aPoint
     Set the ending point of the arc in cartesian coordinates



File: gst-libs.info,  Node: BLOX.BBalloon,  Next: BLOX.BBoundingBox,  Prev: BLOX.BArc,  Up: BLOX package

1.2 BLOX.BBalloon
=================

Defined in namespace BLOX
Superclass: BLOX.BEventSet
Category: Graphics-Examples
     This event set allows a widget to show explanatory information when
     the mouse lingers over it for a while.

* Menu:

* BLOX.BBalloon class-accessing::  (class)
* BLOX.BBalloon-accessing::  (instance)
* BLOX.BBalloon-initializing::  (instance)


File: gst-libs.info,  Node: BLOX.BBalloon class-accessing,  Next: BLOX.BBalloon-accessing,  Up: BLOX.BBalloon

1.2.1 BLOX.BBalloon class: accessing
------------------------------------

balloonDelayTime
     Answer the time after which the balloon is shown (default is half
     a second).

balloonDelayTime: milliseconds
     Set the time after which the balloon is shown.

shown
     Answer whether a balloon is displayed



File: gst-libs.info,  Node: BLOX.BBalloon-accessing,  Next: BLOX.BBalloon-initializing,  Prev: BLOX.BBalloon class-accessing,  Up: BLOX.BBalloon

1.2.2 BLOX.BBalloon: accessing
------------------------------

shown
     Answer whether the receiver's balloon is displayed

text
     Answer the text displayed in the balloon

text: aString
     Set the text displayed in the balloon to aString



File: gst-libs.info,  Node: BLOX.BBalloon-initializing,  Prev: BLOX.BBalloon-accessing,  Up: BLOX.BBalloon

1.2.3 BLOX.BBalloon: initializing
---------------------------------

initialize: aBWidget
     Initialize the event sets for the receiver



File: gst-libs.info,  Node: BLOX.BBoundingBox,  Next: BLOX.BButton,  Prev: BLOX.BBalloon,  Up: BLOX package

1.3 BLOX.BBoundingBox
=====================

Defined in namespace BLOX
Superclass: BLOX.BCanvasObject
Category: Graphics-Windows
     I am the ultimate ancestor of all items that you can put in a
     BCanvas and which are well defined by their bounding box - i.e.
     everything except BPolylines and BSplines.

* Menu:

* BLOX.BBoundingBox-accessing::  (instance)


File: gst-libs.info,  Node: BLOX.BBoundingBox-accessing,  Up: BLOX.BBoundingBox

1.3.1 BLOX.BBoundingBox: accessing
----------------------------------

boundingBox
     Answer a Rectangle enclosing all of the receiver

center
     Answer the center point of the receiver

center: center extent: extent
     Move the object so that it is centered around the center Point and
     its size is given by the extent Point.  No changes take place
     until you invoke the #create (if the object has not been inserted
     in the canvas yet) or the #redraw method.

corner
     Answer the Point specifying the lower-right corner of the receiver

corner: pointOrArray
     Set the Point specifying the lower-right corner of the receiver;
     pointOrArray can be a Point or a two-item Array.  No changes take
     place until you invoke the #create (if the object has not been
     inserted in the canvas yet) or the #redraw method.

extent
     Answer a Point specifying the size of the receiver

extent: pointOrArray
     Set the Point specifying the size of the receiver; pointOrArray
     can be a Point or a two-item Array.  No changes take place until
     you invoke the #create (if the object has not been inserted in the
     canvas yet) or the #redraw method.

moveBy: pointOrArray
     Move the object by the amount indicated by pointOrArray: that is,
     its whole bounding box is shifted by that amount.  No changes take
     place until you invoke the #create (if the object has not been
     inserted in the canvas yet) or the #redraw method.

origin
     Answer the Point specifying the top-left corner of the receiver

origin: pointOrArray
     Set the Point specifying the top-left corner of the receiver;
     pointOrArray can be a Point or a two-item Array.  No changes take
     place until you invoke the #create (if the object has not been
     inserted in the canvas yet) or the #redraw method.

origin: originPointOrArray corner: cornerPointOrArray
     Set the bounding box of the object, based on a Point specifying the
     top-left corner of the receiver and another specifying the
     bottom-right corner; the two parameters can both be Points or
     two-item Arrays.  No changes take place until you invoke the
     #create (if the object has not been inserted in the canvas yet) or
     the #redraw method.

origin: originPointOrArray extent: extentPointOrArray
     Set the bounding box of the object, based on a Point specifying the
     top-left corner of the receiver and another specifying its size;
     the two parameters can both be Points or two-item Arrays.  No
     changes take place until you invoke the #create (if the object has
     not been inserted in the canvas yet) or the #redraw method.



File: gst-libs.info,  Node: BLOX.BButton,  Next: BLOX.BButtonLike,  Prev: BLOX.BBoundingBox,  Up: BLOX package

1.4 BLOX.BButton
================

Defined in namespace BLOX
Superclass: BLOX.BPrimitive
Category: Graphics-Windows
     I am a button that a user can click. In fact I am at the head of a
     small hierarchy of objects which exhibit button-like look and
     behavior

* Menu:

* BLOX.BButton class-instance creation::  (class)
* BLOX.BButton-accessing::  (instance)


File: gst-libs.info,  Node: BLOX.BButton class-instance creation,  Next: BLOX.BButton-accessing,  Up: BLOX.BButton

1.4.1 BLOX.BButton class: instance creation
-------------------------------------------

new: parent label: label
     Answer a new BButton widget laid inside the given parent widget,
     showing by default the `label' String.



File: gst-libs.info,  Node: BLOX.BButton-accessing,  Prev: BLOX.BButton class-instance creation,  Up: BLOX.BButton

1.4.2 BLOX.BButton: accessing
-----------------------------

backgroundColor
     Answer the value of the backgroundColor option for the widget.

     Specifies the normal background color to use when displaying the
     widget.

backgroundColor: value
     Set the value of the backgroundColor option for the widget.

     Specifies the normal background color to use when displaying the
     widget.

callback
     Answer a DirectedMessage that is sent when the receiver is clicked,
     or nil if none has been set up.

callback: aReceiver message: aSymbol
     Set up so that aReceiver is sent the aSymbol message (the name of
     a zero- or one-argument selector) when the receiver is clicked.
     If the method accepts an argument, the receiver is passed.

font
     Answer the value of the font option for the widget.

     Specifies the font to use when drawing text inside the widget. The
     font can be given as either an X font name or a Blox font
     description string.

     X font names are given as many fields, each led by a minus, and
     each of which can be replaced by an * to indicate a default value
     is ok: foundry, family, weight, slant, setwidth, addstyle, pixel
     size, point size (the same as pixel size for historical reasons),
     horizontal resolution, vertical resolution, spacing, width,
     charset and character encoding.

     Blox font description strings have three fields, which must be
     separated by a space and of which only the first is mandatory: the
     font family, the font size in points (or in pixels if a negative
     value is supplied), and a number of styles separated by a space
     (valid styles are normal, bold, italic, underline and overstrike).
     Examples of valid fonts are "Helvetica 10 Bold", "Times -14",
     "Futura Bold Underline".  You must enclose the font family in
     braces if it is made of two or more words.

font: value
     Set the value of the font option for the widget.

     Specifies the font to use when drawing text inside the widget. The
     font can be given as either an X font name or a Blox font
     description string.

     X font names are given as many fields, each led by a minus, and
     each of which can be replaced by an * to indicate a default value
     is ok: foundry, family, weight, slant, setwidth, addstyle, pixel
     size, point size (the same as pixel size for historical reasons),
     horizontal resolution, vertical resolution, spacing, width,
     charset and character encoding.

     Blox font description strings have three fields, which must be
     separated by a space and of which only the first is mandatory: the
     font family, the font size in points (or in pixels if a negative
     value is supplied), and a number of styles separated by a space
     (valid styles are normal, bold, italic, underline and overstrike).
     Examples of valid fonts are "Helvetica 10 Bold", "Times -14",
     "Futura Bold Underline".  You must enclose the font family in
     braces if it is made of two or more words.

foregroundColor
     Answer the value of the foregroundColor option for the widget.

     Specifies the normal foreground color to use when displaying the
     widget.

foregroundColor: value
     Set the value of the foregroundColor option for the widget.

     Specifies the normal foreground color to use when displaying the
     widget.

invokeCallback
     Generate a synthetic callback

label
     Answer the value of the label option for the widget.

     Specifies a string to be displayed inside the widget. The way in
     which the string is displayed depends on the particular widget and
     may be determined by other options, such as anchor. For windows,
     this is the title of the window.

label: value
     Set the value of the label option for the widget.

     Specifies a string to be displayed inside the widget. The way in
     which the string is displayed depends on the particular widget and
     may be determined by other options, such as anchor. For windows,
     this is the title of the window.



File: gst-libs.info,  Node: BLOX.BButtonLike,  Next: BLOX.BCanvas,  Prev: BLOX.BButton,  Up: BLOX package

1.5 BLOX.BButtonLike
====================

Defined in namespace BLOX
Superclass: BLOX.BExtended
Category: Graphics-Examples
     I am an object whose 3-D appearance resembles that of buttons.

* Menu:

* BLOX.BButtonLike-accessing::  (instance)


File: gst-libs.info,  Node: BLOX.BButtonLike-accessing,  Up: BLOX.BButtonLike

1.5.1 BLOX.BButtonLike: accessing
---------------------------------

callback
     Answer a DirectedMessage that is sent when the receiver is clicked,
     or nil if none has been set up.

callback: aReceiver message: aSymbol
     Set up so that aReceiver is sent the aSymbol message (the name of
     a zero- or one-argument selector) when the receiver is clicked.
     If the method accepts an argument, the receiver is passed.

invokeCallback
     Generate a synthetic callback

pressed
     This is the default callback for the widget; it does nothing if
     you don't override it. Of course if a subclass overriddes this you
     (user of the class) might desire to call this method from your own
     callback.



File: gst-libs.info,  Node: BLOX.BCanvas,  Next: BLOX.BCanvasObject,  Prev: BLOX.BButtonLike,  Up: BLOX package

1.6 BLOX.BCanvas
================

Defined in namespace BLOX
Superclass: BLOX.BViewport
Category: Graphics-Windows
     I am an host for whatever geometric shape you want. If you want to
     do some fancy graphics with Smalltalk, I'll be happy to help. My
     friends derived from BCanvasObject ask me all sort of things to
     do, so I am the real worker, not they!

     BCanvasObject: I am BCanvas: No I am BCanvasObject: No I am
     BCanvas: No I am

     well, you know, he always has something to object.

* Menu:

* BLOX.BCanvas-accessing::  (instance)
* BLOX.BCanvas-geometry management::  (instance)
* BLOX.BCanvas-widget protocol::  (instance)


File: gst-libs.info,  Node: BLOX.BCanvas-accessing,  Next: BLOX.BCanvas-geometry management,  Up: BLOX.BCanvas

1.6.1 BLOX.BCanvas: accessing
-----------------------------

backgroundColor
     Answer the value of the backgroundColor option for the widget.

     Specifies the normal background color to use when displaying the
     widget.

backgroundColor: value
     Set the value of the backgroundColor option for the widget.

     Specifies the normal background color to use when displaying the
     widget.

foregroundColor
     Answer the value of the foregroundColor option for the widget.

     Specifies the normal foreground color to use when displaying the
     widget.

foregroundColor: value
     Set the value of the foregroundColor option for the widget.

     Specifies the normal foreground color to use when displaying the
     widget.



File: gst-libs.info,  Node: BLOX.BCanvas-geometry management,  Next: BLOX.BCanvas-widget protocol,  Prev: BLOX.BCanvas-accessing,  Up: BLOX.BCanvas

1.6.2 BLOX.BCanvas: geometry management
---------------------------------------

addChild: child
     The widget identified by child has been added to the receiver.
     This method is public not because you can call it, but because it
     can be useful to override it, not forgetting the call to either
     the superclass implementation or #basicAddChild:, to perform some
     initialization on the children just added. Answer the new child.

child: child height: value
     Set the given child's height.

child: child heightOffset: value
     Offset the given child's height by value pixels.

child: child width: value
     Set the given child's width.

child: child widthOffset: value
     Offset the given child's width by value pixels.

child: child x: value
     Set the given child's top-left corner's x coordinate, in pixels in
     the canvas' coordinate system.

child: child xOffset: value
     Offset the given child's top-left x by value pixels.

child: child y: value
     Set the given child's top-left corner's y coordinate, in pixels in
     the canvas' coordinate system.

child: child yOffset: value
     Offset the given child's top-left y by value pixels.

heightChild: child
     Answer the given child's height in pixels.

widthChild: child
     Answer the given child's width in pixels.

xChild: child
     Answer the given child's top-left corner's x coordinate, in pixels
     in the canvas' coordinate system.

yChild: child
     Answer the given child's top-left corner's y coordinate, in pixels
     in the canvas' coordinate system.



File: gst-libs.info,  Node: BLOX.BCanvas-widget protocol,  Prev: BLOX.BCanvas-geometry management,  Up: BLOX.BCanvas

1.6.3 BLOX.BCanvas: widget protocol
-----------------------------------

at: aPoint
     Selects the topmost item in the canvas overlapping the point given
     by aPoint.

between: origin and: corner do: aBlock
     Evaluate aBlock for each item whose bounding box intersects the
     rectangle between the two Points, origin and corner.  Pass the
     item to the block.

boundingBox
     Answer the bounding box of all the items in the canvas

destroyed
     The widget has been destroyed.  Tell all of its items about this
     fact.

do: aBlock
     Evaluate aBlock, passing each item to it.

empty
     Remove all the items from the canvas, leaving it empty

extraSpace
     Answer the amount of space that is left as a border around the
     canvas items.

extraSpace: aPoint
     Set the amount of space that is left as a border around the canvas
     items.

items
     Answer an Array containing all the items in the canvas

mapPoint: aPoint
     Given aPoint, a point expressed in window coordinates, answer the
     corresponding canvas coordinates that are displayed at that
     location.



File: gst-libs.info,  Node: BLOX.BCanvasObject,  Next: BLOX.BCheckMenuItem,  Prev: BLOX.BCanvas,  Up: BLOX package

1.7 BLOX.BCanvasObject
======================

Defined in namespace BLOX
Superclass: BLOX.BEventTarget
Category: Graphics-Windows
     I am the ultimate ancestor of all items that you can put in a
     BCanvas.  I provide some general methods to my concrete offspring.

* Menu:

* BLOX.BCanvasObject class-instance creation::  (class)
* BLOX.BCanvasObject-accessing::  (instance)
* BLOX.BCanvasObject-widget protocol::  (instance)


File: gst-libs.info,  Node: BLOX.BCanvasObject class-instance creation,  Next: BLOX.BCanvasObject-accessing,  Up: BLOX.BCanvasObject

1.7.1 BLOX.BCanvasObject class: instance creation
-------------------------------------------------

new
     This method should not be called for instances of this class.

new: parentCanvas
     Answer a new instance of the receiver, displayed into the given
     parentCanvas.



File: gst-libs.info,  Node: BLOX.BCanvasObject-accessing,  Next: BLOX.BCanvasObject-widget protocol,  Prev: BLOX.BCanvasObject class-instance creation,  Up: BLOX.BCanvasObject

1.7.2 BLOX.BCanvasObject: accessing
-----------------------------------

blox
     Answer the parent canvas of the receiver

boundingBox
     Answer a Rectangle enclosing all of the receiver

color
     Answer the color to be used to fill this item's area.

color: color
     Set the color to be used to fill this item's area.

copyInto: newCanvas
     Answer a new BCanvasObject identical to this but displayed into
     another canvas, newCanvas.  The new instance is not created at the
     time it is returned.

copyObject
     Answer a new BCanvasObject identical to this.  Unlike #copy, which
     merely creates a new Smalltalk object with the same data and
     referring to the same canvas item, the object created with
     #copyObject is physically distinct from the original.  The new
     instance is not created at the time it is returned.

createCopy
     Answer a new BCanvasObject identical to this.  Unlike #copy, which
     merely creates a new Smalltalk object with the same data and
     referring to the same canvas item, the object created with
     #copyObject is physically distinct from the original.  The new
     instance has already been created at the time it is returned.

createCopyInto: newCanvas
     Answer a new BCanvasObject identical to this but displayed into
     another canvas, newCanvas.  The new instance has already been
     created at the time it is returned.

deepCopy
     It does not make sense to make a copy, because it would make data
     inconsistent across different objects; so answer the receiver

grayOut
     Apply a 50% gray stippling pattern to the object

shallowCopy
     It does not make sense to make a copy, because it would make data
     inconsistent across different objects; so answer the receiver



File: gst-libs.info,  Node: BLOX.BCanvasObject-widget protocol,  Prev: BLOX.BCanvasObject-accessing,  Up: BLOX.BCanvasObject

1.7.3 BLOX.BCanvasObject: widget protocol
-----------------------------------------

create
     If the object has not been created yet and has been initialized
     correctly, insert it for real in the parent canvas

created
     Answer whether the object is just a placeholder or has already
     been inserted for real in the parent canvas

lower
     Move the item to the lowest position in the display list.  Child
     widgets always obscure other item types, and the stacking order of
     window items is determined by sending methods to the widget object
     directly.

raise
     Move the item to the highest position in the display list.  Child
     widgets always obscure other item types, and the stacking order of
     window items is determined by sending methods to the widget object
     directly.

redraw
     Force the object to be displayed in the parent canvas, creating it
     if it has not been inserted for real in the parent, and refresh
     its position if it has changed.

remove
     Remove the object from the canvas

show
     Ensure that the object is visible in the center of the canvas,
     scrolling it if necessary.



File: gst-libs.info,  Node: BLOX.BCheckMenuItem,  Next: BLOX.BColorButton,  Prev: BLOX.BCanvasObject,  Up: BLOX package

1.8 BLOX.BCheckMenuItem
=======================

Defined in namespace BLOX
Superclass: BLOX.BMenuItem
Category: Graphics-Windows
     I am a menu item which can be toggled between two states, marked
     and unmarked.

* Menu:

* BLOX.BCheckMenuItem class-instance creation::  (class)
* BLOX.BCheckMenuItem-accessing::  (instance)


File: gst-libs.info,  Node: BLOX.BCheckMenuItem class-instance creation,  Next: BLOX.BCheckMenuItem-accessing,  Up: BLOX.BCheckMenuItem

1.8.1 BLOX.BCheckMenuItem class: instance creation
--------------------------------------------------

new: parent
     This method should not be called for instances of this class.



File: gst-libs.info,  Node: BLOX.BCheckMenuItem-accessing,  Prev: BLOX.BCheckMenuItem class-instance creation,  Up: BLOX.BCheckMenuItem

1.8.2 BLOX.BCheckMenuItem: accessing
------------------------------------

invokeCallback
     Generate a synthetic callback

value
     Answer whether the menu item is in a selected (checked) state.

value: aBoolean
     Set whether the button is in a selected (checked) state and
     generates a callback accordingly.



File: gst-libs.info,  Node: BLOX.BColorButton,  Next: BLOX.BContainer,  Prev: BLOX.BCheckMenuItem,  Up: BLOX package

1.9 BLOX.BColorButton
=====================

Defined in namespace BLOX
Superclass: BLOX.BButtonLike
Category: Graphics-Examples
     I am a button that shows a color and that, unless a different
     callback is used, lets you choose a color when it is clicked.

* Menu:

* BLOX.BColorButton-accessing::  (instance)


File: gst-libs.info,  Node: BLOX.BColorButton-accessing,  Up: BLOX.BColorButton

1.9.1 BLOX.BColorButton: accessing
----------------------------------

color
     Set the color that the receiver is painted in.

color: aString
     Set the color that the receiver is painted in.

pressed
     This is the default callback; it brings up a `choose-a-color'
     window and, if `Ok' is pressed in the window, sets the receiver to
     be painted in the chosen color.



File: gst-libs.info,  Node: BLOX.BContainer,  Next: BLOX.BDialog,  Prev: BLOX.BColorButton,  Up: BLOX package

1.10 BLOX.BContainer
====================

Defined in namespace BLOX
Superclass: BLOX.BForm
Category: Graphics-Windows
     I am used to group many widgets together. I can perform simple
     management by putting widgets next to each other, from left to
     right or from top to bottom.

* Menu:

* BLOX.BContainer-accessing::  (instance)


File: gst-libs.info,  Node: BLOX.BContainer-accessing,  Up: BLOX.BContainer

1.10.1 BLOX.BContainer: accessing
---------------------------------

setVerticalLayout: aBoolean
     Answer whether the container will align the widgets vertically or
     horizontally.  Horizontal alignment means that widgets are packed
     from left to right, while vertical alignment means that widgets
     are packed from the top to the bottom of the widget.

     Widgets that are set to be "stretched" will share all the space
     that is not allocated to non-stretched widgets.

     The layout of the widget can only be set before the first child is
     inserted in the widget.



File: gst-libs.info,  Node: BLOX.BDialog,  Next: BLOX.BDropDown,  Prev: BLOX.BContainer,  Up: BLOX package

1.11 BLOX.BDialog
=================

Defined in namespace BLOX
Superclass: BLOX.BForm
Category: Graphics-Windows
     I am a facility for implementing dialogs with many possible choices
     and requests. In addition I provide support for a few platform
     native common dialog boxes, such as choose-a-file and
     choose-a-color.

* Menu:

* BLOX.BDialog class-instance creation::  (class)
* BLOX.BDialog class-prompters::  (class)
* BLOX.BDialog-accessing::  (instance)
* BLOX.BDialog-widget protocol::  (instance)


File: gst-libs.info,  Node: BLOX.BDialog class-instance creation,  Next: BLOX.BDialog class-prompters,  Up: BLOX.BDialog

1.11.1 BLOX.BDialog class: instance creation
--------------------------------------------

new: parent
     Answer a new dialog handler (containing a label widget and some
     button widgets) laid out within the given parent window.  The
     label widget, when it is created, is empty.

new: parent label: aLabel
     Answer a new dialog handler (containing a label widget and some
     button widgets) laid out within the given parent window.  The
     label widget, when it is created, contains aLabel.

new: parent label: aLabel prompt: aString
     Answer a new dialog handler (containing a label widget, some
     button widgets, and an edit window showing aString by default)
     laid out within the given parent window.  The label widget, when
     it is created, contains aLabel.



File: gst-libs.info,  Node: BLOX.BDialog class-prompters,  Next: BLOX.BDialog-accessing,  Prev: BLOX.BDialog class-instance creation,  Up: BLOX.BDialog

1.11.2 BLOX.BDialog class: prompters
------------------------------------

chooseColor: parent label: aLabel default: color
     Prompt for a color.  The dialog box is created with the given
     parent window and with aLabel as its title bar text, and initially
     it selects the color given in the color parameter.

     If the dialog box is canceled, nil is answered, else the selected
     color is returned as a String with its RGB value.

chooseFileToOpen: parent label: aLabel default: name defaultExtension: ext types: typeList
     Pop up a dialog box for the user to select a file to open.  Its
     purpose is for the user to select an existing file only.  If the
     user enters an non-existent file, the dialog box gives the user an
     error prompt and requires the user to give an alternative
     selection or to cancel the selection. If an application allows the
     user to create new files, it should do so by providing a separate
     New menu command.

     If the dialog box is canceled, nil is answered, else the selected
     file name is returned as a String.

     The dialog box is created with the given parent window and with
     aLabel as its title bar text.  The name parameter indicates which
     file is initially selected, and the default extension specifies  a
     string that will be appended to the filename if the user enters a
     filename without an extension.

     The typeList parameter is an array of arrays, like #(('Text files'
     '.txt' '.diz') ('Smalltalk files' '.st')), and is used to
     construct a listbox of file types.  When the user chooses a file
     type in the listbox, only the files of that type are listed.  Each
     item in the array contains a list of strings: the first one is the
     name of the file type described by a particular file pattern, and
     is the text string that appears in the File types listbox, while
     the other ones are the possible extensions that belong to this
     particular file type.

chooseFileToSave: parent label: aLabel default: name defaultExtension: ext types: typeList
     Pop up a dialog box for the user to select a file to save; this
     differs from the file open dialog box in that non-existent file
     names are accepted and existing file names trigger a confirmation
     dialog box, asking the user whether the file should be overwritten
     or not.

     If the dialog box is canceled, nil is answered, else the selected
     file name is returned as a String.

     The dialog box is created with the given parent window and with
     aLabel as its title bar text.  The name parameter indicates which
     file is initially selected, and the default extension specifies  a
     string that will be appended to the filename if the user enters a
     filename without an extension.

     The typeList parameter is an array of arrays, like #(('Text files'
     '.txt' '.diz') ('Smalltalk files' '.st')), and is used to
     construct a listbox of file types.  When the user chooses a file
     type in the listbox, only the files of that type are listed.  Each
     item in the array contains a list of strings: the first one is the
     name of the file type described by a particular file pattern, and
     is the text string that appears in the File types listbox, while
     the other ones are the possible extensions that belong to this
     particular file type.



File: gst-libs.info,  Node: BLOX.BDialog-accessing,  Next: BLOX.BDialog-widget protocol,  Prev: BLOX.BDialog class-prompters,  Up: BLOX.BDialog

1.11.3 BLOX.BDialog: accessing
------------------------------

addButton: aLabel receiver: anObject index: anInt
     Add a button to the dialog box that, when clicked, will cause the
     #dispatch: method to be triggered in anObject, passing anInt as
     the argument of the callback.  The caption of the button is set to
     aLabel.

addButton: aLabel receiver: anObject message: aSymbol
     Add a button to the dialog box that, when clicked, will cause the
     aSymbol unary selector to be sent to anObject.  The caption of the
     button is set to aLabel.

addButton: aLabel receiver: anObject message: aSymbol argument: arg
     Add a button to the dialog box that, when clicked, will cause the
     aSymbol one-argument selector to be sent to anObject, passing arg
     as the argument of the callback.  The caption of the button is set
     to aLabel.

contents
     Answer the text that is displayed in the entry widget associated
     to the dialog box.

contents: newText
     Display newText in the entry widget associated to the dialog box.



File: gst-libs.info,  Node: BLOX.BDialog-widget protocol,  Prev: BLOX.BDialog-accessing,  Up: BLOX.BDialog

1.11.4 BLOX.BDialog: widget protocol
------------------------------------

center
     Center the dialog box's parent window in the screen

centerIn: view
     Center the dialog box's parent window in the given widget

destroyed
     Private - The receiver has been destroyed, clear the corresponding
     Tcl variable to avoid memory leaks.

invokeCallback: index
     Generate a synthetic callback corresponding to the index-th button
     being pressed, and destroy the parent window (triggering its
     callback if one was established).

loop
     Map the parent window modally.  In other words, an event loop is
     started that ends only after the window has been destroyed.  For
     more information on the treatment of events for modal windows,
     refer to BWindow>>#modalMap.



File: gst-libs.info,  Node: BLOX.BDropDown,  Next: BLOX.BDropDownEdit,  Prev: BLOX.BDialog,  Up: BLOX package

1.12 BLOX.BDropDown
===================

Defined in namespace BLOX
Superclass: BLOX.BExtended
Category: Graphics-Examples
     This class is an abstract superclass for widgets offering the
     ability to pick items from a pre-built list.  The list is usually
     hidden, but a button on the right of this widgets makes it pop up.
     This widget is thus composed of three parts: an unspecified text
     widget (shown on the left of the button and always visible), the
     button widget (shown on the right, it depicts a down arrow, and is
     always visible), and the pop-up list widget.

* Menu:

* BLOX.BDropDown-accessing::  (instance)
* BLOX.BDropDown-callbacks::  (instance)
* BLOX.BDropDown-flexibility::  (instance)
* BLOX.BDropDown-list box accessing::  (instance)
* BLOX.BDropDown-widget protocol::  (instance)


File: gst-libs.info,  Node: BLOX.BDropDown-accessing,  Next: BLOX.BDropDown-callbacks,  Up: BLOX.BDropDown

1.12.1 BLOX.BDropDown: accessing
--------------------------------

backgroundColor
     Answer the value of the backgroundColor for the widget, which in
     this class is only set for the list widget (that is, the pop-up
     widget). Subclasses should override this method so that the color
     is set properly for the text widget as well.

     Specifies the normal background color to use when displaying the
     widget.

backgroundColor: aColor
     Set the value of the backgroundColor for the widget, which in this
     class is only set for the list widget (that is, the pop-up
     widget). Subclasses should override this method so that the color
     is set properly for the text widget as well.

     Specifies the normal background color to use when displaying the
     widget.

droppedRows
     Answer the number of items that are visible at any time in the
     listbox.

droppedRows: anInteger
     Set the number of items that are visible at any time in the
     listbox.

font
     Answer the value of the font option for the widget, which in this
     class is only set for the list widget (that is, the pop-up
     widget). Subclasses should override this method so that the color
     is set properly for the text widget as well.

     Specifies the font to use when drawing text inside the widget. The
     font can be given as either an X font name or a Blox font
     description string.

     X font names are given as many fields, each led by a minus, and
     each of which can be replaced by an * to indicate a default value
     is ok: foundry, family, weight, slant, setwidth, addstyle, pixel
     size, point size (the same as pixel size for historical reasons),
     horizontal resolution, vertical resolution, spacing, width,
     charset and character encoding.

     Blox font description strings have three fields, which must be
     separated by a space and of which only the first is mandatory: the
     font family, the font size in points (or in pixels if a negative
     value is supplied), and a number of styles separated by a space
     (valid styles are normal, bold, italic, underline and overstrike).
     Examples of valid fonts are "Helvetica 10 Bold", "Times -14",
     "Futura Bold Underline".  You must enclose the font family in
     braces if it is made of two or more words.

font: value
     Set the value of the font option for the widget, which in this
     class is only set for the list widget (that is, the pop-up
     widget). Subclasses should override this method so that the color
     is set properly for the text widget as well.

     Specifies the font to use when drawing text inside the widget. The
     font can be given as either an X font name or a Blox font
     description string.

     X font names are given as many fields, each led by a minus, and
     each of which can be replaced by an * to indicate a default value
     is ok: foundry, family, weight, slant, setwidth, addstyle, pixel
     size, point size (the same as pixel size for historical reasons),
     horizontal resolution, vertical resolution, spacing, width,
     charset and character encoding.

     Blox font description strings have three fields, which must be
     separated by a space and of which only the first is mandatory: the
     font family, the font size in points (or in pixels if a negative
     value is supplied), and a number of styles separated by a space
     (valid styles are normal, bold, italic, underline and overstrike).
     Examples of valid fonts are "Helvetica 10 Bold", "Times -14",
     "Futura Bold Underline".  You must enclose the font family in
     braces if it is made of two or more words.

foregroundColor
     Answer the value of the foregroundColor for the widget, which in
     this class is only set for the list widget (that is, the pop-up
     widget). Subclasses should override this method so that the color
     is set properly for the text widget as well.

     Specifies the normal foreground color to use when displaying the
     widget.

foregroundColor: aColor
     Set the value of the foregroundColor for the widget, which in this
     class is only set for the list widget (that is, the pop-up
     widget). Subclasses should override this method so that the color
     is set properly for the text widget as well.

     Specifies the normal foreground color to use when displaying the
     widget.

highlightBackground
     Answer the value of the highlightBackground option for the widget.

     Specifies the background color to use when displaying selected
     items in the list widget.

highlightBackground: aColor
     Set the value of the highlightBackground option for the widget.

     Specifies the background color to use when displaying selected
     items in the list widget.

highlightForeground
     Answer the value of the highlightForeground option for the widget.

     Specifies the foreground color to use when displaying selected
     items in the list widget.

highlightForeground: aColor
     Set the value of the highlightForeground option for the widget.

     Specifies the foreground color to use when displaying selected
     items in the list widget.



File: gst-libs.info,  Node: BLOX.BDropDown-callbacks,  Next: BLOX.BDropDown-flexibility,  Prev: BLOX.BDropDown-accessing,  Up: BLOX.BDropDown

1.12.2 BLOX.BDropDown: callbacks
--------------------------------

callback
     Answer a DirectedMessage that is sent when the receiver is clicked,
     or nil if none has been set up.

callback: aReceiver message: aSymbol
     Set up so that aReceiver is sent the aSymbol message (the name of
     a zero- or one-argument selector) when the receiver is clicked.
     If the method accepts an argument, the receiver is passed.

invokeCallback
     Generate a synthetic callback



File: gst-libs.info,  Node: BLOX.BDropDown-flexibility,  Next: BLOX.BDropDown-list box accessing,  Prev: BLOX.BDropDown-callbacks,  Up: BLOX.BDropDown

1.12.3 BLOX.BDropDown: flexibility
----------------------------------

createList
     Create the popup widget to be used for the `drop-down list'.  It
     is a BList by default, but you can use any other widget,
     overriding the `list box accessing' methods if necessary.

createTextWidget
     Create the widget that will hold the string chosen from the list
     box and answer it. The widget must be a child of `self primitive'.

itemHeight
     Answer the height of an item in the drop-down list. The default
     implementation assumes that the receiver understands #font, but
     you can modify it if you want.

listCallback
     Called when an item of the listbox is highlighted. Do nothing by
     default

listSelectAt: aPoint
     Select the item lying at the given position in the list box. The
     default implementation assumes that list is a BList, but you can
     modify it if you want.

listText
     Answer the text currently chosen in the list box. The default
     implementation assumes that list is a BList, but you can modify it
     if you want.

text
     Answer the text that the user has picked from the widget and/or
     typed in the control (the exact way the text is entered will be
     established by subclasses, since this is an abstract method).

text: aString
     Set the text widget to aString



File: gst-libs.info,  Node: BLOX.BDropDown-list box accessing,  Next: BLOX.BDropDown-widget protocol,  Prev: BLOX.BDropDown-flexibility,  Up: BLOX.BDropDown

1.12.4 BLOX.BDropDown: list box accessing
-----------------------------------------

add: anObject afterIndex: index
     Add an element with the given value after another element whose
     index is contained in the index parameter.  The label displayed in
     the widget is anObject's displayString.  Answer anObject.

add: aString element: anObject afterIndex: index
     Add an element with the aString label after another element whose
     index is contained in the index parameter.  This method allows the
     client to decide autonomously the label that the widget will
     display.

     If anObject is nil, then string is used as the element as well.
     If aString is nil, then the element's displayString is used as the
     label.

     Answer anObject or, if it is nil, aString.

addLast: anObject
     Add an element with the given value at the end of the listbox.
     The label displayed in the widget is anObject's displayString.
     Answer anObject.

addLast: aString element: anObject
     Add an element with the given value at the end of the listbox.
     This method allows the client to decide autonomously the label
     that the widget will display.

     If anObject is nil, then string is used as the element as well.
     If aString is nil, then the element's displayString is used as the
     label.

     Answer anObject or, if it is nil, aString.

associationAt: anIndex
     Answer an association whose key is the item at the given position
     in the listbox and whose value is the label used to display that
     item.

at: anIndex
     Answer the element displayed at the given position in the list box.

contents: stringCollection
     Set the elements displayed in the listbox, and set the labels to
     be their displayStrings.

contents: stringCollection elements: elementList
     Set the elements displayed in the listbox to be those in
     elementList, and set the labels to be the corresponding elements
     in stringCollection.  The two collections must have the same size.

do: aBlock
     Iterate over each element of the listbox and pass it to aBlock.

elements: elementList
     Set the elements displayed in the listbox, and set the labels to
     be their displayStrings.

index: newIndex
     Highlight the item at the given position in the listbox, and
     transfer the text in the list box to the text widget.

labelAt: anIndex
     Answer the label displayed at the given position in the list box.

labelsDo: aBlock
     Iterate over the labels in the list widget and pass each of them
     to aBlock.

numberOfStrings
     Answer the number of items in the list box

removeAtIndex: index
     Remove the item at the given index in the list box, answering the
     object associated to the element (i.e. the value that #at: would
     have returned for the given index)

size
     Answer the number of items in the list box



File: gst-libs.info,  Node: BLOX.BDropDown-widget protocol,  Prev: BLOX.BDropDown-list box accessing,  Up: BLOX.BDropDown

1.12.5 BLOX.BDropDown: widget protocol
--------------------------------------

dropRectangle
     Answer the rectangle in which the list widget will pop-up.  If
     possible, this is situated below the drop-down widget's bottom
     side, but if the screen space there is not enough it could be
     above the drop-down widget's above side.  If there is no screen
     space above as well, we pick the side where we can offer the
     greatest number of lines in the pop-up widget.

dropdown
     Force the pop-up list widget to be visible.

isDropdownVisible
     Answer whether the pop-up widget is visible

toggle
     Toggle the visibility of the pop-up widget.

unmapList
     Unmap the pop-up widget from the screen, transfer its selected
     item to the always visible text widget, and generate a callback.



File: gst-libs.info,  Node: BLOX.BDropDownEdit,  Next: BLOX.BDropDownList,  Prev: BLOX.BDropDown,  Up: BLOX package

1.13 BLOX.BDropDownEdit
=======================

Defined in namespace BLOX
Superclass: BLOX.BDropDown
Category: Graphics-Examples
     This class resembles an edit widget, but it has an arrow button
     that allows the user to pick an item from a pre-built list.

* Menu:

* BLOX.BDropDownEdit-accessing::  (instance)
* BLOX.BDropDownEdit-accessing-overrides::  (instance)
* BLOX.BDropDownEdit-text accessing::  (instance)


File: gst-libs.info,  Node: BLOX.BDropDownEdit-accessing,  Next: BLOX.BDropDownEdit-accessing-overrides,  Up: BLOX.BDropDownEdit

1.13.1 BLOX.BDropDownEdit: accessing
------------------------------------

backgroundColor: aColor
     Set the value of the backgroundColor option for the widget.

     Specifies the normal background color to use when displaying the
     widget.

font: aString
     Set the value of the font option for the widget.

     Specifies the font to use when drawing text inside the widget. The
     font can be given as either an X font name or a Blox font
     description string.

     X font names are given as many fields, each led by a minus, and
     each of which can be replaced by an * to indicate a default value
     is ok: foundry, family, weight, slant, setwidth, addstyle, pixel
     size, point size (the same as pixel size for historical reasons),
     horizontal resolution, vertical resolution, spacing, width,
     charset and character encoding.

     Blox font description strings have three fields, which must be
     separated by a space and of which only the first is mandatory: the
     font family, the font size in points (or in pixels if a negative
     value is supplied), and a number of styles separated by a space
     (valid styles are normal, bold, italic, underline and overstrike).
     Examples of valid fonts are "Helvetica 10 Bold", "Times -14",
     "Futura Bold Underline".  You must enclose the font family in
     braces if it is made of two or more words.

foregroundColor: aColor
     Set the value of the foregroundColor option for the widget.

     Specifies the normal foreground color to use when displaying the
     widget.

highlightBackground: aColor
     Set the value of the highlightBackground option for the widget.

     Specifies the background color to use when displaying selected
     items in the list widget and the selection in the text widget.

highlightForeground: aColor
     Set the value of the highlightBackground option for the widget.

     Specifies the background color to use when displaying selected
     items in the list widget and the selection in the text widget.



File: gst-libs.info,  Node: BLOX.BDropDownEdit-accessing-overrides,  Next: BLOX.BDropDownEdit-text accessing,  Prev: BLOX.BDropDownEdit-accessing,  Up: BLOX.BDropDownEdit

1.13.2 BLOX.BDropDownEdit: accessing-overrides
----------------------------------------------

text
     Answer the text shown in the widget



File: gst-libs.info,  Node: BLOX.BDropDownEdit-text accessing,  Prev: BLOX.BDropDownEdit-accessing-overrides,  Up: BLOX.BDropDownEdit

1.13.3 BLOX.BDropDownEdit: text accessing
-----------------------------------------

insertAtEnd: aString
     Clear the selection and append aString at the end of the text
     widget.

replaceSelection: aString
     Insert aString in the text widget at the current insertion point,
     replacing the currently selected text (if any), and leaving the
     text selected.

selectAll
     Select the whole contents of the text widget

selectFrom: first to: last
     Sets the selection of the text widget to include the characters
     starting with the one indexed by first (the very first character in
     the widget having index 1) and ending with the one just before
     last.  If last refers to the same character as first or an earlier
     one, then the text widget's selection is cleared.

selection
     Answer an empty string if the text widget has no selection, else
     answer the currently selected text

selectionRange
     Answer nil if the text widget has no selection, else answer an
     Interval object whose first item is the index of the first
     character in the selection, and whose last item is the index of
     the character just after the last one in the selection.

text: aString
     Set the contents of the text widget and select them.



File: gst-libs.info,  Node: BLOX.BDropDownList,  Next: BLOX.BEdit,  Prev: BLOX.BDropDownEdit,  Up: BLOX package

1.14 BLOX.BDropDownList
=======================

Defined in namespace BLOX
Superclass: BLOX.BDropDown
Category: Graphics-Examples
     This class resembles a list box widget, but its actual list shows
     up only when you click the arrow button beside the currently
     selected item.

* Menu:

* BLOX.BDropDownList-accessing::  (instance)
* BLOX.BDropDownList-callbacks::  (instance)
* BLOX.BDropDownList-list box accessing::  (instance)


File: gst-libs.info,  Node: BLOX.BDropDownList-accessing,  Next: BLOX.BDropDownList-callbacks,  Up: BLOX.BDropDownList

1.14.1 BLOX.BDropDownList: accessing
------------------------------------

backgroundColor: aColor
     Set the value of the backgroundColor for the widget, which in this
     class is set for the list widget and, when the focus is outside
     the control, for the text widget as well.

     Specifies the normal background color to use when displaying the
     widget.

font: aString
     Set the value of the font option for the widget.

     Specifies the font to use when drawing text inside the widget. The
     font can be given as either an X font name or a Blox font
     description string.

     X font names are given as many fields, each led by a minus, and
     each of which can be replaced by an * to indicate a default value
     is ok: foundry, family, weight, slant, setwidth, addstyle, pixel
     size, point size (the same as pixel size for historical reasons),
     horizontal resolution, vertical resolution, spacing, width,
     charset and character encoding.

     Blox font description strings have three fields, which must be
     separated by a space and of which only the first is mandatory: the
     font family, the font size in points (or in pixels if a negative
     value is supplied), and a number of styles separated by a space
     (valid styles are normal, bold, italic, underline and overstrike).
     Examples of valid fonts are "Helvetica 10 Bold", "Times -14",
     "Futura Bold Underline".  You must enclose the font family in
     braces if it is made of two or more words.

foregroundColor: aColor
     Set the value of the foregroundColor for the widget, which in this
     class is set for the list widget and, when the focus is outside
     the control, for the text widget as well.

     Specifies the normal foreground color to use when displaying the
     widget.

highlightBackground: aColor
     Answer the value of the highlightBackground option for the widget.

     Specifies the background color to use when displaying selected
     items in the list widget and, when the focus is inside the
     control, for the text widget as well.

highlightForeground: aColor
     Answer the value of the highlightForeground option for the widget.

     Specifies the foreground color to use when displaying selected
     items in the list widget and, when the focus is inside the
     control, for the text widget as well.

text
     Answer the text that the user has picked from the widget and/or
     typed in the control (the exact way the text is entered will be
     established by subclasses, since this is an abstract method).



File: gst-libs.info,  Node: BLOX.BDropDownList-callbacks,  Next: BLOX.BDropDownList-list box accessing,  Prev: BLOX.BDropDownList-accessing,  Up: BLOX.BDropDownList

1.14.2 BLOX.BDropDownList: callbacks
------------------------------------

callback: aReceiver message: aSymbol
     Set up so that aReceiver is sent the aSymbol message (the name of
     a selector with at most two arguemtnts) when the active item in
     the receiver changegs.  If the method accepts two arguments, the
     receiver is  passed as the first parameter.  If the method accepts
     one or two arguments, the selected index is passed as the last
     parameter.

invokeCallback
     Generate a synthetic callback.



File: gst-libs.info,  Node: BLOX.BDropDownList-list box accessing,  Prev: BLOX.BDropDownList-callbacks,  Up: BLOX.BDropDownList

1.14.3 BLOX.BDropDownList: list box accessing
---------------------------------------------

index
     Answer the value of the index option for the widget.  Since it is
     not possible to modify an item once it has been picked from the
     list widget, this is always defined for BDropDownList widgets.



File: gst-libs.info,  Node: BLOX.BEdit,  Next: BLOX.BEmbeddedImage,  Prev: BLOX.BDropDownList,  Up: BLOX package

1.15 BLOX.BEdit
===============

Defined in namespace BLOX
Superclass: BLOX.BPrimitive
Category: Graphics-Windows
     I am a widget showing one line of modifiable text.

* Menu:

* BLOX.BEdit class-instance creation::  (class)
* BLOX.BEdit-accessing::  (instance)
* BLOX.BEdit-widget protocol::  (instance)


File: gst-libs.info,  Node: BLOX.BEdit class-instance creation,  Next: BLOX.BEdit-accessing,  Up: BLOX.BEdit

1.15.1 BLOX.BEdit class: instance creation
------------------------------------------

new: parent contents: aString
     Answer a new BEdit widget laid inside the given parent widget,
     with a default content of aString



File: gst-libs.info,  Node: BLOX.BEdit-accessing,  Next: BLOX.BEdit-widget protocol,  Prev: BLOX.BEdit class-instance creation,  Up: BLOX.BEdit

1.15.2 BLOX.BEdit: accessing
----------------------------

backgroundColor
     Answer the value of the backgroundColor option for the widget.

     Specifies the normal background color to use when displaying the
     widget.

backgroundColor: value
     Set the value of the backgroundColor option for the widget.

     Specifies the normal background color to use when displaying the
     widget.

callback
     Answer a DirectedMessage that is sent when the receiver is
     modified, or nil if none has been set up.

callback: aReceiver message: aSymbol
     Set up so that aReceiver is sent the aSymbol message (the name of
     a zero- or one-argument selector) when the receiver is modified.
     If the method accepts an argument, the receiver is passed.

contents
     Return the contents of the widget

contents: newText
     Set the contents of the widget

font
     Answer the value of the font option for the widget.

     Specifies the font to use when drawing text inside the widget. The
     font can be given as either an X font name or a Blox font
     description string.

     X font names are given as many fields, each led by a minus, and
     each of which can be replaced by an * to indicate a default value
     is ok: foundry, family, weight, slant, setwidth, addstyle, pixel
     size, point size (the same as pixel size for historical reasons),
     horizontal resolution, vertical resolution, spacing, width,
     charset and character encoding.

     Blox font description strings have three fields, which must be
     separated by a space and of which only the first is mandatory: the
     font family, the font size in points (or in pixels if a negative
     value is supplied), and a number of styles separated by a space
     (valid styles are normal, bold, italic, underline and overstrike).
     Examples of valid fonts are "Helvetica 10 Bold", "Times -14",
     "Futura Bold Underline".  You must enclose the font family in
     braces if it is made of two or more words.

font: value
     Set the value of the font option for the widget.

     Specifies the font to use when drawing text inside the widget. The
     font can be given as either an X font name or a Blox font
     description string.

     X font names are given as many fields, each led by a minus, and
     each of which can be replaced by an * to indicate a default value
     is ok: foundry, family, weight, slant, setwidth, addstyle, pixel
     size, point size (the same as pixel size for historical reasons),
     horizontal resolution, vertical resolution, spacing, width,
     charset and character encoding.

     Blox font description strings have three fields, which must be
     separated by a space and of which only the first is mandatory: the
     font family, the font size in points (or in pixels if a negative
     value is supplied), and a number of styles separated by a space
     (valid styles are normal, bold, italic, underline and overstrike).
     Examples of valid fonts are "Helvetica 10 Bold", "Times -14",
     "Futura Bold Underline".  You must enclose the font family in
     braces if it is made of two or more words.

foregroundColor
     Answer the value of the foregroundColor option for the widget.

     Specifies the normal foreground color to use when displaying the
     widget.

foregroundColor: value
     Set the value of the foregroundColor option for the widget.

     Specifies the normal foreground color to use when displaying the
     widget.

selectBackground
     Answer the value of the selectBackground option for the widget.

     Specifies the background color to use when displaying selected
     parts of the widget.

selectBackground: value
     Set the value of the selectBackground option for the widget.

     Specifies the background color to use when displaying selected
     parts of the widget.

selectForeground
     Answer the value of the selectForeground option for the widget.

     Specifies the foreground color to use when displaying selected
     parts of the widget.

selectForeground: value
     Set the value of the selectForeground option for the widget.

     Specifies the foreground color to use when displaying selected
     parts of the widget.



File: gst-libs.info,  Node: BLOX.BEdit-widget protocol,  Prev: BLOX.BEdit-accessing,  Up: BLOX.BEdit

1.15.3 BLOX.BEdit: widget protocol
----------------------------------

destroyed
     Private - The receiver has been destroyed, clear the corresponding
     Tcl variable to avoid memory leaks.

hasSelection
     Answer whether there is selected text in the widget

insertAtEnd: aString
     Clear the selection and append aString at the end of the widget.

insertText: aString
     Insert aString in the widget at the current insertion point,
     replacing the currently selected text (if any).

invokeCallback
     Generate a synthetic callback.

nextPut: aCharacter
     Clear the selection and append aCharacter at the end of the widget.

nextPutAll: aString
     Clear the selection and append aString at the end of the widget.

nl
     Clear the selection and append a linefeed character at the end of
     the widget.

replaceSelection: aString
     Insert aString in the widget at the current insertion point,
     replacing the currently selected text (if any), and leaving the
     text selected.

selectAll
     Select the whole contents of the widget.

selectFrom: first to: last
     Sets the selection to include the characters starting with the one
     indexed by first (the very first character in the widget having
     index 1) and ending with the one just before last.  If last refers
     to the same character as first or an earlier one, then the
     widget's selection is cleared.

selection
     Answer an empty string if the widget has no selection, else answer
     the currently selected text

selectionRange
     Answer nil if the widget has no selection, else answer an Interval
     object whose first item is the index of the first character in the
     selection, and whose last item is the index of the character just
     after the last one in the selection.

space
     Clear the selection and append a space at the end of the widget.



File: gst-libs.info,  Node: BLOX.BEmbeddedImage,  Next: BLOX.BEmbeddedText,  Prev: BLOX.BEdit,  Up: BLOX package

1.16 BLOX.BEmbeddedImage
========================

Defined in namespace BLOX
Superclass: BLOX.BBoundingBox
Category: Graphics-Windows
     I can draw a colorful image inside the canvas.

* Menu:

* BLOX.BEmbeddedImage-accessing::  (instance)


File: gst-libs.info,  Node: BLOX.BEmbeddedImage-accessing,  Up: BLOX.BEmbeddedImage

1.16.1 BLOX.BEmbeddedImage: accessing
-------------------------------------

copyInto: aBlox
     Answer a new BCanvasObject identical to this but displayed into
     another canvas, newCanvas.  The new instance is not created at the
     time it is returned.

data
     Answer the data of the image.  The result will be a String
     containing image data either as Base-64 encoded GIF data, as XPM
     data, or as PPM data.

data: aString
     Set the data of the image.  aString may contain the data either as
     Base-64 encoded GIF data, as XPM data, or as PPM data.  No changes
     are visible until you toggle a redraw using the appropriate method.

redraw
     Force the object to be displayed in the parent canvas, creating it
     if it has not been inserted for real in the parent, and refresh
     its position and image data if it has changed.



File: gst-libs.info,  Node: BLOX.BEmbeddedText,  Next: BLOX.BEventSet,  Prev: BLOX.BEmbeddedImage,  Up: BLOX package

1.17 BLOX.BEmbeddedText
=======================

Defined in namespace BLOX
Superclass: BLOX.BBoundingBox
Category: Graphics-Windows
     I can draw text in all sorts of colors, sizes and fonts.

* Menu:

* BLOX.BEmbeddedText-accessing::  (instance)


File: gst-libs.info,  Node: BLOX.BEmbeddedText-accessing,  Up: BLOX.BEmbeddedText

1.17.1 BLOX.BEmbeddedText: accessing
------------------------------------

font
     Answer the value of the font option for the canvas object.

     Specifies the font to use when drawing text inside the widget. The
     font can be given as either an X font name or a Blox font
     description string.

     X font names are given as many fields, each led by a minus, and
     each of which can be replaced by an * to indicate a default value
     is ok: foundry, family, weight, slant, setwidth, addstyle, pixel
     size, point size (the same as pixel size for historical reasons),
     horizontal resolution, vertical resolution, spacing, width,
     charset and character encoding.

     Blox font description strings have three fields, which must be
     separated by a space and of which only the first is mandatory: the
     font family, the font size in points (or in pixels if a negative
     value is supplied), and a number of styles separated by a space
     (valid styles are normal, bold, italic, underline and overstrike).
     Examples of valid fonts are "Helvetica 10 Bold", "Times -14",
     "Futura Bold Underline".  You must enclose the font family in
     braces if it is made of two or more words.

font: font
     Set the value of the font option for the canvas object.

     Specifies the font to use when drawing text inside the widget. The
     font can be given as either an X font name or a Blox font
     description string.

     X font names are given as many fields, each led by a minus, and
     each of which can be replaced by an * to indicate a default value
     is ok: foundry, family, weight, slant, setwidth, addstyle, pixel
     size, point size (the same as pixel size for historical reasons),
     horizontal resolution, vertical resolution, spacing, width,
     charset and character encoding.

     Blox font description strings have three fields, which must be
     separated by a space and of which only the first is mandatory: the
     font family, the font size in points (or in pixels if a negative
     value is supplied), and a number of styles separated by a space
     (valid styles are normal, bold, italic, underline and overstrike).
     Examples of valid fonts are "Helvetica 10 Bold", "Times -14",
     "Futura Bold Underline".  You must enclose the font family in
     braces if it is made of two or more words.

justify
     Answer how to justify the text within its bounding region.

justify: aSymbol
     Sets how to justify the text within its bounding region.  Can be
     #left, #right or #center (the default).

redraw
     Force the object to be displayed in the parent canvas, creating it
     if it has not been inserted for real in the parent, and refresh
     its position.

text
     Answer the text that is printed by the object

text: aString
     Set the text that is printed by the object



File: gst-libs.info,  Node: BLOX.BEventSet,  Next: BLOX.BEventTarget,  Prev: BLOX.BEmbeddedText,  Up: BLOX package

1.18 BLOX.BEventSet
===================

Defined in namespace BLOX
Superclass: BLOX.BEventTarget
Category: Graphics-Windows
     I combine event handlers and let you apply them to many objects.
     Basically, you derive a class from me, override the #initialize:
     method to establish the handlers, then use the #addEventSet: method
     understood by every Blox class to add the event handlers specified
     by the receiver to the object.

* Menu:

* BLOX.BEventSet class-initializing::  (class)
* BLOX.BEventSet-accessing::  (instance)
* BLOX.BEventSet-initializing::  (instance)


File: gst-libs.info,  Node: BLOX.BEventSet class-initializing,  Next: BLOX.BEventSet-accessing,  Up: BLOX.BEventSet

1.18.1 BLOX.BEventSet class: initializing
-----------------------------------------

new
     This method should not be called for instances of this class.

new: widget
     Private - Create a new event set object that will attach to the
     given widget. Answer the object. Note: this method should be
     called by #addEventSet:, not directly



File: gst-libs.info,  Node: BLOX.BEventSet-accessing,  Next: BLOX.BEventSet-initializing,  Prev: BLOX.BEventSet class-initializing,  Up: BLOX.BEventSet

1.18.2 BLOX.BEventSet: accessing
--------------------------------

widget
     Answer the widget to which the receiver is attached.



File: gst-libs.info,  Node: BLOX.BEventSet-initializing,  Prev: BLOX.BEventSet-accessing,  Up: BLOX.BEventSet

1.18.3 BLOX.BEventSet: initializing
-----------------------------------

initialize: aBWidget
     Initialize the receiver's event handlers to attach to aBWidget.
     You can override this of course, but don't forget to call the
     superclass implementation first.



File: gst-libs.info,  Node: BLOX.BEventTarget,  Next: BLOX.BExtended,  Prev: BLOX.BEventSet,  Up: BLOX package

1.19 BLOX.BEventTarget
======================

Defined in namespace BLOX
Superclass: Object
Category: Graphics-Windows
     I track all the event handling procedures that you apply to an
     object.

* Menu:

* BLOX.BEventTarget-intercepting events::  (instance)


File: gst-libs.info,  Node: BLOX.BEventTarget-intercepting events,  Up: BLOX.BEventTarget

1.19.1 BLOX.BEventTarget: intercepting events
---------------------------------------------

addEventSet: aBEventSetSublass
     Add to the receiver the event handlers implemented by an instance
     of aBEventSetSubclass. Answer the new instance of
     aBEventSetSublass.

onAsciiKeyEventSend: aSelector to: anObject
     When an ASCII key is pressed and the receiver has the focus, send
     the 1-argument message identified by aSelector to anObject,
     passing to it a Character.

onDestroySend: aSelector to: anObject
     When the receiver is destroyed, send the unary message identified
     by aSelector to anObject.

onFocusEnterEventSend: aSelector to: anObject
     When the focus enters the receiver, send the unary message
     identified by aSelector to anObject.

onFocusLeaveEventSend: aSelector to: anObject
     When the focus leaves the receiver, send the unary message
     identified by aSelector to anObject.

onKeyEvent: key send: aSelector to: anObject
     When the given key is pressed and the receiver has the focus, send
     the unary message identified by aSelector to anObject.  Examples
     for key are:  'Ctrl-1', 'Alt-X', 'Meta-plus', 'enter'.  The last
     two cases include example of special key identifiers; these
     include: 'backslash', 'exclam', 'quotedbl', 'dollar', 'asterisk',
     'less', 'greater', 'asciicircum' (caret), 'question', 'equal',
     'parenleft', 'parenright', 'colon', 'semicolon', 'bar' (pipe
     sign), 'underscore', 'percent', 'minus', 'plus', 'BackSpace',
     'Delete', 'Insert', 'Return', 'End', 'Home', 'Prior' (Pgup),
     'Next' (Pgdn), 'F1'..'F24', 'Caps_Lock', 'Num_Lock', 'Tab',
     'Left', 'Right', 'Up', 'Down'.  There are in addition four special
     identifiers which map to platform-specific keys: '<Cut>',
     '<Copy>', '<Paste>', '<Clear>' (all with the angular brackets!).

onKeyEventSend: aSelector to: anObject
     When a key is pressed and the receiver has the focus, send the
     1-argument message identified by aSelector to anObject. The pressed
     key will be passed as a String parameter; some of the keys will
     send special key identifiers such as those explained in the
     documentation for #onKeyEvent:send:to: Look at the #eventTest test
     program in the BloxTestSuite to find out the parameters passed to
     such an event procedure

onKeyUpEventSend: aSelector to: anObject
     When a key has been released and the receiver has the focus, send
     the 1-argument message identified by aSelector to anObject. The
     released key will be passed as a String parameter; some of the keys
     will send special key identifiers such as those explained in the
     documentation for #onKeyEvent:send:to: Look at the #eventTest test
     program in the BloxTestSuite to find out the parameters passed to
     such an event procedure

onMouseDoubleEvent: button send: aSelector to: anObject
     When the given button is double-clicked on the mouse, send the
     1-argument message identified by aSelector to anObject. The mouse
     position will be passed as a Point.

onMouseDoubleEventSend: aSelector to: anObject
     When a button is double-clicked on the mouse, send the 2-argument
     message identified by aSelector to anObject. The mouse position
     will be passed as a Point in the first parameter, the button
     number will be passed as an Integer in the second parameter.

onMouseDownEvent: button send: aSelector to: anObject
     When the given button is pressed on the mouse, send the 1-argument
     message identified by aSelector to anObject. The mouse position
     will be passed as a Point.

onMouseDownEventSend: aSelector to: anObject
     When a button is pressed on the mouse, send the 2-argument message
     identified by aSelector to anObject. The mouse position will be
     passed as a Point in the first parameter, the button number will
     be passed as an Integer in the second parameter.

onMouseEnterEventSend: aSelector to: anObject
     When the mouse enters the widget, send the unary message
     identified by aSelector to anObject.

onMouseLeaveEventSend: aSelector to: anObject
     When the mouse leaves the widget, send the unary message
     identified by aSelector to anObject.

onMouseMoveEvent: button send: aSelector to: anObject
     When the mouse is moved while the given button is pressed on the
     mouse, send the 1-argument message identified by aSelector to
     anObject. The mouse position will be passed as a Point.

onMouseMoveEventSend: aSelector to: anObject
     When the mouse is moved, send the 1-argument message identified by
     aSelector to anObject. The mouse position will be passed as a
     Point.

onMouseTripleEvent: button send: aSelector to: anObject
     When the given button is triple-clicked on the mouse, send the
     1-argument message identified by aSelector to anObject. The mouse
     position will be passed as a Point.

onMouseTripleEventSend: aSelector to: anObject
     When a button is triple-clicked on the mouse, send the 2-argument
     message identified by aSelector to anObject. The mouse position
     will be passed as a Point in the first parameter, the button
     number will be passed as an Integer in the second parameter.

onMouseUpEvent: button send: aSelector to: anObject
     When the given button is released on the mouse, send the
     1-argument message identified by aSelector to anObject. The mouse
     position will be passed as a Point.

onMouseUpEventSend: aSelector to: anObject
     When a button is released on the mouse, send the 2-argument
     message identified by aSelector to anObject. The mouse position
     will be passed as a Point in the first parameter, the button
     number will be passed as an Integer in the second parameter.

onResizeSend: aSelector to: anObject
     When the receiver is resized, send the 1-argument message
     identified by aSelector to anObject. The new size will be passed
     as a Point.



File: gst-libs.info,  Node: BLOX.BExtended,  Next: BLOX.BForm,  Prev: BLOX.BEventTarget,  Up: BLOX package

1.20 BLOX.BExtended
===================

Defined in namespace BLOX
Superclass: BLOX.BWidget
Category: Graphics-Windows
     Just like Gui, I serve as a base for complex objects which expose
     an individual protocol but internally use a Blox widget for
     creating their user interface. Unlike Gui, however, the instances
     of my subclasses understand the standard widget protocol.  Just
     override my newPrimitive method to return another widget, and
     you'll get a class which interacts with the user like that widget
     (a list box, a text box, or even a label) but exposes a different
     protocol.

* Menu:

* BLOX.BExtended-accessing::  (instance)
* BLOX.BExtended-customization::  (instance)


File: gst-libs.info,  Node: BLOX.BExtended-accessing,  Next: BLOX.BExtended-customization,  Up: BLOX.BExtended

1.20.1 BLOX.BExtended: accessing
--------------------------------

asPrimitiveWidget
     Answer the primitive widget that implements the receiver.



File: gst-libs.info,  Node: BLOX.BExtended-customization,  Prev: BLOX.BExtended-accessing,  Up: BLOX.BExtended

1.20.2 BLOX.BExtended: customization
------------------------------------

create
     After this method is called (the call is made automatically) the
     receiver will be attached to a `primitive' widget (which can be in
     turn another extended widget).  This method is public not because
     you can call it, but because it can be useful to override it, not
     forgetting the call to super (which only calls #newPrimitive and
     saves the result), to perform some initialization on the primitive
     widget just created; overriding #create is in fact more generic
     than overriding #newPrimitive. For an example of this, see the
     implementation of BButtonLike.

newPrimitive
     Create and answer a new widget on which the implementation of the
     receiver will be based. You should not call this method directly;
     instead you must override it in BExtended's subclasses.



File: gst-libs.info,  Node: BLOX.BForm,  Next: BLOX.BImage,  Prev: BLOX.BExtended,  Up: BLOX package

1.21 BLOX.BForm
===============

Defined in namespace BLOX
Superclass: BLOX.BPrimitive
Category: Graphics-Windows
     I am used to group many widgets together. I leave the heavy task
     of managing their position to the user.

* Menu:

* BLOX.BForm-accessing::  (instance)


File: gst-libs.info,  Node: BLOX.BForm-accessing,  Up: BLOX.BForm

1.21.1 BLOX.BForm: accessing
----------------------------

backgroundColor
     Answer the value of the backgroundColor option for the widget.

     Specifies the normal background color to use when displaying the
     widget.

backgroundColor: value
     Set the value of the backgroundColor option for the widget.

     Specifies the normal background color to use when displaying the
     widget.

defaultHeight
     Answer the value of the defaultHeight option for the widget.

     Specifies the desired height for the form in pixels. If this option
     is less than or equal to zero then the window will not request any
     size at all.

defaultHeight: value
     Set the value of the defaultHeight option for the widget.

     Specifies the desired height for the form in pixels. If this option
     is less than or equal to zero then the window will not request any
     size at all.

defaultWidth
     Answer the value of the defaultWidth option for the widget.

     Specifies the desired width for the form in pixels. If this option
     is less than or equal to zero then the window will not request any
     size at all.

defaultWidth: value
     Set the value of the defaultWidth option for the widget.

     Specifies the desired width for the form in pixels. If this option
     is less than or equal to zero then the window will not request any
     size at all.



File: gst-libs.info,  Node: BLOX.BImage,  Next: BLOX.BLabel,  Prev: BLOX.BForm,  Up: BLOX package

1.22 BLOX.BImage
================

Defined in namespace BLOX
Superclass: BLOX.BPrimitive
Category: Graphics-Windows
     I can display colorful images.

* Menu:

* BLOX.BImage class-arrows::  (class)
* BLOX.BImage class-GNU::  (class)
* BLOX.BImage class-icons::  (class)
* BLOX.BImage class-instance creation::  (class)
* BLOX.BImage class-small icons::  (class)
* BLOX.BImage-accessing::  (instance)
* BLOX.BImage-image management::  (instance)
* BLOX.BImage-widget protocol::  (instance)


File: gst-libs.info,  Node: BLOX.BImage class-arrows,  Next: BLOX.BImage class-GNU,  Up: BLOX.BImage

1.22.1 BLOX.BImage class: arrows
--------------------------------

downArrow
     Answer the XPM representation of a 12x12 arrow pointing downwards.

leftArrow
     Answer the XPM representation of a 12x12 arrow pointing leftwards.

rightArrow
     Answer the XPM representation of a 12x12 arrow pointing rightwards.

upArrow
     Answer the XPM representation of a 12x12 arrow pointing upwards.



File: gst-libs.info,  Node: BLOX.BImage class-GNU,  Next: BLOX.BImage class-icons,  Prev: BLOX.BImage class-arrows,  Up: BLOX.BImage

1.22.2 BLOX.BImage class: GNU
-----------------------------

gnu
     Answer the XPM representation of a 48x48 GNU.



File: gst-libs.info,  Node: BLOX.BImage class-icons,  Next: BLOX.BImage class-instance creation,  Prev: BLOX.BImage class-GNU,  Up: BLOX.BImage

1.22.3 BLOX.BImage class: icons
-------------------------------

exclaim
     Answer the XPM representation of a 32x32 exclamation mark icon.

info
     Answer the XPM representation of a 32x32 `information' icon.

question
     Answer the XPM representation of a 32x32 question mark icon.

stop
     Answer the XPM representation of a 32x32 `critical stop' icon.



File: gst-libs.info,  Node: BLOX.BImage class-instance creation,  Next: BLOX.BImage class-small icons,  Prev: BLOX.BImage class-icons,  Up: BLOX.BImage

1.22.4 BLOX.BImage class: instance creation
-------------------------------------------

new: parent data: aString
     Answer a new BImage widget laid inside the given parent widget,
     loading data from the given string (Base-64 encoded GIF, XPM, PPM
     are supported).

new: parent image: aFileStream
     Answer a new BImage widget laid inside the given parent widget,
     loading data from the given file (GIF, XPM, PPM are supported).

new: parent size: aPoint
     Answer a new BImage widget laid inside the given parent widget,
     showing by default a transparent image of aPoint size.



File: gst-libs.info,  Node: BLOX.BImage class-small icons,  Next: BLOX.BImage-accessing,  Prev: BLOX.BImage class-instance creation,  Up: BLOX.BImage

1.22.5 BLOX.BImage class: small icons
-------------------------------------

directory
     Answer the Base-64 GIF representation of a `directory folder' icon.

file
     Answer the Base-64 GIF representation of a `file' icon.



File: gst-libs.info,  Node: BLOX.BImage-accessing,  Next: BLOX.BImage-image management,  Prev: BLOX.BImage class-small icons,  Up: BLOX.BImage

1.22.6 BLOX.BImage: accessing
-----------------------------

backgroundColor
     Answer the value of the backgroundColor option for the widget.

     Specifies the normal background color to use when displaying the
     widget.

backgroundColor: value
     Set the value of the backgroundColor option for the widget.

     Specifies the normal background color to use when displaying the
     widget.

displayHeight
     Answer the value of the displayHeight option for the widget.

     Specifies the height of the image in pixels. This is not the
     height of the widget, but specifies the area of the widget that
     will be taken by the image.

displayHeight: value
     Set the value of the displayHeight option for the widget.

     Specifies the height of the image in pixels. This is not the
     height of the widget, but specifies the area of the widget that
     will be taken by the image.

displayWidth
     Answer the value of the displayWidth option for the widget.

     Specifies the width of the image in pixels. This is not the width
     of the widget, but specifies the area of the widget that will be
     taken by the image.

displayWidth: value
     Set the value of the displayWidth option for the widget.

     Specifies the width of the image in pixels. This is not the width
     of the widget, but specifies the area of the widget that will be
     taken by the image.

foregroundColor
     Answer the value of the foregroundColor option for the widget.

     Specifies the normal foreground color to use when displaying the
     widget.

foregroundColor: value
     Set the value of the foregroundColor option for the widget.

     Specifies the normal foreground color to use when displaying the
     widget.

gamma
     Answer the value of the gamma option for the widget.

     Specifies that the colors allocated for displaying the image widget
     should be corrected for a non-linear display with the specified
     gamma exponent value. (The intensity produced by most CRT displays
     is a power function of the input value, to a good approximation;
     gamma is the exponent and is typically around 2). The value
     specified must be greater than zero. The default value is one (no
     correction). In general, values greater than one will make the
     image lighter, and values less than one will make it darker.

gamma: value
     Set the value of the gamma option for the widget.

     Specifies that the colors allocated for displaying the image widget
     should be corrected for a non-linear display with the specified
     gamma exponent value. (The intensity produced by most CRT displays
     is a power function of the input value, to a good approximation;
     gamma is the exponent and is typically around 2). The value
     specified must be greater than zero. The default value is one (no
     correction). In general, values greater than one will make the
     image lighter, and values less than one will make it darker.



File: gst-libs.info,  Node: BLOX.BImage-image management,  Next: BLOX.BImage-widget protocol,  Prev: BLOX.BImage-accessing,  Up: BLOX.BImage

1.22.7 BLOX.BImage: image management
------------------------------------

blank
     Blank the corresponding image

data: aString
     Set the image to be drawn to aString, which can be a GIF in
     Base-64 representation or an X pixelmap.

dither
     Recalculate the dithered image in the window where the image is
     displayed.  The dithering algorithm used in displaying images
     propagates quantization errors from one pixel to its neighbors.
     If the image data is supplied in pieces, the dithered image may
     not be exactly correct.  Normally the difference is not
     noticeable, but if it is a problem, this command can be used to
     fix it.

fillFrom: origin extent: extent color: color
     Fill a rectangle with the given origin and extent, using the given
     color.

fillFrom: origin to: corner color: color
     Fill a rectangle between the given corners, using the given color.

fillRectangle: rectangle color: color
     Fill a rectangle having the given bounding box, using the given
     color.

image: aFileStream
     Read a GIF or XPM image from aFileStream.  The whole contents of
     the file are read, not only from the file position.

imageHeight
     Specifies the height of the image, in pixels.  This option is
     useful primarily in situations where you wish to build up the
     contents of the image piece by piece.  A value of zero (the
     default) allows the image to expand or shrink vertically to fit
     the data stored in it.

imageWidth
     Specifies the width of the image, in pixels.  This option is useful
     primarily in situations where you wish to build up the contents of
     the image piece by piece.  A value of zero (the default) allows the
     image to expand or shrink horizontally to fit the data stored in
     it.

lineFrom: origin extent: extent color: color
     Draw a line with the given origin and extent, using the given
     color.

lineFrom: origin to: corner color: color
     This method's functionality has not been implemented yet.

lineFrom: origin toX: endX color: color
     Draw an horizontal line between the given corners, using the given
     color.

lineFrom: origin toY: endY color: color
     Draw a vertical line between the given corners, using the given
     color.

lineInside: rectangle color: color
     Draw a line having the given bounding box, using the given color.



File: gst-libs.info,  Node: BLOX.BImage-widget protocol,  Prev: BLOX.BImage-image management,  Up: BLOX.BImage

1.22.8 BLOX.BImage: widget protocol
-----------------------------------

destroyed
     Private - The receiver has been destroyed, clear the corresponding
     Tcl image to avoid memory leaks.



File: gst-libs.info,  Node: BLOX.BLabel,  Next: BLOX.BLine,  Prev: BLOX.BImage,  Up: BLOX package

1.23 BLOX.BLabel
================

Defined in namespace BLOX
Superclass: BLOX.BPrimitive
Category: Graphics-Windows
     I am a label showing static text.

* Menu:

* BLOX.BLabel class-initialization::  (class)
* BLOX.BLabel class-instance creation::  (class)
* BLOX.BLabel-accessing::  (instance)


File: gst-libs.info,  Node: BLOX.BLabel class-initialization,  Next: BLOX.BLabel class-instance creation,  Up: BLOX.BLabel

1.23.1 BLOX.BLabel class: initialization
----------------------------------------

initialize
     Private - Initialize the receiver's class variables.



File: gst-libs.info,  Node: BLOX.BLabel class-instance creation,  Next: BLOX.BLabel-accessing,  Prev: BLOX.BLabel class-initialization,  Up: BLOX.BLabel

1.23.2 BLOX.BLabel class: instance creation
-------------------------------------------

new: parent label: label
     Answer a new BLabel widget laid inside the given parent widget,
     showing by default the `label' String.



File: gst-libs.info,  Node: BLOX.BLabel-accessing,  Prev: BLOX.BLabel class-instance creation,  Up: BLOX.BLabel

1.23.3 BLOX.BLabel: accessing
-----------------------------

alignment
     Answer the value of the anchor option for the widget.

     Specifies how the information in a widget (e.g. text or a bitmap)
     is to be displayed in the widget. Must be one of the symbols
     #topLeft, #topCenter, #topRight, #leftCenter, #center,
     #rightCenter, #bottomLeft, #bottomCenter, #bottomRight. For
     example, #topLeft means display the information such that its
     top-left corner is at the top-left corner of the widget.

alignment: aSymbol
     Set the value of the anchor option for the widget.

     Specifies how the information in a widget (e.g. text or a bitmap)
     is to be displayed in the widget. Must be one of the symbols
     #topLeft, #topCenter, #topRight, #leftCenter, #center,
     #rightCenter, #bottomLeft, #bottomCenter, #bottomRight. For
     example, #topLeft means display the information such that its
     top-left corner is at the top-left corner of the widget.

backgroundColor
     Answer the value of the backgroundColor option for the widget.

     Specifies the normal background color to use when displaying the
     widget.

backgroundColor: value
     Set the value of the backgroundColor option for the widget.

     Specifies the normal background color to use when displaying the
     widget.

font
     Answer the value of the font option for the widget.

     Specifies the font to use when drawing text inside the widget. The
     font can be given as either an X font name or a Blox font
     description string.

     X font names are given as many fields, each led by a minus, and
     each of which can be replaced by an * to indicate a default value
     is ok: foundry, family, weight, slant, setwidth, addstyle, pixel
     size, point size (the same as pixel size for historical reasons),
     horizontal resolution, vertical resolution, spacing, width,
     charset and character encoding.

     Blox font description strings have three fields, which must be
     separated by a space and of which only the first is mandatory: the
     font family, the font size in points (or in pixels if a negative
     value is supplied), and a number of styles separated by a space
     (valid styles are normal, bold, italic, underline and overstrike).
     Examples of valid fonts are "Helvetica 10 Bold", "Times -14",
     "Futura Bold Underline".  You must enclose the font family in
     braces if it is made of two or more words.

font: value
     Set the value of the font option for the widget.

     Specifies the font to use when drawing text inside the widget. The
     font can be given as either an X font name or a Blox font
     description string.

     X font names are given as many fields, each led by a minus, and
     each of which can be replaced by an * to indicate a default value
     is ok: foundry, family, weight, slant, setwidth, addstyle, pixel
     size, point size (the same as pixel size for historical reasons),
     horizontal resolution, vertical resolution, spacing, width,
     charset and character encoding.

     Blox font description strings have three fields, which must be
     separated by a space and of which only the first is mandatory: the
     font family, the font size in points (or in pixels if a negative
     value is supplied), and a number of styles separated by a space
     (valid styles are normal, bold, italic, underline and overstrike).
     Examples of valid fonts are "Helvetica 10 Bold", "Times -14",
     "Futura Bold Underline".  You must enclose the font family in
     braces if it is made of two or more words.

foregroundColor
     Answer the value of the foregroundColor option for the widget.

     Specifies the normal foreground color to use when displaying the
     widget.

foregroundColor: value
     Set the value of the foregroundColor option for the widget.

     Specifies the normal foreground color to use when displaying the
     widget.

label
     Answer the value of the label option for the widget.

     Specifies a string to be displayed inside the widget. The way in
     which the string is displayed depends on the particular widget and
     may be determined by other options, such as anchor. For windows,
     this is the title of the window.

label: value
     Set the value of the label option for the widget.

     Specifies a string to be displayed inside the widget. The way in
     which the string is displayed depends on the particular widget and
     may be determined by other options, such as anchor. For windows,
     this is the title of the window.



File: gst-libs.info,  Node: BLOX.BLine,  Next: BLOX.BList,  Prev: BLOX.BLabel,  Up: BLOX package

1.24 BLOX.BLine
===============

Defined in namespace BLOX
Superclass: BLOX.BBoundingBox
Category: Graphics-Windows
     I only draw straight lines but I can do that very well, even
     without a ruler...

* Menu:

* BLOX.BLine-accessing::  (instance)


File: gst-libs.info,  Node: BLOX.BLine-accessing,  Up: BLOX.BLine

1.24.1 BLOX.BLine: accessing
----------------------------

cap
     Answer the way in which caps are to be drawn at the endpoints of
     the line.  The answer may be #butt (the default), #projecting, or
     #round).

cap: aSymbol
     Set the way in which caps are to be drawn at the endpoints of the
     line.  aSymbol may be #butt (the default), #projecting, or #round).

width
     Answer the width with which the line is drawn.

width: pixels
     Set the width with which the line is drawn.



File: gst-libs.info,  Node: BLOX.BList,  Next: BLOX.Blox,  Prev: BLOX.BLine,  Up: BLOX package

1.25 BLOX.BList
===============

Defined in namespace BLOX
Superclass: BLOX.BViewport
Category: Graphics-Windows
     I represent a list box from which you can choose one or more
     elements.

* Menu:

* BLOX.BList-accessing::  (instance)
* BLOX.BList-widget protocol::  (instance)


File: gst-libs.info,  Node: BLOX.BList-accessing,  Next: BLOX.BList-widget protocol,  Up: BLOX.BList

1.25.1 BLOX.BList: accessing
----------------------------

add: anObject afterIndex: index
     Add an element with the given value after another element whose
     index is contained in the index parameter.  The label displayed in
     the widget is anObject's displayString.  Answer anObject.

add: aString element: anObject afterIndex: index
     Add an element with the aString label after another element whose
     index is contained in the index parameter.  This method allows the
     client to decide autonomously the label that the widget will
     display.

     If anObject is nil, then string is used as the element as well.
     If aString is nil, then the element's displayString is used as the
     label.

     Answer anObject or, if it is nil, aString.

addLast: anObject
     Add an element with the given value at the end of the listbox.
     The label displayed in the widget is anObject's displayString.
     Answer anObject.

addLast: aString element: anObject
     Add an element with the given value at the end of the listbox.
     This method allows the client to decide autonomously the label
     that the widget will display.

     If anObject is nil, then string is used as the element as well.
     If aString is nil, then the element's displayString is used as the
     label.

     Answer anObject or, if it is nil, aString.

associationAt: anIndex
     Answer an association whose key is the item at the given position
     in the listbox and whose value is the label used to display that
     item.

at: anIndex
     Answer the element displayed at the given position in the list box.

backgroundColor
     Answer the value of the backgroundColor option for the widget.

     Specifies the normal background color to use when displaying the
     widget.

backgroundColor: value
     Set the value of the backgroundColor option for the widget.

     Specifies the normal background color to use when displaying the
     widget.

contents: elementList
     Set the elements displayed in the listbox, and set the labels to
     be their displayStrings.

contents: stringCollection elements: elementList
     Set the elements displayed in the listbox to be those in
     elementList, and set the labels to be the corresponding elements
     in stringCollection.  The two collections must have the same size.

do: aBlock
     Iterate over each element of the listbox and pass it to aBlock.

elements
     Answer the collection of objects that represent the elements
     displayed by the list box.

elements: elementList
     Set the elements displayed in the listbox, and set the labels to
     be their displayStrings.

font
     Answer the value of the font option for the widget.

     Specifies the font to use when drawing text inside the widget. The
     font can be given as either an X font name or a Blox font
     description string.

     X font names are given as many fields, each led by a minus, and
     each of which can be replaced by an * to indicate a default value
     is ok: foundry, family, weight, slant, setwidth, addstyle, pixel
     size, point size (the same as pixel size for historical reasons),
     horizontal resolution, vertical resolution, spacing, width,
     charset and character encoding.

     Blox font description strings have three fields, which must be
     separated by a space and of which only the first is mandatory: the
     font family, the font size in points (or in pixels if a negative
     value is supplied), and a number of styles separated by a space
     (valid styles are normal, bold, italic, underline and overstrike).
     Examples of valid fonts are "Helvetica 10 Bold", "Times -14",
     "Futura Bold Underline".  You must enclose the font family in
     braces if it is made of two or more words.

font: value
     Set the value of the font option for the widget.

     Specifies the font to use when drawing text inside the widget. The
     font can be given as either an X font name or a Blox font
     description string.

     X font names are given as many fields, each led by a minus, and
     each of which can be replaced by an * to indicate a default value
     is ok: foundry, family, weight, slant, setwidth, addstyle, pixel
     size, point size (the same as pixel size for historical reasons),
     horizontal resolution, vertical resolution, spacing, width,
     charset and character encoding.

     Blox font description strings have three fields, which must be
     separated by a space and of which only the first is mandatory: the
     font family, the font size in points (or in pixels if a negative
     value is supplied), and a number of styles separated by a space
     (valid styles are normal, bold, italic, underline and overstrike).
     Examples of valid fonts are "Helvetica 10 Bold", "Times -14",
     "Futura Bold Underline".  You must enclose the font family in
     braces if it is made of two or more words.

foregroundColor
     Answer the value of the foregroundColor option for the widget.

     Specifies the normal foreground color to use when displaying the
     widget.

foregroundColor: value
     Set the value of the foregroundColor option for the widget.

     Specifies the normal foreground color to use when displaying the
     widget.

highlightBackground
     Answer the value of the highlightBackground option for the widget.

     Specifies the background color to use when displaying selected
     items in the widget.

highlightBackground: value
     Set the value of the highlightBackground option for the widget.

     Specifies the background color to use when displaying selected
     items in the widget.

highlightForeground
     Answer the value of the highlightForeground option for the widget.

     Specifies the foreground color to use when displaying selected
     items in the widget.

highlightForeground: value
     Set the value of the highlightForeground option for the widget.

     Specifies the foreground color to use when displaying selected
     items in the widget.

index
     Answer the value of the index option for the widget.

     Indicates the element that has the location cursor. This item will
     be displayed in the highlightForeground color, and with the
     corresponding background color.

indexAt: point
     Answer the index of the element that covers the point in the
     listbox window specified by x and y (in pixel coordinates).  If no
     element covers that point, then the closest element to that point
     is used.

isSelected: index
     Answer whether the element indicated by index is currently
     selected.

label
     Return nil, it is here for Gtk+ support

label: aString
     Do nothing, it is here for Gtk+ support

labelAt: anIndex
     Answer the label displayed at the given position in the list box.

labels
     Answer the labels displayed by the list box.

labelsDo: aBlock
     Iterate over each listbox element's label and pass it to aBlock.

mode
     Answer the value of the mode option for the widget.

     Specifies one of several styles for manipulating the selection.
     The value of the option may be either single, browse, multiple, or
     extended.

     If the selection mode is single or browse, at most one element can
     be selected in the listbox at once. Clicking button 1 on an
     unselected element selects it and deselects any other selected
     item, while clicking on a selected element has no effect. In
     browse mode it is also possible to drag the selection with button
     1. That is, moving the mouse while button 1 is pressed keeps the
     item under the cursor selected.

     If the selection mode is multiple or extended, any number of
     elements may be selected at once, including discontiguous ranges.
     In multiple mode, clicking button 1 on an element toggles its
     selection state without affecting any other elements.  In extended
     mode, pressing button 1 on an element selects it, deselects
     everything else, and sets the anchor to the element under the
     mouse; dragging the mouse with button 1 down extends the selection
     to include all the elements between the anchor and the element
     under the mouse, inclusive.

     In extended mode, the selected range can be adjusted by pressing
     button 1 with the Shift key down: this modifies the selection to
     consist of the elements between the anchor and the element under
     the mouse, inclusive. The un-anchored end of this new selection
     can also be dragged with the button down. Also in extended mode,
     pressing button 1 with the Control key down starts a toggle
     operation: the anchor is set to the element under the mouse, and
     its selection state is reversed. The selection state of other
     elements is not changed. If the mouse is dragged with button 1
     down, then the selection state of all elements between the anchor
     and the element under the mouse is set to match that of the anchor
     element; the selection state of all other elements remains what it
     was before the toggle operation began.

     Most people will probably want to use browse mode for single
     selections and extended mode for multiple selections; the other
     modes appear to be useful only in special situations.

mode: value
     Set the value of the mode option for the widget.

     Specifies one of several styles for manipulating the selection.
     The value of the option may be either single, browse, multiple, or
     extended.

     If the selection mode is single or browse, at most one element can
     be selected in the listbox at once. Clicking button 1 on an
     unselected element selects it and deselects any other selected
     item, while clicking on a selected element has no effect. In
     browse mode it is also possible to drag the selection with button
     1. That is, moving the mouse while button 1 is pressed keeps the
     item under the cursor selected.

     If the selection mode is multiple or extended, any number of
     elements may be selected at once, including discontiguous ranges.
     In multiple mode, clicking button 1 on an element toggles its
     selection state without affecting any other elements.  In extended
     mode, pressing button 1 on an element selects it, deselects
     everything else, and sets the anchor to the element under the
     mouse; dragging the mouse with button 1 down extends the selection
     to include all the elements between the anchor and the element
     under the mouse, inclusive.

     In extended mode, the selected range can be adjusted by pressing
     button 1 with the Shift key down: this modifies the selection to
     consist of the elements between the anchor and the element under
     the mouse, inclusive. The un-anchored end of this new selection
     can also be dragged with the button down. Also in extended mode,
     pressing button 1 with the Control key down starts a toggle
     operation: the anchor is set to the element under the mouse, and
     its selection state is reversed. The selection state of other
     elements is not changed. If the mouse is dragged with button 1
     down, then the selection state of all elements between the anchor
     and the element under the mouse is set to match that of the anchor
     element; the selection state of all other elements remains what it
     was before the toggle operation began.

     Most people will probably want to use browse mode for single
     selections and extended mode for multiple selections; the other
     modes appear to be useful only in special situations.

numberOfStrings
     Answer the number of items in the list box

removeAtIndex: index
     Remove the item at the given index in the list box, answering the
     object associated to the element (i.e. the value that #at: would
     have returned for the given index)

size
     Answer the number of items in the list box



File: gst-libs.info,  Node: BLOX.BList-widget protocol,  Prev: BLOX.BList-accessing,  Up: BLOX.BList

1.25.2 BLOX.BList: widget protocol
----------------------------------

callback
     Answer a DirectedMessage that is sent when the active item in the
     receiver changes, or nil if none has been set up.

callback: aReceiver message: aSymbol
     Set up so that aReceiver is sent the aSymbol message (the name of
     a selector with at most two arguemtnts) when the active item in
     the receiver changegs.  If the method accepts two arguments, the
     receiver is  passed as the first parameter.  If the method accepts
     one or two arguments, the selected index is passed as the last
     parameter.

highlight: index
     Highlight the item at the given position in the listbox.

invokeCallback
     Generate a synthetic callback.

select: index
     Highlight the item at the given position in the listbox, without
     unhighlighting other items.  This is meant for multiple- or
     extended-mode listboxes, but can be used with other selection mode
     in particular cases.

show: index
     Ensure that the item at the given position in the listbox is
     visible.

unhighlight
     Unhighlight all the items in the listbox.

unselect: index
     Unhighlight the item at the given position in the listbox, without
     affecting the state of the other items.



File: gst-libs.info,  Node: BLOX.Blox,  Next: BLOX.BMenu,  Prev: BLOX.BList,  Up: BLOX package

1.26 BLOX.Blox
==============

Defined in namespace BLOX
Superclass: BLOX.BEventTarget
Category: Graphics-Windows
     I am the superclass for every visible user interface object
     (excluding canvas items, which are pretty different). I provide
     common methods and a simple Tcl interface for internal use. In
     addition, I expose class methods that do many interesting
     event-handling things.

     NOTE: some of the methods (notably geometry methods) may not be
     suitable for all Blox subclasses and may be included only for
     backwards compatibility towards 1.1.5 BLOX. You should use
     geometry methods only for subclasses of BWidget.

* Menu:

* BLOX.Blox class-C call-outs::  (class)
* BLOX.Blox class-event dispatching::  (class)
* BLOX.Blox class-instance creation::  (class)
* BLOX.Blox class-utility::  (class)
* BLOX.Blox-accessing::  (instance)
* BLOX.Blox-basic::  (instance)
* BLOX.Blox-creating children::  (instance)
* BLOX.Blox-customization::  (instance)
* BLOX.Blox-widget protocol::  (instance)


File: gst-libs.info,  Node: BLOX.Blox class-C call-outs,  Next: BLOX.Blox class-event dispatching,  Up: BLOX.Blox

1.26.1 BLOX.Blox class: C call-outs
-----------------------------------

evalIn: interp tcl: cmd
     Not commented.

idle
     Not commented.

resultIn: interp
     Not commented.

tclInit
     Not commented.



File: gst-libs.info,  Node: BLOX.Blox class-event dispatching,  Next: BLOX.Blox class-instance creation,  Prev: BLOX.Blox class-C call-outs,  Up: BLOX.Blox

1.26.2 BLOX.Blox class: event dispatching
-----------------------------------------

dispatchEvents
     If this is the outermost dispatching loop that is started,
     dispatch events until the number of calls to #terminateMainLoop
     balances the number of calls to #dispatchEvents; return instantly
     if this is not the outermost dispatching loop that is started.

dispatchEvents: mainWindow
     Dispatch some events; return upon destruction of the `mainWindow'
     widget (which can be any kind of BWidget, but will be typically a
     BWindow).

terminateMainLoop
     Terminate the event dispatching loop if this call to
     #terminateMainLoop balances the number of calls to #dispatchEvents.

update: aspect
     Initialize the Tcl and Blox environments; executed automatically
     on startup.



File: gst-libs.info,  Node: BLOX.Blox class-instance creation,  Next: BLOX.Blox class-utility,  Prev: BLOX.Blox class-event dispatching,  Up: BLOX.Blox

1.26.3 BLOX.Blox class: instance creation
-----------------------------------------

new
     This method should not be called for instances of this class.

new: parent
     Create a new widget of the type identified by the receiver, inside
     the given parent widget. Answer the new widget



File: gst-libs.info,  Node: BLOX.Blox class-utility,  Next: BLOX.Blox-accessing,  Prev: BLOX.Blox class-instance creation,  Up: BLOX.Blox

1.26.4 BLOX.Blox class: utility
-------------------------------

active
     Answer the currently active Blox, or nil if the focus does not
     belong to a Smalltalk window.

at: aPoint
     Answer the Blox containing the given point on the screen, or nil
     if no Blox contains the given point (either because no Smalltalk
     window is there or because it is covered by another window).

atMouse
     Answer the Blox under the mouse cursor's hot spot, or nil if no
     Blox contains the given point (either because no Smalltalk window
     is there or because it is covered by another window).

beep
     Produce a bell

clearClipboard
     Clear the clipboard, answer its old contents.

clipboard
     Retrieve the text in the clipboard.

clipboard: aString
     Set the contents of the clipboard to aString (or empty the
     clipboard if aString is nil).

createColor: red green: green blue: blue
     Answer a color that can be passed to methods such as
     `backgroundColor:'.  The color will have the given RGB components
     (range is 0~65535).

createColor: cyan magenta: magenta yellow: yellow
     Answer a color that can be passed to methods such as
     `backgroundColor:'.  The color will have the given CMY components
     (range is 0~65535).

createColor: cyan magenta: magenta yellow: yellow black: black
     Answer a color that can be passed to methods such as
     `backgroundColor:'.  The color will have the given CMYK components
     (range is 0~65535).

createColor: hue saturation: sat value: value
     Answer a color that can be passed to methods such as
     `backgroundColor:'.  The color will have the given HSV components
     (range is 0~65535).

defaultFont
     Answer the default font used by Blox.

fonts
     Answer the names of the font families in the system. Additionally,
     `Times', `Courier' and `Helvetica' are always made available.

mousePointer
     If the mouse pointer is on the same screen as the application's
     windows, returns a Point containing the pointer's x and y
     coordinates measured in pixels in the screen's root window (under
     X, if a virtual root window is in use on the screen, the position
     is computed in the whole desktop, not relative to the top-left
     corner of the currently shown portion).  If the mouse pointer
     isn't on the same screen as window then answer nil.

platform
     Answer the platform on which Blox is running; it can be either
     #unix, #macintosh or #windows.

screenOrigin
     Answer a Point indicating the coordinates of the upper left point
     of the screen in the virtual root window on which the
     application's windows are drawn (under Windows and the Macintosh,
     that's always 0 @ 0)

screenResolution
     Answer a Point containing the resolution in dots per inch of the
     screen, in the x and y directions.

screenSize
     Answer a Point containing the size of the virtual root window on
     which the application's windows are drawn (under Windows and the
     Macintosh, that's the size of the screen)



File: gst-libs.info,  Node: BLOX.Blox-accessing,  Next: BLOX.Blox-basic,  Prev: BLOX.Blox class-utility,  Up: BLOX.Blox

1.26.5 BLOX.Blox: accessing
---------------------------

state
     Answer the value of the state option for the widget.

     Specifies one of three states for the button: normal, active, or
     disabled.  In normal state the button is displayed using the
     foreground and background options. The active state is typically
     used when the pointer is over the button. In active state the
     button is displayed using the activeForeground and
     activeBackground options. Disabled state means that the button
     should be insensitive: the application will refuse to activate the
     widget and will ignore mouse button presses.

state: value
     Set the value of the state option for the widget.

     Specifies one of three states for the button: normal, active, or
     disabled.  In normal state the button is displayed using the
     foreground and background options. The active state is typically
     used when the pointer is over the button. In active state the
     button is displayed using the activeForeground and
     activeBackground options. Disabled state means that the button
     should be insensitive: the application will refuse to activate the
     widget and will ignore mouse button presses.



File: gst-libs.info,  Node: BLOX.Blox-basic,  Next: BLOX.Blox-creating children,  Prev: BLOX.Blox-accessing,  Up: BLOX.Blox

1.26.6 BLOX.Blox: basic
-----------------------

deepCopy
     It does not make sense to make a copy, because it would make data
     inconsistent across different objects; so answer the receiver

release
     Destroy the receiver if it still exists, then perform the usual
     task of removing the dependency links

shallowCopy
     It does not make sense to make a copy, because it would make data
     inconsistent across different objects; so answer the receiver



File: gst-libs.info,  Node: BLOX.Blox-creating children,  Next: BLOX.Blox-customization,  Prev: BLOX.Blox-basic,  Up: BLOX.Blox

1.26.7 BLOX.Blox: creating children
-----------------------------------

make: array
     Create children of the receiver. Answer a Dictionary of the
     children.  Each element of array is an Array including: a string
     which becomes the Dictionary's key, a binding like #{Blox.BWindow}
     identifying the class name, an array with the parameters to be set
     (for example #(#width: 50 #height: 30 #backgroundColor: 'blue')),
     and afterwards the children of the widget, described as arrays
     with this same format.

make: array on: result
     Private - Create children of the receiver, adding them to result;
     answer result. array has the format described in the comment to
     #make:

makeChild: each on: result
     Private - Create a child of the receiver, adding them to result;
     each is a single element of the array described in the comment to
     #make:



File: gst-libs.info,  Node: BLOX.Blox-customization,  Next: BLOX.Blox-widget protocol,  Prev: BLOX.Blox-creating children,  Up: BLOX.Blox

1.26.8 BLOX.Blox: customization
-------------------------------

addChild: child
     The widget identified by child has been added to the receiver.
     This method is public not because you can call it, but because it
     can be useful to override it, not forgetting the call to either
     the superclass implementation or #basicAddChild:, to perform some
     initialization on the children just added. Answer the new child.

basicAddChild: child
     The widget identified by child has been added to the receiver.
     Add it to the children collection and answer the new child.  This
     method is public because you can call it from #addChild:.



File: gst-libs.info,  Node: BLOX.Blox-widget protocol,  Prev: BLOX.Blox-customization,  Up: BLOX.Blox

1.26.9 BLOX.Blox: widget protocol
---------------------------------

asPrimitiveWidget
     Answer the primitive widget that implements the receiver.

childrenCount
     Answer how many children the receiver has

childrenDo: aBlock
     Evaluate aBlock once for each of the receiver's child widgets,
     passing the widget to aBlock as a parameter

destroy
     Destroy the receiver

drawingArea
     Answer a Rectangle identifying the receiver's drawing area.  The
     rectangle's corners specify the upper-left and lower-right corners
     of the client area.  Because coordinates are relative to the
     upper-left corner of a window's drawing area, the coordinates of
     the rectangle's corner are (0,0).

enabled
     Answer whether the receiver is enabled to input. Although defined
     here, this method is only used for widgets that define a #state
     method

enabled: enabled
     Set whether the receiver is enabled to input (enabled is a
     boolean).  Although defined here, this method is only used for
     widgets that define a #state: method

exists
     Answer whether the receiver has been destroyed or not (answer false
     in the former case, true in the latter).

fontHeight: aString
     Answer the height of aString in pixels, when displayed in the same
     font as the receiver.  Although defined here, this method is only
     used for widgets that define a #font method

fontWidth: aString
     Answer the width of aString in pixels, when displayed in the same
     font as the receiver.  Although defined here, this method is only
     used for widgets that define a #font method

isWindow
     Answer whether the receiver represents a window on the screen.

parent
     Answer the receiver's parent (or nil for a top-level window).

toplevel
     Answer the top-level object (typically a BWindow or BPopupWindow)
     connected to the receiver.

window
     Answer the window in which the receiver stays. Note that while
     #toplevel won't answer a BTransientWindow, this method will.

withChildrenDo: aBlock
     Evaluate aBlock passing the receiver, and then once for each of the
     receiver's child widgets.



File: gst-libs.info,  Node: BLOX.BMenu,  Next: BLOX.BMenuBar,  Prev: BLOX.Blox,  Up: BLOX package

1.27 BLOX.BMenu
===============

Defined in namespace BLOX
Superclass: BLOX.BMenuObject
Category: Graphics-Windows
     I am a Menu that is part of a menu bar.

* Menu:

* BLOX.BMenu class-instance creation::  (class)
* BLOX.BMenu-accessing::  (instance)
* BLOX.BMenu-callback registration::  (instance)


File: gst-libs.info,  Node: BLOX.BMenu class-instance creation,  Next: BLOX.BMenu-accessing,  Up: BLOX.BMenu

1.27.1 BLOX.BMenu class: instance creation
------------------------------------------

new: parent label: label
     Add a new menu to the parent window's menu bar, with `label' as
     its caption (for popup menus, parent is the widget over which the
     menu pops up as the right button is pressed).



File: gst-libs.info,  Node: BLOX.BMenu-accessing,  Next: BLOX.BMenu-callback registration,  Prev: BLOX.BMenu class-instance creation,  Up: BLOX.BMenu

1.27.2 BLOX.BMenu: accessing
----------------------------

label
     Answer the value of the label option for the widget.

     Specifies a string to be displayed inside the widget. The way in
     which the string is displayed depends on the particular widget and
     may be determined by other options, such as anchor. For windows,
     this is the title of the window.

label: value
     Set the value of the label option for the widget.

     Specifies a string to be displayed inside the widget. The way in
     which the string is displayed depends on the particular widget and
     may be determined by other options, such as anchor. For windows,
     this is the title of the window.



File: gst-libs.info,  Node: BLOX.BMenu-callback registration,  Prev: BLOX.BMenu-accessing,  Up: BLOX.BMenu

1.27.3 BLOX.BMenu: callback registration
----------------------------------------

addLine
     Add a separator item at the end of the menu

addMenuItemFor: anArray notifying: receiver
     Add a menu item described by anArray at the end of the menu.  If
     anArray is empty, insert a separator line.  If anArray has a
     single item, a menu item is created without a callback.  If
     anArray has two or three items, the second one is used as the
     selector sent to receiver, and the third one (if present) is
     passed to the selector.

callback: receiver using: selectorPairs
     Add menu items described by anArray at the end of the menu.  Each
     element of selectorPairs must be in the format described in
     BMenu>>#addMenuItemFor:notifying:.  All the callbacks will be sent
     to receiver.

destroy
     Destroy the menu widget; that is, simply remove ourselves from the
     parent menu bar.

empty
     Empty the menu widget; that is, remove all the children



File: gst-libs.info,  Node: BLOX.BMenuBar,  Next: BLOX.BMenuItem,  Prev: BLOX.BMenu,  Up: BLOX package

1.28 BLOX.BMenuBar
==================

Defined in namespace BLOX
Superclass: BLOX.BMenuObject
Category: Graphics-Windows
     I am the Menu Bar, the top widget in a full menu structure.

* Menu:

* BLOX.BMenuBar-accessing::  (instance)


File: gst-libs.info,  Node: BLOX.BMenuBar-accessing,  Up: BLOX.BMenuBar

1.28.1 BLOX.BMenuBar: accessing
-------------------------------

add: aMenu
     Add aMenu to the menu bar

remove: aMenu
     Remove aMenu from the menu bar



File: gst-libs.info,  Node: BLOX.BMenuItem,  Next: BLOX.BMenuObject,  Prev: BLOX.BMenuBar,  Up: BLOX package

1.29 BLOX.BMenuItem
===================

Defined in namespace BLOX
Superclass: BLOX.BMenuObject
Category: Graphics-Windows
     I am the tiny and humble Menu Item, a single command choice in the
     menu structure. But if it wasn't for me, nothing could be done...
     eh eh eh!!

* Menu:

* BLOX.BMenuItem class-instance creation::  (class)
* BLOX.BMenuItem-accessing::  (instance)


File: gst-libs.info,  Node: BLOX.BMenuItem class-instance creation,  Next: BLOX.BMenuItem-accessing,  Up: BLOX.BMenuItem

1.29.1 BLOX.BMenuItem class: instance creation
----------------------------------------------

new: parent
     Add a new separator item to the specified menu.

new: parent label: label
     Add a new menu item to the specified menu (parent) , with `label'
     as its caption.



File: gst-libs.info,  Node: BLOX.BMenuItem-accessing,  Prev: BLOX.BMenuItem class-instance creation,  Up: BLOX.BMenuItem

1.29.2 BLOX.BMenuItem: accessing
--------------------------------

label
     Answer the value of the label option for the widget.

     Specifies a string to be displayed inside the widget. The way in
     which the string is displayed depends on the particular widget and
     may be determined by other options, such as anchor. For windows,
     this is the title of the window.

label: value
     Set the value of the label option for the widget.

     Specifies a string to be displayed inside the widget. The way in
     which the string is displayed depends on the particular widget and
     may be determined by other options, such as anchor. For windows,
     this is the title of the window.



File: gst-libs.info,  Node: BLOX.BMenuObject,  Next: BLOX.BOval,  Prev: BLOX.BMenuItem,  Up: BLOX package

1.30 BLOX.BMenuObject
=====================

Defined in namespace BLOX
Superclass: BLOX.Blox
Category: Graphics-Windows
     I am an abstract superclass for widgets which make up a menu
     structure.

* Menu:

* BLOX.BMenuObject-accessing::  (instance)
* BLOX.BMenuObject-callback::  (instance)


File: gst-libs.info,  Node: BLOX.BMenuObject-accessing,  Next: BLOX.BMenuObject-callback,  Up: BLOX.BMenuObject

1.30.1 BLOX.BMenuObject: accessing
----------------------------------

activeBackground
     Answer the value of the activeBackground option for the widget.

     Specifies background color to use when drawing active elements. An
     element (a widget or portion of a widget) is active if the mouse
     cursor is positioned over the element and pressing a mouse button
     will cause some action to occur. For some elements on Windows and
     Macintosh systems, the active color will only be used while mouse
     button 1 is pressed over the element.

activeBackground: value
     Set the value of the activeBackground option for the widget.

     Specifies background color to use when drawing active elements. An
     element (a widget or portion of a widget) is active if the mouse
     cursor is positioned over the element and pressing a mouse button
     will cause some action to occur. For some elements on Windows and
     Macintosh systems, the active color will only be used while mouse
     button 1 is pressed over the element.

activeForeground
     Answer the value of the activeForeground option for the widget.

     Specifies foreground color to use when drawing active elements.
     See above for definition of active elements.

activeForeground: value
     Set the value of the activeForeground option for the widget.

     Specifies foreground color to use when drawing active elements.
     See above for definition of active elements.

asPrimitiveWidget
     Answer the primitive widget that implements the receiver.

backgroundColor
     Answer the value of the backgroundColor option for the widget.

     Specifies the normal background color to use when displaying the
     widget.

backgroundColor: value
     Set the value of the backgroundColor option for the widget.

     Specifies the normal background color to use when displaying the
     widget.

foregroundColor
     Answer the value of the foregroundColor option for the widget.

     Specifies the normal foreground color to use when displaying the
     widget.

foregroundColor: value
     Set the value of the foregroundColor option for the widget.

     Specifies the normal foreground color to use when displaying the
     widget.



File: gst-libs.info,  Node: BLOX.BMenuObject-callback,  Prev: BLOX.BMenuObject-accessing,  Up: BLOX.BMenuObject

1.30.2 BLOX.BMenuObject: callback
---------------------------------

callback
     Answer a DirectedMessage that is sent when the receiver is
     modified, or nil if none has been set up.

callback: aReceiver message: aSymbol
     Set up so that aReceiver is sent the aSymbol message (the name of
     a zero- or one-argument selector) when the receiver is clicked.
     If the method accepts an argument, the receiver is passed.

callback: aReceiver message: aSymbol argument: anObject
     Set up so that aReceiver is sent the aSymbol message (the name of
     a one- or two-argument selector) when the receiver is clicked.  If
     the method accepts two argument, the receiver is passed together
     with anObject; if it accepts a single one, instead, only anObject
     is passed.

invokeCallback
     Generate a synthetic callback



File: gst-libs.info,  Node: BLOX.BOval,  Next: BLOX.BPolyline,  Prev: BLOX.BMenuObject,  Up: BLOX package

1.31 BLOX.BOval
===============

Defined in namespace BLOX
Superclass: BLOX.BRectangle
Category: Graphics-Windows
     I can draw ovals (ok, if you're a mathematic, they're really
     ellipses), or even circles.

* Menu:


File: gst-libs.info,  Node: BLOX.BPolyline,  Next: BLOX.BPopupMenu,  Prev: BLOX.BOval,  Up: BLOX package

1.32 BLOX.BPolyline
===================

Defined in namespace BLOX
Superclass: BLOX.BCanvasObject
Category: Graphics-Windows
     I can draw closed or open polylines, and even fill them!

* Menu:

* BLOX.BPolyline-accessing::  (instance)


File: gst-libs.info,  Node: BLOX.BPolyline-accessing,  Up: BLOX.BPolyline

1.32.1 BLOX.BPolyline: accessing
--------------------------------

boundingBox
     Answer `boundingBox'.

cap
     Answer the way in which caps are to be drawn at the endpoints of
     the line.

     This option is only available for open polylines.  If you want to
     set it for a closed polylines, draw an open one on top of it.

cap: aSymbol
     Set the way in which caps are to be drawn at the endpoints of the
     line.  aSymbol may be #butt (the default), #projecting, or #round).

     This option is only available for open polylines.  If you want to
     set it for a closed polylines, draw an open one on top of it.

closed
     Answer whether the polyline is an open or a closed one.

closed: aBoolean
     Set whether the polyline is an open or a closed one.  This option
     may be set only once.

join
     Answer the way in which joints are to be drawn at the vertices of
     the line.

     This option is only available for open polylines.  If you want to
     set it for a closed polylines, draw an open one on top of it.

join: aSymbol
     Answer the way in which joints are to be drawn at the vertices of
     the line.  aSymbol can be #bevel, #miter (the default) or #round.

     This option is only available for open polylines.  If you want to
     set it for a closed polylines, draw an open one on top of it.

outlineColor
     Answer the color with which the outline of the polyline is drawn.
     This option is only available for closed polylines.

outlineColor: color
     Set the color with which the outline of the polyline is drawn.
     This option is only available for closed polylines.

points
     Answer the points that are vertices of the polyline.

points: arrayOfPointsOrArrays
     Set the points that are vertices of the polyline.  Each of the
     items of arrayOfPointsOrArrays can be a Point or a two-element
     Array.  Note that no changes take place until you invoke the
     #create (if the object has not been inserted in the canvas yet) or
     the #redraw method.

width
     Answer the width with which the polyline (or its outline if it is
     a closed one) is drawn.

width: pixels
     Set the width with which the polyline (or its outline if it is a
     closed one) is drawn.



File: gst-libs.info,  Node: BLOX.BPopupMenu,  Next: BLOX.BPopupWindow,  Prev: BLOX.BPolyline,  Up: BLOX package

1.33 BLOX.BPopupMenu
====================

Defined in namespace BLOX
Superclass: BLOX.BMenu
Category: Graphics-Windows
     I am a class that provides the ability to show popup menus when the
     right button (Button 3) is clicked on another window.

* Menu:

* BLOX.BPopupMenu-widget protocol::  (instance)


File: gst-libs.info,  Node: BLOX.BPopupMenu-widget protocol,  Up: BLOX.BPopupMenu

1.33.1 BLOX.BPopupMenu: widget protocol
---------------------------------------

popup
     Generate a synthetic menu popup event



File: gst-libs.info,  Node: BLOX.BPopupWindow,  Next: BLOX.BPrimitive,  Prev: BLOX.BPopupMenu,  Up: BLOX package

1.34 BLOX.BPopupWindow
======================

Defined in namespace BLOX
Superclass: BLOX.BWindow
Category: Graphics-Windows
     I am a pseudo-window that has no decorations and no ability to
     interact with the user.  My main usage, as my name says, is to
     provide pop-up functionality for other widgets.  Actually there
     should be no need to directly use me - always rely on the #new and
     #popup: class methods.

* Menu:

* BLOX.BPopupWindow-geometry management::  (instance)


File: gst-libs.info,  Node: BLOX.BPopupWindow-geometry management,  Up: BLOX.BPopupWindow

1.34.1 BLOX.BPopupWindow: geometry management
---------------------------------------------

addChild: w
     Private - The widget identified by child has been added to the
     receiver.  This method is public not because you can call it, but
     because it can be useful to override it, not forgetting the call
     to either the superclass implementation or #basicAddChild:, to
     perform some initialization on the children just added. Answer the
     new child.

child: child height: value
     Set the given child's height.  This is done by setting its parent
     window's (that is, our) height.

child: child heightOffset: value
     This method should not be called for instances of this class.

child: child width: value
     Set the given child's width.  This is done by setting its parent
     window's (that is, our) width.

child: child widthOffset: value
     This method should not be called for instances of this class.

child: child x: value
     Set the x coordinate of the given child's top-left corner.  This
     is done by setting its parent window's (that is, our) x.

child: child xOffset: value
     This method should not be called for instances of this class.

child: child y: value
     Set the y coordinate of the given child's top-left corner.  This
     is done by setting its parent window's (that is, our) y.

child: child yOffset: value
     This method should not be called for instances of this class.

heightChild: child
     Answer the given child's height, which is the height that was
     imposed on the popup window.

widthChild: child
     Answer the given child's width in pixels, which is the width that
     was imposed on the popup window.

xChild: child
     Answer the x coordinate of the given child's top-left corner,
     which is desumed by the position of the popup window.

yChild: child
     Answer the y coordinate of the given child's top-left corner,
     which is desumed by the position of the popup window.



File: gst-libs.info,  Node: BLOX.BPrimitive,  Next: BLOX.BProgress,  Prev: BLOX.BPopupWindow,  Up: BLOX package

1.35 BLOX.BPrimitive
====================

Defined in namespace BLOX
Superclass: BLOX.BWidget
Category: Graphics-Windows
     I am the superclass for every widget (except menus) directly
     provided by the underlying GUI system.

* Menu:

* BLOX.BPrimitive-accessing::  (instance)


File: gst-libs.info,  Node: BLOX.BPrimitive-accessing,  Up: BLOX.BPrimitive

1.35.1 BLOX.BPrimitive: accessing
---------------------------------

asPrimitiveWidget
     Answer the primitive widget that implements the receiver.



File: gst-libs.info,  Node: BLOX.BProgress,  Next: BLOX.BRadioButton,  Prev: BLOX.BPrimitive,  Up: BLOX package

1.36 BLOX.BProgress
===================

Defined in namespace BLOX
Superclass: BLOX.BExtended
Category: Graphics-Examples
     I show how much of a task has been completed.

* Menu:

* BLOX.BProgress-accessing::  (instance)


File: gst-libs.info,  Node: BLOX.BProgress-accessing,  Up: BLOX.BProgress

1.36.1 BLOX.BProgress: accessing
--------------------------------

backgroundColor
     Answer the background color of the widget.  This is used for the
     background of the non-filled part, as well as for the foreground
     of the filled part.

backgroundColor: aColor
     Set the background color of the widget.  This is used for the
     background of the non-filled part, as well as for the foreground
     of the filled part.

filledColor
     Answer the background color of the widget's filled part.

filledColor: aColor
     Set the background color of the widget's filled part.

foregroundColor
     Set the foreground color of the widget.  This is used for the
     non-filled part, while the background color also works as the
     foreground of the filled part.

foregroundColor: aColor
     Set the foreground color of the widget.  This is used for the
     non-filled part, while the background color also works as the
     foreground of the filled part.

value
     Answer the filled percentage of the receiver (0..1)

value: newValue
     Set the filled percentage of the receiver and update the
     appearance.  newValue must be between 0 and 1.



File: gst-libs.info,  Node: BLOX.BRadioButton,  Next: BLOX.BRadioGroup,  Prev: BLOX.BProgress,  Up: BLOX package

1.37 BLOX.BRadioButton
======================

Defined in namespace BLOX
Superclass: BLOX.BButton
Category: Graphics-Windows
     I am just one in a group of mutually exclusive buttons.

* Menu:

* BLOX.BRadioButton-accessing::  (instance)


File: gst-libs.info,  Node: BLOX.BRadioButton-accessing,  Up: BLOX.BRadioButton

1.37.1 BLOX.BRadioButton: accessing
-----------------------------------

callback: aReceiver message: aSymbol
     Set up so that aReceiver is sent the aSymbol message (the name of
     a selector accepting at most two arguments) when the receiver is
     clicked.  If the method accepts two arguments, the receiver is
     passed as the first parameter.  If the method accepts one or two
     arguments, true is passed as the last parameter for
     interoperability with BToggle widgets.

value
     Answer whether this widget is the selected one in its radio button
     group.

value: aBoolean
     Answer whether this widget is the selected one in its radio button
     group.  Setting this property to false for a group's currently
     selected button unhighlights all the buttons in that group.



File: gst-libs.info,  Node: BLOX.BRadioGroup,  Next: BLOX.BRectangle,  Prev: BLOX.BRadioButton,  Up: BLOX package

1.38 BLOX.BRadioGroup
=====================

Defined in namespace BLOX
Superclass: BLOX.BContainer
Category: Graphics-Windows
     I am used to group many mutually-exclusive radio buttons together.
     In addition, just like every BContainer I can perform simple
     management by putting widgets next to each other, from left to
     right or (which is more useful in this particular case...) from
     top to bottom.

* Menu:

* BLOX.BRadioGroup-accessing::  (instance)
* BLOX.BRadioGroup-widget protocol::  (instance)


File: gst-libs.info,  Node: BLOX.BRadioGroup-accessing,  Next: BLOX.BRadioGroup-widget protocol,  Up: BLOX.BRadioGroup

1.38.1 BLOX.BRadioGroup: accessing
----------------------------------

value
     Answer the index of the button that is currently selected, 1 being
     the first button added to the radio button group.  0 means that no
     button is selected

value: value
     Force the value-th button added to the radio button group to be
     the selected one.



File: gst-libs.info,  Node: BLOX.BRadioGroup-widget protocol,  Prev: BLOX.BRadioGroup-accessing,  Up: BLOX.BRadioGroup

1.38.2 BLOX.BRadioGroup: widget protocol
----------------------------------------

destroyed
     Private - The receiver has been destroyed, clear the corresponding
     Tcl variable to avoid memory leaks.



File: gst-libs.info,  Node: BLOX.BRectangle,  Next: BLOX.BScrolledCanvas,  Prev: BLOX.BRadioGroup,  Up: BLOX package

1.39 BLOX.BRectangle
====================

Defined in namespace BLOX
Superclass: BLOX.BBoundingBox
Category: Graphics-Windows
     I only draw rectangles but I can do that very well.

* Menu:

* BLOX.BRectangle-accessing::  (instance)


File: gst-libs.info,  Node: BLOX.BRectangle-accessing,  Up: BLOX.BRectangle

1.39.1 BLOX.BRectangle: accessing
---------------------------------

outlineColor
     Answer the color with which the outline of the rectangle is drawn.

outlineColor: color
     Set the color with which the outline of the rectangle is drawn.

width
     Answer the width with which the outline of the rectangle is drawn.

width: pixels
     Set the width with which the outline of the rectangle is drawn.



File: gst-libs.info,  Node: BLOX.BScrolledCanvas,  Next: BLOX.BSpline,  Prev: BLOX.BRectangle,  Up: BLOX package

1.40 BLOX.BScrolledCanvas
=========================

Defined in namespace BLOX
Superclass: BLOX.BCanvas
Category: Graphics-Windows
     I am much similar to BCanvas, but I sport, in addition, two fancy
     scroll bars. This is just a convenience, since it could be easily
     done when creating the canvas...

* Menu:


File: gst-libs.info,  Node: BLOX.BSpline,  Next: BLOX.BText,  Prev: BLOX.BScrolledCanvas,  Up: BLOX package

1.41 BLOX.BSpline
=================

Defined in namespace BLOX
Superclass: BLOX.BPolyline
Category: Graphics-Windows
     Unlike my father BPolyline, I am more smooth at doing my job.

* Menu:

* BLOX.BSpline-accessing::  (instance)


File: gst-libs.info,  Node: BLOX.BSpline-accessing,  Up: BLOX.BSpline

1.41.1 BLOX.BSpline: accessing
------------------------------

smoothness
     Answer the degree of smoothness desired for curves.  Each spline
     will be approximated with this number of line segments.

smoothness: anInteger
     Set the degree of smoothness desired for curves.  Each spline will
     be approximated with this number of line segments.



File: gst-libs.info,  Node: BLOX.BText,  Next: BLOX.BTextAttributes,  Prev: BLOX.BSpline,  Up: BLOX package

1.42 BLOX.BText
===============

Defined in namespace BLOX
Superclass: BLOX.BViewport
Category: Graphics-Windows
     I represent a text viewer with pretty good formatting options.

* Menu:

* BLOX.BText class-accessing::  (class)
* BLOX.BText class-instance creation::  (class)
* BLOX.BText-accessing::  (instance)
* BLOX.BText-attributes::  (instance)
* BLOX.BText-geometry management::  (instance)
* BLOX.BText-images::  (instance)
* BLOX.BText-inserting text::  (instance)
* BLOX.BText-position & lines::  (instance)


File: gst-libs.info,  Node: BLOX.BText class-accessing,  Next: BLOX.BText class-instance creation,  Up: BLOX.BText

1.42.1 BLOX.BText class: accessing
----------------------------------

emacsLike
     Answer whether we are using Emacs or Motif key bindings.

emacsLike: aBoolean
     Set whether we are using Emacs or Motif key bindings.



File: gst-libs.info,  Node: BLOX.BText class-instance creation,  Next: BLOX.BText-accessing,  Prev: BLOX.BText class-accessing,  Up: BLOX.BText

1.42.2 BLOX.BText class: instance creation
------------------------------------------

newReadOnly: parent
     Answer a new read-only text widget (read-only is achieved simply
     by setting its state to be disabled)



File: gst-libs.info,  Node: BLOX.BText-accessing,  Next: BLOX.BText-attributes,  Prev: BLOX.BText class-instance creation,  Up: BLOX.BText

1.42.3 BLOX.BText: accessing
----------------------------

backgroundColor
     Answer the value of the backgroundColor option for the widget.

     Specifies the normal background color to use when displaying the
     widget.

backgroundColor: value
     Set the value of the backgroundColor option for the widget.

     Specifies the normal background color to use when displaying the
     widget.

callback
     Answer a DirectedMessage that is sent when the receiver is
     modified, or nil if none has been set up.

callback: aReceiver message: aSymbol
     Set up so that aReceiver is sent the aSymbol message (the name of
     a zero- or one-argument selector) when the receiver is modified.
     If the method accepts an argument, the receiver is passed.

contents
     Return the contents of the widget

contents: aString
     Set the contents of the widget

font
     Answer the value of the font option for the widget.

     Specifies the font to use when drawing text inside the widget. The
     font can be given as either an X font name or a Blox font
     description string.

     X font names are given as many fields, each led by a minus, and
     each of which can be replaced by an * to indicate a default value
     is ok: foundry, family, weight, slant, setwidth, addstyle, pixel
     size, point size (the same as pixel size for historical reasons),
     horizontal resolution, vertical resolution, spacing, width,
     charset and character encoding.

     Blox font description strings have three fields, which must be
     separated by a space and of which only the first is mandatory: the
     font family, the font size in points (or in pixels if a negative
     value is supplied), and a number of styles separated by a space
     (valid styles are normal, bold, italic, underline and overstrike).
     Examples of valid fonts are "Helvetica 10 Bold", "Times -14",
     "Futura Bold Underline".  You must enclose the font family in
     braces if it is made of two or more words.

font: value
     Set the value of the font option for the widget.

     Specifies the font to use when drawing text inside the widget. The
     font can be given as either an X font name or a Blox font
     description string.

     X font names are given as many fields, each led by a minus, and
     each of which can be replaced by an * to indicate a default value
     is ok: foundry, family, weight, slant, setwidth, addstyle, pixel
     size, point size (the same as pixel size for historical reasons),
     horizontal resolution, vertical resolution, spacing, width,
     charset and character encoding.

     Blox font description strings have three fields, which must be
     separated by a space and of which only the first is mandatory: the
     font family, the font size in points (or in pixels if a negative
     value is supplied), and a number of styles separated by a space
     (valid styles are normal, bold, italic, underline and overstrike).
     Examples of valid fonts are "Helvetica 10 Bold", "Times -14",
     "Futura Bold Underline".  You must enclose the font family in
     braces if it is made of two or more words.

foregroundColor
     Answer the value of the foregroundColor option for the widget.

     Specifies the normal foreground color to use when displaying the
     widget.

foregroundColor: value
     Set the value of the foregroundColor option for the widget.

     Specifies the normal foreground color to use when displaying the
     widget.

getSelection
     Answer an empty string if the widget has no selection, else answer
     the currently selected text

selectBackground
     Answer the value of the selectBackground option for the widget.

     Specifies the background color to use when displaying selected
     parts of the widget.

selectBackground: value
     Set the value of the selectBackground option for the widget.

     Specifies the background color to use when displaying selected
     parts of the widget.

selectForeground
     Answer the value of the selectForeground option for the widget.

     Specifies the foreground color to use when displaying selected
     parts of the widget.

selectForeground: value
     Set the value of the selectForeground option for the widget.

     Specifies the foreground color to use when displaying selected
     parts of the widget.

wrap
     Answer the value of the wrap option for the widget.

     Specifies how to handle lines in the text that are too long to be
     displayed in a single line of the text's window. The value must be
     #none or #char or #word. A wrap mode of none means that each line
     of text appears as exactly one line on the screen; extra
     characters that do not fit on the screen are not displayed. In the
     other modes each line of text will be broken up into several
     screen lines if necessary to keep all the characters visible. In
     char mode a screen line break may occur after any character; in
     word mode a line break will only be made at word boundaries.

wrap: value
     Set the value of the wrap option for the widget.

     Specifies how to handle lines in the text that are too long to be
     displayed in a single line of the text's window. The value must be
     #none or #char or #word. A wrap mode of none means that each line
     of text appears as exactly one line on the screen; extra
     characters that do not fit on the screen are not displayed. In the
     other modes each line of text will be broken up into several
     screen lines if necessary to keep all the characters visible. In
     char mode a screen line break may occur after any character; in
     word mode a line break will only be made at word boundaries.



File: gst-libs.info,  Node: BLOX.BText-attributes,  Next: BLOX.BText-geometry management,  Prev: BLOX.BText-accessing,  Up: BLOX.BText

1.42.4 BLOX.BText: attributes
-----------------------------

insertAtEnd: aString attribute: attr
     Clear the selection and append aString at the end of the widget.
     Use the given attributes to format the text.

insertText: aString attribute: attr
     Insert aString in the widget at the current insertion point,
     replacing the currently selected text (if any).  Use the given
     attributes to format the text.

removeAttributes
     Remove any kind of formatting from the text in the widget

removeAttributesFrom: aPoint to: endPoint
     Remove any kind of formatting from the text in the widget between
     the given endpoints.  The two endpoints are Point objects in which
     both coordinates are 1-based: the first line is line 1, and the
     first character in the first line is character 1.

setAttributes: attr from: aPoint to: endPoint
     Add the formatting given by attr to the text in the widget between
     the given endpoints.  The two endpoints are Point objects in which
     both coordinates are 1-based: the first line is line 1, and the
     first character in the first line is character 1.



File: gst-libs.info,  Node: BLOX.BText-geometry management,  Next: BLOX.BText-images,  Prev: BLOX.BText-attributes,  Up: BLOX.BText

1.42.5 BLOX.BText: geometry management
--------------------------------------

child: child height: value
     Set the height of the given child to be `value' pixels.

child: child heightOffset: value
     Adjust the height of the given child to be given by `value' more
     pixels.

child: child width: value
     Set the width of the given child to be `value' pixels.

child: child widthOffset: value
     Adjust the width of the given child to be given by `value' more
     pixels.

child: child x: value
     Never fail and do nothing, the children stay where the text ended
     at the time each child was added in the widget

child: child xOffset: value
     This method should not be called for instances of this class.

child: child y: value
     Never fail and do nothing, the children stay where the text ended
     at the time each child was added in the widget

child: child yOffset: value
     This method should not be called for instances of this class.

heightChild: child
     Answer the given child's height in pixels.

widthChild: child
     Answer the given child's width in pixels.

xChild: child
     Answer the given child's top-left border's x coordinate.  We
     always answer 0 since the children actually move when the text
     widget scrolls

yChild: child
     Answer the given child's top-left border's y coordinate.  We
     always answer 0 since the children actually move when the text
     widget scrolls



File: gst-libs.info,  Node: BLOX.BText-images,  Next: BLOX.BText-inserting text,  Prev: BLOX.BText-geometry management,  Up: BLOX.BText

1.42.6 BLOX.BText: images
-------------------------

insertImage: anObject
     Insert an image where the insertion point currently lies in the
     widget.  anObject can be a String containing image data (either
     Base-64 encoded GIF data, XPM data, or PPM data), or the result or
     registering an image with #registerImage:

insertImage: anObject at: position
     Insert an image at the given position in the widget.  The position
     is a Point object in which both coordinates are 1-based: the first
     line is line 1, and the first character in the first line is
     character 1.

     anObject can be a String containing image data (either Base-64
     encoded GIF data, XPM data, or PPM data), or the result or
     registering an image with #registerImage:

insertImageAtEnd: anObject
     Insert an image at the end of the widgets text.  anObject can be a
     String containing image data (either Base-64 encoded GIF data, XPM
     data, or PPM data), or the result or registering an image with
     #registerImage:

registerImage: anObject
     Register an image (whose data is in anObject, a String including
     Base-64 encoded GIF data, XPM data, or PPM data) to be used in the
     widget.  If the same image must be used a lot of times, it is
     better to register it once and then pass the result of
     #registerImage: to the image insertion methods.

     Registered image are private within each BText widget.  Registering
     an image with a widget and using it with another could give
     unpredictable results.



File: gst-libs.info,  Node: BLOX.BText-inserting text,  Next: BLOX.BText-position & lines,  Prev: BLOX.BText-images,  Up: BLOX.BText

1.42.7 BLOX.BText: inserting text
---------------------------------

insertAtEnd: aString
     Clear the selection and append aString at the end of the widget.

insertSelectedText: aString
     Insert aString in the widget at the current insertion point,
     leaving the currently selected text (if any) in place, and
     selecting the text.

insertText: aString
     Insert aString in the widget at the current insertion point,
     replacing the currently selected text (if any).

insertText: aString at: position
     Insert aString in the widget at the given position, replacing the
     currently selected text (if any).  The position is a Point object
     in which both coordinates are 1-based: the first line is line 1,
     and the first character in the first line is character 1.

insertTextSelection: aString
     Insert aString in the widget after the current selection, leaving
     the currently selected text (if any) intact.

invokeCallback
     Generate a synthetic callback.

nextPut: aCharacter
     Clear the selection and append aCharacter at the end of the widget.

nextPutAll: aString
     Clear the selection and append aString at the end of the widget.

nl
     Clear the selection and append a linefeed character at the end of
     the widget.

refuseTabs
     Arrange so that Tab characters, instead of being inserted in the
     widget, traverse the widgets in the parent window.

replaceSelection: aString
     Insert aString in the widget at the current insertion point,
     replacing the currently selected text (if any), and leaving the
     text selected.

searchString: aString
     Search aString in the widget.  If it is not found, answer zero,
     else answer the 1-based line number and move the insertion point
     to the place where the string was found.

space
     Clear the selection and append a space at the end of the widget.



File: gst-libs.info,  Node: BLOX.BText-position & lines,  Prev: BLOX.BText-inserting text,  Up: BLOX.BText

1.42.8 BLOX.BText: position & lines
-----------------------------------

charsInLine: number
     Answer how many characters are there in the number-th line

currentColumn
     Answer the 1-based column number where the insertion point
     currently lies.

currentLine
     Answer the 1-based line number where the insertion point currently
     lies.

currentPosition
     Answer a Point representing where the insertion point currently
     lies.  Both coordinates in the answer are 1-based: the first line
     is line 1, and the first character in the first line is character
     1.

currentPosition: aPoint
     Move the insertion point to the position given by aPoint.  Both
     coordinates in aPoint are interpreted as 1-based: the first line
     is line 1, and the first character in the first line is character
     1.

gotoLine: line end: aBoolean
     If aBoolean is true, move the insertion point to the last
     character of the line-th line (1 being the first line in the
     widget); if aBoolean is false, move it to the start of the line-th
     line.

indexAt: point
     Answer the position of the character that covers the pixel whose
     coordinates within the text's window are given by the supplied
     Point object.

lineAt: number
     Answer the number-th line of text in the widget

numberOfLines
     Answer the number of lines in the widget

selectFrom: first to: last
     Select the text between the given endpoints.  The two endpoints
     are Point objects in which both coordinates are 1-based: the first
     line is line 1, and the first character in the first line is
     character 1.

setToEnd
     Move the insertion point to the end of the widget



File: gst-libs.info,  Node: BLOX.BTextAttributes,  Next: BLOX.BTextBindings,  Prev: BLOX.BText,  Up: BLOX package

1.43 BLOX.BTextAttributes
=========================

Defined in namespace BLOX
Superclass: Object
Category: Graphics-Windows
     I help you creating wonderful, colorful BTexts.

* Menu:

* BLOX.BTextAttributes class-instance-creation shortcuts::  (class)
* BLOX.BTextAttributes-colors::  (instance)
* BLOX.BTextAttributes-setting attributes::  (instance)


File: gst-libs.info,  Node: BLOX.BTextAttributes class-instance-creation shortcuts,  Next: BLOX.BTextAttributes-colors,  Up: BLOX.BTextAttributes

1.43.1 BLOX.BTextAttributes class: instance-creation shortcuts
--------------------------------------------------------------

backgroundColor: color
     Create a new BTextAttributes object resulting in text with the
     given background color.

black
     Create a new BTextAttributes object resulting in black text.

blue
     Create a new BTextAttributes object resulting in blue text.

center
     Create a new BTextAttributes object resulting in centered
     paragraphs.

cyan
     Create a new BTextAttributes object resulting in cyan text.

darkCyan
     Create a new BTextAttributes object resulting in dark cyan text.

darkGreen
     Create a new BTextAttributes object resulting in dark green text.

darkMagenta
     Create a new BTextAttributes object resulting in dark purple text.

events: aBTextBindings
     Create a new BTextAttributes object for text that responds to
     events according to the callbacks established in aBTextBindings.

font: font
     Create a new BTextAttributes object resulting in text with the
     given font.  The font can be given as either an X font name or a
     Blox font description string.

     X font names are given as many fields, each led by a minus, and
     each of which can be replaced by an * to indicate a default value
     is ok: foundry, family, weight, slant, setwidth, addstyle, pixel
     size, point size (the same as pixel size for historical reasons),
     horizontal resolution, vertical resolution, spacing, width,
     charset and character encoding.

     Blox font description strings have three fields, which must be
     separated by a space and of which only the first is mandatory: the
     font family, the font size in points (or in pixels if a negative
     value is supplied), and a number of styles separated by a space
     (valid styles are normal, bold, italic, underline and overstrike).
     Examples of valid fonts are "Helvetica 10 Bold", "Times -14",
     "Futura Bold Underline".  You must enclose the font family in
     braces if it is made of two or more words.

foregroundColor: color
     Create a new BTextAttributes object resulting in text with the
     given foreground color.

green
     Create a new BTextAttributes object resulting in green text.

magenta
     Create a new BTextAttributes object resulting in magenta text.

red
     Create a new BTextAttributes object resulting in red text.

strikeout
     Create a new BTextAttributes object resulting in struck-out text.

underline
     Create a new BTextAttributes object resulting in underlined text.

white
     Create a new BTextAttributes object resulting in white text.

yellow
     Create a new BTextAttributes object resulting in yellow text.



File: gst-libs.info,  Node: BLOX.BTextAttributes-colors,  Next: BLOX.BTextAttributes-setting attributes,  Prev: BLOX.BTextAttributes class-instance-creation shortcuts,  Up: BLOX.BTextAttributes

1.43.2 BLOX.BTextAttributes: colors
-----------------------------------

black
     Set the receiver so that applying it results in black text.

blue
     Set the receiver so that applying it results in blue text.

cyan
     Set the receiver so that applying it results in cyan text.

darkCyan
     Set the receiver so that applying it results in dark cyan text.

darkGreen
     Set the receiver so that applying it results in dark green text.

darkMagenta
     Set the receiver so that applying it results in dark magenta text.

green
     Set the receiver so that applying it results in green text.

magenta
     Set the receiver so that applying it results in magenta text.

red
     Set the receiver so that applying it results in red text.

white
     Set the receiver so that applying it results in white text.

yellow
     Set the receiver so that applying it results in black text.



File: gst-libs.info,  Node: BLOX.BTextAttributes-setting attributes,  Prev: BLOX.BTextAttributes-colors,  Up: BLOX.BTextAttributes

1.43.3 BLOX.BTextAttributes: setting attributes
-----------------------------------------------

backgroundColor
     Answer the value of the backgroundColor option for the text.

     Specifies the background color to use when displaying text with
     these attributes.  nil indicates that the default value is not
     overridden.

backgroundColor: color
     Set the value of the backgroundColor option for the text.

     Specifies the background color to use when displaying text with
     these attributes.  nil indicates that the default value is not
     overridden.

center
     Center the text to which these attributes are applied

events
     Answer the event bindings which apply to text subject to these
     attributes

events: aBTextBindings
     Set the event bindings which apply to text subject to these
     attributes

font
     Answer the value of the font option for the text.  The font can be
     given as either an X font name or a Blox font description string,
     or nil if you want the widget's default font to apply.

     X font names are given as many fields, each led by a minus, and
     each of which can be replaced by an * to indicate a default value
     is ok: foundry, family, weight, slant, setwidth, addstyle, pixel
     size, point size (the same as pixel size for historical reasons),
     horizontal resolution, vertical resolution, spacing, width,
     charset and character encoding.

     Blox font description strings have three fields, which must be
     separated by a space and of which only the first is mandatory: the
     font family, the font size in points (or in pixels if a negative
     value is supplied), and a number of styles separated by a space
     (valid styles are normal, bold, italic, underline and overstrike).
     Examples of valid fonts are "Helvetica 10 Bold", "Times -14",
     "Futura Bold Underline".  You must enclose the font family in
     braces if it is made of two or more words.

font: fontName
     Set the value of the font option for the text.  The font can be
     given as either an X font name or a Blox font description string,
     or nil if you want the widget's default font to apply.

     X font names are given as many fields, each led by a minus, and
     each of which can be replaced by an * to indicate a default value
     is ok: foundry, family, weight, slant, setwidth, addstyle, pixel
     size, point size (the same as pixel size for historical reasons),
     horizontal resolution, vertical resolution, spacing, width,
     charset and character encoding.

     Blox font description strings have three fields, which must be
     separated by a space and of which only the first is mandatory: the
     font family, the font size in points (or in pixels if a negative
     value is supplied), and a number of styles separated by a space
     (valid styles are normal, bold, italic, underline and overstrike).
     Examples of valid fonts are "Helvetica 10 Bold", "Times -14",
     "Futura Bold Underline".  You must enclose the font family in
     braces if it is made of two or more words.

foregroundColor
     Answer the value of the foregroundColor option for the text.

     Specifies the foreground color to use when displaying text with
     these attributes.  nil indicates that the default value is not
     overridden.

foregroundColor: color
     Set the value of the foregroundColor option for the text.

     Specifies the foreground color to use when displaying text with
     these attributes.  nil indicates that the default value is not
     overridden.

isCentered
     Answer whether the text to which these attributes are applied is
     centered

isStruckout
     Answer whether the text to which these attributes are applied is
     struckout

isUnderlined
     Answer whether the text to which these attributes are applied is
     underlined

strikeout
     Strike out the text to which these attributes are applied

underline
     Underline the text to which these attributes are applied



File: gst-libs.info,  Node: BLOX.BTextBindings,  Next: BLOX.BTextTags,  Prev: BLOX.BTextAttributes,  Up: BLOX package

1.44 BLOX.BTextBindings
=======================

Defined in namespace BLOX
Superclass: BLOX.BEventTarget
Category: Graphics-Windows
     This object is used to assign event handlers to particular
     sections of text in a BText widget.  To use it, you simply have to
     add event handlers to it, and then create a BTextAttributes object
     that refers to it.

* Menu:

* BLOX.BTextBindings class-instance creation::  (class)


File: gst-libs.info,  Node: BLOX.BTextBindings class-instance creation,  Up: BLOX.BTextBindings

1.44.1 BLOX.BTextBindings class: instance creation
--------------------------------------------------

new
     Create a new instance of the receiver.



File: gst-libs.info,  Node: BLOX.BTextTags,  Next: BLOX.BToggle,  Prev: BLOX.BTextBindings,  Up: BLOX package

1.45 BLOX.BTextTags
===================

Defined in namespace BLOX
Superclass: Object
Category: Graphics-Windows
     I am a private class. I sit between a BText and BTextAttributes,
     helping the latter in telling the former which attributes to use.

* Menu:


File: gst-libs.info,  Node: BLOX.BToggle,  Next: BLOX.BTransientWindow,  Prev: BLOX.BTextTags,  Up: BLOX package

1.46 BLOX.BToggle
=================

Defined in namespace BLOX
Superclass: BLOX.BButton
Category: Graphics-Windows
     I represent a button whose choice can be included (by checking me)
     or excluded (by leaving me unchecked).

* Menu:

* BLOX.BToggle-accessing::  (instance)


File: gst-libs.info,  Node: BLOX.BToggle-accessing,  Up: BLOX.BToggle

1.46.1 BLOX.BToggle: accessing
------------------------------

callback: aReceiver message: aSymbol
     Set up so that aReceiver is sent the aSymbol message (the name of
     a selector accepting at most two arguments) when the receiver is
     clicked.  If the method accepts two arguments, the receiver is
     passed as the first parameter.  If the method accepts one or two
     arguments, the state of the widget (true if it is selected, false
     if it is not) is passed as the last parameter.

invokeCallback
     Generate a synthetic callback.

value
     Answer whether the button is in a selected (checked) state.

value: aBoolean
     Set whether the button is in a selected (checked) state and
     generates a callback accordingly.

variable: value
     Set the value of Tk's variable option for the widget.



File: gst-libs.info,  Node: BLOX.BTransientWindow,  Next: BLOX.BViewport,  Prev: BLOX.BToggle,  Up: BLOX package

1.47 BLOX.BTransientWindow
==========================

Defined in namespace BLOX
Superclass: BLOX.BWindow
Category: Graphics-Windows
     I am almost a boss. I represent a window which is logically linked
     to another which sits higher in the widget hierarchy, e.g. a dialog
     box

* Menu:

* BLOX.BTransientWindow class-instance creation::  (class)
* BLOX.BTransientWindow-widget protocol::  (instance)


File: gst-libs.info,  Node: BLOX.BTransientWindow class-instance creation,  Next: BLOX.BTransientWindow-widget protocol,  Up: BLOX.BTransientWindow

1.47.1 BLOX.BTransientWindow class: instance creation
-----------------------------------------------------

new
     This method should not be called for instances of this class.

new: parentWindow
     Answer a new transient window attached to the given parent window
     and with nothing in its title bar caption.

new: label in: parentWindow
     Answer a new transient window attached to the given parent window
     and with `label' as its title bar caption.



File: gst-libs.info,  Node: BLOX.BTransientWindow-widget protocol,  Prev: BLOX.BTransientWindow class-instance creation,  Up: BLOX.BTransientWindow

1.47.2 BLOX.BTransientWindow: widget protocol
---------------------------------------------

map
     Map the window and inform the windows manager that the receiver is
     a transient window working on behalf of its parent.  The window is
     also put in its parent window's window group: the window manager
     might use this information, for example, to unmap all of the
     windows in a group when the group's leader is iconified.



File: gst-libs.info,  Node: BLOX.BViewport,  Next: BLOX.BWidget,  Prev: BLOX.BTransientWindow,  Up: BLOX package

1.48 BLOX.BViewport
===================

Defined in namespace BLOX
Superclass: BLOX.BPrimitive
Category: Graphics-Windows
     I represent an interface which is common to widgets that can be
     scrolled, like list boxes or text widgets.

* Menu:

* BLOX.BViewport-accessing::  (instance)
* BLOX.BViewport-scrollbars::  (instance)


File: gst-libs.info,  Node: BLOX.BViewport-accessing,  Next: BLOX.BViewport-scrollbars,  Up: BLOX.BViewport

1.48.1 BLOX.BViewport: accessing
--------------------------------

connected
     Private - Answer the name of Tk widget for the connected widget.



File: gst-libs.info,  Node: BLOX.BViewport-scrollbars,  Prev: BLOX.BViewport-accessing,  Up: BLOX.BViewport

1.48.2 BLOX.BViewport: scrollbars
---------------------------------

horizontal
     Answer whether an horizontal scrollbar is drawn in the widget if
     needed.

horizontal: aBoolean
     Set whether an horizontal scrollbar is drawn in the widget if
     needed.

horizontalNeeded
     Answer whether an horizontal scrollbar is needed to show all the
     information in the widget.

horizontalShown
     Answer whether an horizontal scrollbar is drawn in the widget.

vertical
     Answer whether a vertical scrollbar is drawn in the widget if
     needed.

vertical: aBoolean
     Set whether a vertical scrollbar is drawn in the widget if needed.

verticalNeeded
     Answer whether a vertical scrollbar is needed to show all the
     information in the widget.

verticalShown
     Answer whether a vertical scrollbar is drawn in the widget.



File: gst-libs.info,  Node: BLOX.BWidget,  Next: BLOX.BWindow,  Prev: BLOX.BViewport,  Up: BLOX package

1.49 BLOX.BWidget
=================

Defined in namespace BLOX
Superclass: BLOX.Blox
Category: Graphics-Windows
     I am the superclass for every widget except those related to
     menus. I provide more common methods and geometry management

* Menu:

* BLOX.BWidget class-popups::  (class)
* BLOX.BWidget-accessing::  (instance)
* BLOX.BWidget-customization::  (instance)
* BLOX.BWidget-geometry management::  (instance)
* BLOX.BWidget-widget protocol::  (instance)


File: gst-libs.info,  Node: BLOX.BWidget class-popups,  Next: BLOX.BWidget-accessing,  Up: BLOX.BWidget

1.49.1 BLOX.BWidget class: popups
---------------------------------

new
     Create an instance of the receiver inside a BPopupWindow; do not
     map the window, answer the new widget.  The created widget will
     become a child of the window and be completely attached to it
     (e.g. the geometry methods will modify the window's geometry).
     Note that while the widget *seems* to be directly painted on the
     root window, it actually belongs to the BPopupWindow; so don't
     send #destroy to the widget to remove it, but rather to the window.

popup: initializationBlock
     Create an instance of the receiver inside a BPopupWindow; before
     returning, pass the widget to the supplied initializationBlock,
     then map the window.  Answer the new widget.  The created widget
     will become a child of the window and be completely attached to it
     (e.g. the geometry methods will modify the window's geometry).
     Note that while the widget *seems* to be directly painted on the
     root window, it actually belongs to the BPopupWindow; so don't
     send #destroy to the widget to remove it, but rather to the window.



File: gst-libs.info,  Node: BLOX.BWidget-accessing,  Next: BLOX.BWidget-customization,  Prev: BLOX.BWidget class-popups,  Up: BLOX.BWidget

1.49.2 BLOX.BWidget: accessing
------------------------------

borderWidth
     Answer the value of the borderWidth option for the widget.

     Specifies a non-negative value indicating the width of the 3-D
     border to draw around the outside of the widget (if such a border
     is being drawn; the effect option typically determines this). The
     value may also be used when drawing 3-D effects in the interior of
     the widget. The value is measured in pixels.

borderWidth: value
     Set the value of the borderWidth option for the widget.

     Specifies a non-negative value indicating the width of the 3-D
     border to draw around the outside of the widget (if such a border
     is being drawn; the effect option typically determines this). The
     value may also be used when drawing 3-D effects in the interior of
     the widget. The value is measured in pixels.

cursor
     Answer the value of the cursor option for the widget.

     Specifies the mouse cursor to be used for the widget. The value of
     the option is given by the standard X cursor cursor, i.e., any of
     the names defined in cursorcursor.h, without the leading XC_.

cursor: value
     Set the value of the cursor option for the widget.

     Specifies the mouse cursor to be used for the widget. The value of
     the option is given by the standard X cursor cursor, i.e., any of
     the names defined in cursorcursor.h, without the leading XC_.

effect
     Answer the value of the effect option for the widget.

     Specifies the effect desired for the widget's border. Acceptable
     values are raised, sunken, flat, ridge, solid, and groove. The
     value indicates how the interior of the widget should appear
     relative to its exterior; for example, raised means the interior
     of the widget should appear to protrude from the screen, relative
     to the exterior of the widget. Raised and sunken give the
     traditional 3-D appearance (for example, that of Xaw3D), while
     ridge and groove give a "chiseled" appearance like that of Swing
     or GTK+'s Metal theme. Flat and solid are not 3-D.

effect: value
     Set the value of the effect option for the widget.

     Specifies the effect desired for the widget's border. Acceptable
     values are raised, sunken, flat, ridge, solid, and groove. The
     value indicates how the interior of the widget should appear
     relative to its exterior; for example, raised means the interior
     of the widget should appear to protrude from the screen, relative
     to the exterior of the widget. Raised and sunken give the
     traditional 3-D appearance (for example, that of Xaw3D), while
     ridge and groove give a "chiseled" appearance like that of Swing
     or GTK+'s Metal theme. Flat and solid are not 3-D.

tabStop
     Answer the value of the tabStop option for the widget.

     Determines whether the window accepts the focus during keyboard
     traversal (e.g., Tab and Shift-Tab). Before setting the focus to a
     window, Blox consults the value of the tabStop option. A value of
     false means that the window should be skipped entirely during
     keyboard traversal.  true means that the window should receive the
     input focus as long as it is viewable (it and all of its ancestors
     are mapped). If you do not set this option, Blox makes the
     decision about whether or not to focus on the window: the current
     algorithm is to skip the window if it is disabled, it has no key
     bindings, or if it is not viewable. Of the standard widgets,
     BForm, BContainer, BLabel and BImage have no key bindings by
     default.

tabStop: value
     Set the value of the tabStop option for the widget.

     Determines whether the window accepts the focus during keyboard
     traversal (e.g., Tab and Shift-Tab). Before setting the focus to a
     window, Blox consults the value of the tabStop option. A value of
     false means that the window should be skipped entirely during
     keyboard traversal.  true means that the window should receive the
     input focus as long as it is viewable (it and all of its ancestors
     are mapped). If you do not set this option, Blox makes the
     decision about whether or not to focus on the window: the current
     algorithm is to skip the window if it is disabled, it has no key
     bindings, or if it is not viewable. Of the standard widgets,
     BForm, BContainer, BLabel and BImage have no key bindings by
     default.



File: gst-libs.info,  Node: BLOX.BWidget-customization,  Next: BLOX.BWidget-geometry management,  Prev: BLOX.BWidget-accessing,  Up: BLOX.BWidget

1.49.3 BLOX.BWidget: customization
----------------------------------

addChild: child
     The widget identified by child has been added to the receiver.
     This method is public not because you can call it, but because it
     can be useful to override it, not forgetting the call to
     basicAddChild, to perform some initialization on the children just
     added. Answer the new child.

create
     Make the receiver able to respond to its widget protocol.  This
     method is public not because you can call it, but because it can
     be useful to override it, not forgetting the call to super, to
     perform some initialization on the primitive widget just created;
     for an example of this, see the implementation of BButtonLike.

initialize: parentWidget
     This is called by #new: to initialize the widget (as the name
     says...). The default implementation calls all the other methods
     in the `customization' protocol and some private ones that take
     care of making the receiver's status consistent, so you should
     usually call it instead of doing everything by hand. This method
     is public not because you can call it, but because it might be
     useful to override it. Always answer the receiver.

setInitialSize
     This is called by #initialize: to set the widget's initial size.
     The whole area is occupied by default. This method is public not
     because you can call it, but because it can be useful to override
     it.



File: gst-libs.info,  Node: BLOX.BWidget-geometry management,  Next: BLOX.BWidget-widget protocol,  Prev: BLOX.BWidget-customization,  Up: BLOX.BWidget

1.49.4 BLOX.BWidget: geometry management
----------------------------------------

boundingBox
     Answer a Rectangle containing the bounding box of the receiver

boundingBox: rect
     Set the bounding box of the receiver to rect (a Rectangle).

child: child height: value
     Set the given child's height to value.  The default implementation
     of this method uses `rubber-sheet' geometry management as
     explained in the comment to BWidget's #height method.  You should
     not use this method, which is automatically called by the child's
     #height: method, but you might want to override it.  The child's
     property slots whose name ends with `Geom' are reserved for this
     method. This method should never fail - if it doesn't apply to the
     kind of geometry management that the receiver does, just do
     nothing.

child: child heightOffset: value
     Adjust the given child's height by a fixed amount of value pixel.
     This is meaningful for the default implementation, using
     `rubber-sheet' geometry management as explained in the comment to
     BWidget's #height and #heightOffset: methods.  You should not use
     this method, which is automatically called by the child's
     #heightOffset: method, but you might want to override it.  if it
     doesn't apply to the kind of geometry management that the receiver
     does, just add value to the current height of the widget.

child: child stretch: aBoolean
     This method is only used when on the path from the receiver to its
     toplevel there is a BContainer.  It decides whether child is among
     the widgets that are stretched to fill the entire width of the
     BContainer; if this has not been set for this widget, it is
     propagated along the widget hierarchy.

child: child width: value
     Set the given child's width to value.  The default implementation
     of this method uses `rubber-sheet' geometry management as
     explained in the comment to BWidget's #width method.  You should
     not use this method, which is automatically called by the child's
     #width: method, but you might want to override it.  The child's
     property slots whose name ends with `Geom' are reserved for this
     method. This method should never fail - if it doesn't apply to the
     kind of geometry management that the receiver does, just do
     nothing.

child: child widthOffset: value
     Adjust the given child's width by a fixed amount of value pixel.
     This is meaningful for the default implementation, using
     `rubber-sheet' geometry management as explained in the comment to
     BWidget's #width and #widthOffset: methods.  You should not use
     this method, which is automatically called by the child's
     #widthOffset: method, but you might want to override it.  if it
     doesn't apply to the kind of geometry management that the receiver
     does, just add value to the current width of the widget.

child: child x: value
     Set the given child's x to value.  The default implementation of
     this method uses `rubber-sheet' geometry management as explained in
     the comment to BWidget's #x method.  You should not use this
     method, which is automatically called by the child's #x: method,
     but you might want to override it.  The child's property slots
     whose name ends with `Geom' are reserved for this method. This
     method should never fail - if it doesn't apply to the kind of
     geometry management that the receiver does, just do nothing.

child: child xOffset: value
     Adjust the given child's x by a fixed amount of value pixel.  This
     is meaningful for the default implementation, using `rubber-sheet'
     geometry management as explained in the comment to BWidget's #x and
     #xOffset: methods.  You should not use this method, which is
     automatically called by the child's #xOffset: method, but you
     might want to override it.  if it doesn't apply to the kind of
     geometry management that the receiver does, just add value to the
     current x of the widget.

child: child y: value
     Set the given child's y to value.  The default implementation of
     this method uses `rubber-sheet' geometry management as explained in
     the comment to BWidget's #y method.  You should not use this
     method, which is automatically called by the child's #y: method,
     but you might want to override it.  The child's property slots
     whose name ends with `Geom' are reserved for this method. This
     method should never fail - if it doesn't apply to the kind of
     geometry management that the receiver does, just do nothing.

child: child yOffset: value
     Adjust the given child's y by a fixed amount of value pixel.  This
     is meaningful for the default implementation, using `rubber-sheet'
     geometry management as explained in the comment to BWidget's #y and
     #yOffset: methods.  You should not use this method, which is
     automatically called by the child's #yOffset: method, but you
     might want to override it.  if it doesn't apply to the kind of
     geometry management that the receiver does, just add value to the
     current y of the widget.

extent
     Answer a Point containing the receiver's size

extent: extent
     Set the receiver's size to the width and height contained in extent
     (a Point).

height
     Answer the `variable' part of the receiver's height within the
     parent widget. The value returned does not include any fixed
     amount of pixels indicated by #heightOffset: and must be
     interpreted in a relative fashion: the ratio of the returned value
     to the current size of the parent will be preserved upon resize.
     This apparently complicated method is known as `rubber sheet'
     geometry management.  Behavior if the left or right edges are not
     within the client area of the parent is not defined - the window
     might be clamped or might be positioned according to the
     specification.

height: value
     Set to `value' the height of the widget within the parent widget.
     The value is specified in a relative fashion as an integer, so
     that the ratio of `value' to the current size of the parent will be
     preserved upon resize. This apparently complicated method is known
     as `rubber sheet' geometry management.

heightAbsolute
     Force a recalculation of the layout of widgets in the receiver's
     parent, then answer the current height of the receiver in pixels.

heightChild: child
     Answer the given child's height.  The default implementation of
     this method uses `rubber-sheet' geometry management as explained in
     the comment to BWidget's #height method.  You should not use this
     method, which is automatically called by the child's #height
     method, but you might want to override.  The child's property
     slots whose name ends with `Geom' are reserved for this method.
     This method should never fail - if it doesn't apply to the kind of
     geometry management that the receiver does, just return 0.

heightOffset
     Private - Answer the pixels to be added or subtracted to the height
     of the receiver, with respect to the value set in a relative
     fashion through the #height: method.

heightOffset: value
     Add or subtract to the height of the receiver a fixed amount of
     `value' pixels, with respect to the value set in a relative
     fashion through the #height: method.  Usage of this method is
     deprecated; use #inset: and BContainers instead.

heightPixels: value
     Set the current height of the receiver to `value' pixels. Note
     that, after calling this method, #height will answer 0, which is
     logical considering that there is no `variable' part of the size
     (refer to #height and #height: for more explanations).

inset: pixels
     Inset the receiver's bounding box by the specified amount.

left: left top: top right: right bottom: bottom
     Set the bounding box of the receiver through its components.

pos: position
     Set the receiver's origin to the width and height contained in
     position (a Point).

posHoriz: aBlox
     Position the receiver immediately to the right of aBlox.

posVert: aBlox
     Position the receiver just below aBlox.

stretch: aBoolean
     This method is only considered when on the path from the receiver
     to its toplevel there is a BContainer.  It decides whether we are
     among the widgets that are stretched to fill the entire width of
     the BContainer.

width
     Answer the `variable' part of the receiver's width within the
     parent widget. The value returned does not include any fixed
     amount of pixels indicated by #widthOffset: and must be
     interpreted in a relative fashion: the ratio of the returned value
     to the current size of the parent will be preserved upon resize.
     This apparently complicated method is known as `rubber sheet'
     geometry management.  Behavior if the left or right edges are not
     within the client area of the parent is not defined - the window
     might be clamped or might be positioned according to the
     specification.

width: value
     Set to `value' the width of the widget within the parent widget.
     The value is specified in a relative fashion as an integer, so
     that the ratio of `value' to the current size of the parent will be
     preserved upon resize. This apparently complicated method is known
     as `rubber sheet' geometry management.

width: xSize height: ySize
     Set the size of the receiver through its components xSize and
     ySize.

widthAbsolute
     Force a recalculation of the layout of widgets in the receiver's
     parent, then answer the current width of the receiver in pixels.

widthChild: child
     Answer the given child's width.  The default implementation of this
     method uses `rubber-sheet' geometry management as explained in the
     comment to BWidget's #width method.  You should not use this
     method, which is automatically called by the child's #width method,
     but you might want to override.  The child's property slots whose
     name ends with `Geom' are reserved for this method.  This method
     should never fail - if it doesn't apply to the kind of geometry
     management that the receiver does, just return 0.

widthOffset
     Private - Answer the pixels to be added or subtracted to the width
     of the receiver, with respect to the value set in a relative
     fashion through the #width: method.

widthOffset: value
     Add or subtract to the width of the receiver a fixed amount of
     `value' pixels, with respect to the value set in a relative
     fashion through the #width: method.  Usage of this method is
     deprecated; use #inset: and BContainers instead.

widthPixels: value
     Set the current width of the receiver to `value' pixels. Note that,
     after calling this method, #width will answer 0, which is logical
     considering that there is no `variable' part of the size (refer to
     #width and #width: for more explanations).

x
     Answer the `variable' part of the receiver's x within the parent
     widget. The value returned does not include any fixed amount of
     pixels indicated by #xOffset: and must be interpreted in a relative
     fashion: the ratio of the returned value to the current size of the
     parent will be preserved upon resize. This apparently complicated
     method is known as `rubber sheet' geometry management.  Behavior
     if the left or right edges are not within the client area of the
     parent is not defined - the window might be clamped or might be
     positioned according to the specification.

x: value
     Set to `value' the x of the widget within the parent widget. The
     value is specified in a relative fashion as an integer, so that the
     ratio of `value' to the current size of the parent will be
     preserved upon resize. This apparently complicated method is known
     as `rubber sheet' geometry management.

x: xPos y: yPos
     Set the origin of the receiver through its components xPos and
     yPos.

x: xPos y: yPos width: xSize height: ySize
     Set the bounding box of the receiver through its origin and size.

xAbsolute
     Force a recalculation of the layout of widgets in the receiver's
     parent, then answer the current x of the receiver in pixels.

xChild: child
     Answer the given child's x.  The default implementation of this
     method uses `rubber-sheet' geometry management as explained in the
     comment to BWidget's #x method.  You should not use this method,
     which is automatically called by the child's #x method, but you
     might want to override.  The child's property slots whose name
     ends with `Geom' are reserved for this method.  This method should
     never fail - if it doesn't apply to the kind of geometry
     management that the receiver does, just return 0.

xOffset
     Private - Answer the pixels to be added or subtracted to the x of
     the receiver, with respect to the value set in a relative fashion
     through the #x: method.

xOffset: value
     Add or subtract to the x of the receiver a fixed amount of `value'
     pixels, with respect to the value set in a relative fashion through
     the #x: method.  Usage of this method is deprecated; use #inset:
     and BContainers instead.

xPixels: value
     Set the current x of the receiver to `value' pixels. Note that,
     after calling this method, #x will answer 0, which is logical
     considering that there is no `variable' part of the size (refer to
     #x and #x: for more explanations).

xRoot
     Answer the x position of the receiver with respect to the top-left
     corner of the desktop (including the offset of the virtual root
     window under X).

y
     Answer the `variable' part of the receiver's y within the parent
     widget. The value returned does not include any fixed amount of
     pixels indicated by #yOffset: and must be interpreted in a relative
     fashion: the ratio of the returned value to the current size of the
     parent will be preserved upon resize. This apparently complicated
     method is known as `rubber sheet' geometry management.  Behavior
     if the left or right edges are not within the client area of the
     parent is not defined - the window might be clamped or might be
     positioned according to the specification.

y: value
     Set to `value' the y of the widget within the parent widget. The
     value is specified in a relative fashion as an integer, so that the
     ratio of `value' to the current size of the parent will be
     preserved upon resize. This apparently complicated method is known
     as `rubber sheet' geometry management.

yAbsolute
     Force a recalculation of the layout of widgets in the receiver's
     parent, then answer the current y of the receiver in pixels.

yChild: child
     Answer the given child's y.  The default implementation of this
     method uses `rubber-sheet' geometry management as explained in the
     comment to BWidget's #y method.  You should not use this method,
     which is automatically called by the child's #y method, but you
     might want to override.  The child's property slots whose name
     ends with `Geom' are reserved for this method.  This method should
     never fail - if it doesn't apply to the kind of geometry
     management that the receiver does, just return 0.

yOffset
     Private - Answer the pixels to be added or subtracted to the y of
     the receiver, with respect to the value set in a relative fashion
     through the #y: method.

yOffset: value
     Add or subtract to the y of the receiver a fixed amount of `value'
     pixels, with respect to the value set in a relative fashion through
     the #y: method.  Usage of this method is deprecated; use #inset:
     and BContainers instead.

yPixels: value
     Set the current y of the receiver to `value' pixels. Note that,
     after calling this method, #y will answer 0, which is logical
     considering that there is no `variable' part of the size (refer to
     #y and #y: for more explanations).

yRoot
     Answer the y position of the receiver with respect to the top-left
     corner of the desktop (including the offset of the virtual root
     window under X).



File: gst-libs.info,  Node: BLOX.BWidget-widget protocol,  Prev: BLOX.BWidget-geometry management,  Up: BLOX.BWidget

1.49.5 BLOX.BWidget: widget protocol
------------------------------------

activate
     At any given time, one window on each display is designated as the
     focus window; any key press or key release events for the display
     are sent to that window. This method allows one to choose which
     window will have the focus in the receiver's display

     If the application currently has the input focus on the receiver's
     display, this method resets the input focus for the receiver's
     display to the receiver. If the application doesn't currently have
     the input focus on the receiver's display, Blox will remember the
     receiver as the focus for its top-level; the next time the focus
     arrives at the top-level, it will be redirected to the receiver
     (this is because most window managers will set the focus only to
     top-level windows, leaving it up to the application to redirect
     the focus among the children of the top-level).

activateNext
     Activate the next widget in the focus `tabbing' order.  The focus
     order depends on the widget creation order; you can set which
     widgets are in the order with the #tabStop: method.

activatePrevious
     Activate the previous widget in the focus `tabbing' order.  The
     focus order depends on the widget creation order; you can set
     which widgets are in the order with the #tabStop: method.

bringToTop
     Raise the receiver so that it is above all of its siblings in the
     widgets' z-order; the receiver will not be obscured by any
     siblings and will obscure any siblings that overlap it.

isActive
     Return whether the receiver is the window that currently owns the
     focus on its display.

sendToBack
     Lower the receiver so that it is below all of its siblings in the
     widgets' z-order; the receiver will be obscured by any siblings
     that overlap it and will not obscure any siblings.



File: gst-libs.info,  Node: BLOX.BWindow,  Next: BLOX.Gui,  Prev: BLOX.BWidget,  Up: BLOX package

1.50 BLOX.BWindow
=================

Defined in namespace BLOX
Superclass: BLOX.BForm
Category: Graphics-Windows
     I am the boss. Nothing else could be viewed or interacted with if
     it wasn't for me... )):->

* Menu:

* BLOX.BWindow class-instance creation::  (class)
* BLOX.BWindow-accessing::  (instance)
* BLOX.BWindow-widget protocol::  (instance)


File: gst-libs.info,  Node: BLOX.BWindow class-instance creation,  Next: BLOX.BWindow-accessing,  Up: BLOX.BWindow

1.50.1 BLOX.BWindow class: instance creation
--------------------------------------------

new
     Answer a new top-level window.

new: label
     Answer a new top-level window with `label' as its title bar
     caption.

popup: initializationBlock
     This method should not be called for instances of this class.



File: gst-libs.info,  Node: BLOX.BWindow-accessing,  Next: BLOX.BWindow-widget protocol,  Prev: BLOX.BWindow class-instance creation,  Up: BLOX.BWindow

1.50.2 BLOX.BWindow: accessing
------------------------------

callback
     Answer a DirectedMessage that is sent to verify whether the
     receiver must be destroyed when the user asks to unmap it.

callback: aReceiver message: aSymbol
     Set up so that aReceiver is sent the aSymbol message (the name of
     a zero- or one-argument selector) when the user asks to unmap the
     receiver.  If the method accepts an argument, the receiver is
     passed.

     If the method returns true, the window and its children are
     destroyed (which is the default action, taken if no callback is
     set up).  If the method returns false, the window is left in place.

invokeCallback
     Generate a synthetic callback, destroying the window if no
     callback was set up or if the callback method answers true.

label
     Answer the value of the label option for the widget.

     Specifies a string to be displayed inside the widget. The way in
     which the string is displayed depends on the particular widget and
     may be determined by other options, such as anchor. For windows,
     this is the title of the window.

label: value
     Set the value of the label option for the widget.

     Specifies a string to be displayed inside the widget. The way in
     which the string is displayed depends on the particular widget and
     may be determined by other options, such as anchor. For windows,
     this is the title of the window.

menu: value
     Set the value of the menu option for the widget.

     Specifies a menu widget to be used as a menubar. On the Macintosh,
     the menubar will be displayed accross the top of the main monitor.
     On Microsoft Windows and all UNIX platforms, the menu will appear
     accross the toplevel window as part of the window dressing
     maintained by the window manager.

resizable
     Answer the value of the resizable option for the widget.

     Answer whether the user can be resize the window or not. If
     resizing is disabled, then the window's size will be the size from
     the most recent interactive resize or geometry-setting method. If
     there has been no such operation then the window's natural size
     will be used.

resizable: value
     Set the value of the resizable option for the widget.

     Answer whether the user can be resize the window or not. If
     resizing is disabled, then the window's size will be the size from
     the most recent interactive resize or geometry-setting method. If
     there has been no such operation then the window's natural size
     will be used.



File: gst-libs.info,  Node: BLOX.BWindow-widget protocol,  Prev: BLOX.BWindow-accessing,  Up: BLOX.BWindow

1.50.3 BLOX.BWindow: widget protocol
------------------------------------

center
     Center the window in the screen

centerIn: view
     Center the window in the given widget

height
     Answer the height of the window, as deduced from the geometry that
     the window manager imposed on the window.

height: anInteger
     Ask the window manager to give the given height to the window.

heightAbsolute
     Answer the height of the window, as deduced from the geometry that
     the window manager imposed on the window.

heightOffset: value
     This method should not be called for instances of this class.

iconify
     Map a window and in iconified state.  If a window has not been
     mapped yet, this is achieved by mapping the window in withdrawn
     state first, and then iconifying it.

isMapped
     Answer whether the window is mapped

isWindow
     Answer `true'.

map
     Map the window and bring it to the topmost position in the Z-order.

modalMap
     Map the window while establishing an application-local grab for it.
     An event loop is started that ends only after the window has been
     destroyed.

     When a grab is set for a particular window, all pointer events are
     restructed to the grab window and its descendants in Blox's window
     hierarchy.  Whenever the pointer is within the grab window's
     subtree, the pointer will behave exactly the same as if there had
     been no grab grab at all and all events will be reported in the
     normal fashion.  When the pointer is outside the window's tree,
     button presses and releases and mouse motion events are reported
     to the grabbing window, and window entry and window exit events
     are ignored. In other words, windows outside the grab subtree will
     be visible on the screen but they will be insensitive until the
     grab is released.  The tree of windows underneath the grab window
     can include top-level windows, in which case all of those
     top-level windows and their descendants will continue to receive
     mouse events during the grab.  Keyboard events (key presses and
     key releases) are delivered as usual:  the window manager controls
     which application receives keyboard events, and if they are sent
     to any window in the grabbing application then they are redirected
     to the window owning the focus.

state
     Set the value of the state option for the window.

     Specifies one of four states for the window: either normal, iconic,
     withdrawn, or (Windows only) zoomed.

state: aSymbol
     Raise an error. To set a BWindow's state, use #map and #unmap.

unmap
     Unmap a window, causing it to be forgotten about by the window
     manager

width
     Answer the width of the window, as deduced from the geometry that
     the window manager imposed on the window.

width: anInteger
     Ask the window manager to give the given width to the window.

width: xSize height: ySize
     Ask the window manager to give the given width and height to the
     window.

widthAbsolute
     Answer the width of the window, as deduced from the geometry that
     the window manager imposed on the window.

widthOffset: value
     This method should not be called for instances of this class.

window
     Answer the receiver.

x
     Answer the x coordinate of the window's top-left corner, as
     deduced from the geometry that the window manager imposed on the
     window.

x: anInteger
     Ask the window manager to move the window's left border to the
     given x coordinate, keeping the size unchanged

x: xPos y: yPos
     Ask the window manager to move the window's top-left corner to the
     given coordinates, keeping the size unchanged

x: xPos y: yPos width: xSize height: ySize
     Ask the window manager to give the requested geometry to the
     window.

xAbsolute
     Answer the x coordinate of the window's top-left corner, as
     deduced from the geometry that the window manager imposed on the
     window.

xOffset: value
     This method should not be called for instances of this class.

y
     Answer the y coordinate of the window's top-left corner, as
     deduced from the geometry that the window manager imposed on the
     window.

y: anInteger
     Ask the window manager to move the window's left border to the
     given y coordinate, keeping the size unchanged

yAbsolute
     Answer the y coordinate of the window's top-left corner, as
     deduced from the geometry that the window manager imposed on the
     window.

yOffset: value
     This method should not be called for instances of this class.



File: gst-libs.info,  Node: BLOX.Gui,  Prev: BLOX.BWindow,  Up: BLOX package

1.51 BLOX.Gui
=============

Defined in namespace BLOX
Superclass: Object
Category: Graphics-Windows
     I am a small class which serves as a base for complex objects which
     expose an individual protocol but internally use a Blox widget for
     creating their user interface.

* Menu:

* BLOX.Gui-accessing::  (instance)


File: gst-libs.info,  Node: BLOX.Gui-accessing,  Up: BLOX.Gui

1.51.1 BLOX.Gui: accessing
--------------------------

blox
     Return instance of blox subclass which implements window

blox: aBlox
     Set instance of blox subclass which implements window



File: gst-libs.info,  Node: Complex package,  Next: DBI package,  Prev: BLOX package,  Up: Top

2 Complex number computations
*****************************

* Menu:


Alphabetic list:
* Complex::


Class tree:
  (Object)
    (Magnitude)
      (Number)
*       Complex::


File: gst-libs.info,  Node: Complex,  Up: Complex package

2.1 Complex
===========

Defined in namespace Smalltalk
Superclass: Number
Category: Examples-Useful
     I provide complex numbers, with full interoperability with other
     kinds of numbers.  Complex numbers can be created from imaginary
     numbers, which in turn are created with `Complex i' or the #i
     method (e.g. `3 i').  Alternatively, they can be created from
     polar numbers.

* Menu:

* Complex class-instance creation::  (class)
* Complex-comparing::  (instance)
* Complex-converting::  (instance)
* Complex-creation/coercion::  (instance)
* Complex-math::  (instance)
* Complex-printing::  (instance)
* Complex-testing::  (instance)
* Complex-transcendental functions::  (instance)


File: gst-libs.info,  Node: Complex class-instance creation,  Next: Complex-comparing,  Up: Complex

2.1.1 Complex class: instance creation
--------------------------------------

i
     Return the imaginary unit, -1 sqrt.

initialize
     Initialize some common complex numbers.

new
     This method should not be called for instances of this class.

real: re imaginary: im
     Return a complex number with the given real and imaginary parts.

realResult: re imaginary: im
     Private - Return a new complex number knowing that re and im have
     the same generality.

rho: dist theta: angle
     Return a complex number whose absolute value is dist and whose
     argument is angle.



File: gst-libs.info,  Node: Complex-comparing,  Next: Complex-converting,  Prev: Complex class-instance creation,  Up: Complex

2.1.2 Complex: comparing
------------------------

< aNumber
     Not commented.

<= aNumber
     Not commented.

= aNumber
     Not commented.

> aNumber
     Not commented.

>= aNumber
     Not commented.

hash
     Not commented.

~= aNumber
     Not commented.



File: gst-libs.info,  Node: Complex-converting,  Next: Complex-creation/coercion,  Prev: Complex-comparing,  Up: Complex

2.1.3 Complex: converting
-------------------------

asExactFraction
     Not commented.

asFloat
     Not commented.

asFloatD
     Not commented.

asFloatE
     Not commented.

asFloatQ
     Not commented.

asFraction
     Not commented.

ceiling
     Not commented.

floor
     Not commented.

rounded
     Not commented.

truncated
     Not commented.



File: gst-libs.info,  Node: Complex-creation/coercion,  Next: Complex-math,  Prev: Complex-converting,  Up: Complex

2.1.4 Complex: creation/coercion
--------------------------------

coerce: aNumber
     Not commented.

generality
     Not commented.

i
     Return the receiver multiplied by the imaginary unit.

imaginary
     Answer `im'.

isComplex
     Answer `true'.

one
     Answer `One'.

real
     Answer `re'.

setReal: real imaginary: imag
     Not commented.

zero
     Answer `Zero'.



File: gst-libs.info,  Node: Complex-math,  Next: Complex-printing,  Prev: Complex-creation/coercion,  Up: Complex

2.1.5 Complex: math
-------------------

* z
     Multiply the receiver by the (real or complex) number z.

+ z
     Sum the receiver with the (real or complex) number z.

- z
     Subtract the (real or complex) number z from the receiver.

/ z
     Divide the receiver by the (real or complex) number z.

abs
     Return the absolute value of the receiver.

absSquared
     Return the squared absolute value of the receiver.

conjugate
     Return the complex conjugate of the receiver.

reciprocal
     Return the reciprocal of the receiver.



File: gst-libs.info,  Node: Complex-printing,  Next: Complex-testing,  Prev: Complex-math,  Up: Complex

2.1.6 Complex: printing
-----------------------

printOn: aStream
     Not commented.

storeOn: aStream
     Not commented.



File: gst-libs.info,  Node: Complex-testing,  Next: Complex-transcendental functions,  Prev: Complex-printing,  Up: Complex

2.1.7 Complex: testing
----------------------

isExact
     Answer whether the receiver performs exact arithmetic.  Complex
     numbers do so as long as both parts, real and imaginary, are exact.



File: gst-libs.info,  Node: Complex-transcendental functions,  Prev: Complex-testing,  Up: Complex

2.1.8 Complex: transcendental functions
---------------------------------------

arcTan
     Return the arc-tangent of the receiver.

arcTan: aNumber
     Return the arc-tangent of aNumber divided by the receiver.

arg
     Return the argument of the receiver.

cos
     Return the cosine of the receiver.

cosh
     Return the hyperbolic cosine of the receiver.

exp
     Return e raised to the receiver.

ln
     Return the natural logarithm of the receiver.

log
     Return the base-10 logarithm of the receiver.

sin
     Return the sine of the receiver.

sinh
     Return the hyperbolic sine of the receiver.

sqrt
     Return the square root of the receiver.  Can be improved!

tan
     Return the tangent of the receiver.

tanh
     Return the hyperbolic tangent of the receiver.



File: gst-libs.info,  Node: DBI package,  Next: DebugTools package,  Prev: Complex package,  Up: Top

3 Database connectivity with DBI
********************************

* Menu:


Alphabetic list:
* DBI.ColumnInfo::
* DBI.Connection::
* DBI.ConnectionInfo::
* DBI.FieldConverter::
* DBI.ResultSet::
* DBI.Row::
* DBI.Statement::
* DBI.Table::


Class tree:
  (DBI.ROE.RASQLRelation)
*   DBI.Table::
  (Object)
*   DBI.ColumnInfo::
*   DBI.Connection::
*   DBI.ConnectionInfo::
*   DBI.FieldConverter::
*   DBI.Row::
*   DBI.Statement::
    (Iterable)
      (Stream)
*       DBI.ResultSet::


File: gst-libs.info,  Node: DBI.ColumnInfo,  Next: DBI.Connection,  Up: DBI package

3.1 DBI.ColumnInfo
==================

Defined in namespace DBI
Superclass: Object
Category: DBI-Framework

* Menu:

* DBI.ColumnInfo-accessing::  (instance)
* DBI.ColumnInfo-printing::  (instance)


File: gst-libs.info,  Node: DBI.ColumnInfo-accessing,  Next: DBI.ColumnInfo-printing,  Up: DBI.ColumnInfo

3.1.1 DBI.ColumnInfo: accessing
-------------------------------

index
     Return the 1-based index of the column in the result set
     (abstract).

isNullable
     Return whether the column can be NULL (always returns true in
     ColumnInfo).

name
     Return the name of the column (abstract).

size
     Return the size of the column (abstract).

type
     Return a string containing the type of the column (abstract).



File: gst-libs.info,  Node: DBI.ColumnInfo-printing,  Prev: DBI.ColumnInfo-accessing,  Up: DBI.ColumnInfo

3.1.2 DBI.ColumnInfo: printing
------------------------------

displayOn: aStream
     Print a representation of the receiver on aStream.

printOn: aStream
     Print a representation of the receiver on aStream.



File: gst-libs.info,  Node: DBI.Connection,  Next: DBI.ConnectionInfo,  Prev: DBI.ColumnInfo,  Up: DBI package

3.2 DBI.Connection
==================

Defined in namespace DBI
Superclass: Object
Category: DBI-Framework
     I represent a connection to a database.

* Menu:

* DBI.Connection class-connecting::  (class)
* DBI.Connection class-initialization::  (class)
* DBI.Connection-accessing::  (instance)
* DBI.Connection-connecting::  (instance)
* DBI.Connection-querying::  (instance)


File: gst-libs.info,  Node: DBI.Connection class-connecting,  Next: DBI.Connection class-initialization,  Up: DBI.Connection

3.2.1 DBI.Connection class: connecting
--------------------------------------

connect: aDSN user: aUserName password: aPassword
     Connect to the database server identified by aDSN using the given
     username and password.  The DSN is in the format
     dbi:DriverName:dbname=database_name;host=hostname;port=port Where
     dbi is constant, DriverName is the name of the driver, and
     everything else is parameters in the form
     name1=value1;name2=value2;...

     Individual drivers may parse the parameters differently, though
     the existing ones all support parameters dbname, host and port.

paramConnect: params user: aUserName password: aPassword
     Connect to the database server using the parameters in params (a
     Dictionary) and the given username and password (abstract).



File: gst-libs.info,  Node: DBI.Connection class-initialization,  Next: DBI.Connection-accessing,  Prev: DBI.Connection class-connecting,  Up: DBI.Connection

3.2.2 DBI.Connection class: initialization
------------------------------------------

updateDriverList
     Private - Look for new subclasses of Connection.



File: gst-libs.info,  Node: DBI.Connection-accessing,  Next: DBI.Connection-connecting,  Prev: DBI.Connection class-initialization,  Up: DBI.Connection

3.2.3 DBI.Connection: accessing
-------------------------------

>> aString
     Returns a Table object corresponding to the given table.

database
     Returns the database name for this connection.  This corresponds
     to the catalog in SQL standard parlance (abstract).

fieldConverter
     Returns a FieldConverter that can be used to insert Smalltalk
     objects into queries.

tableAt: aString
     Returns a Table object corresponding to the given table.

tableAt: aString ifAbsent: aBlock
     Returns a Table object corresponding to the given table.



File: gst-libs.info,  Node: DBI.Connection-connecting,  Next: DBI.Connection-querying,  Prev: DBI.Connection-accessing,  Up: DBI.Connection

3.2.4 DBI.Connection: connecting
--------------------------------

close
     Close the connection now; should happen on GC too (abstract).



File: gst-libs.info,  Node: DBI.Connection-querying,  Prev: DBI.Connection-connecting,  Up: DBI.Connection

3.2.5 DBI.Connection: querying
------------------------------

do: aSQLQuery
     Executes a SQL statement (usually one that doesn't return a result
     set).  Return value is a ResultSet, to which you can send
     #rowsAffected (abstract).

prepare: aSQLQuery
     Creates a statement object, that can be executed (with parameters,
     if applicable) repeatedly (abstract).

primTableAt: aString ifAbsent: aBlock
     Returns a Table object corresponding to the given table.  Should be
     overridden by subclasses.

select: aSQLQuery
     Prepares and executes a SQL statement. Returns the result set or
     throws an exception on failure (abstract).



File: gst-libs.info,  Node: DBI.ConnectionInfo,  Next: DBI.FieldConverter,  Prev: DBI.Connection,  Up: DBI package

3.3 DBI.ConnectionInfo
======================

Defined in namespace DBI
Superclass: Object
Category: DBI-Framework
     A utility class to contain connection info.

* Menu:

* DBI.ConnectionInfo class-instance creation::  (class)
* DBI.ConnectionInfo-accessing::  (instance)


File: gst-libs.info,  Node: DBI.ConnectionInfo class-instance creation,  Next: DBI.ConnectionInfo-accessing,  Up: DBI.ConnectionInfo

3.3.1 DBI.ConnectionInfo class: instance creation
-------------------------------------------------

fromDSN: aDSN
     Parse a DSN in the format
     dbi:DriverName:dbname=database_name;host=hostname;port=port where
     dbi is constant, DriverName is the name of the driver, and
     everything else is parameters in the form
     name1=value1;name2=value2;...



File: gst-libs.info,  Node: DBI.ConnectionInfo-accessing,  Prev: DBI.ConnectionInfo class-instance creation,  Up: DBI.ConnectionInfo

3.3.2 DBI.ConnectionInfo: accessing
-----------------------------------

driver
     Answer the driver; this is not the driver class.

driver: aString
     Set the driver; this is not the driver class.

paramString: aString
     Set the parameter list.

params
     Return the parsed parameters in a Dictionary.

scheme
     Answer the scheme; the only supported one is 'dbi'.

scheme: aString
     Set the scheme; the only supported one is 'dbi'.



File: gst-libs.info,  Node: DBI.FieldConverter,  Next: DBI.ResultSet,  Prev: DBI.ConnectionInfo,  Up: DBI package

3.4 DBI.FieldConverter
======================

Defined in namespace DBI
Superclass: Object
Category: DBI

* Menu:

* DBI.FieldConverter class-instance creation::  (class)
* DBI.FieldConverter-actions::  (instance)
* DBI.FieldConverter-converting-smalltalk::  (instance)


File: gst-libs.info,  Node: DBI.FieldConverter class-instance creation,  Next: DBI.FieldConverter-actions,  Up: DBI.FieldConverter

3.4.1 DBI.FieldConverter class: instance creation
-------------------------------------------------

new
     Not commented.

uniqueInstance
     Not commented.



File: gst-libs.info,  Node: DBI.FieldConverter-actions,  Next: DBI.FieldConverter-converting-smalltalk,  Prev: DBI.FieldConverter class-instance creation,  Up: DBI.FieldConverter

3.4.2 DBI.FieldConverter: actions
---------------------------------

print: aValue on: aStream
     Not commented.

printString: aValue
     Not commented.



File: gst-libs.info,  Node: DBI.FieldConverter-converting-smalltalk,  Prev: DBI.FieldConverter-actions,  Up: DBI.FieldConverter

3.4.3 DBI.FieldConverter: converting-smalltalk
----------------------------------------------

writeBoolean: aBoolean on: aStream
     Not commented.

writeDate: aDate on: aStream
     Not commented.

writeDateTime: aDateTime on: aStream
     Not commented.

writeFloat: aFloat on: aStream
     Not commented.

writeInteger: anInteger on: aStream
     Not commented.

writeQuotedDate: aDate on: aStream
     Not commented.

writeQuotedTime: aDate on: aStream
     Not commented.

writeTime: aTime on: aStream
     Not commented.



File: gst-libs.info,  Node: DBI.ResultSet,  Next: DBI.Row,  Prev: DBI.FieldConverter,  Up: DBI package

3.5 DBI.ResultSet
=================

Defined in namespace DBI
Superclass: Stream
Category: DBI-Framework
     I represent a result set, ie. the set of rows returned from a
     SELECT statement.  I may also be returned for DML statements
     (INSERT, UPDATE, DELETE), in which case I only hold the number of
     rows affected.

* Menu:

* DBI.ResultSet-accessing::  (instance)
* DBI.ResultSet-cursor access::  (instance)
* DBI.ResultSet-printing::  (instance)
* DBI.ResultSet-stream protocol::  (instance)


File: gst-libs.info,  Node: DBI.ResultSet-accessing,  Next: DBI.ResultSet-cursor access,  Up: DBI.ResultSet

3.5.1 DBI.ResultSet: accessing
------------------------------

columnAt: aIndex
     Answer the aIndex'th column name.

columnNames
     Answer an array of column names in order (abstract).

columns
     Answer a Dictionary of column name -> ColumnInfo pairs (abstract).

isDML
     Returns true if the statement was not a SELECT or similar operation
     (e.g. SHOW, DESCRIBE, EXPLAIN).

isSelect
     Returns true if the statement was a SELECT or similar operation
     (e.g. SHOW, DESCRIBE, EXPLAIN), false otherwise.

rowCount
     Returns the number of rows in the result set; error for DML
     statements.

rows
     Answer the contents of the execution result as array of Rows.

rowsAffected
     For DML statments, returns the number of rows affected; error for
     SELECT statements.

statement
     Return the Statement, if any, that generated the result set.



File: gst-libs.info,  Node: DBI.ResultSet-cursor access,  Next: DBI.ResultSet-printing,  Prev: DBI.ResultSet-accessing,  Up: DBI.ResultSet

3.5.2 DBI.ResultSet: cursor access
----------------------------------

atEnd
     Return whether all the rows in the result set have been consumed.
     (abstract).

fetch
     Return the next row, or nil if at the end of the result set.

next
     Return the next row, or raise an error if at the end of the stream
     (abstract).



File: gst-libs.info,  Node: DBI.ResultSet-printing,  Next: DBI.ResultSet-stream protocol,  Prev: DBI.ResultSet-cursor access,  Up: DBI.ResultSet

3.5.3 DBI.ResultSet: printing
-----------------------------

printOn: aStream
     Print a representation of the receiver on aStream.



File: gst-libs.info,  Node: DBI.ResultSet-stream protocol,  Prev: DBI.ResultSet-printing,  Up: DBI.ResultSet

3.5.4 DBI.ResultSet: stream protocol
------------------------------------

position
     Returns the current row index (0-based) in the result set
     (abstract).

position: anInteger
     Sets the current row index (0-based) in the result set (abstract).

size
     Returns the number of rows in the result set.



File: gst-libs.info,  Node: DBI.Row,  Next: DBI.Statement,  Prev: DBI.ResultSet,  Up: DBI package

3.6 DBI.Row
===========

Defined in namespace DBI
Superclass: Object
Category: DBI-Framework
     I represent a row in a result set.

* Menu:

* DBI.Row-accessing::  (instance)
* DBI.Row-printing::  (instance)


File: gst-libs.info,  Node: DBI.Row-accessing,  Next: DBI.Row-printing,  Up: DBI.Row

3.6.1 DBI.Row: accessing
------------------------

asArray
     Return the values of the columns.

asDictionary
     Return the names and values of the columns as a dictionary.

at: aColumnName
     Return the value of the named column (abstract).

atIndex: aColumnIndex
     Return the value of the column at the given 1-based index
     (abstract).

columnAt: aIndex
     Return a ColumnInfo object for the aIndex-th column in the row.

columnCount
     Return the number of columns in the row.

columnNames
     Return an array of column names for the columns in the row.

columns
     Return a Dictionary of ColumnInfo objects for the columns in the
     row, where the keys are the column names.

keysAndValuesDo: aBlock
     Pass to aBlock each column name and the corresponding value.

resultSet
     Return the result set that includes the receiver.



File: gst-libs.info,  Node: DBI.Row-printing,  Prev: DBI.Row-accessing,  Up: DBI.Row

3.6.2 DBI.Row: printing
-----------------------

printOn: aStream
     Print a representation of the receiver on aStream.



File: gst-libs.info,  Node: DBI.Statement,  Next: DBI.Table,  Prev: DBI.Row,  Up: DBI package

3.7 DBI.Statement
=================

Defined in namespace DBI
Superclass: Object
Category: DBI-Framework
     I represent a prepared statement.

* Menu:

* DBI.Statement class-instance creation::  (class)
* DBI.Statement-querying::  (instance)


File: gst-libs.info,  Node: DBI.Statement class-instance creation,  Next: DBI.Statement-querying,  Up: DBI.Statement

3.7.1 DBI.Statement class: instance creation
--------------------------------------------

on: aConnection
     Return a new statement for this connection.



File: gst-libs.info,  Node: DBI.Statement-querying,  Prev: DBI.Statement class-instance creation,  Up: DBI.Statement

3.7.2 DBI.Statement: querying
-----------------------------

execute
     Execute with no parameters (abstract).

executeWith: aParameter
     Execute with one parameters.

executeWith: aParam1 with: aParam2
     Execute with two parameters.

executeWith: aParam1 with: aParam2 with: aParam3
     Execute with three parameters.

executeWithAll: aParams
     Execute taking parameters from the Collection aParams (abstract).



File: gst-libs.info,  Node: DBI.Table,  Prev: DBI.Statement,  Up: DBI package

3.8 DBI.Table
=============

Defined in namespace DBI
Superclass: DBI.ROE.RASQLRelation
Category: DBI

* Menu:

* DBI.Table-accessing::  (instance)
* DBI.Table-core::  (instance)
* DBI.Table-printing::  (instance)


File: gst-libs.info,  Node: DBI.Table-accessing,  Next: DBI.Table-core,  Up: DBI.Table

3.8.1 DBI.Table: accessing
--------------------------

columnAt: aIndex
     Answer the aIndex'th column name.

columnNames
     Answer an array of column names in order (abstract).

columns
     Not commented.

database
     Returns the database name for this table.  This corresponds to the
     catalog in SQL standard parlance.



File: gst-libs.info,  Node: DBI.Table-core,  Next: DBI.Table-printing,  Prev: DBI.Table-accessing,  Up: DBI.Table

3.8.2 DBI.Table: core
---------------------

size
     Not commented.



File: gst-libs.info,  Node: DBI.Table-printing,  Prev: DBI.Table-core,  Up: DBI.Table

3.8.3 DBI.Table: printing
-------------------------

print: anObject on: aStream
     Not commented.



File: gst-libs.info,  Node: DebugTools package,  Next: Sockets package,  Prev: DBI package,  Up: Top

4 Controlling Smalltalk processes with DebugTools
*************************************************

* Menu:


Alphabetic list:
* Debugger::


Class tree:
  (Object)
*   Debugger::


File: gst-libs.info,  Node: Debugger,  Up: DebugTools package

4.1 Debugger
============

Defined in namespace Smalltalk
Superclass: Object
Category: System-Debugging
     I provide debugging facilities for another inferior process.  I
     have methods that allow the controlled process to proceed with
     varying granularity.  In addition, I keep a cache mapping
     instruction pointer bytecodes to line numbers.

* Menu:

* Debugger class-disabling debugging::  (class)
* Debugger class-instance creation::  (class)
* Debugger class-source code::  (class)
* Debugger-inferior process properties::  (instance)
* Debugger-stepping commands::  (instance)


File: gst-libs.info,  Node: Debugger class-disabling debugging,  Next: Debugger class-instance creation,  Up: Debugger

4.1.1 Debugger class: disabling debugging
-----------------------------------------

debuggerClass
     Answer `nil'.



File: gst-libs.info,  Node: Debugger class-instance creation,  Next: Debugger class-source code,  Prev: Debugger class-disabling debugging,  Up: Debugger

4.1.2 Debugger class: instance creation
---------------------------------------

on: aProcess
     Suspend aProcess and return a new Debugger that controls aProcess.
     aProcess must not be the currently running process.



File: gst-libs.info,  Node: Debugger class-source code,  Next: Debugger-inferior process properties,  Prev: Debugger class-instance creation,  Up: Debugger

4.1.3 Debugger class: source code
---------------------------------

currentLineIn: aContext
     Not commented.



File: gst-libs.info,  Node: Debugger-inferior process properties,  Next: Debugger-stepping commands,  Prev: Debugger class-source code,  Up: Debugger

4.1.4 Debugger: inferior process properties
-------------------------------------------

currentLine
     Return the line number in traced process.

isActive
     Answer true if the inferior process is still running.

process
     Answer the inferior process.

suspendedContext
     Answer the suspended execution state of the inferior process.



File: gst-libs.info,  Node: Debugger-stepping commands,  Prev: Debugger-inferior process properties,  Up: Debugger

4.1.5 Debugger: stepping commands
---------------------------------

continue
     Terminate the controlling process and continue execution of the
     traced process.

finish
     Run to the next return.

finish: aContext
     Run up until aContext returns.

next
     Run to the end of the current line in the inferior process,
     skipping over message sends.

slowFinish
     Run in single-step mode up to the next return.

slowFinish: aContext
     Run in single-step mode until aContext returns.

step
     Run to the end of the current line in the inferior process or to
     the next message send.

stepBytecode
     Run a single bytecode in the inferior process.

stopInferior
     Suspend the inferior process and raise a DebuggerReentered
     notification in the controlling process.

stopInferior: anObject
     Suspend the inferior process and raise a DebuggerReentered
     notification in the controlling process with anObject as the
     exception's message.



File: gst-libs.info,  Node: Iconv/I18N packages,  Next: XML/XPath/XSL packages,  Prev: Sockets package,  Up: Top

5 Multilingual and international support with Iconv and I18N
************************************************************

* Menu:


Alphabetic list:
* I18N.BigEndianFileStream::
* I18N.EncodedStream::
* I18N.EncodedString::
* I18N.EncodedStringFactory::
* I18N.Encoder::
* I18N.FileStreamSegment::
* I18N.IncompleteSequenceError::
* I18N.InvalidCharsetError::
* I18N.InvalidSequenceError::
* I18N.LcMessages::
* I18N.LcMessagesCatalog::
* I18N.LcMessagesDomain::
* I18N.LcMessagesDummyDomain::
* I18N.LcMessagesMoFileVersion0::
* I18N.LcMessagesTerritoryDomain::
* I18N.LcMonetary::
* I18N.LcMonetaryISO::
* I18N.LcNumeric::
* I18N.LcPrintFormats::
* I18N.LcTime::
* I18N.Locale::
* I18N.LocaleConventions::
* I18N.LocaleData::
* I18N.RTEAlternativeNode::
* I18N.RTEBinaryNode::
* I18N.RTELiteralNode::
* I18N.RTENegationNode::
* I18N.RTEParameterNode::
* I18N.RunTimeExpression::


Class tree:
  (Object)
    (Exception)
      (Error)
*       I18N.IncompleteSequenceError::
*       I18N.InvalidSequenceError::
        (SystemExceptions.InvalidValue)
          (SystemExceptions.SystemExceptions.InvalidArgument)
*           I18N.InvalidCharsetError::
    (FileSegment)
*     I18N.FileStreamSegment::
*   I18N.EncodedStringFactory::
*   I18N.LocaleData::
*     I18N.LcMessagesDomain::
*       I18N.LcMessagesCatalog::
*         I18N.LcMessagesMoFileVersion0::
*       I18N.LcMessagesDummyDomain::
*       I18N.LcMessagesTerritoryDomain::
*     I18N.Locale::
*     I18N.LocaleConventions::
*       I18N.LcMessages::
*       I18N.LcPrintFormats::
*         I18N.LcNumeric::
*           I18N.LcMonetary::
*             I18N.LcMonetaryISO::
*         I18N.LcTime::
*   I18N.RunTimeExpression::
*     I18N.RTEAlternativeNode::
*     I18N.RTEBinaryNode::
*     I18N.RTELiteralNode::
*     I18N.RTENegationNode::
*     I18N.RTEParameterNode::
    (Iterable)
      (Collection)
        (SequenceableCollection)
          (ArrayedCollection)
            (CharacterArray)
*             I18N.EncodedString::
      (Stream)
        (FileDescriptor)
          (FileStream)
*           I18N.BigEndianFileStream::
*       I18N.EncodedStream::
*       I18N.Encoder::


File: gst-libs.info,  Node: I18N.BigEndianFileStream,  Next: I18N.EncodedStream,  Up: Iconv/I18N packages

5.1 I18N.BigEndianFileStream
============================

Defined in namespace I18N
Superclass: FileStream
Category: i18n-Messages
     Unlike ByteStream and FileStream, this retrieves integer numbers in
     big-endian (68000, PowerPC, SPARC) order.

* Menu:


File: gst-libs.info,  Node: I18N.EncodedStream,  Next: I18N.EncodedString,  Prev: I18N.BigEndianFileStream,  Up: Iconv/I18N packages

5.2 I18N.EncodedStream
======================

Defined in namespace I18N
Superclass: Stream
Category: i18n-Character sets
     This class is a factory for subclasses of Encoder.  Encoders act
     as parts of a pipe, hence this class provides methods that
     construct an appropriate pipe.

* Menu:

* I18N.EncodedStream class-initializing::  (class)
* I18N.EncodedStream class-instance creation::  (class)


File: gst-libs.info,  Node: I18N.EncodedStream class-initializing,  Next: I18N.EncodedStream class-instance creation,  Up: I18N.EncodedStream

5.2.1 I18N.EncodedStream class: initializing
--------------------------------------------

initialize
     Initialize the registry of the encoders to include the standard
     encoders contained in the library.

registerEncoderFor: arrayOfAliases toUTF32: toUTF32Class fromUTF32: fromUTF32Class
     Register the two classes that will respectively convert from the
     charsets in arrayOfAliases to UTF-32 and vice versa.

     The former class is a stream that accepts characters and returns
     (via #next) integers representing UTF-32 character codes, while
     the latter accepts UTF-32 character codes and converts them to
     characters.  For an example see respectively FromUTF7 and ToUTF7
     (I admit it is not a trivial example).



File: gst-libs.info,  Node: I18N.EncodedStream class-instance creation,  Prev: I18N.EncodedStream class-initializing,  Up: I18N.EncodedStream

5.2.2 I18N.EncodedStream class: instance creation
-------------------------------------------------

encoding: anUnicodeString
     Answer a pipe of encoders that converts anUnicodeString to default
     encoding for strings (the current locale's default charset if none
     is specified).

encoding: aStringOrStream as: toEncoding
     Answer a pipe of encoders that converts anUnicodeString (which
     contains to the supplied encoding (which can be an ASCII String or
     Symbol).

on: aStringOrStream from: fromEncoding
     Answer a pipe of encoders that converts aStringOrStream (which can
     be a string or another stream) from the given encoding to the
     default locale's default charset.

on: aStringOrStream from: fromEncoding to: toEncoding
     Answer a pipe of encoders that converts aStringOrStream (which can
     be a string or another stream) between the two supplied encodings
     (which can be ASCII Strings or Symbols)

on: aStringOrStream to: toEncoding
     Answer a pipe of encoders that converts aStringOrStream (which can
     be a string or another stream) from the default locale's default
     charset to the given encoding.

unicodeOn: aStringOrStream
     Answer a pipe of encoders that converts aStringOrStream (which can
     be a string or another stream) from its encoding (or the current
     locale's default charset, if the encoding cannot be determined) to
     integers representing Unicode character codes.

unicodeOn: aStringOrStream encoding: fromEncoding
     Answer a pipe of encoders that converts aStringOrStream (which can
     be a string or another stream) from the supplied encoding (which
     can be an ASCII String or Symbol) to integers representing Unicode
     character codes.



File: gst-libs.info,  Node: I18N.EncodedString,  Next: I18N.EncodedStringFactory,  Prev: I18N.EncodedStream,  Up: Iconv/I18N packages

5.3 I18N.EncodedString
======================

Defined in namespace I18N
Superclass: CharacterArray
Category: i18n-Character sets
     An EncodedString, like a String, is a sequence of bytes
     representing a specific encoding of a UnicodeString.  Unlike a
     String, however, the encoding name is known, rather than detected,
     irrelevant or assumed to be the system default.

* Menu:

* I18N.EncodedString class-accessing::  (class)
* I18N.EncodedString class-instance creation::  (class)
* I18N.EncodedString-accessing::  (instance)
* I18N.EncodedString-copying::  (instance)
* I18N.EncodedString-initializing::  (instance)
* I18N.EncodedString-printing::  (instance)


File: gst-libs.info,  Node: I18N.EncodedString class-accessing,  Next: I18N.EncodedString class-instance creation,  Up: I18N.EncodedString

5.3.1 I18N.EncodedString class: accessing
-----------------------------------------

isUnicode
     Answer false; the receiver stores bytes (i.e. an encoded form),
     not characters.



File: gst-libs.info,  Node: I18N.EncodedString class-instance creation,  Next: I18N.EncodedString-accessing,  Prev: I18N.EncodedString class-accessing,  Up: I18N.EncodedString

5.3.2 I18N.EncodedString class: instance creation
-------------------------------------------------

fromString: aString
     Not commented.

fromString: aString encoding: encoding
     Not commented.

new
     This method should not be called for instances of this class.

new: size
     This method should not be called for instances of this class.



File: gst-libs.info,  Node: I18N.EncodedString-accessing,  Next: I18N.EncodedString-copying,  Prev: I18N.EncodedString class-instance creation,  Up: I18N.EncodedString

5.3.3 I18N.EncodedString: accessing
-----------------------------------

asString
     Answer `string'.

asUnicodeString
     Not commented.

at: anIndex
     Not commented.

at: anIndex put: anObject
     Not commented.

do: aBlock
     Not commented.

encoding
     Not commented.

hash
     Not commented.

size
     Not commented.

species
     Not commented.

utf16Encoding
     Not commented.

utf32Encoding
     Not commented.

valueAt: anIndex
     Not commented.

valueAt: anIndex put: anObject
     Not commented.



File: gst-libs.info,  Node: I18N.EncodedString-copying,  Next: I18N.EncodedString-initializing,  Prev: I18N.EncodedString-accessing,  Up: I18N.EncodedString

5.3.4 I18N.EncodedString: copying
---------------------------------

copy
     Not commented.

copyEmpty
     Not commented.

copyEmpty: size
     Not commented.



File: gst-libs.info,  Node: I18N.EncodedString-initializing,  Next: I18N.EncodedString-printing,  Prev: I18N.EncodedString-copying,  Up: I18N.EncodedString

5.3.5 I18N.EncodedString: initializing
--------------------------------------

encoding: aString
     Not commented.

setString: aString
     Not commented.



File: gst-libs.info,  Node: I18N.EncodedString-printing,  Prev: I18N.EncodedString-initializing,  Up: I18N.EncodedString

5.3.6 I18N.EncodedString: printing
----------------------------------

displayOn: aStream
     Print a representation of the receiver on aStream. Unlike
     #printOn:, this method does not display the encoding and enclosing
     quotes.

printOn: aStream
     Print a representation of the receiver on aStream.



File: gst-libs.info,  Node: I18N.EncodedStringFactory,  Next: I18N.Encoder,  Prev: I18N.EncodedString,  Up: Iconv/I18N packages

5.4 I18N.EncodedStringFactory
=============================

Defined in namespace I18N
Superclass: Object
Category: i18n-Character sets
     An EncodedStringFactory is used (in place of class objects) so that
     Encoders can return EncodedString objects with the correct
     encoding.

* Menu:

* I18N.EncodedStringFactory class-instance creation::  (class)
* I18N.EncodedStringFactory-accessing::  (instance)
* I18N.EncodedStringFactory-instance creation::  (instance)


File: gst-libs.info,  Node: I18N.EncodedStringFactory class-instance creation,  Next: I18N.EncodedStringFactory-accessing,  Up: I18N.EncodedStringFactory

5.4.1 I18N.EncodedStringFactory class: instance creation
--------------------------------------------------------

encoding: aString
     Answer a new EncodedStringFactory, creating strings with the given
     encoding.



File: gst-libs.info,  Node: I18N.EncodedStringFactory-accessing,  Next: I18N.EncodedStringFactory-instance creation,  Prev: I18N.EncodedStringFactory class-instance creation,  Up: I18N.EncodedStringFactory

5.4.2 I18N.EncodedStringFactory: accessing
------------------------------------------

isUnicode
     Answer false; the receiver stores bytes (i.e. an encoded form),
     not characters.



File: gst-libs.info,  Node: I18N.EncodedStringFactory-instance creation,  Prev: I18N.EncodedStringFactory-accessing,  Up: I18N.EncodedStringFactory

5.4.3 I18N.EncodedStringFactory: instance creation
--------------------------------------------------

encoding
     Answer the encoding used for the created Strings.

encoding: aString
     Set the encoding used for the created Strings.

fromString: aString
     Answer an EncodedString based on aString and in the encoding
     represented by the receiver.

new
     Answer a new, empty EncodedString using the encoding represented
     by the receiver.

new: size
     Answer a new EncodedString of the given size, using the encoding
     represented by the receiver.



File: gst-libs.info,  Node: I18N.Encoder,  Next: I18N.FileStreamSegment,  Prev: I18N.EncodedStringFactory,  Up: Iconv/I18N packages

5.5 I18N.Encoder
================

Defined in namespace I18N
Superclass: Stream
Category: i18n-Character sets
     This class is the superclass of streams that take an origin and
     encode it to another character set.  The subclasses are are for
     internal use unless you are writing support for your own encodings.

* Menu:

* I18N.Encoder class-instance creation::  (class)
* I18N.Encoder-stream operations::  (instance)


File: gst-libs.info,  Node: I18N.Encoder class-instance creation,  Next: I18N.Encoder-stream operations,  Up: I18N.Encoder

5.5.1 I18N.Encoder class: instance creation
-------------------------------------------

on: aStringOrStream from: fromEncoding to: toEncoding
     Answer a new encoder that translates from fromEncoding to
     toEncoding.  The encodings are guaranteed to be those for which
     the encoder was registered.



File: gst-libs.info,  Node: I18N.Encoder-stream operations,  Prev: I18N.Encoder class-instance creation,  Up: I18N.Encoder

5.5.2 I18N.Encoder: stream operations
-------------------------------------

atEnd
     Return whether the receiver can produce another character in the
     receiver; by default, this is true if there is another character
     in the origin.

atEndOfInput
     Return whether there is another character in the origin.  This
     method is for private use by encoders, calling it outside won't
     corrupt the internal state of the encoder but the result probably
     won't be meaningful (depending on the innards of the encoder).

next
     Return the next character in the receiver; by default, this is the
     next character in the origin.

nextInput
     Return the next character in the origin.  This method is for
     private use by encoders, calling it outside may corrupt the
     internal state of the encoder.

nextInputAvailable: n into: aCollection startingAt: pos
     Place up to N characters from the origin in aCollection.  This
     method is for private use by encoders, calling it outside may
     corrupt the internal state of the encoder.

peekInput
     Return the next character in the origin without advancing it.

species
     We answer a string of Characters encoded in our destination
     encoding.



File: gst-libs.info,  Node: I18N.FileStreamSegment,  Next: I18N.IncompleteSequenceError,  Prev: I18N.Encoder,  Up: Iconv/I18N packages

5.6 I18N.FileStreamSegment
==========================

Defined in namespace I18N
Superclass: FileSegment
Category: i18n-Messages
     Unlike FileSegment, this object assumes that the `file' instance
     variable is a FileStream, not a file name.

* Menu:

* I18N.FileStreamSegment-basic::  (instance)


File: gst-libs.info,  Node: I18N.FileStreamSegment-basic,  Up: I18N.FileStreamSegment

5.6.1 I18N.FileStreamSegment: basic
-----------------------------------

fileName
     Answer the name of the file containing the segment

withFileDo: aBlock
     Evaluate aBlock, passing a FileStream corresponding to the file



File: gst-libs.info,  Node: I18N.IncompleteSequenceError,  Next: I18N.InvalidCharsetError,  Prev: I18N.FileStreamSegment,  Up: Iconv/I18N packages

5.7 I18N.IncompleteSequenceError
================================

Defined in namespace I18N
Superclass: Error
Category: i18n-Character sets
     I am raised if an invalid sequence is found while converting a
     string from a charset to another.  In particular, I am raised if
     the input stream ends abruptly in the middle of a multi-byte
     sequence.

* Menu:

* I18N.IncompleteSequenceError-accessing::  (instance)


File: gst-libs.info,  Node: I18N.IncompleteSequenceError-accessing,  Up: I18N.IncompleteSequenceError

5.7.1 I18N.IncompleteSequenceError: accessing
---------------------------------------------

description
     Answer a textual description of the exception.



File: gst-libs.info,  Node: I18N.InvalidCharsetError,  Next: I18N.InvalidSequenceError,  Prev: I18N.IncompleteSequenceError,  Up: Iconv/I18N packages

5.8 I18N.InvalidCharsetError
============================

Defined in namespace I18N
Superclass: SystemExceptions.SystemExceptions.InvalidArgument
Category: i18n-Character sets
     I am raised if the user tries to encode from or to an unknown
     encoding

* Menu:

* I18N.InvalidCharsetError-accessing::  (instance)


File: gst-libs.info,  Node: I18N.InvalidCharsetError-accessing,  Up: I18N.InvalidCharsetError

5.8.1 I18N.InvalidCharsetError: accessing
-----------------------------------------

description
     Answer a textual description of the exception.



File: gst-libs.info,  Node: I18N.InvalidSequenceError,  Next: I18N.LcMessages,  Prev: I18N.InvalidCharsetError,  Up: Iconv/I18N packages

5.9 I18N.InvalidSequenceError
=============================

Defined in namespace I18N
Superclass: Error
Category: i18n-Character sets
     I am raised if an invalid sequence is found while converting a
     string from a charset to another

* Menu:

* I18N.InvalidSequenceError-accessing::  (instance)


File: gst-libs.info,  Node: I18N.InvalidSequenceError-accessing,  Up: I18N.InvalidSequenceError

5.9.1 I18N.InvalidSequenceError: accessing
------------------------------------------

description
     Answer a textual description of the exception.



File: gst-libs.info,  Node: I18N.LcMessages,  Next: I18N.LcMessagesCatalog,  Prev: I18N.InvalidSequenceError,  Up: Iconv/I18N packages

5.10 I18N.LcMessages
====================

Defined in namespace I18N
Superclass: I18N.LocaleConventions
Category: i18n-Messages
     This object is a factory of LcMessagesDomain objects

* Menu:

* I18N.LcMessages class-accessing::  (class)
* I18N.LcMessages-accessing::  (instance)
* I18N.LcMessages-opening MO files::  (instance)


File: gst-libs.info,  Node: I18N.LcMessages class-accessing,  Next: I18N.LcMessages-accessing,  Up: I18N.LcMessages

5.10.1 I18N.LcMessages class: accessing
---------------------------------------

category
     Answer the environment variable used to determine the default
     locale

selector
     Answer the selector that accesses the receiver when sent to a
     Locale object.



File: gst-libs.info,  Node: I18N.LcMessages-accessing,  Next: I18N.LcMessages-opening MO files,  Prev: I18N.LcMessages class-accessing,  Up: I18N.LcMessages

5.10.2 I18N.LcMessages: accessing
---------------------------------

languageDirectory
     Answer the directory holding MO files for the language

languageDirectory: rootDirectory
     Answer the directory holding MO files for the language, given the
     root directory of the locale data.

territoryDirectory
     Answer the directory holding MO files for the language, specific to
     the territory

territoryDirectory: rootDirectory
     Answer the directory holding MO files for the language, specific to
     the territory, given the root directory of the locale data.



File: gst-libs.info,  Node: I18N.LcMessages-opening MO files,  Prev: I18N.LcMessages-accessing,  Up: I18N.LcMessages

5.10.3 I18N.LcMessages: opening MO files
----------------------------------------

? aString
     Answer an object for the aString domain, querying both the
     language catalog (e.g. pt) and the territory catalog (e.g. pt_BR
     or pt_PT).

domain: aString
     Answer an object for the aString domain, querying both the
     language catalog (e.g. pt) and the territory catalog (e.g. pt_BR
     or pt_PT).

domain: aString localeDirectory: rootDirectory
     Answer an object for the aString domain, querying both the
     language catalog (e.g. pt) and the territory catalog (e.g. pt_BR
     or pt_PT). The localeDirectory is usually
     '<installprefix>/share/locale'.



File: gst-libs.info,  Node: I18N.LcMessagesCatalog,  Next: I18N.LcMessagesDomain,  Prev: I18N.LcMessages,  Up: Iconv/I18N packages

5.11 I18N.LcMessagesCatalog
===========================

Defined in namespace I18N
Superclass: I18N.LcMessagesDomain
Category: i18n-Messages
     This object is an abstract superclass of objects that retrieve
     translated strings from a file.

* Menu:


File: gst-libs.info,  Node: I18N.LcMessagesDomain,  Next: I18N.LcMessagesDummyDomain,  Prev: I18N.LcMessagesCatalog,  Up: Iconv/I18N packages

5.12 I18N.LcMessagesDomain
==========================

Defined in namespace I18N
Superclass: I18N.LocaleData
Category: i18n-Messages
     This object is an abstract superclass for message domains
     (catalogs).  It contains methods to create instances of its
     subclasses, but they are commonly used only by LcMessages.

     Translations are accessed using either #at: or the shortcut binary
     messages `?'.       This way, common idioms to access translated
     strings will be

     string := NLS? 'abc'.       string := self? 'abc'.

     (in the first case NLS is a class variable, in the second the
     receiver implements #? through delegation) which is only five or
     six characters longer than the traditional

     string := 'abc'.

     (cfr. the _("abc") idiom used by GNU gettext)

* Menu:

* I18N.LcMessagesDomain class-opening MO files::  (class)
* I18N.LcMessagesDomain-handling the cache::  (instance)
* I18N.LcMessagesDomain-querying::  (instance)


File: gst-libs.info,  Node: I18N.LcMessagesDomain class-opening MO files,  Next: I18N.LcMessagesDomain-handling the cache,  Up: I18N.LcMessagesDomain

5.12.1 I18N.LcMessagesDomain class: opening MO files
----------------------------------------------------

id: anArray on: aFileName
     Create an instance of the receiver with a given locale identifier
     from a path to the MO file



File: gst-libs.info,  Node: I18N.LcMessagesDomain-handling the cache,  Next: I18N.LcMessagesDomain-querying,  Prev: I18N.LcMessagesDomain class-opening MO files,  Up: I18N.LcMessagesDomain

5.12.2 I18N.LcMessagesDomain: handling the cache
------------------------------------------------

flush
     Flush the receiver's cache of translations

shouldCache
     Answer whether translations should be cached.  Never override this
     method to always answer false, because that would cause bugs when
     transliteration is being used.



File: gst-libs.info,  Node: I18N.LcMessagesDomain-querying,  Prev: I18N.LcMessagesDomain-handling the cache,  Up: I18N.LcMessagesDomain

5.12.3 I18N.LcMessagesDomain: querying
--------------------------------------

? aString
     Answer the translation of `aString', or answer aString itself if
     none is available.

at: aString
     Answer the translation of `aString', or answer aString itself if
     none is available.

at: singularString plural: pluralString with: n
     Answer either the translation of pluralString with `%1' replaced by
     n if n ~= 1, or the translation of singularString if n = 1.

at: aString put: anotherString
     This method should not be called for instances of this class.

translatorInformation
     Answer information on the translation, or nil if there is none.
     This information is stored as the `translation' of an empty string.

translatorInformationAt: key
     Answer information on the translation associated to a given key

translatorInformationAt: key at: subkey
     Answer information on the translation associated to a given key
     and to a subkey of the key



File: gst-libs.info,  Node: I18N.LcMessagesDummyDomain,  Next: I18N.LcMessagesMoFileVersion0,  Prev: I18N.LcMessagesDomain,  Up: Iconv/I18N packages

5.13 I18N.LcMessagesDummyDomain
===============================

Defined in namespace I18N
Superclass: I18N.LcMessagesDomain
Category: i18n-Messages
     This object does no attempt to translate strings, returning
     instead the same string passed as an argument to #?.

* Menu:


File: gst-libs.info,  Node: I18N.LcMessagesMoFileVersion0,  Next: I18N.LcMessagesTerritoryDomain,  Prev: I18N.LcMessagesDummyDomain,  Up: Iconv/I18N packages

5.14 I18N.LcMessagesMoFileVersion0
==================================

Defined in namespace I18N
Superclass: I18N.LcMessagesCatalog
Category: i18n-Messages
     This object is an concrete class that retrieves translated strings
     from a GNU gettext MO file.  The class method
     #fileFormatDescription contains an explanation of the file format.

* Menu:

* I18N.LcMessagesMoFileVersion0 class-documentation::  (class)
* I18N.LcMessagesMoFileVersion0 class-plurals::  (class)
* I18N.LcMessagesMoFileVersion0-flushing the cache::  (instance)


File: gst-libs.info,  Node: I18N.LcMessagesMoFileVersion0 class-documentation,  Next: I18N.LcMessagesMoFileVersion0 class-plurals,  Up: I18N.LcMessagesMoFileVersion0

5.14.1 I18N.LcMessagesMoFileVersion0 class: documentation
---------------------------------------------------------

fileFormatDescription
     The Format of GNU MO Files (excerpt of the GNU gettext manual)
     ==============================================================

     The format of the generated MO files is best described by a
     picture, which appears below.

     The first two words serve the identification of the file.  The
     magic number will always signal GNU MO files.   The number is
     stored in the byte order of the generating machine, so the magic
     number really is two numbers: `0x950412de' and `0xde120495'.
     The second word describes the current revision of the file format.
     For now the revision is 0.  This might change in future versions,
     and ensures that the readers of MO files can distinguish new
     formats from old ones, so that both can be handled correctly.  The
     version is kept separate from the magic number, instead of using
     different magic numbers for different formats, mainly because
     `/etc/magic' is not updated often.  It might be better to have
     magic separated from internal format version identification.

     Follow a number of pointers to later tables in the file, allowing
     for the extension of the prefix part of MO files without having to
     recompile programs reading them.  This might become useful for
     later inserting a few flag bits, indication about the charset
     used, new tables, or other things.

     Then, at offset O and offset T in the picture, two tables of string
     descriptors can be found.  In both tables, each string descriptor
     uses two 32 bits integers, one for the string length, another for
     the offset of the string in the MO file, counting in bytes from
     the start of the file.  The first table contains descriptors for
     the original strings, and is sorted so the original strings are in
     increasing lexicographical order.  The second table contains
     descriptors for the translated strings, and is parallel to the
     first table: to find the corresponding translation one has to
     access the array slot in the second array with the same index.

     Having the original strings sorted enables the use of simple binary
     search, for when the MO file does not contain an hashing table, or
     for when it is not practical to use the hashing table provided in
     the MO file.  This also has another advantage, as the empty string
     in a PO file GNU `gettext' is usually *translated* into some
     system information attached to that particular MO file, and the
     empty string necessarily becomes the first in both the original
     and translated tables, making the system information very easy to
     find.

     The size S of the hash table can be zero.  In this case, the hash
     table itself is not contained in the MO file.  Some people might
     prefer this because a precomputed hashing table takes disk space,
     and does not win *that* much speed.       The hash table contains
     indices to the sorted array of strings in the MO file.  Conflict
     resolution is done by double hashing.  The precise hashing
     algorithm used is fairly dependent of GNU `gettext' code, and is
     not documented here.

     As for the strings themselves, they follow the hash file, and each
     is terminated with a <NUL>, and this <NUL> is not counted in the
     length which appears in the string descriptor.    The `msgfmt'
     program has an option selecting the alignment for MO file strings.
     With this option, each string is separately aligned so it starts
     at an offset which is a multiple of the alignment value.  On some
     RISC machines, a correct alignment will speed things up.

     Nothing prevents a MO file from having embedded <NUL>s in strings.
     However, the program interface currently used already presumes that
     strings are <NUL> terminated, so embedded <NUL>s are somewhat
     useless.  But MO file format is general enough so other interfaces
     would be later possible, if for example, we ever want to implement
     wide characters right in MO files, where <NUL> bytes may
     accidently appear.

     This particular issue has been strongly debated in the GNU
     `gettext' development forum, and it is expectable that MO file
     format will evolve or change over time.  It is even possible that
     many formats may later be supported concurrently.  But surely, we
     have to start somewhere, and the MO file format described here is
     a good start.  Nothing is cast in concrete, and the format may
     later evolve fairly easily, so we should feel comfortable with the
     current approach.

     byte +-----------------------------------------+ 0  | magic number
     = 0x950412de                  | |
               | 4  | file format revision = 0                 | |
                                           | 8  | number of strings
                       |  == N |                                       |
     12  | offset of table with original strings    | == O |
                               | 16  | offset of table with translation
     strings | == T |                                       | 20  |
     size of hashing table                   |  == S |
                         | 24  | offset of hashing table
     |  == H |                                       | .
                                 .  .    (possibly more entries later)
              .  .                                             .  |
                                            | O  | length & offset 0th
     string  ---------------.  O + 8  | length & offset 1st string
     -----------------.  ...                                   ...   | |
     O + ((N-1)*8)| length & offset (N-1)th string            |  | | |
                                          |  | | T  | length & offset
     0th translation  --------------.  T + 8  | length & offset 1st
     translation  ----------------.  ...
           ...   | | | | T + ((N-1)*8)| length & offset (N-1)th
     translation           |  | | | | |
               |  | | | | H  | start hash table
     |  | | | | ...                                       ...   | | | |
     H + S * 4  | end hash table                          |  | | | | |
                                              |  | | | | | NUL
     terminated 0th string  <---------------' | | | |
                       |    | | | | NUL terminated 1st string
     <-----------------' | | |                                      |
       | | ...                                       ...       | | |
                                            |      | | | NUL terminated
     0th translation  <--------------' | |
            |        | | NUL terminated 1st translation
     <----------------' |                                      | ...
                                        ...  |
                | +-----------------------------------------+

     Locating Message Catalog Files -----------------------------

     Because many different languages for many different packages have
     to be stored we need some way to add these information to file
     message catalog files.     The way usually used in Unix
     environments is have this encoding in the file name.  This is also
     done here.  The directory name given in `bindtextdomain's second
     argument (or the default directory), followed by the value and
     name of the locale and the domain name are concatenated:

     DIR_NAME/LOCALE/LC_CATEGORY/DOMAIN_NAME.mo

     The default value for DIR_NAME is system specific.  For the GNU
     library, and for packages adhering to its conventions, it's:
     /usr/local/share/locale

     LOCALE is the value of the locale whose name is this `LC_CATEGORY'.
     For `gettext' and `dgettext' this locale is always `LC_MESSAGES'.



File: gst-libs.info,  Node: I18N.LcMessagesMoFileVersion0 class-plurals,  Next: I18N.LcMessagesMoFileVersion0-flushing the cache,  Prev: I18N.LcMessagesMoFileVersion0 class-documentation,  Up: I18N.LcMessagesMoFileVersion0

5.14.2 I18N.LcMessagesMoFileVersion0 class: plurals
---------------------------------------------------

initialize
     Initialize a table with the expressions computing the plurals for
     the most common languages

pluralExpressionFor: locale ifAbsent: aBlock
     Answer a RunTimeExpression yielding the plural form for the given
     language and territory, if one is known, else evaluate aBlock and
     answer it.



File: gst-libs.info,  Node: I18N.LcMessagesMoFileVersion0-flushing the cache,  Prev: I18N.LcMessagesMoFileVersion0 class-plurals,  Up: I18N.LcMessagesMoFileVersion0

5.14.3 I18N.LcMessagesMoFileVersion0: flushing the cache
--------------------------------------------------------

flush
     Flush the cache and reread the catalog's metadata.

shouldCache
     Answer true, we always cache translations if they are read from a
     file



File: gst-libs.info,  Node: I18N.LcMessagesTerritoryDomain,  Next: I18N.LcMonetary,  Prev: I18N.LcMessagesMoFileVersion0,  Up: Iconv/I18N packages

5.15 I18N.LcMessagesTerritoryDomain
===================================

Defined in namespace I18N
Superclass: I18N.LcMessagesDomain
Category: i18n-Messages
     This object asks for strings to a primary domain (e.g. it_IT) and
     a secondary one (e.g. it).

* Menu:

* I18N.LcMessagesTerritoryDomain class-instance creation::  (class)


File: gst-libs.info,  Node: I18N.LcMessagesTerritoryDomain class-instance creation,  Up: I18N.LcMessagesTerritoryDomain

5.15.1 I18N.LcMessagesTerritoryDomain class: instance creation
--------------------------------------------------------------

primary: domain1 secondary: domain2
     Answer an instance of the receiver that queries, in sequence,
     domain1 and domain2



File: gst-libs.info,  Node: I18N.LcMonetary,  Next: I18N.LcMonetaryISO,  Prev: I18N.LcMessagesTerritoryDomain,  Up: Iconv/I18N packages

5.16 I18N.LcMonetary
====================

Defined in namespace I18N
Superclass: I18N.LcNumeric
Category: i18n-Printing
     Sending either #?, #printString: or #print:on: converts a Number to
     a String according to the rules that are mandated by ISO for
     printing currency amounts in the current locale.

* Menu:

* I18N.LcMonetary class-accessing::  (class)
* I18N.LcMonetary-printing::  (instance)


File: gst-libs.info,  Node: I18N.LcMonetary class-accessing,  Next: I18N.LcMonetary-printing,  Up: I18N.LcMonetary

5.16.1 I18N.LcMonetary class: accessing
---------------------------------------

category
     Answer the environment variable used to determine the default
     locale

selector
     Answer the selector that accesses the receiver when sent to a
     Locale object.



File: gst-libs.info,  Node: I18N.LcMonetary-printing,  Prev: I18N.LcMonetary class-accessing,  Up: I18N.LcMonetary

5.16.2 I18N.LcMonetary: printing
--------------------------------

print: aNumber on: aStream
     Print aNumber on aStream according to the receiver's formatting
     conventions.  Always print a currency sign and don't force to
     print negative numbers by putting parentheses around them.

print: aNumber on: aStream currency: currency parentheses: p
     Print aNumber on aStream according to the receiver's formatting
     conventions.  If currency is true, print a currency sign, and if p
     is true force to print negative numbers by putting parentheses
     around them.  If p is true, for positive numbers spaces are put
     around the number to keep them aligned.



File: gst-libs.info,  Node: I18N.LcMonetaryISO,  Next: I18N.LcNumeric,  Prev: I18N.LcMonetary,  Up: Iconv/I18N packages

5.17 I18N.LcMonetaryISO
=======================

Defined in namespace I18N
Superclass: I18N.LcMonetary
Category: i18n-Printing

* Menu:

* I18N.LcMonetaryISO class-accessing::  (class)


File: gst-libs.info,  Node: I18N.LcMonetaryISO class-accessing,  Up: I18N.LcMonetaryISO

5.17.1 I18N.LcMonetaryISO class: accessing
------------------------------------------

selector
     Answer the selector that accesses the receiver when sent to a
     Locale object.



File: gst-libs.info,  Node: I18N.LcNumeric,  Next: I18N.LcPrintFormats,  Prev: I18N.LcMonetaryISO,  Up: Iconv/I18N packages

5.18 I18N.LcNumeric
===================

Defined in namespace I18N
Superclass: I18N.LcPrintFormats
Category: i18n-Printing
     Sending either #?, #printString: or #print:on: converts a Number to
     a String according to the rules that are used in the given locale.

* Menu:

* I18N.LcNumeric class-accessing::  (class)
* I18N.LcNumeric-printing::  (instance)


File: gst-libs.info,  Node: I18N.LcNumeric class-accessing,  Next: I18N.LcNumeric-printing,  Up: I18N.LcNumeric

5.18.1 I18N.LcNumeric class: accessing
--------------------------------------

category
     Answer the environment variable used to determine the default
     locale

selector
     Answer the selector that accesses the receiver when sent to a
     Locale object.



File: gst-libs.info,  Node: I18N.LcNumeric-printing,  Prev: I18N.LcNumeric class-accessing,  Up: I18N.LcNumeric

5.18.2 I18N.LcNumeric: printing
-------------------------------

basicPrint: aNumber on: aStream
     Print aNumber on aStream according to the receiver's formatting
     conventions, without currency signs or anything like that.  This
     method must not be overridden.

print: aNumber on: aStream
     Print aNumber on aStream according to the receiver's formatting
     conventions.



File: gst-libs.info,  Node: I18N.LcPrintFormats,  Next: I18N.LcTime,  Prev: I18N.LcNumeric,  Up: Iconv/I18N packages

5.19 I18N.LcPrintFormats
========================

Defined in namespace I18N
Superclass: I18N.LocaleConventions
Category: i18n-Messages
     LcPrintFormats subclasses have instances that understand #?,
     #printString: and #print:on: (the last of which is abstract) which
     provide a means to convert miscellaneous objects to Strings
     according to the rules that are used in the given locale.

* Menu:

* I18N.LcPrintFormats-printing::  (instance)


File: gst-libs.info,  Node: I18N.LcPrintFormats-printing,  Up: I18N.LcPrintFormats

5.19.1 I18N.LcPrintFormats: printing
------------------------------------

? anObject
     Answer how anObject must be printed according to the receiver's
     formatting conventions.

print: anObject on: aStream
     Print anObject on aStream according to the receiver's formatting
     conventions.

printString: anObject
     Answer how anObject must be printed according to the receiver's
     formatting conventions.



File: gst-libs.info,  Node: I18N.LcTime,  Next: I18N.Locale,  Prev: I18N.LcPrintFormats,  Up: Iconv/I18N packages

5.20 I18N.LcTime
================

Defined in namespace I18N
Superclass: I18N.LcPrintFormats
Category: i18n-Printing
     Sending either #?, #printString: or #print:on: converts a Date or
     Time to a String according to the rules that are used in the given
     locale.

* Menu:

* I18N.LcTime class-accessing::  (class)
* I18N.LcTime-printing::  (instance)
* I18N.LcTime-tests::  (instance)


File: gst-libs.info,  Node: I18N.LcTime class-accessing,  Next: I18N.LcTime-printing,  Up: I18N.LcTime

5.20.1 I18N.LcTime class: accessing
-----------------------------------

category
     Answer the environment variable used to determine the default
     locale

selector
     Answer the selector that accesses the receiver when sent to a
     Locale object.



File: gst-libs.info,  Node: I18N.LcTime-printing,  Next: I18N.LcTime-tests,  Prev: I18N.LcTime class-accessing,  Up: I18N.LcTime

5.20.2 I18N.LcTime: printing
----------------------------

print: aDateOrTimeOrArray on: aStream
     Print aDateOrTimeOrArray on aStream according to the receiver's
     formatting conventions.  It can be a Date, Time, DateTime, or an
     array made of a Date and a Time

print: aDateOrTimeOrArray on: aStream ifFull: fullFmt ifDate: dateFmt ifTime: timeFmt
     Print aDateOrTimeOrArray on aStream according to the receiver's
     formatting conventions.  It can be a Date, Time, DateTime, or an
     array made of a Date and a Time: Date is printed with dateFmt and
     Time with timeFmt, while in the other cases fullFmt is used.  For
     information on the formatting codes, see #print:time:format:on:.

print: aDate time: aTime format: aString on: aStream
     Print the specified date and time on aStream according to the
     receiver's formatting conventions, using the given format.  The
     valid abbreviations are the same used by the C function strftime:
     abbreviated weekday            (%a) weekday
        (%A) abbreviated month          (%b) month
            (%B) date & time                (%c) century
                (%C) day of the month           (%d) date (US)
            (%D) day of the month           (%e) year for the ISO week
                (%g) year for the ISO week              (%G)
     abbreviated month          (%h) hours
     (%H) hours (AM/PM)                      (%I) day of the year
                 (%j) hours                              (%k) hours
     (AM/PM)                      (%l) month
      (%m) minutes                            (%M) AM/PM
                  (%p) lowercase AM/PM                    (%P) AM/PM
     time                 (%r) time (US)                  (%R) time_t
                              (%s) seconds
     (%S) time (US)                  (%T) day of the week
         (%u) week number starting at Sun   (%U) week number starting
     at Thu   (%V) day of the week, Sunday=0     (%w) week number
     starting at Mon   (%W) date                           (%x) time
                       (%X) year (2-digit)                     (%y)
     year (4-digit)                     (%Y).



File: gst-libs.info,  Node: I18N.LcTime-tests,  Prev: I18N.LcTime-printing,  Up: I18N.LcTime

5.20.3 I18N.LcTime: tests
-------------------------

allFormatsExample
     Answer a long string that includes all the possible formats



File: gst-libs.info,  Node: I18N.Locale,  Next: I18N.LocaleConventions,  Prev: I18N.LcTime,  Up: Iconv/I18N packages

5.21 I18N.Locale
================

Defined in namespace I18N
Superclass: I18N.LocaleData
Category: i18n-Messages
     This object is an abstract superclass of objects related to the
     territory and language in which the program is being used.
     Instances of it are asked about information on the current locale,
     and provide a means to be asked for things with a common idiom,
     the #? binary message.

* Menu:

* I18N.Locale class-C call-outs::  (class)
* I18N.Locale class-initialization::  (class)
* I18N.Locale class-instance creation::  (class)
* I18N.Locale-C call-outs::  (instance)
* I18N.Locale-subobjects::  (instance)


File: gst-libs.info,  Node: I18N.Locale class-C call-outs,  Next: I18N.Locale class-initialization,  Up: I18N.Locale

5.21.1 I18N.Locale class: C call-outs
-------------------------------------

primRootDirectory
     Not commented.



File: gst-libs.info,  Node: I18N.Locale class-initialization,  Next: I18N.Locale class-instance creation,  Prev: I18N.Locale class-C call-outs,  Up: I18N.Locale

5.21.2 I18N.Locale class: initialization
----------------------------------------

rootDirectory
     Answer the directory under which locale definition files are found.

rootDirectory: aString
     Set under which directory locale definition files are found.



File: gst-libs.info,  Node: I18N.Locale class-instance creation,  Next: I18N.Locale-C call-outs,  Prev: I18N.Locale class-initialization,  Up: I18N.Locale

5.21.3 I18N.Locale class: instance creation
-------------------------------------------

default
     Answer an instance of the receiver that accesses the default
     locale.

flush
     Flush the information on locales that are not valid across an
     image save/load.

fromString: aString
     Answer an instance of the receiver that accesses the given locale
     (in the form language[_territory][.charset]).

posix
     Answer an instance of the receiver that accesses the POSIX locale.



File: gst-libs.info,  Node: I18N.Locale-C call-outs,  Next: I18N.Locale-subobjects,  Prev: I18N.Locale class-instance creation,  Up: I18N.Locale

5.21.4 I18N.Locale: C call-outs
-------------------------------

load: name
     Not commented.



File: gst-libs.info,  Node: I18N.Locale-subobjects,  Prev: I18N.Locale-C call-outs,  Up: I18N.Locale

5.21.5 I18N.Locale: subobjects
------------------------------

messages
     Answer the LcMessages object for the locale represented by the
     receiver.

monetary
     Answer the LcMonetary object for the locale represented by the
     receiver.

monetaryIso
     Answer the LcMonetaryISO object for the locale represented by the
     receiver.

numeric
     Answer the LcNumeric object for the locale represented by the
     receiver.

time
     Answer the LcTime object for the locale represented by the
     receiver.



File: gst-libs.info,  Node: I18N.LocaleConventions,  Next: I18N.LocaleData,  Prev: I18N.Locale,  Up: Iconv/I18N packages

5.22 I18N.LocaleConventions
===========================

Defined in namespace I18N
Superclass: I18N.LocaleData
Category: i18n-Messages
     I am an abstract superclass of objects that are referred to by a
     Locale object.

* Menu:

* I18N.LocaleConventions class-accessing::  (class)
* I18N.LocaleConventions-accessing::  (instance)


File: gst-libs.info,  Node: I18N.LocaleConventions class-accessing,  Next: I18N.LocaleConventions-accessing,  Up: I18N.LocaleConventions

5.22.1 I18N.LocaleConventions class: accessing
----------------------------------------------

? anObject
     Query the default object, forwarding the message to it.

default
     Answer an instance of the receiver that accesses the default
     locale.

fromString: aString
     Answer an instance of the receiver that accesses the given locale
     (in the form language[_territory][.charset]).

posix
     Answer an instance of the receiver that accesses the POSIX locale.

selector
     This method's functionality should be implemented by subclasses of
     LocaleConventions



File: gst-libs.info,  Node: I18N.LocaleConventions-accessing,  Prev: I18N.LocaleConventions class-accessing,  Up: I18N.LocaleConventions

5.22.2 I18N.LocaleConventions: accessing
----------------------------------------

? anObject
     This method's functionality should be implemented by subclasses of
     LocaleConventions



File: gst-libs.info,  Node: I18N.LocaleData,  Next: I18N.RTEAlternativeNode,  Prev: I18N.LocaleConventions,  Up: Iconv/I18N packages

5.23 I18N.LocaleData
====================

Defined in namespace I18N
Superclass: Object
Category: i18n-Messages
     I am an abstract superclass of objects that represent localization
     information.

* Menu:

* I18N.LocaleData class-accessing::  (class)
* I18N.LocaleData class-database::  (class)
* I18N.LocaleData-accessing::  (instance)
* I18N.LocaleData-initialization::  (instance)


File: gst-libs.info,  Node: I18N.LocaleData class-accessing,  Next: I18N.LocaleData class-database,  Up: I18N.LocaleData

5.23.1 I18N.LocaleData class: accessing
---------------------------------------

category
     Answer `nil'.

default
     This method's functionality should be implemented by subclasses of
     LocaleData

flush
     Flush the contents of the instances of each subclass of LocaleData.

fromString: lang
     This method's functionality should be implemented by subclasses of
     LocaleData

language: lang
     Answer the local object for the given language.

language: lang territory: territory
     Answer the local object for the given language and territory.

language: lang territory: territory charset: charset
     Answer the local object for the given language, territory and
     charset.

new
     This method should not be called for instances of this class.

posix
     This method's functionality should be implemented by subclasses of
     LocaleData

update: aspect
     Flush instances of the receiver when an image is loaded.



File: gst-libs.info,  Node: I18N.LocaleData class-database,  Next: I18N.LocaleData-accessing,  Prev: I18N.LocaleData class-accessing,  Up: I18N.LocaleData

5.23.2 I18N.LocaleData class: database
--------------------------------------

defaultCharset
     Answer the default charset used when nothing is specified.

defaultCharset: aString
     Set the default charset used when nothing is specified.

defaults
     Answer the default territory-language and language-charset
     associations.

initialize
     Initialize the receiver's class variables.

languages
     ISO639 language codes

territories
     ISO3166 territory codes



File: gst-libs.info,  Node: I18N.LocaleData-accessing,  Next: I18N.LocaleData-initialization,  Prev: I18N.LocaleData class-database,  Up: I18N.LocaleData

5.23.3 I18N.LocaleData: accessing
---------------------------------

charset
     Return the charset supported by the receiver.

id
     Return the identifier of the locale supported by the receiver.

isPosixLocale
     Answer whether the receiver implements the default POSIX behavior
     for a locale.

language
     Return the language supported by the receiver.

languageDirectory
     Answer the directory where data files for the current language
     reside.

languageDirectory: rootDirectory
     Answer the directory where data files for the current language
     reside, given the root directory of the locale data.

territory
     Return the territory supported by the receiver.

territoryDirectory
     Answer the directory where data files for the current language,
     specific to the territory, reside.

territoryDirectory: rootDirectory
     Answer the directory where data files for the current language,
     specific to the territory, reside, given the root directory of the
     locale data.



File: gst-libs.info,  Node: I18N.LocaleData-initialization,  Prev: I18N.LocaleData-accessing,  Up: I18N.LocaleData

5.23.4 I18N.LocaleData: initialization
--------------------------------------

id: anArray
     Private - Set which locale the receiver contains data for

initialize: aString
     Set which locale the receiver contains data for, starting from a
     string describing the locale.



File: gst-libs.info,  Node: I18N.RTEAlternativeNode,  Next: I18N.RTEBinaryNode,  Prev: I18N.LocaleData,  Up: Iconv/I18N packages

5.24 I18N.RTEAlternativeNode
============================

Defined in namespace I18N
Superclass: I18N.RunTimeExpression
Category: i18n-Messages

* Menu:

* I18N.RTEAlternativeNode class-compiling::  (class)
* I18N.RTEAlternativeNode-computing::  (instance)


File: gst-libs.info,  Node: I18N.RTEAlternativeNode class-compiling,  Next: I18N.RTEAlternativeNode-computing,  Up: I18N.RTEAlternativeNode

5.24.1 I18N.RTEAlternativeNode class: compiling
-----------------------------------------------

condition: cond ifTrue: trueNode ifFalse: falseNode
     Private - Create a node in the parse tree for the run-time
     expression, mapping s to a Smalltalk arithmetic selector



File: gst-libs.info,  Node: I18N.RTEAlternativeNode-computing,  Prev: I18N.RTEAlternativeNode class-compiling,  Up: I18N.RTEAlternativeNode

5.24.2 I18N.RTEAlternativeNode: computing
-----------------------------------------

condition: condNode ifTrue: trueNode ifFalse: falseNode
     Initialize the children of the receiver and the conditional
     expression to choose between them

printOn: aStream
     Print a representation of the receiver on aStream

send: parameter
     Evaluate the receiver by conditionally choosing one of its children
     and evaluating it



File: gst-libs.info,  Node: I18N.RTEBinaryNode,  Next: I18N.RTELiteralNode,  Prev: I18N.RTEAlternativeNode,  Up: Iconv/I18N packages

5.25 I18N.RTEBinaryNode
=======================

Defined in namespace I18N
Superclass: I18N.RunTimeExpression
Category: i18n-Messages

* Menu:

* I18N.RTEBinaryNode class-compiling::  (class)
* I18N.RTEBinaryNode-compiling::  (instance)
* I18N.RTEBinaryNode-computing::  (instance)


File: gst-libs.info,  Node: I18N.RTEBinaryNode class-compiling,  Next: I18N.RTEBinaryNode-compiling,  Up: I18N.RTEBinaryNode

5.25.1 I18N.RTEBinaryNode class: compiling
------------------------------------------

lhs: lhs op: op rhs: rhs
     Private - Create a node in the parse tree for the run-time
     expression, mapping s to a Smalltalk arithmetic selector



File: gst-libs.info,  Node: I18N.RTEBinaryNode-compiling,  Next: I18N.RTEBinaryNode-computing,  Prev: I18N.RTEBinaryNode class-compiling,  Up: I18N.RTEBinaryNode

5.25.2 I18N.RTEBinaryNode: compiling
------------------------------------

lhs
     Answer `lhs'.

op
     Answer `op'.

rhs
     Answer `rhs'.



File: gst-libs.info,  Node: I18N.RTEBinaryNode-computing,  Prev: I18N.RTEBinaryNode-compiling,  Up: I18N.RTEBinaryNode

5.25.3 I18N.RTEBinaryNode: computing
------------------------------------

lhs: lhsNode op: aSymbol rhs: rhsNode
     Initialize the children of the receiver and the operation to be
     done between them

printOn: aStream
     Print a representation of the receiver on aStream

send: parameter
     Private - Evaluate the receiver by evaluating both children and
     performing an arithmetic operation between them.



File: gst-libs.info,  Node: I18N.RTELiteralNode,  Next: I18N.RTENegationNode,  Prev: I18N.RTEBinaryNode,  Up: Iconv/I18N packages

5.26 I18N.RTELiteralNode
========================

Defined in namespace I18N
Superclass: I18N.RunTimeExpression
Category: i18n-Messages

* Menu:

* I18N.RTELiteralNode class-initializing::  (class)
* I18N.RTELiteralNode-computing::  (instance)


File: gst-libs.info,  Node: I18N.RTELiteralNode class-initializing,  Next: I18N.RTELiteralNode-computing,  Up: I18N.RTELiteralNode

5.26.1 I18N.RTELiteralNode class: initializing
----------------------------------------------

parseFrom: aStream
     Parse a literal number from aStream and return a new node



File: gst-libs.info,  Node: I18N.RTELiteralNode-computing,  Prev: I18N.RTELiteralNode class-initializing,  Up: I18N.RTELiteralNode

5.26.2 I18N.RTELiteralNode: computing
-------------------------------------

n: value
     Set the value of the literal that the node represents

printOn: aStream
     Print a representation of the receiver on aStream

send: parameter
     Answer a fixed value, the literal encoded in the node



File: gst-libs.info,  Node: I18N.RTENegationNode,  Next: I18N.RTEParameterNode,  Prev: I18N.RTELiteralNode,  Up: Iconv/I18N packages

5.27 I18N.RTENegationNode
=========================

Defined in namespace I18N
Superclass: I18N.RunTimeExpression
Category: i18n-Messages

* Menu:

* I18N.RTENegationNode class-initializing::  (class)
* I18N.RTENegationNode-computing::  (instance)


File: gst-libs.info,  Node: I18N.RTENegationNode class-initializing,  Next: I18N.RTENegationNode-computing,  Up: I18N.RTENegationNode

5.27.1 I18N.RTENegationNode class: initializing
-----------------------------------------------

child: aNode
     Answer a new node representing the logical negation of aNode



File: gst-libs.info,  Node: I18N.RTENegationNode-computing,  Prev: I18N.RTENegationNode class-initializing,  Up: I18N.RTENegationNode

5.27.2 I18N.RTENegationNode: computing
--------------------------------------

child: value
     Set the child of which the receiver will compute the negation

printOn: aStream
     Print a representation of the receiver on aStream

send: parameter
     Evaluate the receiver by computing the child's logical negation



File: gst-libs.info,  Node: I18N.RTEParameterNode,  Next: I18N.RunTimeExpression,  Prev: I18N.RTENegationNode,  Up: Iconv/I18N packages

5.28 I18N.RTEParameterNode
==========================

Defined in namespace I18N
Superclass: I18N.RunTimeExpression
Category: i18n-Messages

* Menu:

* I18N.RTEParameterNode-computing::  (instance)


File: gst-libs.info,  Node: I18N.RTEParameterNode-computing,  Up: I18N.RTEParameterNode

5.28.1 I18N.RTEParameterNode: computing
---------------------------------------

printOn: aStream
     Print a representation of the receiver on aStream

send: parameter
     Evaluate the receiver by answering the parameter



File: gst-libs.info,  Node: I18N.RunTimeExpression,  Prev: I18N.RTEParameterNode,  Up: Iconv/I18N packages

5.29 I18N.RunTimeExpression
===========================

Defined in namespace I18N
Superclass: Object
Category: i18n-Messages

* Menu:

* I18N.RunTimeExpression class-compiling::  (class)
* I18N.RunTimeExpression class-initializing::  (class)
* I18N.RunTimeExpression class-instance creation::  (class)
* I18N.RunTimeExpression-computing::  (instance)


File: gst-libs.info,  Node: I18N.RunTimeExpression class-compiling,  Next: I18N.RunTimeExpression class-initializing,  Up: I18N.RunTimeExpression

5.29.1 I18N.RunTimeExpression class: compiling
----------------------------------------------

parseExpression: stream
     Private - Compile the expression in the stream

parseOperand: stream
     Parse an operand from the stream (i.e. an unary negation, a
     parenthesized subexpression, `n' or a number) and answer the
     corresponding parse node.

parseOperator: stream
     Answer a Symbol for an operator read from stream, or nil if
     something else is found.



File: gst-libs.info,  Node: I18N.RunTimeExpression class-initializing,  Next: I18N.RunTimeExpression class-instance creation,  Prev: I18N.RunTimeExpression class-compiling,  Up: I18N.RunTimeExpression

5.29.2 I18N.RunTimeExpression class: initializing
-------------------------------------------------

initialize
     Private - Initialize internal tables for the parser



File: gst-libs.info,  Node: I18N.RunTimeExpression class-instance creation,  Next: I18N.RunTimeExpression-computing,  Prev: I18N.RunTimeExpression class-initializing,  Up: I18N.RunTimeExpression

5.29.3 I18N.RunTimeExpression class: instance creation
------------------------------------------------------

on: aString
     Compile aString and answer a RunTimeExpression



File: gst-libs.info,  Node: I18N.RunTimeExpression-computing,  Prev: I18N.RunTimeExpression class-instance creation,  Up: I18N.RunTimeExpression

5.29.4 I18N.RunTimeExpression: computing
----------------------------------------

send: parameter
     This method's functionality should be implemented by subclasses of
     RunTimeExpression

value: parameter
     Evaluate the receiver, and answer its value as an integer



File: gst-libs.info,  Node: Sockets package,  Next: Iconv/I18N packages,  Prev: DebugTools package,  Up: Top

6 Network programming with Sockets
**********************************

* Menu:


Alphabetic list:
* Sockets.AbstractSocket::
* Sockets.AbstractSocketImpl::
* Sockets.CAddrInfoStruct::
* Sockets.CSockAddrIn6Struct::
* Sockets.Datagram::
* Sockets.DatagramSocket::
* Sockets.DatagramSocketImpl::
* Sockets.DummyStream::
* Sockets.ICMP6SocketImpl::
* Sockets.ICMPSocketImpl::
* Sockets.IP6Address::
* Sockets.IPAddress::
* Sockets.MulticastSocket::
* Sockets.MulticastSocketImpl::
* Sockets.OOBSocketImpl::
* Sockets.RawSocketImpl::
* Sockets.ReadBuffer::
* Sockets.ServerSocket::
* Sockets.Socket::
* Sockets.SocketAddress::
* Sockets.SocketImpl::
* Sockets.StreamSocket::
* Sockets.TCPSocketImpl::
* Sockets.UDPSocketImpl::
* Sockets.UnixAddress::
* Sockets.UnixDatagramSocketImpl::
* Sockets.UnixSocketImpl::
* Sockets.WriteBuffer::


Class tree:
  (Object)
    (CObject)
      (CCompound)
        (CStruct)
*         Sockets.CAddrInfoStruct::
*         Sockets.CSockAddrIn6Struct::
    (Iterable)
      (Stream)
        (FileDescriptor)
*         Sockets.AbstractSocketImpl::
*           Sockets.DatagramSocketImpl::
*             Sockets.MulticastSocketImpl::
*               Sockets.UDPSocketImpl::
*             Sockets.OOBSocketImpl::
*             Sockets.RawSocketImpl::
*               Sockets.ICMP6SocketImpl::
*               Sockets.ICMPSocketImpl::
*             Sockets.UnixDatagramSocketImpl::
*           Sockets.SocketImpl::
*             Sockets.TCPSocketImpl::
*             Sockets.UnixSocketImpl::
        (PositionableStream)
          (ReadStream)
*           Sockets.ReadBuffer::
          (WriteStream)
*           Sockets.WriteBuffer::
*       Sockets.AbstractSocket::
*         Sockets.DatagramSocket::
*           Sockets.MulticastSocket::
*         Sockets.ServerSocket::
*         Sockets.StreamSocket::
*           Sockets.Socket::
*       Sockets.DummyStream::
*   Sockets.Datagram::
*   Sockets.SocketAddress::
*     Sockets.IP6Address::
*     Sockets.IPAddress::
*     Sockets.UnixAddress::


File: gst-libs.info,  Node: Sockets.AbstractSocket,  Next: Sockets.AbstractSocketImpl,  Up: Sockets package

6.1 Sockets.AbstractSocket
==========================

Defined in namespace Sockets
Superclass: Stream
Category: Sockets-Streams
     This class models a client site socket.  A socket is a TCP/IP
     endpoint for network communications conceptually similar to a file
     handle.

     This class only takes care of buffering and blocking if requested.
     It uses an underlying socket implementation object which is a
     subclass of AbstractSocketImpl.  This is necessary to hide some
     methods in FileDescriptor that are not relevant to sockets, as
     well as to implement buffering independently of the implementation
     nuances required by the different address families.  The address
     family class (a subclass of SocketAddress) acts as a factory for
     socket implementation objects.

* Menu:

* Sockets.AbstractSocket class-defaults::  (class)
* Sockets.AbstractSocket class-instance creation::  (class)
* Sockets.AbstractSocket class-timed-out operations::  (class)
* Sockets.AbstractSocket class-well known ports::  (class)
* Sockets.AbstractSocket-accessing::  (instance)
* Sockets.AbstractSocket-printing::  (instance)
* Sockets.AbstractSocket-socket options::  (instance)
* Sockets.AbstractSocket-stream protocol::  (instance)
* Sockets.AbstractSocket-testing::  (instance)


File: gst-libs.info,  Node: Sockets.AbstractSocket class-defaults,  Next: Sockets.AbstractSocket class-instance creation,  Up: Sockets.AbstractSocket

6.1.1 Sockets.AbstractSocket class: defaults
--------------------------------------------

defaultAddressClass
     Answer the default address family to be used.  In the library, the
     address family is represented by a subclass of SocketAddress which
     is by default IPAddress.

defaultAddressClass: class
     Set the default address family to be used.  In the library, the
     address family is represented by a subclass of SocketAddress which
     is by default IPAddress.

defaultImplementationClassFor: aSocketAddressClass
     Answer the default implementation class.  Depending on the
     subclass, this might be the default stream socket implementation
     class of the given address class, or rather its default datagram
     socket implementation class.



File: gst-libs.info,  Node: Sockets.AbstractSocket class-instance creation,  Next: Sockets.AbstractSocket class-timed-out operations,  Prev: Sockets.AbstractSocket class-defaults,  Up: Sockets.AbstractSocket

6.1.2 Sockets.AbstractSocket class: instance creation
-----------------------------------------------------

new
     This method should not be called for instances of this class.

new: implementation
     Answer a new instance of the receiver, using as the underlying
     layer the object passed as the `implementation' parameter; the
     object is probably going to be some kind of AbstractSocketImpl.

new: implClass addressClass: addressClass
     Answer a new instance of the receiver, using as the underlying
     layer a new instance of `implementationClass' and using the
     protocol family of `addressClass'.



File: gst-libs.info,  Node: Sockets.AbstractSocket class-timed-out operations,  Next: Sockets.AbstractSocket class-well known ports,  Prev: Sockets.AbstractSocket class-instance creation,  Up: Sockets.AbstractSocket

6.1.3 Sockets.AbstractSocket class: timed-out operations
--------------------------------------------------------

checkPeriod
     Answer the period that is to elapse between socket polls if data
     data is not ready and the connection is still open (in
     milliseconds)

checkPeriod: anInteger
     Set the period that is to elapse between socket polls if data data
     is not ready and the connection is still open (in milliseconds)

timeout
     Answer the period that is to elapse between the request for (yet
     unavailable) data and the moment when the connection is considered
     dead (in milliseconds)

timeout: anInteger
     Set the period that is to elapse between the request for (yet
     unavailable) data and the moment when the connection is considered
     dead (in milliseconds)



@c Define the class index, method index, and selector cross-reference
@ifclear CLASS-INDICES
@set CLASS-INDICES
@defindex cl
@defcodeindex me
@defcodeindex sl 
@end ifclear

@c These are used for both TeX and HTML
@set BEFORE1
@set  AFTER1
@set BEFORE2
@set  AFTER2

@ifinfo
@c Use asis so that leading and trailing spaces are meaningful.
@c Remember we're inside a @menu command, hence the blanks are
@c kept in the output.
@set BEFORE1 @asis{* }
@set  AFTER1 @asis{::}
@set BEFORE2 @asis{  (}
@set  AFTER2 @asis{)}
@end ifinfo

@macro class {a,b}
@value{BEFORE1}\a\\a\@b{\b\}@value{AFTER1}
@end macro
@macro superclass {a,b}
\a\\a\@value{BEFORE2}@i{\b\}@value{AFTER2}
@end macro

@ifnotinfo
@macro begindetailmenu
@display
@end macro
@macro enddetailmenu
@end display
@end macro
@end ifnotinfo

@ifinfo
@macro begindetailmenu
@detailmenu
@end macro
@macro enddetailmenu
@end detailmenu
@end macro
@end ifinfo

@iftex
@macro beginmenu
@end macro
@macro endmenu
@end macro
@end iftex

@ifnottex
@macro beginmenu
@menu
@end macro
@macro endmenu
@end menu
@end macro
@end ifnottex

@beginmenu
@ifnottex
Alphabetic list:
* AbstractNamespace::
* AlternativeObjectProxy::
* ArithmeticError::
* Array::
* ArrayedCollection::
* Association::
* Autoload::
* Bag::
* Behavior::
* BindingDictionary::
* BlockClosure::
* BlockContext::
* Boolean::
* ByteArray::
* CAggregate::
* CallinProcess::
* CArray::
* CArrayCType::
* CBoolean::
* CByte::
* CCallable::
* CCallbackDescriptor::
* CChar::
* CCompound::
* CDouble::
* CFloat::
* CFunctionDescriptor::
* Character::
* CharacterArray::
* CInt::
* Class::
* ClassDescription::
* CLong::
* CLongDouble::
* CLongLong::
* CObject::
* Collection::
* CompiledBlock::
* CompiledCode::
* CompiledMethod::
* ContextPart::
* Continuation::
* CPtr::
* CPtrCType::
* CScalar::
* CScalarCType::
* CShort::
* CSmalltalk::
* CString::
* CStringCType::
* CStruct::
* CType::
* CUChar::
* CUInt::
* CULong::
* CULongLong::
* CUnion::
* CUShort::
* Date::
* DateTime::
* DeferredVariableBinding::
* Delay::
* DelayedAdaptor::
* Dictionary::
* DirectedMessage::
* Directory::
* DLD::
* DumperProxy::
* Duration::
* DynamicVariable::
* Error::
* Exception::
* ExceptionSet::
* False::
* File::
* FileDescriptor::
* FilePath::
* FileSegment::
* FileStream::
* Float::
* FloatD::
* FloatE::
* FloatQ::
* Fraction::
* Generator::
* Getopt::
* Halt::
* HashedCollection::
* HomedAssociation::
* IdentityDictionary::
* IdentitySet::
* Integer::
* Interval::
* Iterable::
* LargeArray::
* LargeArrayedCollection::
* LargeByteArray::
* LargeInteger::
* LargeNegativeInteger::
* LargePositiveInteger::
* LargeWordArray::
* LargeZeroInteger::
* Link::
* LinkedList::
* LookupKey::
* LookupTable::
* Magnitude::
* MappedCollection::
* Memory::
* Message::
* MessageNotUnderstood::
* Metaclass::
* MethodContext::
* MethodDictionary::
* MethodInfo::
* Namespace::
* NetClients.URIResolver::
* NetClients.URL::
* Notification::
* NullProxy::
* NullValueHolder::
* Number::
* Object::
* ObjectDumper::
* ObjectMemory::
* OrderedCollection::
* Package::
* PackageLoader::
* Permission::
* PluggableAdaptor::
* PluggableProxy::
* Point::
* PositionableStream::
* Process::
* ProcessEnvironment::
* ProcessorScheduler::
* ProcessVariable::
* Promise::
* Random::
* ReadStream::
* ReadWriteStream::
* Rectangle::
* RecursionLock::
* Regex::
* RegexResults::
* RootNamespace::
* RunArray::
* ScaledDecimal::
* SecurityPolicy::
* Semaphore::
* SequenceableCollection::
* Set::
* SharedQueue::
* SingletonProxy::
* SmallInteger::
* SortedCollection::
* Stream::
* String::
* Symbol::
* SymLink::
* SystemDictionary::
* SystemExceptions.AlreadyDefined::
* SystemExceptions.ArgumentOutOfRange::
* SystemExceptions.BadReturn::
* SystemExceptions.CInterfaceError::
* SystemExceptions.EmptyCollection::
* SystemExceptions.EndOfStream::
* SystemExceptions.FileError::
* SystemExceptions.IndexOutOfRange::
* SystemExceptions.InvalidArgument::
* SystemExceptions.InvalidProcessState::
* SystemExceptions.InvalidSize::
* SystemExceptions.InvalidState::
* SystemExceptions.InvalidValue::
* SystemExceptions.MustBeBoolean::
* SystemExceptions.MutationError::
* SystemExceptions.NoRunnableProcess::
* SystemExceptions.NotEnoughElements::
* SystemExceptions.NotFound::
* SystemExceptions.NotImplemented::
* SystemExceptions.NotIndexable::
* SystemExceptions.NotYetImplemented::
* SystemExceptions.PackageNotAvailable::
* SystemExceptions.PrimitiveFailed::
* SystemExceptions.ProcessBeingTerminated::
* SystemExceptions.ProcessTerminated::
* SystemExceptions.ReadOnlyObject::
* SystemExceptions.SecurityError::
* SystemExceptions.ShouldNotImplement::
* SystemExceptions.SubclassResponsibility::
* SystemExceptions.UnhandledException::
* SystemExceptions.UserInterrupt::
* SystemExceptions.VerificationError::
* SystemExceptions.VMError::
* SystemExceptions.WrongArgumentCount::
* SystemExceptions.WrongClass::
* SystemExceptions.WrongMessageSent::
* TextCollector::
* Time::
* True::
* UndefinedObject::
* UnicodeCharacter::
* UnicodeString::
* ValueAdaptor::
* ValueHolder::
* VariableBinding::
* VersionableObjectProxy::
* VFS.ArchiveFile::
* VFS.ArchiveMember::
* VFS.FileWrapper::
* VFS.StoredZipMember::
* VFS.TmpFileArchiveMember::
* VFS.ZipFile::
* Warning::
* WeakArray::
* WeakIdentitySet::
* WeakKeyDictionary::
* WeakKeyIdentityDictionary::
* WeakSet::
* WeakValueIdentityDictionary::
* WeakValueLookupTable::
* WordArray::
* WriteStream::
* ZeroDivide::
@end ifnottex

@ifinfo
Class tree:
@end ifinfo
@iftex
@section Tree
@end iftex
@ifnotinfo

Classes documented in this manual are @b{boldfaced}.

@end ifnotinfo
@begindetailmenu
@class{@t{}, Autoload}
@class{@t{}, Object}
@class{@t{ }, Behavior}
@class{@t{  }, ClassDescription}
@class{@t{   }, Class}
@class{@t{   }, Metaclass}
@class{@t{ }, BlockClosure}
@class{@t{ }, Boolean}
@class{@t{  }, False}
@class{@t{  }, True}
@class{@t{ }, CObject}
@class{@t{  }, CAggregate}
@class{@t{   }, CArray}
@class{@t{   }, CPtr}
@class{@t{    }, CString}
@class{@t{  }, CCallable}
@class{@t{   }, CCallbackDescriptor}
@class{@t{   }, CFunctionDescriptor}
@class{@t{  }, CCompound}
@class{@t{   }, CStruct}
@class{@t{   }, CUnion}
@class{@t{  }, CScalar}
@class{@t{   }, CChar}
@class{@t{   }, CDouble}
@class{@t{   }, CFloat}
@class{@t{   }, CInt}
@class{@t{   }, CLong}
@class{@t{   }, CLongDouble}
@class{@t{   }, CLongLong}
@class{@t{   }, CShort}
@class{@t{   }, CSmalltalk}
@class{@t{   }, CUChar}
@class{@t{    }, CByte}
@class{@t{     }, CBoolean}
@class{@t{   }, CUInt}
@class{@t{   }, CULong}
@class{@t{   }, CULongLong}
@class{@t{   }, CUShort}
@class{@t{ }, ContextPart}
@class{@t{  }, BlockContext}
@class{@t{  }, MethodContext}
@class{@t{ }, Continuation}
@class{@t{ }, CType}
@class{@t{  }, CPtrCType}
@class{@t{   }, CArrayCType}
@class{@t{  }, CScalarCType}
@class{@t{   }, CStringCType}
@class{@t{ }, Delay}
@class{@t{ }, Directory}
@class{@t{ }, DLD}
@class{@t{ }, DumperProxy}
@class{@t{  }, AlternativeObjectProxy}
@class{@t{   }, NullProxy}
@class{@t{    }, VersionableObjectProxy}
@class{@t{   }, PluggableProxy}
@class{@t{   }, SingletonProxy}
@class{@t{ }, DynamicVariable}
@class{@t{ }, Exception}
@class{@t{  }, Error}
@class{@t{   }, ArithmeticError}
@class{@t{    }, ZeroDivide}
@class{@t{   }, MessageNotUnderstood}
@class{@t{   }, SystemExceptions.InvalidValue}
@class{@t{    }, SystemExceptions.EmptyCollection}
@class{@t{    }, SystemExceptions.InvalidArgument}
@class{@t{     }, SystemExceptions.AlreadyDefined}
@class{@t{     }, SystemExceptions.ArgumentOutOfRange}
@class{@t{      }, SystemExceptions.IndexOutOfRange}
@class{@t{     }, SystemExceptions.InvalidSize}
@class{@t{     }, SystemExceptions.NotFound}
@class{@t{      }, SystemExceptions.PackageNotAvailable}
@class{@t{    }, SystemExceptions.InvalidProcessState}
@class{@t{    }, SystemExceptions.InvalidState}
@class{@t{    }, SystemExceptions.NotIndexable}
@class{@t{    }, SystemExceptions.ProcessTerminated}
@class{@t{    }, SystemExceptions.ReadOnlyObject}
@class{@t{    }, SystemExceptions.WrongClass}
@class{@t{     }, SystemExceptions.MustBeBoolean}
@class{@t{   }, SystemExceptions.MutationError}
@class{@t{   }, SystemExceptions.NotEnoughElements}
@class{@t{   }, SystemExceptions.NotImplemented}
@class{@t{    }, SystemExceptions.NotYetImplemented}
@class{@t{    }, SystemExceptions.ShouldNotImplement}
@class{@t{     }, SystemExceptions.SubclassResponsibility}
@class{@t{     }, SystemExceptions.WrongMessageSent}
@class{@t{   }, SystemExceptions.VMError}
@class{@t{    }, SystemExceptions.BadReturn}
@class{@t{    }, SystemExceptions.NoRunnableProcess}
@class{@t{    }, SystemExceptions.PrimitiveFailed}
@class{@t{     }, SystemExceptions.CInterfaceError}
@class{@t{     }, SystemExceptions.FileError}
@class{@t{     }, SystemExceptions.WrongArgumentCount}
@class{@t{    }, SystemExceptions.SecurityError}
@class{@t{    }, SystemExceptions.UserInterrupt}
@class{@t{    }, SystemExceptions.VerificationError}
@class{@t{  }, Halt}
@class{@t{  }, Notification}
@class{@t{   }, SystemExceptions.EndOfStream}
@class{@t{   }, SystemExceptions.ProcessBeingTerminated}
@class{@t{   }, Warning}
@class{@t{  }, SystemExceptions.UnhandledException}
@class{@t{ }, ExceptionSet}
@class{@t{ }, FilePath}
@class{@t{  }, File}
@class{@t{  }, VFS.ArchiveMember}
@class{@t{   }, VFS.TmpFileArchiveMember}
@class{@t{    }, VFS.StoredZipMember}
@class{@t{  }, VFS.FileWrapper}
@class{@t{   }, VFS.ArchiveFile}
@class{@t{    }, VFS.ZipFile}
@class{@t{ }, FileSegment}
@class{@t{ }, Getopt}
@class{@t{ }, Iterable}
@class{@t{  }, Collection}
@class{@t{   }, Bag}
@class{@t{   }, HashedCollection}
@class{@t{    }, Dictionary}
@class{@t{     }, BindingDictionary}
@class{@t{      }, AbstractNamespace}
@class{@t{       }, Namespace}
@class{@t{       }, RootNamespace}
@class{@t{        }, SystemDictionary}
@class{@t{     }, LookupTable}
@class{@t{      }, IdentityDictionary}
@class{@t{       }, MethodDictionary}
@class{@t{      }, WeakValueLookupTable}
@class{@t{       }, WeakValueIdentityDictionary}
@class{@t{     }, WeakKeyDictionary}
@class{@t{      }, WeakKeyIdentityDictionary}
@class{@t{    }, Set}
@class{@t{     }, IdentitySet}
@class{@t{     }, WeakSet}
@class{@t{      }, WeakIdentitySet}
@class{@t{   }, MappedCollection}
@class{@t{   }, SequenceableCollection}
@class{@t{    }, ArrayedCollection}
@class{@t{     }, Array}
@class{@t{      }, WeakArray}
@class{@t{     }, ByteArray}
@class{@t{     }, CharacterArray}
@class{@t{      }, String}
@class{@t{       }, Symbol}
@class{@t{      }, UnicodeString}
@class{@t{     }, CompiledCode}
@class{@t{      }, CompiledBlock}
@class{@t{      }, CompiledMethod}
@class{@t{     }, Interval}
@class{@t{     }, LargeArrayedCollection}
@class{@t{      }, LargeArray}
@class{@t{      }, LargeByteArray}
@class{@t{      }, LargeWordArray}
@class{@t{     }, WordArray}
@class{@t{    }, LinkedList}
@class{@t{     }, Semaphore}
@class{@t{    }, OrderedCollection}
@class{@t{     }, RunArray}
@class{@t{     }, SortedCollection}
@class{@t{  }, Stream}
@class{@t{   }, FileDescriptor}
@class{@t{    }, FileStream}
@class{@t{   }, Generator}
@class{@t{   }, ObjectDumper}
@class{@t{   }, PositionableStream}
@class{@t{    }, ReadStream}
@class{@t{    }, WriteStream}
@class{@t{     }, ReadWriteStream}
@class{@t{   }, Random}
@class{@t{   }, TextCollector}
@superclass{@t{ }, Kernel.PackageInfo}
@class{@t{  }, Package}
@class{@t{ }, Link}
@class{@t{  }, Process}
@class{@t{   }, CallinProcess}
@class{@t{  }, SymLink}
@class{@t{ }, Magnitude}
@class{@t{  }, Character}
@class{@t{   }, UnicodeCharacter}
@class{@t{  }, Date}
@class{@t{   }, DateTime}
@class{@t{  }, LookupKey}
@class{@t{   }, Association}
@class{@t{    }, HomedAssociation}
@class{@t{     }, VariableBinding}
@class{@t{   }, DeferredVariableBinding}
@class{@t{   }, ProcessVariable}
@class{@t{  }, Number}
@class{@t{   }, Float}
@class{@t{    }, FloatD}
@class{@t{    }, FloatE}
@class{@t{    }, FloatQ}
@class{@t{   }, Fraction}
@class{@t{   }, Integer}
@class{@t{    }, LargeInteger}
@class{@t{     }, LargeNegativeInteger}
@class{@t{     }, LargePositiveInteger}
@class{@t{      }, LargeZeroInteger}
@class{@t{    }, SmallInteger}
@class{@t{   }, ScaledDecimal}
@class{@t{  }, Time}
@class{@t{   }, Duration}
@class{@t{ }, Memory}
@class{@t{ }, Message}
@class{@t{  }, DirectedMessage}
@class{@t{ }, MethodInfo}
@class{@t{ }, NetClients.URIResolver}
@class{@t{ }, NetClients.URL}
@class{@t{ }, ObjectMemory}
@class{@t{ }, PackageLoader}
@class{@t{ }, Permission}
@class{@t{ }, Point}
@class{@t{ }, ProcessEnvironment}
@class{@t{ }, ProcessorScheduler}
@class{@t{ }, Rectangle}
@class{@t{ }, RecursionLock}
@class{@t{ }, Regex}
@class{@t{ }, RegexResults}
@class{@t{ }, SecurityPolicy}
@class{@t{ }, SharedQueue}
@class{@t{ }, UndefinedObject}
@class{@t{ }, ValueAdaptor}
@class{@t{  }, NullValueHolder}
@class{@t{  }, PluggableAdaptor}
@class{@t{   }, DelayedAdaptor}
@class{@t{  }, ValueHolder}
@class{@t{   }, Promise}
@enddetailmenu
@endmenu
@unmacro class
@unmacro superclass
@unmacro endmenu
@unmacro beginmenu
@unmacro enddetailmenu
@unmacro begindetailmenu
@node AbstractNamespace
@section AbstractNamespace
@clindex AbstractNamespace

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: BindingDictionary
@itemx Category: Language-Implementation
I am a special form of dictionary.  Classes hold on
an instance of me; it is called their `environment'. 
@end table

@menu
* AbstractNamespace class-instance creation::  (class)
* AbstractNamespace-accessing::  (instance)
* AbstractNamespace-compiling::  (instance)
* AbstractNamespace-copying::  (instance)
* AbstractNamespace-namespace hierarchy::  (instance)
* AbstractNamespace-overrides for superspaces::  (instance)
* AbstractNamespace-printing::  (instance)
* AbstractNamespace-testing::  (instance)
@end menu



@node AbstractNamespace class-instance creation
@subsection AbstractNamespace class:@- instance creation

@table @b
@meindex new
@slindex new
@item new
Disabled - use #new to create instances


@meindex primNew:@-name:@-
@item primNew:@- parent name:@- spaceName
Private - Create a new namespace with the given name and parent, and
add to the parent a key that references it.


@end table



@node AbstractNamespace-accessing
@subsection AbstractNamespace:@- accessing

@table @b
@meindex allAssociations
@item allAssociations
Answer a Dictionary with all of the associations in the receiver
and each of its superspaces (duplicate keys are associated to the
associations that are deeper in the namespace hierarchy)


@meindex allBehaviorsDo:@-
@item allBehaviorsDo:@- aBlock
Evaluate aBlock once for each class and metaclass in the namespace.


@meindex allClassObjectsDo:@-
@item allClassObjectsDo:@- aBlock
Evaluate aBlock once for each class and metaclass in the namespace.


@meindex allClassesDo:@-
@item allClassesDo:@- aBlock
Evaluate aBlock once for each class in the namespace.


@meindex allMetaclassesDo:@-
@item allMetaclassesDo:@- aBlock
Evaluate aBlock once for each metaclass in the namespace.


@meindex classAt:@-
@item classAt:@- aKey
Answer the value corrisponding to aKey if it is a class. Fail
if either aKey is not found or it is associated to something different
from a class.


@meindex classAt:@-ifAbsent:@-
@item classAt:@- aKey ifAbsent:@- aBlock
Answer the value corrisponding to aKey if it is a class. Evaluate
aBlock and answer its result if either aKey is not found or it is
associated to something different from a class.


@end table



@node AbstractNamespace-compiling
@subsection AbstractNamespace:@- compiling

@table @b
@meindex addSharedPool:@-
@item addSharedPool:@- aDictionary
Import the given bindings for classes compiled with me as
environment.


@meindex import:@-
@item import:@- aDictionary
Import the given bindings for classes compiled with me as
environment.


@meindex removeSharedPool:@-
@item removeSharedPool:@- aDictionary
Remove aDictionary from my list of direct pools.


@meindex sharedPoolDictionaries
@item sharedPoolDictionaries
Answer the shared pools (not names) imported for my classes.


@end table



@node AbstractNamespace-copying
@subsection AbstractNamespace:@- copying

@table @b
@meindex copyEmpty:@-
@item copyEmpty:@- newSize
Answer an empty copy of the receiver whose size is newSize


@meindex whileCurrentDo:@-
@item whileCurrentDo:@- aBlock
Evaluate aBlock with the current namespace set to the receiver.
Answer the result of the evaluation.


@end table



@node AbstractNamespace-namespace hierarchy
@subsection AbstractNamespace:@- namespace hierarchy

@table @b
@meindex addSubspace:@-
@item addSubspace:@- aSymbol
Create a namespace named aSymbol, add it to the receiver's
subspaces, and answer it.


@meindex allSubassociationsDo:@-
@item allSubassociationsDo:@- aBlock
Invokes aBlock once for every association in each of the receiver's
subspaces.


@meindex allSubspaces
@item allSubspaces
Answer the direct and indirect subspaces of the receiver in a Set


@meindex allSubspacesDo:@-
@item allSubspacesDo:@- aBlock
Invokes aBlock for all subspaces, both direct and indirect.


@meindex allSuperspacesDo:@-
@item allSuperspacesDo:@- aBlock
Evaluate aBlock once for each of the receiver's superspaces


@meindex includesClassNamed:@-
@slindex includesKey:@-
@slindex includesGlobalNamed:@-
@item includesClassNamed:@- aString
Answer whether the receiver or any of its superspaces include the
given class -- note that this method (unlike #includesKey:@-) does not
require aString to be interned and (unlike #includesGlobalNamed:@-) only
returns true if the global is a class object.


@meindex includesGlobalNamed:@-
@slindex includesKey:@-
@slindex includesClassNamed:@-
@item includesGlobalNamed:@- aString
Answer whether the receiver or any of its superspaces include the
given key -- note that this method (unlike #includesKey:@-) does not
require aString to be interned but (unlike #includesClassNamed:@-)
returns true even if the global is not a class object.


@meindex removeSubspace:@-
@item removeSubspace:@- aSymbol
Remove my subspace named aSymbol from the hierarchy.


@meindex selectSubspaces:@-
@item selectSubspaces:@- aBlock
Return a Set of subspaces of the receiver satisfying aBlock.


@meindex selectSuperspaces:@-
@item selectSuperspaces:@- aBlock
Return a Set of superspaces of the receiver satisfying aBlock.


@meindex siblings
@item siblings
Answer all the other children of the same namespace as the receiver.


@meindex siblingsDo:@-
@item siblingsDo:@- aBlock
Evaluate aBlock once for each of the other root namespaces,
passing the namespace as a parameter.


@meindex subspaces
@item subspaces
Answer the receiver's direct subspaces


@meindex subspacesDo:@-
@item subspacesDo:@- aBlock
Invokes aBlock for all direct subspaces.


@meindex superspace
@item superspace
Answer the receiver's superspace.


@meindex superspace:@-
@item superspace:@- aNamespace
Set the superspace of the receiver to be 'aNamespace'.  Also
adds the receiver as a subspace of it.


@meindex withAllSubspaces
@item withAllSubspaces
Answer a Set containing the receiver together with its direct and
indirect subspaces


@meindex withAllSubspacesDo:@-
@item withAllSubspacesDo:@- aBlock
Invokes aBlock for the receiver and all subclasses, both direct
and indirect.


@end table



@node AbstractNamespace-overrides for superspaces
@subsection AbstractNamespace:@- overrides for superspaces

@table @b
@meindex inheritedKeys
@item inheritedKeys
Answer a Set of all the keys in the receiver and its superspaces


@meindex set:@-to:@-
@item set:@- key to:@- newValue
Assign newValue to the variable named as specified by `key'.
This method won't define a new variable; instead if the key
is not found it will search in superspaces and raising an
error if the variable cannot be found in any of the superspaces.
Answer newValue.


@meindex set:@-to:@-ifAbsent:@-
@item set:@- key to:@- newValue ifAbsent:@- aBlock
Assign newValue to the variable named as specified by `key'.
This method won't define a new variable; instead if the key
is not found it will search in superspaces and evaluate
aBlock if it is not found. Answer newValue.


@meindex values
@item values
Answer a Bag containing the values of the receiver


@end table



@node AbstractNamespace-printing
@subsection AbstractNamespace:@- printing

@table @b
@meindex name
@item name
Answer the receiver's name


@meindex name:@-
@item name:@- aSymbol
Change the receiver's name to aSymbol


@meindex nameIn:@-
@item nameIn:@- aNamespace
Answer Smalltalk code compiling to the receiver when the current
namespace is aNamespace


@meindex printOn:@-
@item printOn:@- aStream
Print a representation of the receiver


@meindex storeOn:@-
@item storeOn:@- aStream
Store Smalltalk code compiling to the receiver


@end table



@node AbstractNamespace-testing
@subsection AbstractNamespace:@- testing

@table @b
@meindex isNamespace
@item isNamespace
Answer `true'.

@meindex isSmalltalk
@item isSmalltalk
Answer `false'.

@end table

@node AlternativeObjectProxy
@section AlternativeObjectProxy
@clindex AlternativeObjectProxy

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: DumperProxy
@itemx Category: Streams-Files
I am a proxy that uses the same ObjectDumper
to store an object which is not the object to be dumped, but from which the
dumped object can be reconstructed.  I am an abstract class, using me would
result in infinite loops because by default I try to store the same object
again and again.  See the method comments for more information
@end table

@menu
* AlternativeObjectProxy class-instance creation::  (class)
* AlternativeObjectProxy-accessing::  (instance)
@end menu



@node AlternativeObjectProxy class-instance creation
@subsection AlternativeObjectProxy class:@- instance creation

@table @b
@meindex acceptUsageForClass:@-
@item acceptUsageForClass:@- aClass
The receiver was asked to be used as a proxy for the class aClass.
Answer whether the registration is fine.  By default, answer true
except if AlternativeObjectProxy itself is being used.


@meindex on:@-
@slindex on:@-
@slindex dumpTo:@-
@item on:@- anObject
Answer a proxy to be used to save anObject. IMPORTANT:@- this method
MUST be overridden so that the overridden version sends #on:@- to super
passing an object that is NOT the same as anObject (alternatively,
you can override #dumpTo:@-, which is what NullProxy does), because that
would result in an infinite loop!  This also means that
AlternativeObjectProxy must never be used directly -- only as
a superclass.


@end table



@node AlternativeObjectProxy-accessing
@subsection AlternativeObjectProxy:@- accessing

@table @b
@meindex object
@item object
Reconstruct the object stored in the proxy and answer it.  A
subclass will usually override this


@meindex object:@-
@item object:@- theObject
Set the object to be dumped to theObject.  This should not be
overridden.


@meindex primObject
@item primObject
Reconstruct the object stored in the proxy and answer it.  This
method must not be overridden


@end table

@node ArithmeticError
@section ArithmeticError
@clindex ArithmeticError

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Error
@itemx Category: Language-Exceptions
An ArithmeticError exception is raised by numeric classes when a program
tries to do something wrong, such as extracting the square root of a
negative number.
@end table

@menu
* ArithmeticError-description::  (instance)
@end menu



@node ArithmeticError-description
@subsection ArithmeticError:@- description

@table @b
@meindex description
@item description
Answer a textual description of the exception.


@meindex isResumable
@item isResumable
Answer true.  Arithmetic exceptions are by default resumable.


@end table

@node Array
@section Array
@clindex Array

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: ArrayedCollection
@itemx Category: Collections-Sequenceable
My instances are objects that have array-like properties:@- they are directly 
indexable by integers starting at 1, and they are fixed in size.  I inherit
object creation behavior messages such as #with:@-, as well as iteration
and general access behavior from SequenceableCollection.
@end table

@menu
* Array class-instance creation::  (class)
* Array-built ins::  (instance)
* Array-mutating objects::  (instance)
* Array-printing::  (instance)
* Array-testing::  (instance)
@end menu



@node Array class-instance creation
@subsection Array class:@- instance creation

@table @b
@meindex from:@-
@item from:@- anArray
Answer anArray, which is expected to be an array specified with a
brace-syntax expression per my inherited protocol.


@end table



@node Array-built ins
@subsection Array:@- built ins

@table @b
@meindex at:@-ifAbsent:@-
@item at:@- anIndex ifAbsent:@- aBlock
Answer the index-th indexed instance variable of the receiver


@meindex replaceFrom:@-to:@-with:@-startingAt:@-
@item replaceFrom:@- start to:@- stop with:@- byteArray startingAt:@- replaceStart
Replace the characters from start to stop with new characters whose
ASCII codes are contained in byteArray, starting at the replaceStart
location of byteArray


@end table



@node Array-mutating objects
@subsection Array:@- mutating objects

@table @b
@meindex multiBecome:@-
@item multiBecome:@- anArray
Transform every object in the receiver in each corresponding
object in anArray. anArray and the receiver must have the same
size


@end table



@node Array-printing
@subsection Array:@- printing

@table @b
@meindex isLiteralObject
@item isLiteralObject
Answer whether the receiver is expressible as a Smalltalk literal.


@meindex printOn:@-
@item printOn:@- aStream
Print a representation for the receiver on aStream


@meindex storeLiteralOn:@-
@item storeLiteralOn:@- aStream
Store a Smalltalk literal compiling to the receiver on aStream


@meindex storeOn:@-
@item storeOn:@- aStream
Store Smalltalk code compiling to the receiver on aStream


@end table



@node Array-testing
@subsection Array:@- testing

@table @b
@meindex isArray
@item isArray
Answer `true'.

@end table

@node ArrayedCollection
@section ArrayedCollection
@clindex ArrayedCollection

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: SequenceableCollection
@itemx Category: Collections-Sequenceable
My instances are objects that are generally fixed size, and are accessed
by an integer index.  The ordering of my instance's elements is determined 
externally; I will not rearrange the order of the elements.
@end table

@menu
* ArrayedCollection class-instance creation::  (class)
* ArrayedCollection-basic::  (instance)
* ArrayedCollection-built ins::  (instance)
* ArrayedCollection-compiler::  (instance)
* ArrayedCollection-copying Collections::  (instance)
* ArrayedCollection-enumerating the elements of a collection::  (instance)
* ArrayedCollection-sorting::  (instance)
* ArrayedCollection-storing::  (instance)
* ArrayedCollection-streams::  (instance)
@end menu



@node ArrayedCollection class-instance creation
@subsection ArrayedCollection class:@- instance creation

@table @b
@meindex join:@-
@item join:@- aCollection
Where aCollection is a collection of SequenceableCollections,
answer a new instance with all the elements therein, in order.


@meindex join:@-separatedBy:@-
@item join:@- aCollection separatedBy:@- sepCollection
Where aCollection is a collection of SequenceableCollections,
answer a new instance with all the elements therein, in order,
each separated by an occurrence of sepCollection.


@meindex new:@-withAll:@-
@item new:@- size withAll:@- anObject
Answer a collection with the given size, whose elements are all set to
anObject


@meindex streamContents:@-
@item streamContents:@- aBlock
Create a ReadWriteStream on an empty instance of the receiver;
pass the stream to aBlock, then retrieve its contents and
answer them.


@meindex with:@-
@item with:@- element1
Answer a collection whose only element is element1


@meindex with:@-with:@-
@item with:@- element1 with:@- element2
Answer a collection whose only elements are the parameters in the order
they were passed


@meindex with:@-with:@-with:@-
@item with:@- element1 with:@- element2 with:@- element3
Answer a collection whose only elements are the parameters in the order
they were passed


@meindex with:@-with:@-with:@-with:@-
@item with:@- element1 with:@- element2 with:@- element3 with:@- element4
Answer a collection whose only elements are the parameters in the order
they were passed


@meindex with:@-with:@-with:@-with:@-with:@-
@item with:@- element1 with:@- element2 with:@- element3 with:@- element4 with:@- element5
Answer a collection whose only elements are the parameters in the order
they were passed


@meindex withAll:@-
@item withAll:@- aCollection
Answer a collection whose elements are the same as those in aCollection


@end table



@node ArrayedCollection-basic
@subsection ArrayedCollection:@- basic

@table @b
@meindex ,
@item , aSequenceableCollection
Answer a new instance of an ArrayedCollection containing all the elements
in the receiver, followed by all the elements in aSequenceableCollection


@meindex add:@-
@item add:@- value
This method should not be called for instances of this class.

@meindex atAll:@-
@slindex collect:@-
@item atAll:@- keyCollection
Answer a collection of the same kind returned by #collect:@-, that
only includes the values at the given indices. Fail if any of
the values in keyCollection is out of bounds for the receiver.


@meindex copyFrom:@-to:@-
@item copyFrom:@- start to:@- stop
Answer a new collection containing all the items in the receiver from the
start-th and to the stop-th


@meindex copyWith:@-
@item copyWith:@- anElement
Answer a new instance of an ArrayedCollection containing all the elements
in the receiver, followed by the single item anElement


@meindex copyWithout:@-
@item copyWithout:@- oldElement
Answer a copy of the receiver to which all occurrences of oldElement are
removed


@end table



@node ArrayedCollection-built ins
@subsection ArrayedCollection:@- built ins

@table @b
@meindex size
@item size
Answer the size of the receiver


@end table



@node ArrayedCollection-compiler
@subsection ArrayedCollection:@- compiler

@table @b
@meindex literalEquals:@-
@item literalEquals:@- anObject
Not commented.

@meindex literalHash
@item literalHash
Not commented.

@end table



@node ArrayedCollection-copying Collections
@subsection ArrayedCollection:@- copying Collections

@table @b
@meindex copyReplaceAll:@-with:@-
@item copyReplaceAll:@- oldSubCollection with:@- newSubCollection
Answer a new collection in which all the sequences matching
oldSubCollection are replaced with newSubCollection


@meindex copyReplaceFrom:@-to:@-with:@-
@item copyReplaceFrom:@- start to:@- stop with:@- replacementCollection
Answer a new collection of the same class as the receiver that contains the
same elements as the receiver, in the same order, except for elements from
index `start' to index `stop'.

If start < stop, these are replaced by the contents of the
replacementCollection.  Instead, If start = (stop + 1), like in
`copyReplaceFrom:@- 4 to:@- 3 with:@- anArray', then every element of the receiver
will be present in the answered copy; the operation will be an append if
stop is equal to the size of the receiver or, if it is not, an insert before
index `start'.


@meindex copyReplaceFrom:@-to:@-withObject:@-
@item copyReplaceFrom:@- start to:@- stop withObject:@- anObject
Answer a new collection of the same class as the receiver that contains the
same elements as the receiver, in the same order, except for elements from
index `start' to index `stop'.

If start < stop, these are replaced by stop-start+1 copies of anObject.
Instead, If start = (stop + 1), then every element of the receiver
will be present in the answered copy; the operation will be an append if
stop is equal to the size of the receiver or, if it is not, an insert before
index `start'.


@meindex reverse
@item reverse
Answer the receivers' contents in reverse order


@end table



@node ArrayedCollection-enumerating the elements of a collection
@subsection ArrayedCollection:@- enumerating the elements of a collection

@table @b
@meindex collect:@-
@item collect:@- aBlock
Answer a new instance of an ArrayedCollection containing all the results
of evaluating aBlock passing each of the receiver's elements


@meindex reject:@-
@item reject:@- aBlock
Answer a new instance of an ArrayedCollection containing all the elements
in the receiver which, when passed to aBlock, answer false


@meindex select:@-
@item select:@- aBlock
Answer a new instance of an ArrayedCollection containing all the elements
in the receiver which, when passed to aBlock, answer true


@meindex with:@-collect:@-
@item with:@- aSequenceableCollection collect:@- aBlock
Evaluate aBlock for each pair of elements took respectively from the receiver
and from aSequenceableCollection; answer a collection of the same
kind of the receiver, made with the block's return values. Fail if the
receiver has not the same size as aSequenceableCollection.


@end table



@node ArrayedCollection-sorting
@subsection ArrayedCollection:@- sorting

@table @b
@meindex sorted
@slindex <=
@item sorted
Return a copy of the receiver sorted according to the default
sort block, which uses #<= to compare items.


@meindex sorted:@-
@item sorted:@- sortBlock
Return a copy of the receiver sorted according to the given
sort block, which accepts pair of items and returns true if
the first item is less than the second one.


@end table



@node ArrayedCollection-storing
@subsection ArrayedCollection:@- storing

@table @b
@meindex storeOn:@-
@item storeOn:@- aStream
Store Smalltalk code compiling to the receiver on aStream


@end table



@node ArrayedCollection-streams
@subsection ArrayedCollection:@- streams

@table @b
@meindex writeStream
@item writeStream
Answer a WriteStream streaming on the receiver


@end table

@node Association
@section Association
@clindex Association

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: LookupKey
@itemx Category: Language-Data types
My instances represent a mapping between two objects.  Typically, my
"key" object is a symbol, but I don't require this.  My "value" object has 
no conventions associated with it; it can be any object at all.
@end table

@menu
* Association class-basic::  (class)
* Association-accessing::  (instance)
* Association-finalization::  (instance)
* Association-printing::  (instance)
* Association-storing::  (instance)
* Association-testing::  (instance)
@end menu



@node Association class-basic
@subsection Association class:@- basic

@table @b
@meindex key:@-value:@-
@item key:@- aKey value:@- aValue
Answer a new association with the given key and value


@end table



@node Association-accessing
@subsection Association:@- accessing

@table @b
@meindex environment
@item environment
Answer nil.  This is present to achieve polymorphism with
instances of VariableBinding.


@meindex environment:@-
@item environment:@- aNamespace
Do nothing.  This is present to achieve polymorphism with
instances of VariableBinding.


@meindex key:@-value:@-
@item key:@- aKey value:@- aValue
Set the association's key to aKey, and its value to aValue


@meindex value
@item value
Answer the association's value


@meindex value:@-
@item value:@- aValue
Set the association's value to aValue


@end table



@node Association-finalization
@subsection Association:@- finalization

@table @b
@meindex mourn
@item mourn
Finalize the receiver


@end table



@node Association-printing
@subsection Association:@- printing

@table @b
@meindex printOn:@-
@item printOn:@- aStream
Put on aStream a representation of the receiver


@end table



@node Association-storing
@subsection Association:@- storing

@table @b
@meindex storeOn:@-
@item storeOn:@- aStream
Put on aStream some Smalltalk code compiling to the receiver


@end table



@node Association-testing
@subsection Association:@- testing

@table @b
@meindex =
@slindex =
@item = anAssociation
Answer whether the association's key and value are the same as
anAssociation's, or false if anAssociation is not an Association.
As a special case, identical values are considered equal even if
#= returns false (as is the case for NaN floating-point values).


@meindex hash
@item hash
Answer an hash value for the receiver


@end table

@node Autoload
@section Autoload
@clindex Autoload

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: none
@itemx Category: Examples-Useful tools
I am not a part of the normal Smalltalk kernel class system.  I provide the
ability to do late ("on-demand") loading of class definitions.  Through me,
you can define any class to be loaded when any message is sent to
the class itself (such as to create an instance) or to its metaclass (such
as #methodsFor:@- to extend it with class-side methods).
@end table

@menu
* Autoload class-instance creation::  (class)
* Autoload-accessing::  (instance)
@end menu



@node Autoload class-instance creation
@subsection Autoload class:@- instance creation

@table @b
@meindex class:@-from:@-
@item class:@- nameSymbol from:@- fileNameString
Make Smalltalk automatically load the class named nameSymbol
from fileNameString when needed


@meindex class:@-in:@-from:@-
@item class:@- nameSymbol in:@- aNamespace from:@- fileNameString
Make Smalltalk automatically load the class named nameSymbol
and residing in aNamespace from fileNameString when needed


@meindex class:@-in:@-loader:@-
@slindex autoload
@item class:@- nameSymbol in:@- aNamespace loader:@- anObject
Make Smalltalk automatically load the class named nameSymbol
and residing in aNamespace.  When the class is needed, anObject
will be sent #autoload.  By default, instances of FilePath and
Package can be used.


@meindex class:@-loader:@-
@slindex autoload
@item class:@- nameSymbol loader:@- anObject
Make Smalltalk automatically load the class named nameSymbol.
When the class is needed, anObject will be sent #autoload.
By default, instances of FilePath and Package can be used.


@end table



@node Autoload-accessing
@subsection Autoload:@- accessing

@table @b
@meindex class
@item class
We need it to access the metaclass instance, because that's what
will load the file.


@meindex doesNotUnderstand:@-
@item doesNotUnderstand:@- aMessage
Load the class and resend the message to it


@end table

@node Bag
@section Bag
@clindex Bag

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Collection
@itemx Category: Collections-Unordered
My instances are unordered collections of objects.  You can think
of me as a set with a memory; that is, if the same object is added to me
twice, then I will report that that element has been stored twice.
@end table

@menu
* Bag class-basic::  (class)
* Bag-adding::  (instance)
* Bag-enumerating the elements of a collection::  (instance)
* Bag-extracting items::  (instance)
* Bag-printing::  (instance)
* Bag-removing::  (instance)
* Bag-storing::  (instance)
* Bag-testing collections::  (instance)
@end menu



@node Bag class-basic
@subsection Bag class:@- basic

@table @b
@meindex new
@item new
Answer a new instance of the receiver


@meindex new:@-
@item new:@- size
Answer a new instance of the receiver, with space for size distinct
objects


@end table



@node Bag-adding
@subsection Bag:@- adding

@table @b
@meindex add:@-
@item add:@- newObject
Add an occurrence of newObject to the receiver. Answer newObject.
Fail if newObject is nil.


@meindex add:@-withOccurrences:@-
@item add:@- newObject withOccurrences:@- anInteger
If anInteger > 0, add anInteger occurrences of newObject to the
receiver. If anInteger < 0, remove them. Answer newObject.  Fail
if newObject is nil.


@end table



@node Bag-enumerating the elements of a collection
@subsection Bag:@- enumerating the elements of a collection

@table @b
@meindex asSet
@item asSet
Answer a set with the elements of the receiver


@meindex do:@-
@item do:@- aBlock
Evaluate the block for all members in the collection.


@end table



@node Bag-extracting items
@subsection Bag:@- extracting items

@table @b
@meindex sortedByCount
@item sortedByCount
Answer a collection of counts with elements, sorted by decreasing count.


@end table



@node Bag-printing
@subsection Bag:@- printing

@table @b
@meindex printOn:@-
@item printOn:@- aStream
Put on aStream a representation of the receiver


@end table



@node Bag-removing
@subsection Bag:@- removing

@table @b
@meindex remove:@-ifAbsent:@-
@item remove:@- oldObject ifAbsent:@- anExceptionBlock
Remove oldObject from the collection and return it. If can't be
found, answer instead the result of evaluationg anExceptionBlock


@end table



@node Bag-storing
@subsection Bag:@- storing

@table @b
@meindex storeOn:@-
@item storeOn:@- aStream
Put on aStream some Smalltalk code compiling to the receiver


@end table



@node Bag-testing collections
@subsection Bag:@- testing collections

@table @b
@meindex =
@item = aBag
Answer whether the receiver and aBag contain the same objects


@meindex hash
@item hash
Answer an hash value for the receiver


@meindex includes:@-
@item includes:@- anObject
Answer whether we include anObject


@meindex occurrencesOf:@-
@item occurrencesOf:@- anObject
Answer the number of occurrences of anObject found in the receiver


@meindex size
@item size
Answer the total number of objects found in the receiver


@end table

@node Behavior
@section Behavior
@clindex Behavior

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Object
@itemx Category: Language-Implementation
I am the parent class of all "class" type methods.  My instances know
about the subclass/superclass relationships between classes, contain
the description that instances are created from, and hold the method
dictionary that's associated with each class.  I provide methods for
compiling methods, modifying the class inheritance hierarchy, examining the
method dictionary, and iterating over the class hierarchy.
@end table

@menu
* Behavior-accessing class hierarchy::  (instance)
* Behavior-accessing instances and variables::  (instance)
* Behavior-accessing the method dictionary::  (instance)
* Behavior-built ins::  (instance)
* Behavior-builtin::  (instance)
* Behavior-compilation::  (instance)
* Behavior-compilation (alternative)::  (instance)
* Behavior-compiling::  (instance)
* Behavior-compiling methods::  (instance)
* Behavior-creating a class hierarchy::  (instance)
* Behavior-enumerating::  (instance)
* Behavior-evaluating::  (instance)
* Behavior-instance creation::  (instance)
* Behavior-instance variables::  (instance)
* Behavior-method dictionary::  (instance)
* Behavior-parsing class declarations::  (instance)
* Behavior-pluggable behavior (not yet implemented)::  (instance)
* Behavior-printing hierarchy::  (instance)
* Behavior-source code::  (instance)
* Behavior-still unclassified::  (instance)
* Behavior-support for lightweight classes::  (instance)
* Behavior-testing functionality::  (instance)
* Behavior-testing the class hierarchy::  (instance)
* Behavior-testing the form of the instances::  (instance)
* Behavior-testing the method dictionary::  (instance)
@end menu



@node Behavior-accessing class hierarchy
@subsection Behavior:@- accessing class hierarchy

@table @b
@meindex allSubclasses
@item allSubclasses
Answer the direct and indirect subclasses of the receiver in a Set


@meindex allSuperclasses
@item allSuperclasses
Answer all the receiver's superclasses in a collection


@meindex subclasses
@item subclasses
Answer the direct subclasses of the receiver in a Set


@meindex superclass
@item superclass
Answer the receiver's superclass (if any, otherwise answer nil)


@meindex withAllSubclasses
@item withAllSubclasses
Answer a Set containing the receiver together with its direct and
indirect subclasses


@meindex withAllSuperclasses
@item withAllSuperclasses
Answer the receiver and all of its superclasses in a collection


@end table



@node Behavior-accessing instances and variables
@subsection Behavior:@- accessing instances and variables

@table @b
@meindex allClassVarNames
@item allClassVarNames
Return all the class variables understood by the receiver


@meindex allInstVarNames
@item allInstVarNames
Answer the names of every instance variables the receiver contained in the
receiver's instances


@meindex allInstances
@item allInstances
Returns a set of all instances of the receiver


@meindex allSharedPoolDictionaries
@item allSharedPoolDictionaries
Return the shared pools defined by the class and any of
its superclasses, in the correct search order.


@meindex allSharedPools
@item allSharedPools
Return the names of the shared pools defined by the class and any of
its superclasses, in the correct search order.


@meindex classPool
@item classPool
Answer the class pool dictionary. Since Behavior does not support
classes with class variables, we answer an empty one; adding
variables to it results in an error.


@meindex classVarNames
@item classVarNames
Answer all the class variables for instances of the receiver


@meindex indexOfInstVar:@-
@item indexOfInstVar:@- aString
Answer the index of aString in the fixed instance variables of the
instances of the receiver, or 0 if the variable is missing.


@meindex indexOfInstVar:@-ifAbsent:@-
@item indexOfInstVar:@- aString ifAbsent:@- aBlock
Answer the index of aString in the fixed instance variables of the
instances of the receiver, or 0 if the variable is missing.


@meindex instVarNames
@item instVarNames
Answer an Array containing the instance variables defined by the receiver


@meindex instanceCount
@item instanceCount
Return a count of all the instances of the receiver


@meindex sharedPools
@item sharedPools
Return the names of the shared pools defined by the class


@meindex subclassInstVarNames
@item subclassInstVarNames
Answer the names of the instance variables the receiver inherited from its
superclass


@end table



@node Behavior-accessing the method dictionary
@subsection Behavior:@- accessing the method dictionary

@table @b
@meindex >>
@item >> selector
Return the compiled method associated with selector, from the local
method dictionary.  Error if not found.


@meindex allSelectors
@item allSelectors
Answer a Set of all the selectors understood by the receiver


@meindex compiledMethodAt:@-
@item compiledMethodAt:@- selector
Return the compiled method associated with selector, from the local
method dictionary.  Error if not found.


@meindex compiledMethodAt:@-ifAbsent:@-
@item compiledMethodAt:@- selector ifAbsent:@- aBlock
Return the compiled method associated with selector, from the local
method dictionary.  Evaluate aBlock if not found.


@meindex formattedSourceStringAt:@-
@item formattedSourceStringAt:@- selector
Answer the method source code as a formatted string (if available)
for the given selector.  Requires package Parser.


@meindex lookupAllSelectors:@-
@item lookupAllSelectors:@- aSelector
Answer a Set of all the compiled method associated with selector.
from the local method dictionary and all of the superclasses.


@meindex lookupSelector:@-
@item lookupSelector:@- aSelector
Return the compiled method associated with selector, from the local
method dictionary or one of a superclass; return nil if not found.


@meindex parseTreeFor:@-
@item parseTreeFor:@- selector
Answer the parse tree for the given selector, or nil if there was an
error.  Requires the Parser package to be loaded.


@meindex selectorAt:@-
@item selectorAt:@- method
Return selector for the given CompiledMethod


@meindex selectors
@item selectors
Answer a Set of the receiver's selectors


@meindex sourceCodeAt:@-
@item sourceCodeAt:@- selector
Answer source code (if available) for the given selector.


@meindex sourceCodeAt:@-ifAbsent:@-
@item sourceCodeAt:@- selector ifAbsent:@- aBlock
Answer source code (if available) for the given selector.


@meindex sourceMethodAt:@-
@item sourceMethodAt:@- selector
This is too dependent on the original implementation


@end table



@node Behavior-built ins
@subsection Behavior:@- built ins

@table @b
@meindex basicNewInFixedSpace
@slindex basicNew
@item basicNewInFixedSpace
Create a new instance of a class with no indexed instance variables.
The instance is guaranteed not to move across garbage collections.
Like #basicNew, this method should not be overridden.


@meindex basicNewInFixedSpace:@-
@slindex basicNew:@-
@item basicNewInFixedSpace:@- numInstanceVariables
Create a new instance of a class with indexed instance variables. The
instance has numInstanceVariables indexed instance variables.  The
instance is guaranteed not to move across garbage collections.  Like
#basicNew:@-, this method should not be overridden.


@meindex flushCache
@item flushCache
Invalidate the method cache kept by the virtual machine. This
message should not need to be called by user programs.


@meindex methodsFor:@-ifTrue:@-
@item methodsFor:@- category ifTrue:@- condition
Compile the following code inside the receiver, with the given
category, if condition is true; else ignore it


@meindex primCompile:@-
@slindex compile:@-
@item primCompile:@- code
Compile the code, a string or readable stream, with no
category. Fail if the code does not obey Smalltalk syntax. Answer
the generated CompiledMethod if it does.

Do not send this in user code; use #compile:@- or related methods
instead.


@meindex primCompile:@-ifError:@-
@slindex primCompile:@-
@slindex compile:@-ifError:@-
@item primCompile:@- code ifError:@- aBlock
As with #primCompile:@-, but evaluate aBlock (passing the file
name, line number and description of the error) if the code does
not obey Smalltalk syntax.

Do not send this in user code; use #compile:@-ifError:@- or related
methods instead.


@meindex someInstance
@item someInstance
Private - Answer the first instance of the receiver in the object
table


@end table



@node Behavior-builtin
@subsection Behavior:@- builtin

@table @b
@meindex basicNew
@item basicNew
Create a new instance of a class with no indexed instance variables;
this method must not be overridden.


@meindex basicNew:@-
@item basicNew:@- numInstanceVariables
Create a new instance of a class with indexed instance variables. The
instance has numInstanceVariables indexed instance variables;
this method must not be overridden.


@meindex new
@item new
Create a new instance of a class with no indexed instance variables


@meindex new:@-
@item new:@- numInstanceVariables
Create a new instance of a class with indexed instance variables. The
instance has numInstanceVariables indexed instance variables.


@end table



@node Behavior-compilation
@subsection Behavior:@- compilation

@table @b
@meindex scopeDictionary
@item scopeDictionary
Answer the dictionary that is used when the receiver is before
a period in Smalltalk source code.


@end table



@node Behavior-compilation (alternative)
@subsection Behavior:@- compilation (alternative)

@table @b
@meindex methods
@item methods
Don't use this, it's only present to file in from Smalltalk/V


@meindex methodsFor
@item methodsFor
Don't use this, it's only present to file in from Dolphin Smalltalk


@meindex methodsFor:@-ifFeatures:@-
@item methodsFor:@- category ifFeatures:@- features
Start compiling methods in the receiver if this implementation of
Smalltalk has the given features, else skip the section


@meindex methodsFor:@-stamp:@-
@item methodsFor:@- category stamp:@- notUsed
Don't use this, it's only present to file in from Squeak


@meindex privateMethods
@item privateMethods
Don't use this, it's only present to file in from IBM Smalltalk


@meindex publicMethods
@item publicMethods
Don't use this, it's only present to file in from IBM Smalltalk


@end table



@node Behavior-compiling
@subsection Behavior:@- compiling

@table @b
@meindex compilerClass
@item compilerClass
Return the class that will be used to compile the parse
nodes into bytecodes.


@end table



@node Behavior-compiling methods
@subsection Behavior:@- compiling methods

@table @b
@meindex methodsFor:@-
@item methodsFor:@- aCategoryString
Calling this method prepares the parser to receive methods 
to be compiled and installed in the receiver's method dictionary. 
The methods are put in the category identified by the parameter.


@meindex poolResolution
@item poolResolution
Answer a PoolResolution class to be used for resolving pool
variables while compiling methods on this class.


@end table



@node Behavior-creating a class hierarchy
@subsection Behavior:@- creating a class hierarchy

@table @b
@meindex addSubclass:@-
@item addSubclass:@- aClass
Add aClass asone of the receiver's subclasses.


@meindex removeSubclass:@-
@item removeSubclass:@- aClass
Remove aClass from the list of the receiver's subclasses


@meindex superclass:@-
@item superclass:@- aClass
Set the receiver's superclass.


@end table



@node Behavior-enumerating
@subsection Behavior:@- enumerating

@table @b
@meindex allInstancesDo:@-
@item allInstancesDo:@- aBlock
Invokes aBlock for all instances of the receiver


@meindex allSubclassesDo:@-
@item allSubclassesDo:@- aBlock
Invokes aBlock for all subclasses, both direct and indirect.


@meindex allSubinstancesDo:@-
@item allSubinstancesDo:@- aBlock
Invokes aBlock for all instances of each of the receiver's subclasses.


@meindex allSuperclassesDo:@-
@item allSuperclassesDo:@- aBlock
Invokes aBlock for all superclasses, both direct and indirect.


@meindex selectSubclasses:@-
@item selectSubclasses:@- aBlock
Return a Set of subclasses of the receiver satisfying aBlock.


@meindex selectSuperclasses:@-
@item selectSuperclasses:@- aBlock
Return a Set of superclasses of the receiver satisfying aBlock.


@meindex subclassesDo:@-
@item subclassesDo:@- aBlock
Invokes aBlock for all direct subclasses.


@meindex withAllSubclassesDo:@-
@item withAllSubclassesDo:@- aBlock
Invokes aBlock for the receiver and all subclasses, both direct
and indirect.


@meindex withAllSuperclassesDo:@-
@item withAllSuperclassesDo:@- aBlock
Invokes aBlock for the receiver and all superclasses, both direct
and indirect.


@end table



@node Behavior-evaluating
@subsection Behavior:@- evaluating

@table @b
@meindex evalString:@-to:@-
@item evalString:@- aString to:@- anObject
Answer the stack top at the end of the evaluation of the code in
aString. The code is executed as part of anObject


@meindex evalString:@-to:@-ifError:@-
@item evalString:@- aString to:@- anObject ifError:@- aBlock
Answer the stack top at the end of the evaluation of the code in
aString. If aString cannot be parsed, evaluate aBlock (see
compile:@-ifError:@-). The code is executed as part of anObject


@meindex evaluate:@-
@item evaluate:@- code
Evaluate Smalltalk expression in 'code' and return result.


@meindex evaluate:@-ifError:@-
@item evaluate:@- code ifError:@- block
Evaluate 'code'.  If a parsing error is detected, invoke 'block'


@meindex evaluate:@-notifying:@-
@slindex error:@-
@item evaluate:@- code notifying:@- requestor
Evaluate Smalltalk expression in 'code'. If a parsing error is encountered,
send #error:@- to requestor


@meindex evaluate:@-to:@-
@item evaluate:@- code to:@- anObject
Evaluate Smalltalk expression as part of anObject's method definition


@meindex evaluate:@-to:@-ifError:@-
@item evaluate:@- code to:@- anObject ifError:@- block
Evaluate Smalltalk expression as part of anObject's method definition.  This
method is used to support Inspector expression evaluation.  If a parsing error
is encountered, invoke error block, 'block'


@end table



@node Behavior-instance creation
@subsection Behavior:@- instance creation

@table @b
@meindex newInFixedSpace
@slindex new
@item newInFixedSpace
Create a new instance of a class without indexed instance variables.
The instance is guaranteed not to move across garbage collections.
If a subclass overrides #new, the changes will apply to this method too.


@meindex newInFixedSpace:@-
@slindex new:@-
@item newInFixedSpace:@- numInstanceVariables
Create a new instance of a class with indexed instance variables. The
instance has numInstanceVariables indexed instance variables.  The
instance is guaranteed not to move across garbage collections.  If
a subclass overrides #new:@-, the changes will apply to this method too.


@end table



@node Behavior-instance variables
@subsection Behavior:@- instance variables

@table @b
@meindex addInstVarName:@-
@item addInstVarName:@- aString
Add the given instance variable to instance of the receiver


@meindex instanceVariableNames:@-
@item instanceVariableNames:@- instVarNames
Set the instance variables for the receiver to be those
in instVarNames


@meindex removeInstVarName:@-
@item removeInstVarName:@- aString
Remove the given instance variable from the receiver and recompile
all of the receiver's subclasses


@end table



@node Behavior-method dictionary
@subsection Behavior:@- method dictionary

@table @b
@meindex addSelector:@-withMethod:@-
@item addSelector:@- selector withMethod:@- compiledMethod
Add the given compiledMethod to the method dictionary, giving it
the passed selector. Answer compiledMethod


@meindex compile:@-
@item compile:@- code
Compile method source.  If there are parsing errors, answer nil.
Else, return a CompiledMethod result of compilation


@meindex compile:@-ifError:@-
@item compile:@- code ifError:@- block
Compile method source.  If there are parsing errors, invoke
exception block, 'block' passing file name, line number and
error.  Return a CompiledMethod result of compilation


@meindex compile:@-notifying:@-
@slindex error:@-
@item compile:@- code notifying:@- requestor
Compile method source.  If there are parsing errors, send #error:@-
to the requestor object, else return a CompiledMethod result of
compilation


@meindex compileAll
@item compileAll
Recompile all selectors in the receiver. Ignore errors.


@meindex compileAll:@-
@slindex error:@-
@item compileAll:@- aNotifier
Recompile all selectors in the receiver. Notify aNotifier by sending
#error:@- messages if something goes wrong.


@meindex compileAllSubclasses
@slindex error:@-
@item compileAllSubclasses
Recompile all selector of all subclasses. Notify aNotifier by sending
#error:@- messages if something goes wrong.


@meindex compileAllSubclasses:@-
@slindex error:@-
@item compileAllSubclasses:@- aNotifier
Recompile all selector of all subclasses. Notify aNotifier by sending
#error:@- messages if something goes wrong.


@meindex createGetMethod:@-
@item createGetMethod:@- what
Create a method accessing the variable `what'.


@meindex createGetMethod:@-default:@-
@item createGetMethod:@- what default:@- value
Create a method accessing the variable `what', with a default value
of `value', using lazy initialization


@meindex createSetMethod:@-
@item createSetMethod:@- what
Create a method which sets the variable `what'.


@meindex decompile:@-
@item decompile:@- selector
Decompile the bytecodes for the given selector.


@meindex defineAsyncCFunc:@-withSelectorArgs:@-args:@-
@item defineAsyncCFunc:@- cFuncNameString withSelectorArgs:@- selectorAndArgs args:@- argsArray
Please lookup the part on the C interface in the manual.  This method
is deprecated, you should use the asyncCCall:@-args:@- attribute.


@meindex defineCFunc:@-withSelectorArgs:@-returning:@-args:@-
@item defineCFunc:@- cFuncNameString withSelectorArgs:@- selectorAndArgs returning:@- returnTypeSymbol args:@- argsArray
Please lookup the part on the C interface in the manual.  This method
is deprecated, you should use the cCall:@-returning:@-args:@- attribute.


@meindex edit:@-
@item edit:@- selector
Open Emacs to edit the method with the passed selector, then compile it


@meindex methodDictionary
@item methodDictionary
Answer the receiver's method dictionary. Don't modify the method
dictionary unless you exactly know what you're doing


@meindex methodDictionary:@-
@item methodDictionary:@- aDictionary
Set the receiver's method dictionary to aDictionary


@meindex recompile:@-
@item recompile:@- selector
Recompile the given selector, answer nil if something goes wrong or
the new CompiledMethod if everything's ok.


@meindex recompile:@-notifying:@-
@slindex error:@-
@item recompile:@- selector notifying:@- aNotifier
Recompile the given selector.  If there are parsing errors, send #error:@-
to the aNotifier object, else return a CompiledMethod result of
compilation


@meindex removeSelector:@-
@item removeSelector:@- selector
Remove the given selector from the method dictionary, answer
the CompiledMethod attached to that selector


@meindex removeSelector:@-ifAbsent:@-
@item removeSelector:@- selector ifAbsent:@- aBlock
Remove the given selector from the method dictionary, answer
the CompiledMethod attached to that selector. If the selector cannot
be found, answer the result of evaluating aBlock.


@meindex selectorsAndMethodsDo:@-
@item selectorsAndMethodsDo:@- aBlock
Evaluate aBlock, passing for each evaluation a selector that's
defined in the receiver and the corresponding method.


@end table



@node Behavior-parsing class declarations
@subsection Behavior:@- parsing class declarations

@table @b
@meindex parseInstanceVariableString:@-
@slindex parseVariableString:@-
@item parseInstanceVariableString:@- variableString
As with #parseVariableString:@-, but answer symbols that name
the variables instead of strings.


@meindex parseVariableString:@-
@item parseVariableString:@- aString
Answer an array of instance variable names.  aString should
specify these in traditional file-in `instanceVariableNames'
format.  Signal an error if aString contains something other
than valid Smalltalk variables.


@end table



@node Behavior-pluggable behavior (not yet implemented)
@subsection Behavior:@- pluggable behavior (not yet implemented)

@table @b
@meindex debuggerClass
@slindex debuggingPriority
@item debuggerClass
Answer which class is to be used to debug a chain of contexts which
includes the receiver.  nil means 'do not debug'; other classes are
sent #debuggingPriority and the one with the highest priority is
picked.


@meindex decompilerClass
@item decompilerClass
Answer the class that can be used to decompile methods,
or nil if there is none (as is the case now).


@meindex evaluatorClass
@item evaluatorClass
Answer the class that can be used to evaluate doits,
or nil if there is none (as is the case now).


@meindex parserClass
@item parserClass
Answer the class that can be used to parse methods,
or nil if there is none (as is the case now).


@end table



@node Behavior-printing hierarchy
@subsection Behavior:@- printing hierarchy

@table @b
@meindex hierarchyIndent
@slindex printHierarchy
@item hierarchyIndent
Answer the indent to be used by #printHierarchy - 4 by default


@meindex printFullHierarchy
@item printFullHierarchy
Print my full hierarchy (i.e. all my superclasses and subclasses)
on the terminal.


@meindex printHierarchy
@item printHierarchy
Print my entire subclass hierarchy on the terminal.


@end table



@node Behavior-source code
@subsection Behavior:@- source code

@table @b
@meindex formattedSourceStringAt:@-ifAbsent:@-
@item formattedSourceStringAt:@- aSelector ifAbsent:@- aBlock
Answer the method source code as a formatted string. Requires
package Parser.


@end table



@node Behavior-still unclassified
@subsection Behavior:@- still unclassified

@table @b
@meindex allSharedPoolDictionariesDo:@-
@item allSharedPoolDictionariesDo:@- aBlock
Answer the shared pools visible from methods in the metaclass,
in the correct search order.


@meindex parseNodeAt:@-
@item parseNodeAt:@- selector
Available only when the Parser package is loaded--Answer an
RBMethodNode that compiles to my method named by selector.


@meindex updateInstanceVars:@-shape:@-
@item updateInstanceVars:@- variableArray shape:@- shape
Update instance variables and instance spec of the class and all
its subclasses.  variableArray lists the new variables, including
inherited ones.


@end table



@node Behavior-support for lightweight classes
@subsection Behavior:@- support for lightweight classes

@table @b
@meindex article
@item article
Answer an article (`a' or `an') which is ok for the receiver's name


@meindex asClass
@item asClass
Answer the first superclass that is a full-fledged Class object


@meindex environment
@item environment
Answer the namespace that this class belongs to - the same as the
superclass, since Behavior does not support namespaces yet.


@meindex name
@item name
Answer the class name; this prints to the name of the superclass
enclosed in braces.  This class name is used, for example, to print
the receiver.


@meindex nameIn:@-
@item nameIn:@- aNamespace
Answer the class name when the class is referenced from aNamespace
- a dummy one, since Behavior does not support names.


@meindex printOn:@-in:@-
@item printOn:@- aStream in:@- aNamespace
Answer the class name when the class is referenced from aNamespace
- a dummy one, since Behavior does not support names.


@meindex securityPolicy
@item securityPolicy
Not commented.

@meindex securityPolicy:@-
@item securityPolicy:@- aSecurityPolicy
This method should not be called for instances of this class.

@end table



@node Behavior-testing functionality
@subsection Behavior:@- testing functionality

@table @b
@meindex isBehavior
@item isBehavior
Answer `true'.

@end table



@node Behavior-testing the class hierarchy
@subsection Behavior:@- testing the class hierarchy

@table @b
@meindex includesBehavior:@-
@item includesBehavior:@- aClass
Returns true if aClass is the receiver or a superclass of the receiver.


@meindex inheritsFrom:@-
@item inheritsFrom:@- aClass
Returns true if aClass is a superclass of the receiver


@meindex kindOfSubclass
@item kindOfSubclass
Return a string indicating the type of class the receiver is


@meindex shape
@item shape
Answer the symbolic shape of my instances.


@meindex shape:@-
@slindex byte
@slindex int8
@slindex character
@slindex short
@slindex word
@slindex ushort
@slindex int
@slindex uint
@slindex int64
@slindex uint64
@slindex utf32
@slindex float
@slindex double
@slindex pointer
@slindex inherit
@slindex inherit
@item shape:@- shape
Give the provided shape to the receiver's instances.
The shape can be nil, or one of #byte #int8 #character #short #word
#ushort #int #uint #int64 #uint64 #utf32 #float #double or #pointer.
In addition, the special value #inherit means to use the shape of the
superclass; note however that this is a static setting, and subclasses
that used #inherit are not mutated when the superclass adopts a different
shape.


@end table



@node Behavior-testing the form of the instances
@subsection Behavior:@- testing the form of the instances

@table @b
@meindex instSize
@item instSize
Answer how many fixed instance variables are reserved to each of the
receiver's instances


@meindex isBits
@item isBits
Answer whether my instances' variables are immediate, non-OOP
values.


@meindex isFixed
@item isFixed
Answer whether the receiver's instances have no indexed
instance variables


@meindex isIdentity
@item isIdentity
Answer whether x = y implies x == y for instances of the receiver


@meindex isImmediate
@item isImmediate
Answer whether, if x is an instance of the receiver, x copy == x


@meindex isPointers
@item isPointers
Answer whether the instance variables of the receiver's instances
are objects


@meindex isVariable
@item isVariable
Answer whether the receiver's instances have indexed instance variables


@end table



@node Behavior-testing the method dictionary
@subsection Behavior:@- testing the method dictionary

@table @b
@meindex canUnderstand:@-
@item canUnderstand:@- selector
Returns true if the instances of the receiver understand
the given selector


@meindex hasMethods
@item hasMethods
Return whether the receiver has any methods defined


@meindex includesSelector:@-
@item includesSelector:@- selector
Returns true if the local method dictionary contains the given selector


@meindex scopeHas:@-ifTrue:@-
@item scopeHas:@- name ifTrue:@- aBlock
If methods understood by the receiver's instances have access to a
symbol named 'name', evaluate aBlock


@meindex whichClassIncludesSelector:@-
@item whichClassIncludesSelector:@- selector
Answer which class in the receiver's hierarchy contains the implementation
of selector used by instances of the class (nil if none does)


@meindex whichSelectorsAccess:@-
@item whichSelectorsAccess:@- instVarName
Answer a Set of selectors which access the given instance variable


@meindex whichSelectorsAssign:@-
@item whichSelectorsAssign:@- instVarName
Answer a Set of selectors which read the given instance variable


@meindex whichSelectorsRead:@-
@item whichSelectorsRead:@- instVarName
Answer a Set of selectors which read the given instance variable


@meindex whichSelectorsReferTo:@-
@item whichSelectorsReferTo:@- anObject
Returns a Set of selectors that refer to anObject


@meindex whichSelectorsReferToByteCode:@-
@item whichSelectorsReferToByteCode:@- aByteCode
Return the collection of selectors in the class which
reference the byte code, aByteCode


@end table

@node BindingDictionary
@section BindingDictionary
@clindex BindingDictionary

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Dictionary
@itemx Category: Language-Implementation
I am a special form of dictionary that provides special ways to access my
keys, which typically begin with an uppercase letter; also, my associations
are actually VariableBinding instances.

My keys are (expected to be) symbols, so I use == to match searched keys
to those in the dictionary -- this is done expecting that it brings a bit
more speed.
@end table

@menu
* BindingDictionary-accessing::  (instance)
* BindingDictionary-basic & copying::  (instance)
* BindingDictionary-copying::  (instance)
* BindingDictionary-forward declarations::  (instance)
* BindingDictionary-printing::  (instance)
* BindingDictionary-testing::  (instance)
@end menu



@node BindingDictionary-accessing
@subsection BindingDictionary:@- accessing

@table @b
@meindex define:@-
@slindex at:@-put:@-
@item define:@- aSymbol
Define aSymbol as equal to nil inside the receiver.  Fail if such
a variable already exists (use #at:@-put:@- if you don't want to fail)


@meindex doesNotUnderstand:@-
@slindex Variable
@slindex Variable
@item doesNotUnderstand:@- aMessage
Try to map unary selectors to read accesses to the Namespace,
and one-argument keyword selectors to write accesses.
Note that:@- a) this works only if the selector has an
uppercase first letter; and b) `aNamespace Variable:@- value' is
the same as `aNamespace set:@- #Variable to:@- value', not the same as
`aNamespace at:@- #Variable put:@- value' --- the latter always
refers to the current namespace, while the former won't
define a new variable, instead searching in superspaces (and
raising an error if the variable cannot be found).


@meindex environment
@item environment
Answer the environment to which the receiver is connected.  This
can be the class for a dictionary that holds class variables,
or the super-namespace.  In general it is used to compute the
receiver's name.


@meindex environment:@-
@item environment:@- anObject
Set the environment to which the receiver is connected.  This
can be the class for a dictionary that holds class variables,
or the super-namespace.  In general it is used to compute the
receiver's name.


@meindex import:@-from:@-
@item import:@- aSymbol from:@- aNamespace
Add to the receiver the symbol aSymbol, associated to the
same value as in aNamespace. Fail if aNamespace does not
contain the given key.


@meindex name
@item name
Answer the receiver's name, which by default is the same as the
name of the receiver's environment.


@meindex nameIn:@-
@item nameIn:@- aNamespace
Answer the receiver's name when referred to from aNamespace; by
default the computation is deferred to the receiver's environment.


@end table



@node BindingDictionary-basic & copying
@subsection BindingDictionary:@- basic & copying

@table @b
@meindex =
@item = arg
Answer whether the receiver is equal to arg. The equality test is
by default the same as that for equal objects. = must not fail;
answer false if the receiver cannot be compared to arg


@meindex hash
@slindex identityHash
@item hash
Answer an hash value for the receiver.  This is the same as the
object's #identityHash.


@end table



@node BindingDictionary-copying
@subsection BindingDictionary:@- copying

@table @b
@meindex copy
@item copy
Answer the receiver.

@meindex copyEmpty:@-
@item copyEmpty:@- newSize
Answer an empty copy of the receiver whose size is newSize


@meindex copyEmptyForCollect
@slindex collect:@-
@item copyEmptyForCollect
Answer an empty copy of the receiver which is filled in to
compute the result of #collect:@-


@meindex copyEmptyForCollect:@-
@slindex collect:@-
@item copyEmptyForCollect:@- size
Answer an empty copy of the receiver which is filled in to
compute the result of #collect:@-


@meindex deepCopy
@item deepCopy
Answer the receiver.

@meindex shallowCopy
@item shallowCopy
Answer the receiver.

@end table



@node BindingDictionary-forward declarations
@subsection BindingDictionary:@- forward declarations

@table @b
@meindex at:@-put:@-
@item at:@- key put:@- value
Store value as associated to the given key. If any, recycle Associations
temporarily stored by the compiler inside the `Undeclared' dictionary.


@end table



@node BindingDictionary-printing
@subsection BindingDictionary:@- printing

@table @b
@meindex printOn:@-in:@-
@item printOn:@- aStream in:@- aNamespace
Print the receiver's name when referred to from aNamespace; by
default the computation is deferred to the receiver's environment.


@end table



@node BindingDictionary-testing
@subsection BindingDictionary:@- testing

@table @b
@meindex species
@item species
Answer `IdentityDictionary'.

@end table

@node BlockClosure
@section BlockClosure
@clindex BlockClosure

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Object
@itemx Category: Language-Implementation
I am a factotum class.  My instances represent Smalltalk blocks, portions
of executeable code that have access to the environment that they were
declared in, take parameters, and can be passed around as objects to be
executed by methods outside the current class.
Block closures are sent a message to compute their value and create a new
execution context; this property can be used in the construction of
control flow methods.  They also provide some methods that are used in the
creation of Processes from blocks.
@end table

@menu
* BlockClosure class-instance creation::  (class)
* BlockClosure class-testing::  (class)
* BlockClosure-accessing::  (instance)
* BlockClosure-built ins::  (instance)
* BlockClosure-control structures::  (instance)
* BlockClosure-exception handling::  (instance)
* BlockClosure-multiple process::  (instance)
* BlockClosure-overriding::  (instance)
* BlockClosure-testing::  (instance)
* BlockClosure-unwind protection::  (instance)
@end menu



@node BlockClosure class-instance creation
@subsection BlockClosure class:@- instance creation

@table @b
@meindex block:@-
@item block:@- aCompiledBlock
Answer a BlockClosure that activates the passed CompiledBlock.


@meindex block:@-receiver:@-
@item block:@- aCompiledBlock receiver:@- anObject
Answer a BlockClosure that activates the passed CompiledBlock
with the given receiver.


@meindex block:@-receiver:@-outerContext:@-
@item block:@- aCompiledBlock receiver:@- anObject outerContext:@- aContext
Answer a BlockClosure that activates the passed CompiledBlock
with the given receiver.


@meindex numArgs:@-numTemps:@-bytecodes:@-depth:@-literals:@-
@item numArgs:@- args numTemps:@- temps bytecodes:@- bytecodes depth:@- depth literals:@- literalArray
Answer a BlockClosure for a new CompiledBlock that is created using
the passed parameters.  To make it work, you must put the BlockClosure
into a CompiledMethod's literals.


@end table



@node BlockClosure class-testing
@subsection BlockClosure class:@- testing

@table @b
@meindex isImmediate
@item isImmediate
Answer whether, if x is an instance of the receiver, x copy == x


@end table



@node BlockClosure-accessing
@subsection BlockClosure:@- accessing

@table @b
@meindex argumentCount
@item argumentCount
Answer the number of arguments passed to the receiver


@meindex block
@item block
Answer the CompiledBlock which contains the receiver's bytecodes


@meindex block:@-
@item block:@- aCompiledBlock
Set the CompiledBlock which contains the receiver's bytecodes


@meindex finalIP
@item finalIP
Answer the last instruction that can be executed by the receiver


@meindex fixTemps
@item fixTemps
This should fix the values of the temporary variables used in the
block that are ordinarily shared with the method in which the block
is defined.  Not defined yet, but it is not harmful that it isn't.
Answer the receiver.


@meindex initialIP
@item initialIP
Answer the initial instruction pointer into the receiver.


@meindex method
@item method
Answer the CompiledMethod in which the receiver lies


@meindex numArgs
@item numArgs
Answer the number of arguments passed to the receiver


@meindex numTemps
@item numTemps
Answer the number of temporary variables used by the receiver


@meindex outerContext
@item outerContext
Answer the method/block context which is the immediate outer of
the receiver


@meindex outerContext:@-
@item outerContext:@- containingContext
Set the method/block context which is the immediate outer of
the receiver


@meindex receiver
@item receiver
Answer the object that is used as `self' when executing the receiver
(if nil, it might mean that the receiver is not valid though...)


@meindex receiver:@-
@item receiver:@- anObject
Set the object that is used as `self' when executing the receiver


@meindex stackDepth
@item stackDepth
Answer the number of stack slots needed for the receiver


@end table



@node BlockClosure-built ins
@subsection BlockClosure:@- built ins

@table @b
@meindex cull:@-
@item cull:@- arg1
Evaluate the receiver, passing arg1 as the only parameter if
the receiver has parameters.


@meindex cull:@-cull:@-
@item cull:@- arg1 cull:@- arg2
Evaluate the receiver, passing arg1 and arg2 as parameters if
the receiver accepts them.


@meindex cull:@-cull:@-cull:@-
@item cull:@- arg1 cull:@- arg2 cull:@- arg3
Evaluate the receiver, passing arg1, arg2 and arg3 as parameters if
the receiver accepts them.


@meindex value
@item value
Evaluate the receiver passing no parameters


@meindex value:@-
@item value:@- arg1
Evaluate the receiver passing arg1 as the only parameter


@meindex value:@-value:@-
@item value:@- arg1 value:@- arg2
Evaluate the receiver passing arg1 and arg2 as the parameters


@meindex value:@-value:@-value:@-
@item value:@- arg1 value:@- arg2 value:@- arg3
Evaluate the receiver passing arg1, arg2 and arg3 as the parameters


@meindex valueWithArguments:@-
@item valueWithArguments:@- argumentsArray
Evaluate the receiver passing argArray's elements as the parameters


@end table



@node BlockClosure-control structures
@subsection BlockClosure:@- control structures

@table @b
@meindex repeat
@item repeat
Evaluate the receiver 'forever' (actually until a return is executed
or the process is terminated).


@meindex whileFalse
@item whileFalse
Evaluate the receiver until it returns true


@meindex whileFalse:@-
@item whileFalse:@- aBlock
Evaluate the receiver. If it returns false, evaluate aBlock and restart


@meindex whileTrue
@item whileTrue
Evaluate the receiver until it returns false


@meindex whileTrue:@-
@item whileTrue:@- aBlock
Evaluate the receiver. If it returns true, evaluate aBlock and restart


@end table



@node BlockClosure-exception handling
@subsection BlockClosure:@- exception handling

@table @b
@meindex ifError:@-
@slindex error:@-
@item ifError:@- aBlock
Evaluate the receiver; when #error:@- is called, pass to aBlock the receiver
and the parameter, and answer the result of evaluating aBlock.  If another
exception is raised, it is passed to an outer handler; if no exception is
raised, the result of evaluating the receiver is returned.


@meindex on:@-do:@-
@slindex return:@-
@item on:@- anException do:@- aBlock
Evaluate the receiver; when anException is signaled, evaluate aBlock
passing a Signal describing the exception. Answer either the result of
evaluating the receiver or the parameter of a Signal>>@-#return:@-


@meindex on:@-do:@-on:@-do:@-
@slindex return:@-
@item on:@- e1 do:@- b1 on:@- e2 do:@- b2
Evaluate the receiver; when e1 or e2 are signaled, evaluate respectively
b1 or b2, passing a Signal describing the exception. Answer either the
result of evaluating the receiver or the argument of a Signal>>@-#return:@-


@meindex on:@-do:@-on:@-do:@-on:@-do:@-
@slindex return:@-
@item on:@- e1 do:@- b1 on:@- e2 do:@- b2 on:@- e3 do:@- b3
Evaluate the receiver; when e1, e2 or e3 are signaled, evaluate
respectively b1, b2 or b3, passing a Signal describing the exception.
Answer either the result of evaluating the receiver or the parameter of a
Signal>>@-#return:@-


@meindex on:@-do:@-on:@-do:@-on:@-do:@-on:@-do:@-
@slindex return:@-
@item on:@- e1 do:@- b1 on:@- e2 do:@- b2 on:@- e3 do:@- b3 on:@- e4 do:@- b4
Evaluate the receiver; when e1, e2, e3 or e4 are signaled, evaluate
respectively b1, b2, b3 or b4, passing a Signal describing the exception.
Answer either the result of evaluating the receiver or the parameter of a
Signal>>@-#return:@-


@meindex on:@-do:@-on:@-do:@-on:@-do:@-on:@-do:@-on:@-do:@-
@slindex return:@-
@item on:@- e1 do:@- b1 on:@- e2 do:@- b2 on:@- e3 do:@- b3 on:@- e4 do:@- b4 on:@- e5 do:@- b5
Evaluate the receiver; when e1, e2, e3, e4 or e5 are signaled, evaluate
respectively b1, b2, b3, b4 or b5, passing a Signal describing the exception.
Answer either the result of evaluating the receiver or the parameter of a
Signal>>@-#return:@-


@end table



@node BlockClosure-multiple process
@subsection BlockClosure:@- multiple process

@table @b
@meindex fork
@item fork
Create a new process executing the receiver and start it


@meindex forkAt:@-
@item forkAt:@- priority
Create a new process executing the receiver with given priority
and start it


@meindex forkWithoutPreemption
@item forkWithoutPreemption
Evaluate the receiver in a process that cannot be preempted.
If the receiver expect a parameter, pass the current process.


@meindex newProcess
@item newProcess
Create a new process executing the receiver in suspended state.
The priority is the same as for the calling process. The receiver
must not contain returns


@meindex newProcessWith:@-
@item newProcessWith:@- anArray
Create a new process executing the receiver with the passed
arguments, and leave it in suspended state. The priority is
the same as for the calling process. The receiver must not
contain returns


@meindex valueWithoutInterrupts
@item valueWithoutInterrupts
Evaluate aBlock and delay all interrupts that are requested to the
active process during its execution to after aBlock returns.


@meindex valueWithoutPreemption
@item valueWithoutPreemption
Evaluate the receiver with external interrupts disabled.  This
effectively disables preemption as long as the block does not
explicitly yield control, wait on semaphores, and the like.


@end table



@node BlockClosure-overriding
@subsection BlockClosure:@- overriding

@table @b
@meindex copy
@item copy
Answer the receiver.

@meindex deepCopy
@item deepCopy
Answer a shallow copy.


@end table



@node BlockClosure-testing
@subsection BlockClosure:@- testing

@table @b
@meindex hasMethodReturn
@item hasMethodReturn
Answer whether the block contains a method return


@end table



@node BlockClosure-unwind protection
@subsection BlockClosure:@- unwind protection

@table @b
@meindex ensure:@-
@item ensure:@- aBlock
Evaluate the receiver; when any exception is signaled exit returning the
result of evaluating aBlock; if no exception is raised, return the result
of evaluating aBlock when the receiver has ended


@meindex ifCurtailed:@-
@item ifCurtailed:@- aBlock
Evaluate the receiver; if its execution triggers an unwind which truncates
the execution of the block (`curtails' the block), evaluate aBlock.  The
three cases which can curtail the execution of the receiver are:@- a non-local
return in the receiver, a non-local return in a block evaluated by the
receiver which returns past the receiver itself, and an exception raised
and not resumed during the execution of the receiver.


@meindex valueWithUnwind
@slindex valueWithUnwind
@slindex ensure:@-
@slindex on:@-do:@-
@item valueWithUnwind
Evaluate the receiver. Any errors caused by the block will cause a
backtrace, but execution will continue in the method that sent
#valueWithUnwind, after that call. Example:@-
[ 1 / 0 ] valueWithUnwind.
'unwind works!' printNl.

Important:@- this method is public, but it is intended to be used in
very special cases (as a rule of thumb, use it only when the
corresponding C code uses the _gst_prepare_execution_environment and
_gst_finish_execution_environment functions). You should usually
rely on #ensure:@- and #on:@-do:@-.


@end table

@node BlockContext
@section BlockContext
@clindex BlockContext

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: ContextPart
@itemx Category: Language-Implementation
My instances represent executing Smalltalk blocks, which are portions of
executeable code that have access to the environment that they were declared
in, take parameters, and result from BlockClosure objects created to be
executed by methods outside the current class.  Block contexts are
created by messages sent to compute a closure's value.  They contain a stack
and also provide some methods that can be used in inspection or debugging.
@end table

@menu
* BlockContext-accessing::  (instance)
* BlockContext-debugging::  (instance)
* BlockContext-printing::  (instance)
@end menu



@node BlockContext-accessing
@subsection BlockContext:@- accessing

@table @b
@meindex caller
@item caller
Answer the context that called the receiver


@meindex home
@item home
Answer the MethodContext to which the receiver refers, or
nil if it has been optimized away


@meindex isBlock
@item isBlock
Answer whether the receiver is a block context


@meindex isDisabled
@slindex ensure:@-
@item isDisabled
Answers false, because contexts that are skipped when doing a return
are always MethodContexts.  BlockContexts are removed from the chain
whenever a non-local return is done, while MethodContexts need to
stay there in case there is a non-local return from the #ensure:@-
block.


@meindex isEnvironment
@item isEnvironment
To create a valid execution environment for the interpreter even before
it starts, GST creates a fake context whose selector is nil and which
can be used as a marker for the current execution environment.  Answer
whether the receiver is that kind of context (always false, since
those contexts are always MethodContexts).


@meindex isUnwind
@slindex continue:@-
@slindex ensure:@-
@item isUnwind
Answers whether the context must continue execution even after a
non-local return (a return from the enclosing method of a block, or
a call to the #continue:@- method of ContextPart).  Such contexts are
created only by #ensure:@- and are always MethodContexts.


@meindex nthOuterContext:@-
@item nthOuterContext:@- n
Answer the n-th outer block/method context for the receiver


@meindex outerContext
@item outerContext
Answer the outer block/method context for the receiver


@end table



@node BlockContext-debugging
@subsection BlockContext:@- debugging

@table @b
@meindex isInternalExceptionHandlingContext
@item isInternalExceptionHandlingContext
Answer whether the receiver is a context that should be hidden to the user
when presenting a backtrace.  Such contexts are never blocks, but check
the rest of the chain.


@end table



@node BlockContext-printing
@subsection BlockContext:@- printing

@table @b
@meindex printOn:@-
@item printOn:@- aStream
Print a representation for the receiver on aStream


@end table

@node Boolean
@section Boolean
@clindex Boolean

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Object
@itemx Category: Language-Data types
I have two instances in the Smalltalk system:@- true and false.  I provide
methods that are conditional on boolean values, such as conditional
execution and loops, and conditional testing, such as conditional and and
conditional or.  I should say that I appear to provide those operations; 
my subclasses True and False actually provide those operations.
@end table

@menu
* Boolean class-testing::  (class)
* Boolean-basic::  (instance)
* Boolean-C hacks::  (instance)
* Boolean-overriding::  (instance)
* Boolean-storing::  (instance)
@end menu



@node Boolean class-testing
@subsection Boolean class:@- testing

@table @b
@meindex isIdentity
@item isIdentity
Answer whether x = y implies x == y for instances of the receiver


@meindex isImmediate
@item isImmediate
Answer whether, if x is an instance of the receiver, x copy == x


@end table



@node Boolean-basic
@subsection Boolean:@- basic

@table @b
@meindex &
@item & aBoolean
This method's functionality should be implemented by subclasses of Boolean

@meindex and:@-
@item and:@- aBlock
This method's functionality should be implemented by subclasses of Boolean

@meindex eqv:@-
@item eqv:@- aBoolean
This method's functionality should be implemented by subclasses of Boolean

@meindex ifFalse:@-
@item ifFalse:@- falseBlock
This method's functionality should be implemented by subclasses of Boolean

@meindex ifFalse:@-ifTrue:@-
@item ifFalse:@- falseBlock ifTrue:@- trueBlock
This method's functionality should be implemented by subclasses of Boolean

@meindex ifTrue:@-
@item ifTrue:@- trueBlock
This method's functionality should be implemented by subclasses of Boolean

@meindex ifTrue:@-ifFalse:@-
@item ifTrue:@- trueBlock ifFalse:@- falseBlock
This method's functionality should be implemented by subclasses of Boolean

@meindex not
@item not
This method's functionality should be implemented by subclasses of Boolean

@meindex or:@-
@item or:@- aBlock
This method's functionality should be implemented by subclasses of Boolean

@meindex xor:@-
@item xor:@- aBoolean
This method's functionality should be implemented by subclasses of Boolean

@meindex |
@item | aBoolean
This method's functionality should be implemented by subclasses of Boolean

@end table



@node Boolean-C hacks
@subsection Boolean:@- C hacks

@table @b
@meindex asCBooleanValue
@item asCBooleanValue
This method's functionality should be implemented by subclasses of Boolean

@end table



@node Boolean-overriding
@subsection Boolean:@- overriding

@table @b
@meindex deepCopy
@item deepCopy
Answer the receiver.

@meindex shallowCopy
@item shallowCopy
Answer the receiver.

@end table



@node Boolean-storing
@subsection Boolean:@- storing

@table @b
@meindex isLiteralObject
@item isLiteralObject
Answer whether the receiver is expressible as a Smalltalk literal.


@meindex storeLiteralOn:@-
@item storeLiteralOn:@- aStream
Store on aStream some Smalltalk code which compiles to the receiver


@meindex storeOn:@-
@item storeOn:@- aStream
Store on aStream some Smalltalk code which compiles to the receiver


@end table

@node ByteArray
@section ByteArray
@clindex ByteArray

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: ArrayedCollection
@itemx Category: Collections-Sequenceable
My instances are similar to strings in that they are both represented as
a sequence of bytes, but my individual elements are integers, where as
a String's elements are characters.
@end table

@menu
* ByteArray class-instance creation::  (class)
* ByteArray-basic::  (instance)
* ByteArray-built ins::  (instance)
* ByteArray-CObject::  (instance)
* ByteArray-converting::  (instance)
* ByteArray-more advanced accessing::  (instance)
* ByteArray-storing::  (instance)
@end menu



@node ByteArray class-instance creation
@subsection ByteArray class:@- instance creation

@table @b
@meindex fromCData:@-size:@-
@item fromCData:@- aCObject size:@- anInteger
Answer a ByteArray containing anInteger bytes starting at the location pointed
to by aCObject


@end table



@node ByteArray-basic
@subsection ByteArray:@- basic

@table @b
@meindex =
@item = aCollection
Answer whether the receiver's items match those in aCollection


@meindex indexOf:@-startingAt:@-
@item indexOf:@- anElement startingAt:@- anIndex
Answer the first index > anIndex which contains anElement.
Invoke exceptionBlock and answer its result if no item is found


@meindex indexOf:@-startingAt:@-ifAbsent:@-
@item indexOf:@- anElement startingAt:@- anIndex ifAbsent:@- exceptionBlock
Answer the first index > anIndex which contains anElement.
Invoke exceptionBlock and answer its result if no item is found


@end table



@node ByteArray-built ins
@subsection ByteArray:@- built ins

@table @b
@meindex asCData:@-
@item asCData:@- aCType
Allocate memory with malloc for a copy of the receiver, and return
it converted to a CObject with the given type


@meindex at:@-ifAbsent:@-
@item at:@- anIndex ifAbsent:@- aBlock
Answer the index-th indexed instance variable of the receiver


@meindex byteAt:@-
@item byteAt:@- index
Answer the index-th indexed instance variable of the receiver


@meindex byteAt:@-put:@-
@item byteAt:@- index put:@- value
Store the `value' byte in the index-th indexed instance variable
of the receiver


@meindex hash
@item hash
Answer an hash value for the receiver


@meindex replaceFrom:@-to:@-with:@-startingAt:@-
@item replaceFrom:@- start to:@- stop with:@- aByteArray startingAt:@- replaceStart
Replace the characters from start to stop with the
bytes contained in aByteArray (which, actually, can be
any variable byte class), starting at the replaceStart
location of aByteArray


@meindex replaceFrom:@-to:@-withString:@-startingAt:@-
@item replaceFrom:@- start to:@- stop withString:@- aString startingAt:@- replaceStart
Replace the characters from start to stop with the
ASCII codes contained in aString (which, actually, can be
any variable byte class), starting at the replaceStart
location of aString


@end table



@node ByteArray-CObject
@subsection ByteArray:@- CObject

@table @b
@meindex asCData
@item asCData
Allocate memory with malloc for a copy of the receiver, and return
a pointer to it as a CByte.


@meindex castTo:@-
@item castTo:@- type
Give access to the receiver as a value with the given CType.


@end table



@node ByteArray-converting
@subsection ByteArray:@- converting

@table @b
@meindex asString
@item asString
Answer a String whose character's ASCII codes are the receiver's contents


@meindex asUnicodeString
@item asUnicodeString
Answer a UnicodeString whose character's codes are the receiver's contents.
This is not implemented unless you load the I18N package.


@end table



@node ByteArray-more advanced accessing
@subsection ByteArray:@- more advanced accessing

@table @b
@meindex charAt:@-
@item charAt:@- index
Access the C char at the given index in the receiver. The value is
returned as a Smalltalk Character.
Indices are 1-based just like for other Smalltalk access.


@meindex charAt:@-put:@-
@item charAt:@- index put:@- value
Store as a C char the Smalltalk Character or Integer object
identified by `value', at the given index in the receiver, using
sizeof(char) bytes - i.e. 1 byte.
Indices are 1-based just like for other Smalltalk access.


@meindex doubleAt:@-
@item doubleAt:@- index
Access the C double at the given index in the receiver.
Indices are 1-based just like for other Smalltalk access.


@meindex doubleAt:@-put:@-
@item doubleAt:@- index put:@- value
Store the Smalltalk Float object identified by `value', at the
given index in the receiver, writing it like a C double.
Indices are 1-based just like for other Smalltalk access.


@meindex floatAt:@-
@item floatAt:@- index
Access the C float at the given index in the receiver.
Indices are 1-based just like for other Smalltalk access.


@meindex floatAt:@-put:@-
@item floatAt:@- index put:@- value
Store the Smalltalk Float object identified by `value', at the
given index in the receiver, writing it like a C float.
Indices are 1-based just like for other Smalltalk access.


@meindex intAt:@-
@item intAt:@- index
Access the C int at the given index in the receiver.
Indices are 1-based just like for other Smalltalk access.


@meindex intAt:@-put:@-
@item intAt:@- index put:@- value
Store the Smalltalk Integer object identified by `value', at the
given index in the receiver, using sizeof(int) bytes.
Indices are 1-based just like for other Smalltalk access.


@meindex longAt:@-
@item longAt:@- index
Access the C long int at the given index in the receiver.
Indices are 1-based just like for other Smalltalk access.


@meindex longAt:@-put:@-
@item longAt:@- index put:@- value
Store the Smalltalk Integer object identified by `value', at the
given index in the receiver, using sizeof(long) bytes.
Indices are 1-based just like for other Smalltalk access.


@meindex longDoubleAt:@-
@item longDoubleAt:@- index
Access the C long double at the given index in the receiver.
Indices are 1-based just like for other Smalltalk access.


@meindex longDoubleAt:@-put:@-
@item longDoubleAt:@- index put:@- value
Store the Smalltalk Float object identified by `value', at the
given index in the receiver, writing it like a C double.
Indices are 1-based just like for other Smalltalk access.


@meindex objectAt:@-
@item objectAt:@- index
Access the Smalltalk object (OOP) at the given index in the receiver.
Indices are 1-based just like for other Smalltalk access.


@meindex objectAt:@-put:@-
@item objectAt:@- index put:@- value
Store a pointer (OOP) to the Smalltalk object identified by `value',
at the given index in the receiver.
Indices are 1-based just like for other Smalltalk access.


@meindex shortAt:@-
@item shortAt:@- index
Access the C short int at the given index in the receiver.
Indices are 1-based just like for other Smalltalk access.


@meindex shortAt:@-put:@-
@item shortAt:@- index put:@- value
Store the Smalltalk Integer object identified by `value', at the
given index in the receiver, using sizeof(short) bytes.
Indices are 1-based just like for other Smalltalk access.


@meindex stringAt:@-
@item stringAt:@- index
Access the string pointed by the C `char *' at the given index in the
receiver. Indices are 1-based just like for other Smalltalk access.


@meindex stringAt:@-put:@-
@item stringAt:@- index put:@- value
Store the Smalltalk String object identified by `value', at the
given index in the receiver, writing it like a *FRESHLY
ALLOCATED* C string. It is the caller's responsibility to free
it if necessary.
Indices are 1-based just like for other Smalltalk access.


@meindex ucharAt:@-
@item ucharAt:@- index
Access the C unsigned char at the given index in the receiver.
The value is returned as a Smalltalk Character.
Indices are 1-based just like for other Smalltalk access.


@meindex ucharAt:@-put:@-
@item ucharAt:@- index put:@- value
Store as a C char the Smalltalk Character or Integer object
identified by `value', at the given index in the receiver, using
sizeof(char) bytes - i.e. 1 byte.
Indices are 1-based just like for other Smalltalk access.


@meindex uintAt:@-
@item uintAt:@- index
Access the C unsigned int at the given index in the receiver.
Indices are 1-based just like for other Smalltalk access.


@meindex uintAt:@-put:@-
@item uintAt:@- index put:@- value
Store the Smalltalk Integer object identified by `value', at the
given index in the receiver, using sizeof(int) bytes.
Indices are 1-based just like for other Smalltalk access.


@meindex ulongAt:@-
@item ulongAt:@- index
Access the C unsigned long int at the given index in the receiver.
Indices are 1-based just like for other Smalltalk access.


@meindex ulongAt:@-put:@-
@item ulongAt:@- index put:@- value
Store the Smalltalk Integer object identified by `value', at the
given index in the receiver, using sizeof(long) bytes.
Indices are 1-based just like for other Smalltalk access.


@meindex unsignedCharAt:@-
@item unsignedCharAt:@- index
Access the C unsigned char at the given index in the receiver.
The value is returned as a Smalltalk Character.
Indices are 1-based just like for other Smalltalk access.


@meindex unsignedCharAt:@-put:@-
@item unsignedCharAt:@- index put:@- value
Store as a C char the Smalltalk Character or Integer object
identified by `value', at the given index in the receiver, using
sizeof(char) bytes - i.e. 1 byte.
Indices are 1-based just like for other Smalltalk access.


@meindex unsignedIntAt:@-
@item unsignedIntAt:@- index
Access the C unsigned int at the given index in the receiver.
Indices are 1-based just like for other Smalltalk access.


@meindex unsignedIntAt:@-put:@-
@item unsignedIntAt:@- index put:@- value
Store the Smalltalk Integer object identified by `value', at the
given index in the receiver, using sizeof(int) bytes.
Indices are 1-based just like for other Smalltalk access.


@meindex unsignedLongAt:@-
@item unsignedLongAt:@- index
Access the C unsigned long int at the given index in the receiver.
Indices are 1-based just like for other Smalltalk access.


@meindex unsignedLongAt:@-put:@-
@item unsignedLongAt:@- index put:@- value
Store the Smalltalk Integer object identified by `value', at the
given index in the receiver, using sizeof(long) bytes.
Indices are 1-based just like for other Smalltalk access.


@meindex unsignedShortAt:@-
@item unsignedShortAt:@- index
Access the C unsigned short int at the given index in the receiver.
Indices are 1-based just like for other Smalltalk access.


@meindex unsignedShortAt:@-put:@-
@item unsignedShortAt:@- index put:@- value
Store the Smalltalk Integer object identified by `value', at the
given index in the receiver, using sizeof(short) bytes.
Indices are 1-based just like for other Smalltalk access.


@meindex ushortAt:@-
@item ushortAt:@- index
Access the C unsigned short int at the given index in the receiver.
Indices are 1-based just like for other Smalltalk access.


@meindex ushortAt:@-put:@-
@item ushortAt:@- index put:@- value
Store the Smalltalk Integer object identified by `value', at the
given index in the receiver, using sizeof(short) bytes.
Indices are 1-based just like for other Smalltalk access.


@end table



@node ByteArray-storing
@subsection ByteArray:@- storing

@table @b
@meindex isLiteralObject
@item isLiteralObject
Answer whether the receiver is expressible as a Smalltalk literal.


@meindex storeLiteralOn:@-
@item storeLiteralOn:@- aStream
Put a Smalltalk literal evaluating to the receiver on aStream.


@meindex storeOn:@-
@item storeOn:@- aStream
Put Smalltalk code evaluating to the receiver on aStream.


@end table

@node CAggregate
@section CAggregate
@clindex CAggregate

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: CObject
@itemx Category: Language-C interface

@end table

@menu
* CAggregate class-accessing::  (class)
* CAggregate-accessing::  (instance)
@end menu



@node CAggregate class-accessing
@subsection CAggregate class:@- accessing

@table @b
@meindex alignof
@item alignof
Answer the receiver's instances required aligment


@meindex sizeof
@item sizeof
Answer the receiver's instances size


@end table



@node CAggregate-accessing
@subsection CAggregate:@- accessing

@table @b
@meindex elementType
@item elementType
Answer the type over which the receiver is constructed.


@end table

@node CallinProcess
@section CallinProcess
@clindex CallinProcess

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Process
@itemx Category: Language-Processes
I represent a unit of computation for which external C code requested
execution, so I must store the returned value once my computation
terminates and I must not survive across image saves (since those who
invoked me no longer exist).  I am otherwise equivalent to a Process.
@end table

@menu
* CallinProcess-debugging::  (instance)
@end menu



@node CallinProcess-debugging
@subsection CallinProcess:@- debugging

@table @b
@meindex detach
@item detach
Continue running the receiver as a normal Process, and return
nil from the callin.


@end table

@node CArray
@section CArray
@clindex CArray

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: CAggregate
@itemx Category: Language-C interface

@end table

@menu
* CArray-accessing::  (instance)
@end menu



@node CArray-accessing
@subsection CArray:@- accessing

@table @b
@meindex alignof
@item alignof
Answer the receiver's required aligment


@meindex sizeof
@item sizeof
Answer the receiver's size


@end table

@node CArrayCType
@section CArrayCType
@clindex CArrayCType

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: CPtrCType
@itemx Category: Language-C interface

@end table

@menu
* CArrayCType class-instance creation::  (class)
* CArrayCType-accessing::  (instance)
* CArrayCType-basic::  (instance)
* CArrayCType-storing::  (instance)
@end menu



@node CArrayCType class-instance creation
@subsection CArrayCType class:@- instance creation

@table @b
@meindex elementType:@-
@item elementType:@- aCType
This method should not be called for instances of this class.

@meindex elementType:@-numberOfElements:@-
@item elementType:@- aCType numberOfElements:@- anInteger
Answer a new instance of CPtrCType that maps an array whose elements
are of the given CType, and whose size is exactly anInteger elements
(of course, anInteger only matters for allocation, not for access, since
no out-of-bounds protection is provided for C objects).


@meindex from:@-
@item from:@- type
Private - Called by CType>>from:@- for arrays


@end table



@node CArrayCType-accessing
@subsection CArrayCType:@- accessing

@table @b
@meindex alignof
@item alignof
Answer the alignment of the receiver's instances


@meindex numberOfElements
@item numberOfElements
Answer the number of elements in the receiver's instances


@meindex sizeof
@item sizeof
Answer the size of the receiver's instances


@end table



@node CArrayCType-basic
@subsection CArrayCType:@- basic

@table @b
@meindex =
@item = anObject
Return whether the receiver and anObject are equal.


@meindex hash
@item hash
Return a hash code for the receiver.


@end table



@node CArrayCType-storing
@subsection CArrayCType:@- storing

@table @b
@meindex storeOn:@-
@item storeOn:@- aStream
As with super.


@end table

@node CBoolean
@section CBoolean
@clindex CBoolean

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: CByte
@itemx Category: Language-C interface
I return true if a byte is not zero, false otherwise.
@end table

@menu
* CBoolean class-conversion::  (class)
* CBoolean-accessing::  (instance)
@end menu



@node CBoolean class-conversion
@subsection CBoolean class:@- conversion

@table @b
@meindex type
@item type
Answer a CType for the receiver


@end table



@node CBoolean-accessing
@subsection CBoolean:@- accessing

@table @b
@meindex value
@item value
Get the receiver's value - answer true if it is != 0, false if it is 0.


@meindex value:@-
@item value:@- aBoolean
Set the receiver's value - it's the same as for CBytes, but we
get a Boolean, not a Character


@end table

@node CByte
@section CByte
@clindex CByte

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: CUChar
@itemx Category: Language-C interface
You know what a byte is, don't you?!?
@end table

@menu
* CByte class-conversion::  (class)
* CByte-accessing::  (instance)
@end menu



@node CByte class-conversion
@subsection CByte class:@- conversion

@table @b
@meindex cObjStoredType
@item cObjStoredType
Nothing special in the default case - answer a CType for the receiver


@meindex type
@item type
Answer a CType for the receiver


@end table



@node CByte-accessing
@subsection CByte:@- accessing

@table @b
@meindex cObjStoredType
@item cObjStoredType
Nothing special in the default case - answer the receiver's CType


@meindex value
@item value
Answer the value the receiver is pointing to. The returned value
is a SmallInteger


@meindex value:@-
@item value:@- aValue
Set the receiver to point to the value, aValue (a SmallInteger).


@end table

@node CCallable
@section CCallable
@clindex CCallable

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: CObject
@itemx Category: Language-C interface
I am not part of the Smalltalk definition.  My instances contain information
about C functions that can be called from within Smalltalk, such as number
and type of parameters.  This information is used by the C callout mechanism
to perform the actual call-out to C routines.
@end table

@menu
* CCallable class-instance creation::  (class)
* CCallable-accessing::  (instance)
* CCallable-calling::  (instance)
* CCallable-restoring::  (instance)
@end menu



@node CCallable class-instance creation
@subsection CCallable class:@- instance creation

@table @b
@meindex for:@-returning:@-withArgs:@-
@item for:@- aCObject returning:@- returnTypeSymbol withArgs:@- argsArray
Answer a CFunctionDescriptor with the given address, return type
and arguments.  The address will be reset to NULL upon image save
(and it's the user's task to figure out a way to reinitialize it!)


@end table



@node CCallable-accessing
@subsection CCallable:@- accessing

@table @b
@meindex isValid
@item isValid
Answer whether the object represents a valid function.


@meindex returnType
@item returnType
Not commented.

@end table



@node CCallable-calling
@subsection CCallable:@- calling

@table @b
@meindex asyncCall
@slindex self
@slindex selfSmalltalk
@item asyncCall
Perform the call-out for the function represented by the receiver.
The arguments (and the receiver if one of the arguments has type
#self or #selfSmalltalk) are taken from the parent context.
Asynchronous call-outs don't return a value, but if the
function calls back into Smalltalk the process that started the
call-out is not suspended.


@meindex asyncCallNoRetryFrom:@-
@slindex self
@slindex selfSmalltalk
@slindex asyncCallFrom:@-
@item asyncCallNoRetryFrom:@- aContext
Perform the call-out for the function represented by the receiver.
The arguments (and the receiver if one of the arguments has type
#self or #selfSmalltalk) are taken from the base of the stack of
aContext.  Asynchronous call-outs don't return a value, but if the
function calls back into Smalltalk the process that started the
call-out is not suspended.  Unlike #asyncCallFrom:@-, this method
does not attempt to find functions in shared objects.


@meindex callInto:@-
@slindex self
@slindex selfSmalltalk
@item callInto:@- aValueHolder
Perform the call-out for the function represented by the receiver.  The
arguments (and the receiver if one of the arguments has type
#self or #selfSmalltalk) are taken from the parent context, and the
the result is stored into aValueHolder.  aValueHolder is also returned.


@meindex callNoRetryFrom:@-into:@-
@slindex self
@slindex selfSmalltalk
@slindex callFrom:@-into:@-
@item callNoRetryFrom:@- aContext into:@- aValueHolder
Perform the call-out for the function represented by the receiver.  The
arguments (and the receiver if one of the arguments has type
#self or #selfSmalltalk) are taken from the base of the stack of
aContext, and the result is stored into aValueHolder.  aValueHolder
is also returned.  Unlike #callFrom:@-into:@-, this method does not
attempt to find functions in shared objects.


@end table



@node CCallable-restoring
@subsection CCallable:@- restoring

@table @b
@meindex link
@item link
Rebuild the object after the image is restarted.


@end table

@node CCallbackDescriptor
@section CCallbackDescriptor
@clindex CCallbackDescriptor

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: CCallable
@itemx Category: Language-C interface
I am not part of the Smalltalk definition.  My instances are
able to convert blocks into C functions that can be passed to C.
@end table

@menu
* CCallbackDescriptor class-instance creation::  (class)
* CCallbackDescriptor-accessing::  (instance)
* CCallbackDescriptor-restoring::  (instance)
@end menu



@node CCallbackDescriptor class-instance creation
@subsection CCallbackDescriptor class:@- instance creation

@table @b
@meindex for:@-returning:@-withArgs:@-
@item for:@- aBlock returning:@- returnTypeSymbol withArgs:@- argsArray
Answer a CCallbackDescriptor with the given block, return type and
arguments.


@end table



@node CCallbackDescriptor-accessing
@subsection CCallbackDescriptor:@- accessing

@table @b
@meindex block
@item block
Answer the block of the function represented by the receiver.


@meindex block:@-
@item block:@- aBlock
Set the block of the function represented by the receiver.


@end table



@node CCallbackDescriptor-restoring
@subsection CCallbackDescriptor:@- restoring

@table @b
@meindex link
@item link
Make the address of the function point to the registered address.


@end table

@node CChar
@section CChar
@clindex CChar

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: CScalar
@itemx Category: Language-C interface

@end table

@menu
* CChar class-accessing::  (class)
* CChar-accessing::  (instance)
* CChar-conversion::  (instance)
@end menu



@node CChar class-accessing
@subsection CChar class:@- accessing

@table @b
@meindex alignof
@item alignof
Answer the receiver's instances required aligment


@meindex cObjStoredType
@item cObjStoredType
Private - Answer an index referring to the receiver's instances scalar type


@meindex sizeof
@item sizeof
Answer the receiver's instances size


@end table



@node CChar-accessing
@subsection CChar:@- accessing

@table @b
@meindex alignof
@item alignof
Answer the receiver's required aligment


@meindex cObjStoredType
@item cObjStoredType
Private - Answer an index referring to the receiver's scalar type


@meindex sizeof
@item sizeof
Answer the receiver's size


@end table



@node CChar-conversion
@subsection CChar:@- conversion

@table @b
@meindex asByteArray:@-
@item asByteArray:@- size
Convert size bytes pointed to by the receiver to a String


@meindex asString
@item asString
Convert the data pointed to by the receiver, up to the first NULL byte,
to a String


@meindex asString:@-
@item asString:@- size
Convert size bytes pointed to by the receiver to a String


@end table

@node CCompound
@section CCompound
@clindex CCompound

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: CObject
@itemx Category: Language-C interface

@end table

@menu
* CCompound class-instance creation::  (class)
* CCompound class-subclass creation::  (class)
* CCompound-debugging::  (instance)
@end menu



@node CCompound class-instance creation
@subsection CCompound class:@- instance creation

@table @b
@meindex gcNew
@item gcNew
Allocate a new instance of the receiver, backed by garbage-collected
storage.


@meindex new
@slindex addToBeFinalized
@item new
Allocate a new instance of the receiver. To free the memory after
GC, remember to call #addToBeFinalized.


@end table



@node CCompound class-subclass creation
@subsection CCompound class:@- subclass creation

@table @b
@meindex alignof
@item alignof
Answer 1, the alignment of an empty struct


@meindex classPragmas
@item classPragmas
Return the pragmas that are written in the file-out of this class.


@meindex compileSize:@-align:@-
@item compileSize:@- size align:@- alignment
Private - Compile sizeof and alignof methods


@meindex declaration
@item declaration
Return the description of the fields in the receiver class.


@meindex declaration:@-
@item declaration:@- array
This method's functionality should be implemented by subclasses of CCompound

@meindex declaration:@-inject:@-into:@-
@item declaration:@- array inject:@- startOffset into:@- aBlock
Compile methods that implement the declaration in array.  To
compute the offset after each field, the value of the
old offset plus the new field's size is passed to aBlock,
together with the new field's alignment requirements.


@meindex emitFieldNameTo:@-for:@-
@slindex examineOn:@-
@item emitFieldNameTo:@- str for:@- name
Private - Emit onto the given stream the code for adding the
given selector to the CCompound's #examineOn:@- method.


@meindex newStruct:@-declaration:@-
@slindex subclass:@-declaration:@-
@item newStruct:@- structName declaration:@- array
The old way to create a CStruct.  Superseded by #subclass:@-declaration:@-...


@meindex sizeof
@item sizeof
Answer 0, the size of an empty struct


@meindex subclass:@-declaration:@-classVariableNames:@-poolDictionaries:@-category:@-
@item subclass:@- structName declaration:@- array classVariableNames:@- cvn poolDictionaries:@- pd category:@- category
Create a new class with the given name that contains code
to implement the given C struct.  All the parameters except
`array' are the same as for a standard class creation message;
see documentation for more information


@end table



@node CCompound-debugging
@subsection CCompound:@- debugging

@table @b
@meindex examineOn:@-
@item examineOn:@- aStream
Print the contents of the receiver's fields on aStream


@meindex fieldSelectorList
@slindex examineOn:@-
@item fieldSelectorList
Answer a list of selectors whose return values should be printed
by #examineOn:@-.


@end table

@node CDouble
@section CDouble
@clindex CDouble

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: CScalar
@itemx Category: Language-C interface

@end table

@menu
* CDouble class-accessing::  (class)
* CDouble-accessing::  (instance)
@end menu



@node CDouble class-accessing
@subsection CDouble class:@- accessing

@table @b
@meindex alignof
@item alignof
Answer the receiver's instances required aligment


@meindex cObjStoredType
@item cObjStoredType
Private - Answer an index referring to the receiver's instances scalar type


@meindex sizeof
@item sizeof
Answer the receiver's instances size


@end table



@node CDouble-accessing
@subsection CDouble:@- accessing

@table @b
@meindex alignof
@item alignof
Answer the receiver's required aligment


@meindex cObjStoredType
@item cObjStoredType
Private - Answer an index referring to the receiver's scalar type


@meindex sizeof
@item sizeof
Answer the receiver's size


@end table

@node CFloat
@section CFloat
@clindex CFloat

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: CScalar
@itemx Category: Language-C interface

@end table

@menu
* CFloat class-accessing::  (class)
* CFloat-accessing::  (instance)
@end menu



@node CFloat class-accessing
@subsection CFloat class:@- accessing

@table @b
@meindex alignof
@item alignof
Answer the receiver's instances required aligment


@meindex cObjStoredType
@item cObjStoredType
Private - Answer an index referring to the receiver's instances scalar type


@meindex sizeof
@item sizeof
Answer the receiver's instances size


@end table



@node CFloat-accessing
@subsection CFloat:@- accessing

@table @b
@meindex alignof
@item alignof
Answer the receiver's required aligment


@meindex cObjStoredType
@item cObjStoredType
Private - Answer an index referring to the receiver's scalar type


@meindex sizeof
@item sizeof
Answer the receiver's size


@end table

@node CFunctionDescriptor
@section CFunctionDescriptor
@clindex CFunctionDescriptor

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: CCallable
@itemx Category: Language-C interface
I am not part of the Smalltalk definition.  My instances contain information
about C functions that can be called from within Smalltalk, such as number
and type of parameters.  This information is used by the C callout mechanism
to perform the actual call-out to C routines.
@end table

@menu
* CFunctionDescriptor class-instance creation::  (class)
* CFunctionDescriptor class-testing::  (class)
* CFunctionDescriptor-accessing::  (instance)
* CFunctionDescriptor-printing::  (instance)
* CFunctionDescriptor-restoring::  (instance)
@end menu



@node CFunctionDescriptor class-instance creation
@subsection CFunctionDescriptor class:@- instance creation

@table @b
@meindex for:@-returning:@-withArgs:@-
@item for:@- funcName returning:@- returnTypeSymbol withArgs:@- argsArray
Answer a CFunctionDescriptor with the given function name, return type
and arguments.  funcName must be a String.


@end table



@node CFunctionDescriptor class-testing
@subsection CFunctionDescriptor class:@- testing

@table @b
@meindex addressOf:@-
@item addressOf:@- function
Answer whether a function is registered (on the C side) with the
given name or is dynamically loadable.


@meindex isFunction:@-
@item isFunction:@- function
Answer whether a function is registered (on the C side) with the
given name.


@end table



@node CFunctionDescriptor-accessing
@subsection CFunctionDescriptor:@- accessing

@table @b
@meindex name
@item name
Answer the name of the function (on the C side) represented by the
receiver


@meindex name:@-
@item name:@- aString
Set the name of the function (on the C side) represented by the
receiver


@end table



@node CFunctionDescriptor-printing
@subsection CFunctionDescriptor:@- printing

@table @b
@meindex printOn:@-
@item printOn:@- aStream
Print a representation of the receiver onto aStream


@end table



@node CFunctionDescriptor-restoring
@subsection CFunctionDescriptor:@- restoring

@table @b
@meindex link
@item link
Make the address of the function point to the registered address.


@end table

@node Character
@section Character
@clindex Character

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Magnitude
@itemx Category: Language-Data types
My instances represent the 256 characters of the character set.  I provide
messages to translate between integers and character objects, and provide
names for some of the common unprintable characters.

Character is always used (mostly for performance reasons) when referring
to characters whose code point is between 0 and 127.  Above 127, instead,
more care is needed:@- Character refers to bytes that are used as part of
encoding of a character, while UnicodeCharacter refers to the character
itself.
@end table

@menu
* Character class-built ins::  (class)
* Character class-constants::  (class)
* Character class-initializing lookup tables::  (class)
* Character class-instance creation::  (class)
* Character class-testing::  (class)
* Character-built ins::  (instance)
* Character-coercion methods::  (instance)
* Character-comparing::  (instance)
* Character-converting::  (instance)
* Character-printing::  (instance)
* Character-storing::  (instance)
* Character-testing::  (instance)
* Character-testing functionality::  (instance)
@end menu



@node Character class-built ins
@subsection Character class:@- built ins

@table @b
@meindex asciiValue:@-
@item asciiValue:@- anInteger
Returns the character object corresponding to anInteger.  Error if
anInteger is not an integer, or not in 0..127.


@meindex codePoint:@-
@item codePoint:@- anInteger
Returns the character object, possibly an UnicodeCharacter, corresponding
to anInteger.  Error if anInteger is not an integer, or not in 0..16r10FFFF.


@meindex value:@-
@item value:@- anInteger
Returns the character object corresponding to anInteger.  Error if
anInteger is not an integer, or not in 0..255.


@end table



@node Character class-constants
@subsection Character class:@- constants

@table @b
@meindex backspace
@item backspace
Returns the character 'backspace'


@meindex bell
@item bell
Returns the character 'bel'


@meindex cr
@item cr
Returns the character 'cr'


@meindex eof
@item eof
Returns the character 'eof', also known as 'sub'


@meindex eot
@item eot
Returns the character 'eot', also known as 'Ctrl-D'


@meindex esc
@item esc
Returns the character 'esc'


@meindex ff
@item ff
Returns the character 'ff', also known as 'newPage'


@meindex lf
@item lf
Returns the character 'lf', also known as 'nl'


@meindex newPage
@item newPage
Returns the character 'newPage', also known as 'ff'


@meindex nl
@item nl
Returns the character 'nl', also known as 'lf'


@meindex nul
@item nul
Returns the character 'nul'


@meindex space
@item space
Returns the character 'space'


@meindex tab
@item tab
Returns the character 'tab'


@end table



@node Character class-initializing lookup tables
@subsection Character class:@- initializing lookup tables

@table @b
@meindex initialize
@item initialize
Initialize the lookup table which is used to make case and digit-to-char
conversions faster.
Indices in Table are ASCII values incremented by one. Indices 1-256
classify chars (0 = nothing special, 2 = separator, 48 = digit,
55 = uppercase, 3 = lowercase), indices 257-512 map to lowercase chars,
indices 513-768 map to uppercase chars.


@end table



@node Character class-instance creation
@subsection Character class:@- instance creation

@table @b
@meindex digitValue:@-
@item digitValue:@- anInteger
Returns a character that corresponds to anInteger.  0-9 map to $0-$9,
10-35 map to $A-$Z


@end table



@node Character class-testing
@subsection Character class:@- testing

@table @b
@meindex isImmediate
@item isImmediate
Answer whether, if x is an instance of the receiver, x copy == x


@end table



@node Character-built ins
@subsection Character:@- built ins

@table @b
@meindex =
@item = char
Boolean return value; true if the characters are equal


@meindex asInteger
@slindex codePoint
@slindex asciiValue
@slindex value
@slindex asInteger
@item asInteger
Returns the integer value corresponding to self.  #codePoint,
#asciiValue, #value, and #asInteger are synonyms.


@meindex asciiValue
@slindex codePoint
@slindex asciiValue
@slindex value
@slindex asInteger
@item asciiValue
Returns the integer value corresponding to self.  #codePoint,
#asciiValue, #value, and #asInteger are synonyms.


@meindex codePoint
@slindex codePoint
@slindex asciiValue
@slindex value
@slindex asInteger
@item codePoint
Returns the integer value corresponding to self.  #codePoint,
#asciiValue, #value, and #asInteger are synonyms.


@meindex value
@slindex codePoint
@slindex asciiValue
@slindex value
@slindex asInteger
@item value
Returns the integer value corresponding to self.  #codePoint,
#asciiValue, #value, and #asInteger are synonyms.


@end table



@node Character-coercion methods
@subsection Character:@- coercion methods

@table @b
@meindex *
@item * aNumber
Returns a String with aNumber occurrences of the receiver.


@meindex asLowercase
@item asLowercase
Returns self as a lowercase character if it's an uppercase letter,
otherwise returns the character unchanged.


@meindex asString
@item asString
Returns the character self as a string.  Only valid if the character
is between 0 and 255.


@meindex asSymbol
@item asSymbol
Returns the character self as a symbol.


@meindex asUnicodeString
@item asUnicodeString
Returns the character self as a Unicode string.


@meindex asUppercase
@item asUppercase
Returns self as a uppercase character if it's an lowercase letter,
otherwise returns the character unchanged.


@end table



@node Character-comparing
@subsection Character:@- comparing

@table @b
@meindex <
@item < aCharacter
Compare the character's ASCII value. Answer whether the receiver's
is the least.


@meindex <=
@item <= aCharacter
Compare the character's ASCII value. Answer whether the receiver's
is the least or their equal.


@meindex >
@item > aCharacter
Compare the character's ASCII value. Answer whether the receiver's
is the greatest.


@meindex >=
@item >= aCharacter
Compare the character's ASCII value. Answer whether the receiver's
is the greatest or their equal.


@end table



@node Character-converting
@subsection Character:@- converting

@table @b
@meindex asCharacter
@item asCharacter
Return the receiver, since it is already a character.


@meindex digitValue
@item digitValue
Returns the value of self interpreted as a digit.  Here, 'digit' means
either 0-9, or A-Z, which maps to 10-35.


@end table



@node Character-printing
@subsection Character:@- printing

@table @b
@meindex displayOn:@-
@slindex printOn:@-
@item displayOn:@- aStream
Print a representation of the receiver on aStream. Unlike
#printOn:@-, this method strips the leading dollar.


@meindex printOn:@-
@item printOn:@- aStream
Print a representation of the receiver on aStream


@meindex storeLiteralOn:@-
@item storeLiteralOn:@- aStream
Store on aStream some Smalltalk code which compiles to the receiver


@end table



@node Character-storing
@subsection Character:@- storing

@table @b
@meindex isLiteralObject
@item isLiteralObject
Answer whether the receiver is expressible as a Smalltalk literal.


@meindex storeOn:@-
@item storeOn:@- aStream
Store Smalltalk code compiling to the receiver on aStream


@end table



@node Character-testing
@subsection Character:@- testing

@table @b
@meindex isAlphaNumeric
@item isAlphaNumeric
True if self is a letter or a digit


@meindex isDigit
@item isDigit
True if self is a 0-9 digit


@meindex isDigit:@-
@item isDigit:@- radix
Answer whether the receiver is a valid character in the given radix.


@meindex isLetter
@item isLetter
True if self is an upper- or lowercase letter


@meindex isLowercase
@item isLowercase
True if self is a lowercase letter


@meindex isPathSeparator
@item isPathSeparator
Returns true if self is a path separator ($/ or $\ under Windows,
$/ only under Unix systems including Mac OS X).


@meindex isPunctuation
@item isPunctuation
Returns true if self is one of '.,:@-;!?'


@meindex isSeparator
@item isSeparator
Returns true if self is a space, cr, tab, nl, or newPage


@meindex isUppercase
@item isUppercase
True if self is uppercase


@meindex isVowel
@item isVowel
Returns true if self is a, e, i, o, or u; case insensitive


@end table



@node Character-testing functionality
@subsection Character:@- testing functionality

@table @b
@meindex isCharacter
@item isCharacter
Answer True. We're definitely characters


@end table

@node CharacterArray
@section CharacterArray
@clindex CharacterArray

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: ArrayedCollection
@itemx Category: Collections-Text
My instances represent a generic textual (string) data type.  I provide
accessing and manipulation methods for strings.
@end table

@menu
* CharacterArray class-basic::  (class)
* CharacterArray class-multibyte encodings::  (class)
* CharacterArray-basic::  (instance)
* CharacterArray-built ins::  (instance)
* CharacterArray-comparing::  (instance)
* CharacterArray-converting::  (instance)
* CharacterArray-multibyte encodings::  (instance)
* CharacterArray-still unclassified::  (instance)
* CharacterArray-string processing::  (instance)
* CharacterArray-testing functionality::  (instance)
@end menu



@node CharacterArray class-basic
@subsection CharacterArray class:@- basic

@table @b
@meindex fromString:@-
@item fromString:@- aCharacterArray
Make up an instance of the receiver containing the same characters
as aCharacterArray, and answer it.


@meindex lineDelimiter
@item lineDelimiter
Answer a CharacterArray which one can use as a line delimiter.
This is meant to be used on subclasses of CharacterArray.


@end table



@node CharacterArray class-multibyte encodings
@subsection CharacterArray class:@- multibyte encodings

@table @b
@meindex isUnicode
@item isUnicode
Answer whether the receiver stores bytes (i.e. an encoded
form) or characters (if true is returned).


@end table



@node CharacterArray-basic
@subsection CharacterArray:@- basic

@table @b
@meindex valueAt:@-ifAbsent:@-
@item valueAt:@- anIndex ifAbsent:@- aBlock
Answer the ascii value of the anIndex-th character of the receiver,
or evaluate aBlock and answer the result if the index is out of range.


@end table



@node CharacterArray-built ins
@subsection CharacterArray:@- built ins

@table @b
@meindex valueAt:@-
@item valueAt:@- index
Answer the ascii value of index-th character variable of the receiver


@meindex valueAt:@-put:@-
@item valueAt:@- index put:@- value
Store (Character value:@- value) in the index-th indexed instance variable
of the receiver


@end table



@node CharacterArray-comparing
@subsection CharacterArray:@- comparing

@table @b
@meindex <
@item < aCharacterArray
Return true if the receiver is less than aCharacterArray, ignoring case
differences.


@meindex <=
@item <= aCharacterArray
Returns true if the receiver is less than or equal to aCharacterArray,
ignoring case differences.  If is receiver is an initial substring of
aCharacterArray, it is considered to be less than aCharacterArray.


@meindex =
@item = aString
Answer whether the receiver's items match those in aCollection


@meindex >
@item > aCharacterArray
Return true if the receiver is greater than aCharacterArray, ignoring case
differences.


@meindex >=
@item >= aCharacterArray
Returns true if the receiver is greater than or equal to aCharacterArray,
ignoring case differences.  If is aCharacterArray is an initial substring of
the receiver, it is considered to be less than the receiver.


@meindex indexOf:@-matchCase:@-startingAt:@-
@item indexOf:@- aCharacterArray matchCase:@- aBoolean startingAt:@- anIndex
Answer an Interval of indices in the receiver which match the aCharacterArray
pattern. # in aCharacterArray means 'match any character', * in aCharacterArray means
'match any sequence of characters'. The first item of the returned interval
is >= anIndex. If aBoolean is false, the search is case-insensitive, 
else it is case-sensitive. If no Interval matches the pattern, answer nil.


@meindex match:@-
@item match:@- aCharacterArray
Answer whether aCharacterArray matches the pattern contained in the
receiver. # in the receiver means 'match any character', * in
receiver means 'match any sequence of characters'.


@meindex match:@-ignoreCase:@-
@item match:@- aCharacterArray ignoreCase:@- aBoolean
Answer whether aCharacterArray matches the pattern contained in the
receiver. # in the receiver means 'match any character', * in
receiver means 'match any sequence of characters'.  The case of
alphabetic characters is ignored if aBoolean is true.


@meindex sameAs:@-
@item sameAs:@- aCharacterArray
Returns true if the receiver is the same CharacterArray as aCharacterArray, ignoring
case differences.


@end table



@node CharacterArray-converting
@subsection CharacterArray:@- converting

@table @b
@meindex asByteArray
@item asByteArray
Return the receiver, converted to a ByteArray of ASCII values


@meindex asClassPoolKey
@item asClassPoolKey
Return the receiver, ready to be put in a class pool dictionary


@meindex asGlobalKey
@item asGlobalKey
Return the receiver, ready to be put in the Smalltalk dictionary


@meindex asInteger
@item asInteger
Parse an Integer number from the receiver until the input character
is invalid and answer the result at this point


@meindex asLowercase
@item asLowercase
Returns a copy of self as a lowercase CharacterArray


@meindex asNumber
@item asNumber
Parse a Number from the receiver until the input character is invalid
and answer the result at this point


@meindex asPoolKey
@item asPoolKey
Return the receiver, ready to be put in a pool dictionary


@meindex asString
@item asString
But I already am a String!  Really!


@meindex asSymbol
@item asSymbol
Returns the symbol corresponding to the CharacterArray


@meindex asUnicodeString
@item asUnicodeString
Answer a UnicodeString whose character's codes are the receiver's contents
This is not implemented unless you load the I18N package.


@meindex asUppercase
@item asUppercase
Returns a copy of self as an uppercase CharacterArray


@meindex fileName
@item fileName
But I don't HAVE a file name!


@meindex filePos
@item filePos
But I don't HAVE a file position!


@meindex isNumeric
@item isNumeric
Answer whether the receiver denotes a number


@meindex trimSeparators
@item trimSeparators
Return a copy of the reciever without any spaces on front or back.
The implementation is protected against the `all blanks' case.


@end table



@node CharacterArray-multibyte encodings
@subsection CharacterArray:@- multibyte encodings

@table @b
@meindex encoding
@item encoding
Answer the encoding used by the receiver.


@meindex isUnicode
@item isUnicode
Answer whether the receiver stores bytes (i.e. an encoded
form) or characters (if true is returned).


@meindex numberOfCharacters
@item numberOfCharacters
Answer the number of Unicode characters in the receiver.
This is not implemented unless you load the I18N package.


@end table



@node CharacterArray-still unclassified
@subsection CharacterArray:@- still unclassified

@table @b
@meindex withUnixShellEscapes
@item withUnixShellEscapes
Answer the receiver with special shell characters converted to a
backslash sequence.


@meindex withWindowsShellEscapes
@item withWindowsShellEscapes
Answer the receiver with Windows shell characters escaped properly.


@end table



@node CharacterArray-string processing
@subsection CharacterArray:@- string processing

@table @b
@meindex %
@item % aCollection
Answer the receiver with special escape sequences replaced by
elements of aCollection.   %n (1<=n<=9, A<=n<=Z) are replaced by
the n-th element of aCollection (A being the 10-th element and so on
until the 35th).  %(string) sequences are accessed as strings, which
makes sense only if aCollection is a Dictionary or LookupTable.
In addition, the special pattern %<trueString|falseString>n
or %<trueString|falseString>(string) is replaced with one of
the two strings depending on the element of aCollection being
true or false.  The replaced elements are `displayed' (i.e. their
displayString is used).


@meindex bindWith:@-
@item bindWith:@- s1
Answer the receiver with every %1 replaced by the displayString of s1


@meindex bindWith:@-with:@-
@item bindWith:@- s1 with:@- s2
Answer the receiver with every %1 or %2 replaced by s1 or s2,
respectively.  s1 and s2 are `displayed' (i.e. their
displayString is used) upon replacement.


@meindex bindWith:@-with:@-with:@-
@item bindWith:@- s1 with:@- s2 with:@- s3
Answer the receiver with every %1, %2 or %3 replaced by s1, s2 or s3,
respectively.  s1, s2 and s3 are `displayed' (i.e. their
displayString is used) upon replacement.


@meindex bindWith:@-with:@-with:@-with:@-
@item bindWith:@- s1 with:@- s2 with:@- s3 with:@- s4
Answer the receiver with every %1, %2, %3 or %4 replaced by s1, s2, s3
or s4, respectively.  s1, s2, s3 and s4 are `displayed' (i.e. their
displayString is used) upon replacement.


@meindex bindWithArguments:@-
@item bindWithArguments:@- aCollection
Answer the receiver with special escape sequences replaced by
elements of aCollection.   %n (1<=n<=9, A<=n<=Z) are replaced by
the n-th element of aCollection (A being the 10-th element and so on
until the 35th).  %(string) sequences are accessed as strings, which
makes sense only if aCollection is a Dictionary or LookupTable.
In addition, the special pattern %<trueString|falseString>n
or %<trueString|falseString>(string) is replaced with one of
the two strings depending on the element of aCollection being
true or false.  The replaced elements are `displayed' (i.e. their
displayString is used).


@meindex contractTo:@-
@item contractTo:@- smallSize
Either return myself, or a copy shortened to smallSize characters
by inserting an ellipsis (three dots:@- ...)


@meindex lines
@item lines
Answer an Array of Strings each representing one line in the receiver.


@meindex linesDo:@-
@item linesDo:@- aBlock
Evaluate aBlock once for every newline delimited line in the receiver,
passing the line to the block.


@meindex subStrings
@item subStrings
Answer an OrderedCollection of substrings of the receiver. A new substring
start at the start of the receiver, or after every sequence of white space
characters


@meindex subStrings:@-
@item subStrings:@- sep
Answer an OrderedCollection of substrings of the receiver. A new substring
start at the start of the receiver, or after every occurrence of one of the
characters in sep


@meindex substrings
@item substrings
Answer an OrderedCollection of substrings of the receiver. A new substring
start at the start of the receiver, or after every sequence of white space
characters.  This message is preserved for backwards compatibility;
the ANSI standard mandates `subStrings', with an uppercase s.


@meindex substrings:@-
@item substrings:@- sep
Answer an OrderedCollection of substrings of the receiver. A new substring
start at the start of the receiver, or after every occurrence of one of the
characters in sep.  This message is preserved for backwards compatibility;
the ANSI standard mandates `subStrings:@-', with an uppercase s.


@meindex withShellEscapes
@item withShellEscapes
Answer the receiver with special shell characters converted to a
backslash sequence.


@end table



@node CharacterArray-testing functionality
@subsection CharacterArray:@- testing functionality

@table @b
@meindex isCharacterArray
@item isCharacterArray
Answer `true'.

@end table

@node CInt
@section CInt
@clindex CInt

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: CScalar
@itemx Category: Language-C interface

@end table

@menu
* CInt class-accessing::  (class)
* CInt-accessing::  (instance)
@end menu



@node CInt class-accessing
@subsection CInt class:@- accessing

@table @b
@meindex alignof
@item alignof
Answer the receiver's required aligment


@meindex cObjStoredType
@item cObjStoredType
Private - Answer an index referring to the receiver's instances scalar type


@meindex sizeof
@item sizeof
Answer the receiver's size


@end table



@node CInt-accessing
@subsection CInt:@- accessing

@table @b
@meindex alignof
@item alignof
Answer the receiver's instances required aligment


@meindex cObjStoredType
@item cObjStoredType
Private - Answer an index referring to the receiver's scalar type


@meindex sizeof
@item sizeof
Answer the receiver's instances size


@end table

@node Class
@section Class
@clindex Class

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: ClassDescription
@itemx Category: Language-Implementation
I am THE class object.  My instances are the classes of the system.
I provide information commonly attributed to classes:@- namely, the
class name, class comment (you wouldn't be reading this if it
weren't for me), a list of the instance variables of the class, and
the class category.
@end table

@menu
* Class class-initialize::  (class)
* Class-accessing instances and variables::  (instance)
* Class-filing::  (instance)
* Class-instance creation::  (instance)
* Class-instance creation - alternative::  (instance)
* Class-pragmas::  (instance)
* Class-printing::  (instance)
* Class-saving and loading::  (instance)
* Class-security::  (instance)
* Class-still unclassified::  (instance)
* Class-testing::  (instance)
* Class-testing functionality::  (instance)
@end menu



@node Class class-initialize
@subsection Class class:@- initialize

@table @b
@meindex initialize
@item initialize
Perform the special initialization of root classes.


@end table



@node Class-accessing instances and variables
@subsection Class:@- accessing instances and variables

@table @b
@meindex addClassVarName:@-
@item addClassVarName:@- aString
Add a class variable with the given name to the class pool dictionary.


@meindex addClassVarName:@-value:@-
@item addClassVarName:@- aString value:@- valueBlock
Add a class variable with the given name to the class pool dictionary,
and evaluate valueBlock as its initializer.


@meindex addSharedPool:@-
@item addSharedPool:@- aDictionary
Add the given shared pool to the list of the class' pool dictionaries


@meindex allClassVarNames
@item allClassVarNames
Answer the names of the variables in the receiver's class pool dictionary
and in each of the superclasses' class pool dictionaries


@meindex bindingFor:@-
@item bindingFor:@- aString
Answer the variable binding for the class variable with the
given name


@meindex category
@item category
Answer the class category


@meindex category:@-
@item category:@- aString
Change the class category to aString


@meindex classPool
@item classPool
Answer the class pool dictionary


@meindex classPragmas
@item classPragmas
Return the pragmas that are written in the file-out of this class.


@meindex classVarNames
@item classVarNames
Answer the names of the variables in the class pool dictionary


@meindex comment
@item comment
Answer the class comment


@meindex comment:@-
@item comment:@- aString
Change the class name


@meindex environment
@item environment
Answer `environment'.

@meindex environment:@-
@item environment:@- aNamespace
Set the receiver's environment to aNamespace and recompile everything


@meindex initialize
@item initialize
redefined in children (?)


@meindex initializeAsRootClass
@item initializeAsRootClass
Perform special initialization reserved to root classes.


@meindex name
@item name
Answer the class name


@meindex removeClassVarName:@-
@item removeClassVarName:@- aString
Removes the class variable from the class, error if not present, or
still in use.


@meindex removeSharedPool:@-
@item removeSharedPool:@- aDictionary
Remove the given dictionary to the list of the class' pool dictionaries


@meindex sharedPools
@item sharedPools
Return the names of the shared pools defined by the class


@meindex superclass:@-
@item superclass:@- aClass
Set the receiver's superclass.


@end table



@node Class-filing
@subsection Class:@- filing

@table @b
@meindex fileOutDeclarationOn:@-
@item fileOutDeclarationOn:@- aFileStream
File out class definition to aFileStream.  Requires package Parser.


@meindex fileOutOn:@-
@item fileOutOn:@- aFileStream
File out complete class description:@-  class definition, class and
instance methods.  Requires package Parser.


@end table



@node Class-instance creation
@subsection Class:@- instance creation

@table @b
@meindex extend
@item extend
Redefine a version of the receiver in the current namespace.  Note:@-
this method can bite you in various ways when sent to system classes;
read the section on namespaces in the manual for some examples of the
problems you can encounter.


@meindex inheritShape
@item inheritShape
Answer whether subclasses will have by default the same shape as
this class.  The default is false.


@meindex subclass:@-
@item subclass:@- classNameString
Define a subclass of the receiver with the given name.  If the class
is already defined, don't modify its instance or class variables
but still, if necessary, recompile everything needed.


@meindex subclass:@-instanceVariableNames:@-classVariableNames:@-poolDictionaries:@-category:@-
@item subclass:@- classNameString instanceVariableNames:@- stringInstVarNames classVariableNames:@- stringOfClassVarNames poolDictionaries:@- stringOfPoolNames category:@- categoryNameString
Define a fixed subclass of the receiver with the given name, instance
variables, class variables, pool dictionaries and category. If the
class is already defined, if necessary, recompile everything needed.


@meindex variable:@-subclass:@-instanceVariableNames:@-classVariableNames:@-poolDictionaries:@-category:@-
@slindex byte
@slindex int8
@slindex character
@slindex short
@slindex ushort
@slindex int
@slindex uint
@slindex int64
@slindex uint64
@slindex utf32
@slindex float
@slindex double
@slindex pointer
@item variable:@- shape subclass:@- classNameString instanceVariableNames:@- stringInstVarNames classVariableNames:@- stringOfClassVarNames poolDictionaries:@- stringOfPoolNames category:@- categoryNameString
Define a variable subclass of the receiver with the given name,
shape, instance variables, class variables, pool dictionaries and
category. If the class is already defined, if necessary, recompile
everything needed.  The shape can be one of #byte #int8 #character
#short #ushort #int #uint #int64 #uint64 #utf32 #float #double or
#pointer.


@meindex variableByteSubclass:@-instanceVariableNames:@-classVariableNames:@-poolDictionaries:@-category:@-
@item variableByteSubclass:@- classNameString instanceVariableNames:@- stringInstVarNames classVariableNames:@- stringOfClassVarNames poolDictionaries:@- stringOfPoolNames category:@- categoryNameString
Define a byte variable subclass of the receiver with the given
name, instance variables (must be ''), class variables, pool
dictionaries and category. If the class is already defined, if
necessary, recompile everything needed.


@meindex variableSubclass:@-instanceVariableNames:@-classVariableNames:@-poolDictionaries:@-category:@-
@item variableSubclass:@- classNameString instanceVariableNames:@- stringInstVarNames classVariableNames:@- stringOfClassVarNames poolDictionaries:@- stringOfPoolNames category:@- categoryNameString
Define a variable pointer subclass of the receiver with the given
name, instance variables, class variables, pool dictionaries and
category. If the class is already defined, if necessary, recompile
everything needed.


@meindex variableWordSubclass:@-instanceVariableNames:@-classVariableNames:@-poolDictionaries:@-category:@-
@item variableWordSubclass:@- classNameString instanceVariableNames:@- stringInstVarNames classVariableNames:@- stringOfClassVarNames poolDictionaries:@- stringOfPoolNames category:@- categoryNameString
Define a word variable subclass of the receiver with the given
name, instance variables (must be ''), class variables, pool
dictionaries and category. If the class is already defined, if
necessary, recompile everything needed.


@end table



@node Class-instance creation - alternative
@subsection Class:@- instance creation - alternative

@table @b
@meindex categoriesFor:@-are:@-
@item categoriesFor:@- method are:@- categories
Don't use this, it is only present to file in from IBM Smalltalk


@meindex subclass:@-classInstanceVariableNames:@-instanceVariableNames:@-classVariableNames:@-poolDictionaries:@-
@item subclass:@- classNameString classInstanceVariableNames:@- stringClassInstVarNames instanceVariableNames:@- stringInstVarNames classVariableNames:@- stringOfClassVarNames poolDictionaries:@- stringOfPoolNames
Don't use this, it is only present to file in from IBM Smalltalk


@meindex subclass:@-instanceVariableNames:@-classVariableNames:@-poolDictionaries:@-
@item subclass:@- classNameString instanceVariableNames:@- stringInstVarNames classVariableNames:@- stringOfClassVarNames poolDictionaries:@- stringOfPoolNames
Don't use this, it is only present to file in from IBM Smalltalk


@meindex variableByteSubclass:@-classInstanceVariableNames:@-classVariableNames:@-poolDictionaries:@-
@item variableByteSubclass:@- classNameString classInstanceVariableNames:@- stringClassInstVarNames classVariableNames:@- stringOfClassVarNames poolDictionaries:@- stringOfPoolNames
Don't use this, it is only present to file in from IBM Smalltalk


@meindex variableByteSubclass:@-classVariableNames:@-poolDictionaries:@-
@item variableByteSubclass:@- classNameString classVariableNames:@- stringOfClassVarNames poolDictionaries:@- stringOfPoolNames
Don't use this, it is only present to file in from IBM Smalltalk


@meindex variableLongSubclass:@-classInstanceVariableNames:@-classVariableNames:@-poolDictionaries:@-
@item variableLongSubclass:@- classNameString classInstanceVariableNames:@- stringClassInstVarNames classVariableNames:@- stringOfClassVarNames poolDictionaries:@- stringOfPoolNames
Don't use this, it is only present to file in from IBM Smalltalk


@meindex variableLongSubclass:@-classVariableNames:@-poolDictionaries:@-
@item variableLongSubclass:@- classNameString classVariableNames:@- stringOfClassVarNames poolDictionaries:@- stringOfPoolNames
Don't use this, it is only present to file in from IBM Smalltalk


@meindex variableSubclass:@-classInstanceVariableNames:@-instanceVariableNames:@-classVariableNames:@-poolDictionaries:@-
@item variableSubclass:@- classNameString classInstanceVariableNames:@- stringClassInstVarNames instanceVariableNames:@- stringInstVarNames classVariableNames:@- stringOfClassVarNames poolDictionaries:@- stringOfPoolNames
Don't use this, it is only present to file in from IBM Smalltalk


@meindex variableSubclass:@-instanceVariableNames:@-classVariableNames:@-poolDictionaries:@-
@item variableSubclass:@- classNameString instanceVariableNames:@- stringInstVarNames classVariableNames:@- stringOfClassVarNames poolDictionaries:@- stringOfPoolNames
Don't use this, it is only present to file in from IBM Smalltalk


@end table



@node Class-pragmas
@subsection Class:@- pragmas

@table @b
@meindex pragmaHandlerFor:@-
@item pragmaHandlerFor:@- aSymbol
Answer the (possibly inherited) registered handler for pragma
aSymbol, or nil if not found.


@meindex registerHandler:@-forPragma:@-
@item registerHandler:@- aBlock forPragma:@- pragma
While compiling methods, on every encounter of the pragma
with the given name, call aBlock with the CompiledMethod and
an array of pragma argument values.


@end table



@node Class-printing
@subsection Class:@- printing

@table @b
@meindex article
@item article
Answer an article (`a' or `an') which is ok for the receiver's name


@meindex printOn:@-
@item printOn:@- aStream
Print a representation of the receiver on aStream


@meindex storeOn:@-
@item storeOn:@- aStream
Store Smalltalk code compiling to the receiver on aStream


@end table



@node Class-saving and loading
@subsection Class:@- saving and loading

@table @b
@meindex binaryRepresentationVersion
@item binaryRepresentationVersion
Answer a number >= 0 which represents the current version of the
object's representation.  The default implementation answers
zero.


@meindex convertFromVersion:@-withFixedVariables:@-indexedVariables:@-for:@-
@item convertFromVersion:@- version withFixedVariables:@- fixed indexedVariables:@- indexed for:@- anObjectDumper
This method is called if a VersionableObjectProxy is attached to
a class.  It receives the version number that was stored for the
object (or nil if the object did not use a VersionableObjectProxy),
the fixed instance variables, the indexed instance variables,
and the ObjectDumper that has read the object.
The default implementation ignores the version and simply fills
in an instance of the receiver with the given fixed and indexed
instance variables (nil if the class instances are of fixed size).
If instance variables were removed from the class, extras are
ignored; if the class is now fixed and used to be indexed,
indexed is not used.


@meindex nonVersionedInstSize
@item nonVersionedInstSize
Answer the number of instance variables that the class used to have
when objects were stored without using a VersionableObjectProxy.
The default implementation answers the current instSize.


@end table



@node Class-security
@subsection Class:@- security

@table @b
@meindex check:@-
@item check:@- aPermission
Not commented.

@meindex securityPolicy
@item securityPolicy
Answer `securityPolicy'.

@meindex securityPolicy:@-
@item securityPolicy:@- aSecurityPolicy
Not commented.

@end table



@node Class-still unclassified
@subsection Class:@- still unclassified

@table @b
@meindex allSharedPoolDictionariesDo:@-
@item allSharedPoolDictionariesDo:@- aBlock
Answer the shared pools visible from methods in the metaclass,
in the correct search order.


@meindex fileOutHeaderOn:@-
@item fileOutHeaderOn:@- aFileStream
Not commented.

@end table



@node Class-testing
@subsection Class:@- testing

@table @b
@meindex =
@item = aClass
Returns true if the two class objects are to be considered equal.


@end table



@node Class-testing functionality
@subsection Class:@- testing functionality

@table @b
@meindex asClass
@item asClass
Answer the receiver.

@meindex isClass
@item isClass
Answer `true'.

@end table

@node ClassDescription
@section ClassDescription
@clindex ClassDescription

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Behavior
@itemx Category: Language-Implementation
My instances provide methods that access classes by category, and
allow whole categories of classes to be filed out to external disk
files.
@end table

@menu
* ClassDescription-compiling::  (instance)
* ClassDescription-conversion::  (instance)
* ClassDescription-copying::  (instance)
* ClassDescription-filing::  (instance)
* ClassDescription-organization of messages and classes::  (instance)
* ClassDescription-parsing class declarations::  (instance)
* ClassDescription-printing::  (instance)
* ClassDescription-still unclassified::  (instance)
@end menu



@node ClassDescription-compiling
@subsection ClassDescription:@- compiling

@table @b
@meindex compile:@-classified:@-
@item compile:@- code classified:@- categoryName
Compile code in the receiver, assigning the method to the given category.
Answer the newly created CompiledMethod, or nil if an error was found.


@meindex compile:@-classified:@-ifError:@-
@item compile:@- code classified:@- categoryName ifError:@- block
Compile method source and install in method category, categoryName.  If
there are parsing errors, invoke exception block, 'block' (see
compile:@-ifError:@-).  Return the method


@meindex compile:@-classified:@-notifying:@-
@item compile:@- code classified:@- categoryName notifying:@- requestor
Compile method source and install in method category, categoryName.  If
there are parsing errors, send an error message to requestor


@end table



@node ClassDescription-conversion
@subsection ClassDescription:@- conversion

@table @b
@meindex asClass
@item asClass
This method's functionality should be implemented by subclasses of ClassDescription

@meindex asMetaclass
@item asMetaclass
Answer the metaclass associated to the receiver


@meindex binding
@item binding
Answer a VariableBinding object whose value is the receiver


@end table



@node ClassDescription-copying
@subsection ClassDescription:@- copying

@table @b
@meindex copy:@-from:@-
@item copy:@- selector from:@- aClass
Copy the given selector from aClass, assigning it the same category


@meindex copy:@-from:@-classified:@-
@item copy:@- selector from:@- aClass classified:@- categoryName
Copy the given selector from aClass, assigning it the given category


@meindex copyAll:@-from:@-
@item copyAll:@- arrayOfSelectors from:@- class
Copy all the selectors in arrayOfSelectors from class, assigning them the
same category they have in class


@meindex copyAll:@-from:@-classified:@-
@item copyAll:@- arrayOfSelectors from:@- class classified:@- categoryName
Copy all the selectors in arrayOfSelectors from aClass, assigning them
the given category


@meindex copyAllCategoriesFrom:@-
@item copyAllCategoriesFrom:@- aClass
Copy all the selectors in aClass, assigning them the original category


@meindex copyCategory:@-from:@-
@item copyCategory:@- categoryName from:@- aClass
Copy all the selectors in from aClass that belong to the given category


@meindex copyCategory:@-from:@-classified:@-
@item copyCategory:@- categoryName from:@- aClass classified:@- newCategoryName
Copy all the selectors in from aClass that belong to the given category,
reclassifying them as belonging to the given category


@end table



@node ClassDescription-filing
@subsection ClassDescription:@- filing

@table @b
@meindex fileOut:@-
@item fileOut:@- fileName
Open the given file and to file out a complete class description to it.
Requires package Parser.


@meindex fileOutCategory:@-to:@-
@item fileOutCategory:@- categoryName to:@- fileName
File out all the methods belonging to the method category, categoryName,
to the fileName file.  Requires package Parser.


@meindex fileOutOn:@-
@item fileOutOn:@- aFileStream
File out complete class description:@-  class definition, class and
instance methods.  Requires package Parser.


@meindex fileOutSelector:@-to:@-
@item fileOutSelector:@- selector to:@- fileName
File out the given selector to fileName.  Requires package Parser.


@end table



@node ClassDescription-organization of messages and classes
@subsection ClassDescription:@- organization of messages and classes

@table @b
@meindex classify:@-under:@-
@item classify:@- aSelector under:@- aString
Put the method identified by the selector aSelector
under the category given by aString.


@meindex createGetMethod:@-
@item createGetMethod:@- what
Create a method accessing the variable `what'.


@meindex createGetMethod:@-default:@-
@item createGetMethod:@- what default:@- value
Create a method accessing the variable `what', with a default value
of `value', using lazy initialization


@meindex createSetMethod:@-
@item createSetMethod:@- what
Create a method which sets the variable `what'.


@meindex defineAsyncCFunc:@-withSelectorArgs:@-args:@-
@item defineAsyncCFunc:@- cFuncNameString withSelectorArgs:@- selectorAndArgs args:@- argsArray
See documentation.  This function is deprecated, you should use
the <asyncCCall:@- ... > special syntax instead.


@meindex defineCFunc:@-withSelectorArgs:@-returning:@-args:@-
@item defineCFunc:@- cFuncNameString withSelectorArgs:@- selectorAndArgs returning:@- returnTypeSymbol args:@- argsArray
See documentation.  This function is deprecated, you should use
the <asyncCCall:@- ... > special syntax instead.


@meindex removeCategory:@-
@item removeCategory:@- aString
Remove from the receiver every method belonging to the given category


@meindex whichCategoryIncludesSelector:@-
@item whichCategoryIncludesSelector:@- selector
Answer the category for the given selector, or nil if the selector is
not found


@end table



@node ClassDescription-parsing class declarations
@subsection ClassDescription:@- parsing class declarations

@table @b
@meindex addSharedPool:@-
@item addSharedPool:@- aDictionary
Add the given shared pool to the list of the class' pool dictionaries


@meindex import:@-
@item import:@- aDictionary
Add the given shared pool to the list of the class' pool dictionaries


@end table



@node ClassDescription-printing
@subsection ClassDescription:@- printing

@table @b
@meindex classVariableString
@item classVariableString
This method's functionality should be implemented by subclasses of ClassDescription

@meindex instanceVariableString
@item instanceVariableString
Answer a string containing the name of the receiver's instance variables.


@meindex nameIn:@-
@item nameIn:@- aNamespace
Answer the class name when the class is referenced from aNamespace


@meindex printOn:@-in:@-
@item printOn:@- aStream in:@- aNamespace
Print on aStream the class name when the class is referenced from
aNamespace


@meindex sharedVariableString
@item sharedVariableString
This method's functionality should be implemented by subclasses of ClassDescription

@end table



@node ClassDescription-still unclassified
@subsection ClassDescription:@- still unclassified

@table @b
@meindex fileOutCategory:@-toStream:@-
@item fileOutCategory:@- category toStream:@- aFileStream
File out all the methods belonging to the method category,
category, to aFileStream.  Requires package Parser.


@meindex fileOutSelector:@-toStream:@-
@item fileOutSelector:@- aSymbol toStream:@- aFileStream
File out all the methods belonging to the method category,
category, to aFileStream.  Requires package Parser.


@end table

@node CLong
@section CLong
@clindex CLong

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: CScalar
@itemx Category: Language-C interface

@end table

@menu
* CLong class-accessing::  (class)
* CLong-accessing::  (instance)
@end menu



@node CLong class-accessing
@subsection CLong class:@- accessing

@table @b
@meindex alignof
@item alignof
Answer the receiver's instances required aligment


@meindex cObjStoredType
@item cObjStoredType
Private - Answer an index referring to the receiver's instances scalar type


@meindex sizeof
@item sizeof
Answer the receiver's instances size


@end table



@node CLong-accessing
@subsection CLong:@- accessing

@table @b
@meindex alignof
@item alignof
Answer the receiver's required aligment


@meindex cObjStoredType
@item cObjStoredType
Private - Answer an index referring to the receiver's scalar type


@meindex sizeof
@item sizeof
Answer the receiver's size


@end table

@node CLongDouble
@section CLongDouble
@clindex CLongDouble

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: CScalar
@itemx Category: Language-C interface

@end table

@menu
* CLongDouble class-accessing::  (class)
* CLongDouble-accessing::  (instance)
@end menu



@node CLongDouble class-accessing
@subsection CLongDouble class:@- accessing

@table @b
@meindex alignof
@item alignof
Answer the receiver's instances required aligment


@meindex cObjStoredType
@item cObjStoredType
Private - Answer an index referring to the receiver's instances scalar type


@meindex sizeof
@item sizeof
Answer the receiver's instances size


@end table



@node CLongDouble-accessing
@subsection CLongDouble:@- accessing

@table @b
@meindex alignof
@item alignof
Answer the receiver's required aligment


@meindex cObjStoredType
@item cObjStoredType
Private - Answer an index referring to the receiver's scalar type


@meindex sizeof
@item sizeof
Answer the receiver's size


@end table

@node CLongLong
@section CLongLong
@clindex CLongLong

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: CScalar
@itemx Category: Language-C interface

@end table

@menu
* CLongLong class-accessing::  (class)
* CLongLong-accessing::  (instance)
@end menu



@node CLongLong class-accessing
@subsection CLongLong class:@- accessing

@table @b
@meindex alignof
@item alignof
Answer the receiver's instances required aligment


@meindex cObjStoredType
@item cObjStoredType
Private - Answer an index referring to the receiver's instances scalar type


@meindex sizeof
@item sizeof
Answer the receiver's instances size


@end table



@node CLongLong-accessing
@subsection CLongLong:@- accessing

@table @b
@meindex alignof
@item alignof
Answer the receiver's required aligment


@meindex cObjStoredType
@item cObjStoredType
Private - Answer an index referring to the receiver's scalar type


@meindex sizeof
@item sizeof
Answer the receiver's size


@end table

@node CObject
@section CObject
@clindex CObject

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Object
@itemx Category: Language-C interface
I am not part of the standard Smalltalk kernel class hierarchy.
My instances contain values that are not interpreted by the Smalltalk 
system; they frequently hold "pointers" to data outside of the Smalltalk
environment.  The C callout mechanism allows my instances to be transformed
into their corresponding C values for use in external routines.
@end table

@menu
* CObject class-conversion::  (class)
* CObject class-instance creation::  (class)
* CObject class-primitive allocation::  (class)
* CObject class-subclass creation::  (class)
* CObject-accessing::  (instance)
* CObject-basic::  (instance)
* CObject-C data access::  (instance)
* CObject-conversion::  (instance)
* CObject-finalization::  (instance)
* CObject-pointer-like behavior::  (instance)
* CObject-testing::  (instance)
* CObject-testing functionality::  (instance)
@end menu



@node CObject class-conversion
@subsection CObject class:@- conversion

@table @b
@meindex type
@item type
Nothing special in the default case - answer a CType for the receiver


@end table



@node CObject class-instance creation
@subsection CObject class:@- instance creation

@table @b
@meindex address:@-
@item address:@- anInteger
Answer a new object pointing to the passed address, anInteger


@meindex alloc:@-
@item alloc:@- nBytes
Allocate nBytes bytes and return an instance of the receiver


@meindex gcAlloc:@-
@item gcAlloc:@- nBytes
Allocate nBytes bytes and return an instance of the receiver


@meindex gcNew:@-
@item gcNew:@- nBytes
Allocate nBytes bytes and return an instance of the receiver


@meindex new
@item new
Answer a new object pointing to NULL.


@meindex new:@-
@item new:@- nBytes
Allocate nBytes bytes and return an instance of the receiver


@end table



@node CObject class-primitive allocation
@subsection CObject class:@- primitive allocation

@table @b
@meindex alloc:@-type:@-
@item alloc:@- nBytes type:@- cTypeObject
Allocate nBytes bytes and return a CObject of the given type


@meindex gcAlloc:@-type:@-
@item gcAlloc:@- nBytes type:@- cTypeObject
Allocate nBytes bytes and return a CObject of the given type


@end table



@node CObject class-subclass creation
@subsection CObject class:@- subclass creation

@table @b
@meindex inheritShape
@item inheritShape
Answer whether subclasses will have by default the same shape as
this class.  The default is true for the CObject hierarchy.


@end table



@node CObject-accessing
@subsection CObject:@- accessing

@table @b
@meindex address
@slindex storage
@item address
Answer the address the receiver is pointing to.  The address can
be absolute if the storage is nil, or relative to the Smalltalk
object in #storage.  In this case, an address of 0 corresponds to
the first instance variable.


@meindex address:@-
@item address:@- anInteger
Set the receiver to point to the passed address, anInteger


@meindex isAbsolute
@item isAbsolute
Answer whether the object points into a garbage-collected Smalltalk
storage, or it is an absolute address.


@meindex printOn:@-
@item printOn:@- aStream
Print a representation of the receiver


@meindex storage
@item storage
Answer the storage that the receiver is pointing into, or nil
if the address is absolute.


@meindex storage:@-
@item storage:@- anObject
Change the receiver to point to the storage of anObject.


@meindex type:@-
@item type:@- aCType
Set the receiver's type to aCType.


@end table



@node CObject-basic
@subsection CObject:@- basic

@table @b
@meindex =
@item = anObject
Return true if the receiver and aCObject are equal.


@meindex hash
@item hash
Return a hash value for anObject.


@end table



@node CObject-C data access
@subsection CObject:@- C data access

@table @b
@meindex at:@-put:@-type:@-
@item at:@- byteOffset put:@- aValue type:@- aType
Store aValue as data of the given type from byteOffset bytes after
the pointer stored in the receiver


@meindex at:@-type:@-
@item at:@- byteOffset type:@- aType
Answer some data of the given type from byteOffset bytes after
the pointer stored in the receiver


@meindex free
@item free
Free the receiver's pointer and set it to null. Big trouble hits
you if the receiver doesn't point to the base of a malloc-ed area.


@end table



@node CObject-conversion
@subsection CObject:@- conversion

@table @b
@meindex castTo:@-
@item castTo:@- aType
Answer another CObject, pointing to the same address as the receiver,
but belonging to the aType CType.


@meindex narrow
@slindex cObject
@item narrow
This method is called on CObjects returned by a C call-out whose
return type is specified as a CType; it mostly allows one to
change the class of the returned CObject.  By default it does
nothing, and that's why it is not called when #cObject is used
to specify the return type.


@meindex type
@item type
Answer a CType for the receiver


@end table



@node CObject-finalization
@subsection CObject:@- finalization

@table @b
@meindex finalize
@slindex addToBeFinalized
@slindex free
@item finalize
To make the VM call this, use #addToBeFinalized. It frees
automatically any memory pointed to by the CObject. It is not
automatically enabled because big trouble hits you if you use
#free and the receiver doesn't point to the base of a malloc-ed
area.


@end table



@node CObject-pointer-like behavior
@subsection CObject:@- pointer-like behavior

@table @b
@meindex +
@item + anInteger
Return another instance of the receiver's class which points at
&receiver[anInteger] (or, if you prefer, what `receiver +
anInteger' does in C).


@meindex -
@item - intOrPtr
If intOrPtr is an integer, return another instance of the receiver's
class pointing at &receiver[-anInteger] (or, if you prefer, what
`receiver - anInteger' does in C).
If it is the same class as the receiver, return the difference in
chars, i.e. in bytes, between the two pointed addresses (or, if
you prefer, what `receiver - anotherCharPtr' does in C)


@meindex addressAt:@-
@item addressAt:@- anIndex
Return a new CObject of the element type,
corresponding to an object that is anIndex places past
the receiver (remember that CObjects represent pointers
and that C pointers behave like arrays).
anIndex is zero-based, just like with all other C-style accessing.


@meindex at:@-
@item at:@- anIndex
Dereference a pointer that is anIndex places past
the receiver (remember that CObjects represent pointers
and that C pointers behave like arrays).  anIndex is
zero-based, just like with all other C-style accessing.


@meindex at:@-put:@-
@item at:@- anIndex put:@- aValue
Store anIndex places past the receiver the passed Smalltalk
object or CObject `aValue'; if it is a CObject is dereferenced:@-
that is, this method is equivalent either to cobj[anIndex]=aValue
or cobj[anIndex]=*aValue.  anIndex is zero-based, just like with
all other C-style accessing.

In both cases, aValue should be of the element type or of the
corresponding Smalltalk type (that is, a String is ok for an
array of CStrings) to avoid typing problems which however will
not be signaled because C is untyped.


@meindex decr
@item decr
Adjust the pointer by sizeof(dereferencedType) bytes down (i.e. --receiver)


@meindex decrBy:@-
@item decrBy:@- anInteger
Adjust the pointer by anInteger elements down (i.e. receiver -= anInteger)


@meindex incr
@item incr
Adjust the pointer by sizeof(dereferencedType) bytes up (i.e. ++receiver)


@meindex incrBy:@-
@item incrBy:@- anInteger
Adjust the pointer by anInteger elements up (i.e. receiver += anInteger)


@end table



@node CObject-testing
@subsection CObject:@- testing

@table @b
@meindex isNull
@item isNull
Return true if the receiver points to NULL.


@end table



@node CObject-testing functionality
@subsection CObject:@- testing functionality

@table @b
@meindex isCObject
@item isCObject
Answer `true'.

@end table

@node Collection
@section Collection
@clindex Collection

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Iterable
@itemx Category: Collections
I am an abstract class.  My instances are collections of objects.  My
subclasses may place some restrictions or add some definitions to how
the objects are stored or organized; I say nothing about this.  I merely
provide some object creation and access routines for general collections
of objects.
@end table

@menu
* Collection class-instance creation::  (class)
* Collection class-multibyte encodings::  (class)
* Collection-adding::  (instance)
* Collection-compiler::  (instance)
* Collection-concatenating::  (instance)
* Collection-converting::  (instance)
* Collection-copying Collections::  (instance)
* Collection-copying SequenceableCollections::  (instance)
* Collection-enumeration::  (instance)
* Collection-finalization::  (instance)
* Collection-printing::  (instance)
* Collection-removing::  (instance)
* Collection-sorting::  (instance)
* Collection-storing::  (instance)
* Collection-testing collections::  (instance)
@end menu



@node Collection class-instance creation
@subsection Collection class:@- instance creation

@table @b
@meindex from:@-
@item from:@- anArray
Convert anArray to an instance of the receiver.  anArray is
structured such that the instance can be conveniently and fully
specified using brace-syntax, possibly by imposing some
additional structure on anArray.


@meindex join:@-
@item join:@- aCollection
Answer a collection formed by treating each element in
aCollection as a `withAll:@-' argument collection to be added to a
new instance.


@meindex with:@-
@item with:@- anObject
Answer a collection whose only element is anObject


@meindex with:@-with:@-
@item with:@- firstObject with:@- secondObject
Answer a collection whose only elements are the parameters in the order
they were passed


@meindex with:@-with:@-with:@-
@item with:@- firstObject with:@- secondObject with:@- thirdObject
Answer a collection whose only elements are the parameters in the order
they were passed


@meindex with:@-with:@-with:@-with:@-
@item with:@- firstObject with:@- secondObject with:@- thirdObject with:@- fourthObject
Answer a collection whose only elements are the parameters in the order
they were passed


@meindex with:@-with:@-with:@-with:@-with:@-
@item with:@- firstObject with:@- secondObject with:@- thirdObject with:@- fourthObject with:@- fifthObject
Answer a collection whose only elements are the parameters in the order
they were passed


@meindex withAll:@-
@item withAll:@- aCollection
Answer a collection whose elements are all those in aCollection


@end table



@node Collection class-multibyte encodings
@subsection Collection class:@- multibyte encodings

@table @b
@meindex isUnicode
@item isUnicode
Answer true; the receiver is able to store arbitrary
Unicode characters.


@end table



@node Collection-adding
@subsection Collection:@- adding

@table @b
@meindex add:@-
@item add:@- newObject
Add newObject to the receiver, answer it


@meindex addAll:@-
@item addAll:@- aCollection
Adds all the elements of 'aCollection' to the receiver, answer
aCollection


@end table



@node Collection-compiler
@subsection Collection:@- compiler

@table @b
@meindex literalEquals:@-
@item literalEquals:@- anObject
Not commented.

@meindex literalHash
@item literalHash
Not commented.

@end table



@node Collection-concatenating
@subsection Collection:@- concatenating

@table @b
@meindex join
@item join
Answer a new collection like my first element, with all the
elements (in order) of all my elements, which should be
collections.

I use my first element instead of myself as a prototype because
my elements are more likely to share the desired properties than
I am, such as in:@-

#('hello, ' 'world') join => 'hello, world'


@end table



@node Collection-converting
@subsection Collection:@- converting

@table @b
@meindex asArray
@item asArray
Answer an Array containing all the elements in the receiver


@meindex asBag
@item asBag
Answer a Bag containing all the elements in the receiver


@meindex asByteArray
@item asByteArray
Answer a ByteArray containing all the elements in the receiver


@meindex asOrderedCollection
@item asOrderedCollection
Answer an OrderedCollection containing all the elements in the receiver


@meindex asRunArray
@slindex do:@-
@item asRunArray
Answer the receiver converted to a RunArray. If the receiver is not
ordered the order of the elements in the RunArray might not be the #do:@-
order.


@meindex asSet
@item asSet
Answer a Set containing all the elements in the receiver with no
duplicates


@meindex asSortedCollection
@item asSortedCollection
Answer a SortedCollection containing all the elements in the receiver
with the default sort block - [ :a :b | a <= b ]


@meindex asSortedCollection:@-
@item asSortedCollection:@- aBlock
Answer a SortedCollection whose elements are the elements of the receiver,
sorted according to the sort block aBlock


@meindex asString
@item asString
Answer a String containing all the elements in the receiver


@meindex asUnicodeString
@item asUnicodeString
Answer a UnicodeString containing all the elements in the receiver


@end table



@node Collection-copying Collections
@subsection Collection:@- copying Collections

@table @b
@meindex copyReplacing:@-withObject:@-
@item copyReplacing:@- targetObject withObject:@- newObject
Copy replacing each object which is = to targetObject
with newObject


@meindex copyWith:@-
@item copyWith:@- newElement
Answer a copy of the receiver to which newElement is added


@meindex copyWithout:@-
@item copyWithout:@- oldElement
Answer a copy of the receiver to which all occurrences of oldElement are
removed


@end table



@node Collection-copying SequenceableCollections
@subsection Collection:@- copying SequenceableCollections

@table @b
@meindex ,
@slindex add:@-
@item , anIterable
Append anIterable at the end of a copy of the receiver (using #add:@-),
and answer a new collection


@end table



@node Collection-enumeration
@subsection Collection:@- enumeration

@table @b
@meindex anyOne
@item anyOne
Answer an unspecified element of the collection.


@meindex beConsistent
@slindex do:@-
@item beConsistent
This method is private, but it is quite interesting so it is
documented. It ensures that a collection is in a consistent
state before attempting to iterate on it; its presence reduces
the number of overrides needed by collections who try to
amortize their execution times.  The default implementation
does nothing, so it is optimized out by the virtual machine
and so it loses very little on the performance side.  Note
that descendants of Collection have to call it explicitly
since #do:@- is abstract in Collection.


@meindex collect:@-
@item collect:@- aBlock
Answer a new instance of a Collection containing all the results
of evaluating aBlock passing each of the receiver's elements


@meindex gather:@-
@slindex join
@item gather:@- aBlock
Answer a new instance of a Collection containing all the results
of evaluating aBlock, joined together.  aBlock should return
collections.  The result is the same kind as the first collection,
returned by aBlock (as for #join).


@meindex readStream
@item readStream
Answer a stream that gives elements of the receiver


@meindex reject:@-
@item reject:@- aBlock
Answer a new instance of a Collection containing all the elements
in the receiver which, when passed to aBlock, don't answer true


@meindex select:@-
@item select:@- aBlock
Answer a new instance of a Collection containing all the elements
in the receiver which, when passed to aBlock, answer true


@end table



@node Collection-finalization
@subsection Collection:@- finalization

@table @b
@meindex mourn:@-
@item mourn:@- anObject
Private - anObject has been found to have a weak key, remove it
and possibly finalize the key.


@end table



@node Collection-printing
@subsection Collection:@- printing

@table @b
@meindex displayLines
@item displayLines
Print each element of the receiver to a line on standard output.


@meindex examineOn:@-
@item examineOn:@- aStream
Print all the instance variables and objects in the receiver on aStream


@meindex printOn:@-
@item printOn:@- aStream
Print a representation of the receiver on aStream


@end table



@node Collection-removing
@subsection Collection:@- removing

@table @b
@meindex empty
@item empty
Remove everything from the receiver.


@meindex remove:@-
@item remove:@- oldObject
Remove oldObject from the receiver. If absent, fail, else
answer oldObject.


@meindex remove:@-ifAbsent:@-
@item remove:@- oldObject ifAbsent:@- anExceptionBlock
Remove oldObject from the receiver. If absent, evaluate anExceptionBlock
and answer the result, else answer oldObject.


@meindex removeAll:@-
@item removeAll:@- aCollection
Remove each object in aCollection, answer aCollection, fail if some
of them is absent. Warning:@- this could leave the collection in a
semi-updated state.


@meindex removeAll:@-ifAbsent:@-
@item removeAll:@- aCollection ifAbsent:@- aBlock
Remove each object in aCollection, answer aCollection; if some
element is absent, pass it to aBlock.


@meindex removeAllSuchThat:@-
@item removeAllSuchThat:@- aBlock
Remove from the receiver all objects for which aBlock returns true.


@end table



@node Collection-sorting
@subsection Collection:@- sorting

@table @b
@meindex sorted
@slindex <=
@item sorted
Return a sequenceable collection with the contents of the receiver
sorted according to the default sort block, which uses #<=
to compare items.


@meindex sorted:@-
@item sorted:@- sortBlock
Return a sequenceable collection with the contents of the receiver
sorted according to the given sort block, which accepts pair of items
and returns true if the first item is less than the second one.


@end table



@node Collection-storing
@subsection Collection:@- storing

@table @b
@meindex storeOn:@-
@item storeOn:@- aStream
Store Smalltalk code compiling to the receiver on aStream


@end table



@node Collection-testing collections
@subsection Collection:@- testing collections

@table @b
@meindex capacity
@item capacity
Answer how many elements the receiver can hold before having to grow.


@meindex identityIncludes:@-
@item identityIncludes:@- anObject
Answer whether we include the anObject object


@meindex includes:@-
@item includes:@- anObject
Answer whether we include anObject


@meindex includesAllOf:@-
@item includesAllOf:@- aCollection
Answer whether we include all of the objects in aCollection


@meindex includesAnyOf:@-
@item includesAnyOf:@- aCollection
Answer whether we include any of the objects in aCollection


@meindex isEmpty
@item isEmpty
Answer whether we are (still) empty


@meindex isSequenceable
@slindex at:@-/@-#at:@-put:@-
@item isSequenceable
Answer whether the receiver can be accessed by a numeric index with
#at:@-/@-#at:@-put:@-.


@meindex notEmpty
@item notEmpty
Answer whether we include at least one object


@meindex occurrencesOf:@-
@item occurrencesOf:@- anObject
Answer how many occurrences of anObject we include


@meindex size
@item size
Answer how many objects we include


@end table

@node CompiledBlock
@section CompiledBlock
@clindex CompiledBlock

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: CompiledCode
@itemx Category: Language-Implementation
I represent a block that has been compiled.
@end table

@menu
* CompiledBlock class-instance creation::  (class)
* CompiledBlock-accessing::  (instance)
* CompiledBlock-basic::  (instance)
* CompiledBlock-printing::  (instance)
* CompiledBlock-saving and loading::  (instance)
@end menu



@node CompiledBlock class-instance creation
@subsection CompiledBlock class:@- instance creation

@table @b
@meindex new:@-header:@-method:@-
@item new:@- numBytecodes header:@- anInteger method:@- outerMethod
Answer a new instance of the receiver with room for the given
number of bytecodes and the given header.


@meindex numArgs:@-numTemps:@-bytecodes:@-depth:@-literals:@-
@item numArgs:@- args numTemps:@- temps bytecodes:@- bytecodes depth:@- depth literals:@- literalArray
Answer an (almost) full fledged CompiledBlock.  To make it complete,
you must either set the new object's `method' variable, or put it
into a BlockClosure and put the BlockClosure into a CompiledMethod's
literals.  The clean-ness of the block is automatically computed.


@end table



@node CompiledBlock-accessing
@subsection CompiledBlock:@- accessing

@table @b
@meindex flags
@item flags
Answer the `cleanness' of the block.
0 = clean;
1 = access to receiver variables and/or self;
2-30 = access to variables that are 1-29 contexts away;
31 = return from method or push thisContext


@meindex method
@item method
Answer the CompiledMethod in which the receiver lies


@meindex methodClass
@item methodClass
Answer the class in which the receiver is installed.


@meindex methodClass:@-
@item methodClass:@- methodClass
Set the receiver's class instance variable


@meindex numArgs
@item numArgs
Answer the number of arguments passed to the receiver


@meindex numLiterals
@item numLiterals
Answer the number of literals for the receiver


@meindex numTemps
@item numTemps
Answer the number of temporary variables used by the receiver


@meindex selector
@item selector
Answer the selector through which the method is called


@meindex selector:@-
@item selector:@- aSymbol
Set the selector through which the method is called


@meindex sourceCodeLinesDelta
@item sourceCodeLinesDelta
Answer the delta from the numbers in LINE_NUMBER bytecodes
to source code line numbers.


@meindex sourceCodeMap
@item sourceCodeMap
Answer an array which maps bytecode indices to source code
line numbers.  0 values represent invalid instruction
pointer indices.


@meindex stackDepth
@item stackDepth
Answer the number of stack slots needed for the receiver


@end table



@node CompiledBlock-basic
@subsection CompiledBlock:@- basic

@table @b
@meindex =
@item = aMethod
Answer whether the receiver and aMethod are equal


@meindex methodCategory
@item methodCategory
Answer the method category


@meindex methodCategory:@-
@item methodCategory:@- aCategory
Set the method category to the given string


@meindex methodSourceCode
@item methodSourceCode
Answer the method source code (a FileSegment or String or nil)


@meindex methodSourceFile
@item methodSourceFile
Answer the file where the method source code is stored


@meindex methodSourcePos
@item methodSourcePos
Answer the location where the method source code is stored in
the methodSourceFile


@meindex methodSourceString
@item methodSourceString
Answer the method source code as a string


@end table



@node CompiledBlock-printing
@subsection CompiledBlock:@- printing

@table @b
@meindex printOn:@-
@item printOn:@- aStream
Print the receiver's class and selector on aStream


@end table



@node CompiledBlock-saving and loading
@subsection CompiledBlock:@- saving and loading

@table @b
@meindex binaryRepresentationObject
@slindex blockAt:@-
@item binaryRepresentationObject
This method is implemented to allow for a PluggableProxy to be used
with CompiledBlocks.  Answer a DirectedMessage which sends #blockAt:@-
to the CompiledMethod containing the receiver.


@end table

@node CompiledCode
@section CompiledCode
@clindex CompiledCode

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: ArrayedCollection
@itemx Category: Language-Implementation
I represent code that has been compiled.  I am an abstract
superclass for blocks and methods
@end table

@menu
* CompiledCode class-cache flushing::  (class)
* CompiledCode class-instance creation::  (class)
* CompiledCode class-tables::  (class)
* CompiledCode-accessing::  (instance)
* CompiledCode-basic::  (instance)
* CompiledCode-copying::  (instance)
* CompiledCode-debugging::  (instance)
* CompiledCode-decoding bytecodes::  (instance)
* CompiledCode-literals - iteration::  (instance)
* CompiledCode-security::  (instance)
* CompiledCode-testing accesses::  (instance)
* CompiledCode-translation::  (instance)
@end menu



@node CompiledCode class-cache flushing
@subsection CompiledCode class:@- cache flushing

@table @b
@meindex flushTranslatorCache
@item flushTranslatorCache
Answer any kind of cache mantained by a just-in-time code translator
in the virtual machine (if any).  Do nothing for now.


@end table



@node CompiledCode class-instance creation
@subsection CompiledCode class:@- instance creation

@table @b
@meindex new:@-header:@-literals:@-
@item new:@- numBytecodes header:@- anInteger literals:@- literals
Answer a new instance of the receiver with room for the given
number of bytecodes and the given header


@meindex new:@-header:@-numLiterals:@-
@item new:@- numBytecodes header:@- anInteger numLiterals:@- numLiterals
Answer a new instance of the receiver with room for the given
number of bytecodes and the given header


@end table



@node CompiledCode class-tables
@subsection CompiledCode class:@- tables

@table @b
@meindex bytecodeInfoTable
@item bytecodeInfoTable
Return a ByteArray which defines some properties of the bytecodes.
For each bytecode, 4 bytes are reserved.  The fourth byte is a
flag byte:@- bit 7 means that the argument is a line number to be
used in creating the bytecode->line number map.

The first three have a meaning only for those bytecodes that
represent a combination of operations:@- the combination can be
BC1 ARG BC2 OPERAND      if the fourth byte's bit 0 = 0
or  BC1 OPERAND BC2 ARG      if the fourth byte's bit 0 = 1

where BC1 is the first byte, BC2 is the second, ARG is the third
and OPERAND is the bytecode argument as it appears in the bytecode
stream.


@meindex specialSelectors
@item specialSelectors
Answer an array of message names that don't need to be in
literals to be sent in a method.  Their position here
reflects their integer code in bytecode.


@meindex specialSelectorsNumArgs
@slindex specialSelectors
@item specialSelectorsNumArgs
Answer a harmoniously-indexed array of arities for the
messages answered by #specialSelectors.


@end table



@node CompiledCode-accessing
@subsection CompiledCode:@- accessing

@table @b
@meindex at:@-put:@-
@item at:@- anIndex put:@- aBytecode
Store aBytecode as the anIndex-th bytecode


@meindex blockAt:@-
@item blockAt:@- anIndex
Answer the CompiledBlock attached to the anIndex-th literal,
assuming that the literal is a CompiledBlock or a BlockClosure.


@meindex bytecodeAt:@-
@item bytecodeAt:@- anIndex
Answer the anIndex-th bytecode


@meindex bytecodeAt:@-put:@-
@item bytecodeAt:@- anIndex put:@- aBytecode
Store aBytecode as the anIndex-th bytecode


@meindex flags
@item flags
Private - Answer the optimization flags for the receiver


@meindex isAnnotated
@item isAnnotated
Answer `false'.

@meindex literalAt:@-
@item literalAt:@- anIndex
Answer the anIndex-th literal


@meindex literalAt:@-put:@-
@item literalAt:@- anInteger put:@- aValue
Store aValue as the anIndex-th literal


@meindex literals
@item literals
Answer the literals referenced by my code or any CompiledCode
instances I own.


@meindex method
@item method
Answer the parent method for the receiver, or self if it is a method.


@meindex methodClass
@item methodClass
Answer the class in which the receiver is installed.


@meindex methodClass:@-
@item methodClass:@- methodClass
Set the receiver's class instance variable


@meindex numArgs
@item numArgs
Answer the number of arguments for the receiver


@meindex numLiterals
@item numLiterals
Answer the number of literals for the receiver


@meindex numTemps
@item numTemps
Answer the number of temporaries for the receiver


@meindex primitive
@item primitive
Answer the primitive called by the receiver


@meindex selector
@item selector
Answer the selector through which the method is called


@meindex selector:@-
@item selector:@- aSymbol
Set the selector through which the method is called


@meindex sourceCodeLinesDelta
@item sourceCodeLinesDelta
Answer the delta from the numbers in LINE_NUMBER bytecodes
to source code line numbers.


@meindex stackDepth
@item stackDepth
Answer the number of stack slots needed for the receiver


@end table



@node CompiledCode-basic
@subsection CompiledCode:@- basic

@table @b
@meindex =
@slindex #
@item = aMethod
Answer whether the receiver is the same object as arg.  Testing
for equality could break the browser, since it's possible to put
arbitrary objects via #@-#(...), so this is safer.


@meindex hash
@item hash
Answer an hash value for the receiver


@meindex methodCategory
@item methodCategory
Answer the method category


@meindex methodCategory:@-
@item methodCategory:@- aCategory
Set the method category to the given string


@meindex methodSourceCode
@item methodSourceCode
Answer the method source code (a FileSegment or String or nil)


@meindex methodSourceFile
@item methodSourceFile
Answer the file where the method source code is stored


@meindex methodSourcePos
@item methodSourcePos
Answer the location where the method source code is stored in
the methodSourceFile


@meindex methodSourceString
@item methodSourceString
Answer the method source code as a string


@end table



@node CompiledCode-copying
@subsection CompiledCode:@- copying

@table @b
@meindex deepCopy
@item deepCopy
Answer a deep copy of the receiver


@end table



@node CompiledCode-debugging
@subsection CompiledCode:@- debugging

@table @b
@meindex examineOn:@-
@item examineOn:@- aStream
Print the contents of the receiver in a verbose way.


@end table



@node CompiledCode-decoding bytecodes
@subsection CompiledCode:@- decoding bytecodes

@table @b
@meindex dispatchTo:@-with:@-
@item dispatchTo:@- anObject with:@- param
Disassemble the bytecodes and tell anObject about them in the form
of message sends.  param is given as an argument to every message
send.


@end table



@node CompiledCode-literals - iteration
@subsection CompiledCode:@- literals - iteration

@table @b
@meindex allLiteralSymbolsDo:@-
@slindex allLiteralsDo:@-
@item allLiteralSymbolsDo:@- aBlock
As with #allLiteralsDo:@-, but only call aBlock with found Symbols.


@meindex allLiteralsDo:@-
@item allLiteralsDo:@- aBlock
Walk my literals, descending into Arrays and Messages,
invoking aBlock with each touched object.


@meindex literalsDo:@-
@item literalsDo:@- aBlock
Invoke aBlock with each object immediately in my list of literals.


@end table



@node CompiledCode-security
@subsection CompiledCode:@- security

@table @b
@meindex verify
@item verify
Verify the bytecodes for the receiver, and raise an exception if
the verification process failed.


@end table



@node CompiledCode-testing accesses
@subsection CompiledCode:@- testing accesses

@table @b
@meindex accesses:@-
@item accesses:@- instVarIndex
Answer whether the receiver accesses the instance variable with the given
index


@meindex assigns:@-
@item assigns:@- instVarIndex
Answer whether the receiver writes to the instance variable with the given
index


@meindex containsLiteral:@-
@item containsLiteral:@- anObject
Answer if the receiver contains a literal which is equal to anObject.


@meindex hasBytecode:@-between:@-and:@-
@item hasBytecode:@- byte between:@- firstIndex and:@- lastIndex
Answer whether the receiver includes the `byte' bytecode in any
of the indices between firstIndex and lastIndex.


@meindex jumpDestinationAt:@-forward:@-
@item jumpDestinationAt:@- anIndex forward:@- aBoolean
Answer where the jump at bytecode index `anIndex' lands


@meindex reads:@-
@item reads:@- instVarIndex
Answer whether the receiver reads the instance variable with the given
index


@meindex refersTo:@-
@item refersTo:@- anObject
Answer whether the receiver refers to the given object


@meindex sendsToSuper
@item sendsToSuper
Answer whether the receiver includes a send to super.


@meindex sourceCodeMap
@item sourceCodeMap
Answer an array which maps bytecode indices to source code
line numbers.  0 values represent invalid instruction
pointer indices.


@end table



@node CompiledCode-translation
@subsection CompiledCode:@- translation

@table @b
@meindex discardTranslation
@item discardTranslation
Flush the just-in-time translated code for the receiver (if any).


@end table

@node CompiledMethod
@section CompiledMethod
@clindex CompiledMethod

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: CompiledCode
@itemx Category: Language-Implementation
I represent methods that have been compiled.  I can recompile
methods from their source code, I can invoke Emacs to edit the source code
for one of my instances, and I know how to access components of my
instances.
@end table

@menu
* CompiledMethod class-c call-outs::  (class)
* CompiledMethod class-instance creation::  (class)
* CompiledMethod class-lean images::  (class)
* CompiledMethod-accessing::  (instance)
* CompiledMethod-attributes::  (instance)
* CompiledMethod-basic::  (instance)
* CompiledMethod-c call-outs::  (instance)
* CompiledMethod-compiling::  (instance)
* CompiledMethod-invoking::  (instance)
* CompiledMethod-printing::  (instance)
* CompiledMethod-saving and loading::  (instance)
* CompiledMethod-source code::  (instance)
* CompiledMethod-testing::  (instance)
@end menu



@node CompiledMethod class-c call-outs
@subsection CompiledMethod class:@- c call-outs

@table @b
@meindex asyncCCall:@-numArgs:@-attributes:@-
@slindex asyncCCall:@-args:@-
@item asyncCCall:@- descr numArgs:@- numArgs attributes:@- attributesArray
Return a CompiledMethod corresponding to a #asyncCCall:@-args:@-
pragma with the given arguments.


@meindex cCall:@-numArgs:@-attributes:@-
@slindex cCall:@-returning:@-args:@-
@item cCall:@- descr numArgs:@- numArgs attributes:@- attributesArray
Return a CompiledMethod corresponding to a #cCall:@-returning:@-args:@-
pragma with the given arguments.


@end table



@node CompiledMethod class-instance creation
@subsection CompiledMethod class:@- instance creation

@table @b
@meindex literals:@-numArgs:@-numTemps:@-attributes:@-bytecodes:@-depth:@-
@item literals:@- lits numArgs:@- numArg numTemps:@- numTemp attributes:@- attrArray bytecodes:@- bytecodes depth:@- depth
Answer a full fledged CompiledMethod. Construct the method
header from the parameters, and set the literals and bytecodes
to the provided ones.  Also, the bytecodes are optimized and
any embedded CompiledBlocks modified to refer to these literals
and to the newly created CompiledMethod.


@meindex numArgs:@-
@slindex valueWithReceiver:@-withArguments:@-
@item numArgs:@- args
Create a user-defined method (one that is sent
#valueWithReceiver:@-withArguments:@- when it is invoked)
with numArgs arguments.  This only makes sense when
called for a subclass of CompiledMethod.


@end table



@node CompiledMethod class-lean images
@subsection CompiledMethod class:@- lean images

@table @b
@meindex stripSourceCode
@item stripSourceCode
Remove all the references to method source code from the system


@end table



@node CompiledMethod-accessing
@subsection CompiledMethod:@- accessing

@table @b
@meindex allBlocksDo:@-
@item allBlocksDo:@- aBlock
Evaluate aBlock, passing to it all the CompiledBlocks it holds


@meindex allLiterals
@item allLiterals
Answer the literals referred to by the receiver and all the blocks
in it


@meindex flags
@item flags
Private - Answer the optimization flags for the receiver


@meindex isOldSyntax
@item isOldSyntax
Answer whether the method was written with the old (chunk-format)
syntax


@meindex method
@item method
Answer the receiver, since it is already a method.


@meindex methodCategory
@item methodCategory
Answer the method category


@meindex methodCategory:@-
@item methodCategory:@- aCategory
Set the method category to the given string


@meindex methodClass
@item methodClass
Answer the class in which the receiver is installed.


@meindex methodClass:@-
@item methodClass:@- methodClass
Set the receiver's class instance variable


@meindex noteOldSyntax
@item noteOldSyntax
Remember that the method is written with the old (chunk-format)
syntax


@meindex numArgs
@item numArgs
Answer the number of arguments for the receiver


@meindex numTemps
@item numTemps
Answer the number of temporaries for the receiver


@meindex primitive
@item primitive
Answer the primitive called by the receiver


@meindex selector
@item selector
Answer the selector through which the method is called


@meindex selector:@-
@item selector:@- aSymbol
Set the selector through which the method is called


@meindex sourceCodeLinesDelta
@item sourceCodeLinesDelta
Answer the delta from the numbers in LINE_NUMBER bytecodes
to source code line numbers.


@meindex stackDepth
@item stackDepth
Answer the number of stack slots needed for the receiver


@meindex withAllBlocksDo:@-
@item withAllBlocksDo:@- aBlock
Evaluate aBlock, passing the receiver and all the CompiledBlocks it
holds


@meindex withNewMethodClass:@-
@item withNewMethodClass:@- class
Answer either the receiver or a copy of it, with the method class set
to class


@meindex withNewMethodClass:@-selector:@-
@item withNewMethodClass:@- class selector:@- selector
Answer either the receiver or a copy of it, with the method class set
to class


@end table



@node CompiledMethod-attributes
@subsection CompiledMethod:@- attributes

@table @b
@meindex attributeAt:@-
@item attributeAt:@- aSymbol
Return a Message for the first attribute named aSymbol defined by the
receiver, or answer an error if none was found.


@meindex attributeAt:@-ifAbsent:@-
@item attributeAt:@- aSymbol ifAbsent:@- aBlock
Return a Message for the first attribute named aSymbol defined by the
receiver, or evaluate aBlock is none was found.


@meindex attributes
@item attributes
Return an Array of Messages, one for each attribute defined by the
receiver.


@meindex attributesDo:@-
@item attributesDo:@- aBlock
Evaluate aBlock once for each attribute defined by the receiver,
passing a Message each time.


@meindex isAnnotated
@item isAnnotated
If the receiver has any attributes, answer true.


@meindex primitiveAttribute
@item primitiveAttribute
If the receiver defines a primitive, return a Message resembling
the attribute that was used to define it.


@end table



@node CompiledMethod-basic
@subsection CompiledMethod:@- basic

@table @b
@meindex =
@item = aMethod
Answer whether the receiver and aMethod are equal


@meindex hash
@item hash
Answer an hash value for the receiver


@end table



@node CompiledMethod-c call-outs
@subsection CompiledMethod:@- c call-outs

@table @b
@meindex isValidCCall
@item isValidCCall
Answer whether I appear to have the valid flags, information,
and ops to invoke a C function and answer its result.


@meindex rewriteAsAsyncCCall:@-args:@-
@item rewriteAsAsyncCCall:@- func args:@- argsArray
Not commented.

@meindex rewriteAsCCall:@-for:@-
@item rewriteAsCCall:@- funcOrDescr for:@- aClass
Not commented.

@meindex rewriteAsCCall:@-returning:@-args:@-
@item rewriteAsCCall:@- func returning:@- returnType args:@- argsArray
Not commented.

@end table



@node CompiledMethod-compiling
@subsection CompiledMethod:@- compiling

@table @b
@meindex methodFormattedSourceString
@item methodFormattedSourceString
Answer the method source code as a string, formatted using
the RBFormatter.  Requires package Parser.


@meindex methodParseNode
@item methodParseNode
Answer the parse tree for the receiver, or nil if there is an
error.  Requires package Parser.


@meindex parserClass
@item parserClass
Answer a parser class, similar to Behavior>>parserClass, that
can parse my source code.  Requires package Parser.


@meindex recompile
@item recompile
Recompile the method in the scope of the class where it leaves.


@meindex recompileNotifying:@-
@slindex error:@-
@item recompileNotifying:@- aNotifier
Recompile the method in the scope of the class where it leaves,
notifying errors to aNotifier by sending it #error:@-.


@end table



@node CompiledMethod-invoking
@subsection CompiledMethod:@- invoking

@table @b
@meindex valueWithReceiver:@-withArguments:@-
@slindex subclassResponsibility
@item valueWithReceiver:@- anObject withArguments:@- args
Execute the method within anObject, passing the elements of the args
Array as parameters.  The method need not reside on the hierarchy
from the receiver's class to Object -- it need not reside at all in
a MethodDictionary, in fact -- but doing bad things will compromise
stability of the Smalltalk virtual machine (and don't blame anybody
but yourself).

If the flags field of the method header is 6, this method instead
provides a hook from which the virtual machine can call back whenever
execution of the method is requested.  In this case, invoking the
method would cause an infinite loop (the VM asks the method to
run, the method asks the VM to invoke it, and so on), so this method
fails with a #subclassResponsibility error.


@end table



@node CompiledMethod-printing
@subsection CompiledMethod:@- printing

@table @b
@meindex printOn:@-
@item printOn:@- aStream
Print the receiver's class and selector on aStream


@meindex storeOn:@-
@item storeOn:@- aStream
Print code to create the receiver on aStream


@end table



@node CompiledMethod-saving and loading
@subsection CompiledMethod:@- saving and loading

@table @b
@meindex binaryRepresentationObject
@slindex >>
@item binaryRepresentationObject
This method is implemented to allow for a PluggableProxy to be used
with CompiledMethods.  Answer a DirectedMessage which sends #>>
to the class object containing the receiver.


@end table



@node CompiledMethod-source code
@subsection CompiledMethod:@- source code

@table @b
@meindex methodRecompilationSourceString
@item methodRecompilationSourceString
Answer the method source code as a string, ensuring that it is
in new syntax (it has brackets).


@meindex methodSourceCode
@item methodSourceCode
Answer the method source code (a FileSegment or String or nil)


@meindex methodSourceFile
@item methodSourceFile
Answer the file where the method source code is stored


@meindex methodSourcePos
@item methodSourcePos
Answer the location where the method source code is stored in
the methodSourceFile


@meindex methodSourceString
@item methodSourceString
Answer the method source code as a string


@end table



@node CompiledMethod-testing
@subsection CompiledMethod:@- testing

@table @b
@meindex accesses:@-
@item accesses:@- instVarIndex
Answer whether the receiver or the blocks it contains accesses
the instance variable with the given index


@meindex assigns:@-
@item assigns:@- instVarIndex
Answer whether the receiver or the blocks it contains writes to
the instance variable with the given index


@meindex isAbstract
@item isAbstract
Answer whether the receiver is abstract.


@meindex reads:@-
@item reads:@- instVarIndex
Answer whether the receiver or the blocks it contains reads to
the instance variable with the given index


@meindex sendsToSuper
@item sendsToSuper
Answer whether the receiver or the blocks it contains have
sends to super


@end table

@node ContextPart
@section ContextPart
@clindex ContextPart

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Object
@itemx Category: Language-Implementation
My instances represent executing Smalltalk code, which represent the local
environment of executable code. They contain a stack and also provide some
methods that can be used in inspection or debugging.
@end table

@menu
* ContextPart class-built ins::  (class)
* ContextPart class-exception handling::  (class)
* ContextPart-accessing::  (instance)
* ContextPart-built ins::  (instance)
* ContextPart-copying::  (instance)
* ContextPart-debugging::  (instance)
* ContextPart-enumerating::  (instance)
* ContextPart-printing::  (instance)
* ContextPart-security checks::  (instance)
@end menu



@node ContextPart class-built ins
@subsection ContextPart class:@- built ins

@table @b
@meindex thisContext
@item thisContext
Return the value of the thisContext variable.  Called internally
when the variable is accessed.


@end table



@node ContextPart class-exception handling
@subsection ContextPart class:@- exception handling

@table @b
@meindex backtrace
@item backtrace
Print a backtrace from the caller to the bottom of the stack on the
Transcript


@meindex backtraceOn:@-
@item backtraceOn:@- aStream
Print a backtrace from the caller to the bottom of the stack on aStream


@end table



@node ContextPart-accessing
@subsection ContextPart:@- accessing

@table @b
@meindex at:@-
@item at:@- index
Answer the index-th slot in the receiver. Any read
access from (self size + 1) to (self basicSize) will give nil.


@meindex at:@-put:@-
@item at:@- index put:@- anObject
Answer the index-th slot in the receiver. Any write
access from (self size + 1) to (self basicSize) will give an error
unless nil is being written.  This is because doing such an access
first, and then updating sp, is racy:@- the garbage collector may
trigger in the middle and move anObject, but the slot in the
context won't be adjusted.


@meindex client
@item client
Answer the client of this context, that is, the object that sent the
message that created this context. Fail if the receiver has no parent


@meindex currentFileName
@item currentFileName
Answer the name of the file where the method source code is


@meindex environment
@item environment
To create a valid execution environment for the interpreter even before
it starts, GST creates a fake context whose selector is nil and which
can be used as a marker for the current execution environment. This
method answers that context.
For processes, it answers the process block itself


@meindex home
@item home
Answer the MethodContext to which the receiver refers


@meindex initialIP
@item initialIP
Answer the value of the instruction pointer when execution starts
in the current context


@meindex ip
@item ip
Answer the current instruction pointer into the receiver


@meindex ip:@-
@item ip:@- newIP
Set the instruction pointer for the receiver


@meindex isBlock
@item isBlock
Answer whether the receiver is a block context


@meindex isDisabled
@slindex continue:@-
@slindex ensure:@-
@item isDisabled
Answers whether the context is skipped when doing a return.  Contexts
are marked as disabled whenever a non-local return is done (either by
returning from the enclosing method of a block, or with the
#continue:@- method of ContextPart) and there are unwind contexts such
as those created by #ensure:@-.  All non-unwind contexts are then
marked as disabled.


@meindex isEnvironment
@item isEnvironment
To create a valid execution environment for the interpreter even
before it starts, GST creates a fake context which invokes a special
``termination'' method.  Such a context can be used as a marker for
the current execution environment.  Answer whether the receiver is
that kind of context.


@meindex isProcess
@slindex newProcess
@item isProcess
Answer whether the receiver represents a process context, i.e. a context
created by BlockClosure>>@-#newProcess. Such a context can be recognized
because it has no parent but its flags are different from those of the
contexts created by the VM's prepareExecutionEnvironment function.


@meindex isUnwind
@slindex continue:@-
@slindex ensure:@-
@item isUnwind
Answers whether the context must continue execution even after a
non-local return (a return from the enclosing method of a block, or
a call to the #continue:@- method of ContextPart).  Such contexts are
created by #ensure:@-.


@meindex method
@item method
Return the CompiledMethod being executed


@meindex methodClass
@item methodClass
Return the class in which the CompiledMethod being executed is defined


@meindex numArgs
@item numArgs
Answer the number of arguments passed to the receiver


@meindex numTemps
@item numTemps
Answer the number of temporaries used by the receiver


@meindex parentContext
@item parentContext
Answer the context that called the receiver


@meindex parentContext:@-
@item parentContext:@- aContext
Set the context to which the receiver will return


@meindex push:@-
@item push:@- anObject
Push an object on the receiver's stack.


@meindex receiver
@item receiver
Return the receiver (self) for the method being executed


@meindex selector
@item selector
Return the selector for the method being executed


@meindex size
@item size
Answer the number of valid fields for the receiver. Any read
access from (self size + 1) to (self basicSize) will give nil.


@meindex sp
@item sp
Answer the current stack pointer into the receiver


@meindex sp:@-
@item sp:@- newSP
Set the stack pointer for the receiver.


@meindex validSize
@item validSize
Answer how many elements in the receiver should be inspected


@end table



@node ContextPart-built ins
@subsection ContextPart:@- built ins

@table @b
@meindex continue:@-
@slindex ensure:@-
@slindex ifCurtailed:@-
@item continue:@- anObject
Resume execution from the receiver, faking that the context on
top of it in the execution chain has returned anObject.  The
receiver must belong to the same process as the executing context,
otherwise the results are not predictable.  All #ensure:@- (and
possibly #ifCurtailed:@-) blocks between the currently executing
context and the receiver are evaluated (which is not what
would happen if you directly bashed at the parent context of
thisContext).


@end table



@node ContextPart-copying
@subsection ContextPart:@- copying

@table @b
@meindex copyStack
@item copyStack
Answer a copy of the entire stack.


@meindex deepCopy
@item deepCopy
Answer a copy of the entire stack, but don't copy any
of the other instance variables of the context.


@end table



@node ContextPart-debugging
@subsection ContextPart:@- debugging

@table @b
@meindex currentLine
@item currentLine
Answer the 1-based number of the line that is pointed to by the receiver's
instruction pointer.  The DebugTools package caches information,
thus making the implementation faster.


@meindex currentLineInFile
@item currentLineInFile
Answer the 1-based number of the line that is pointed to by the
receiver's instruction pointer, relative to the method's file.
The implementation is slow unless the DebugTools package is loaded.


@meindex debugger
@item debugger
Answer the debugger that is attached to the given context.  It
is always nil unless the DebugTools package is loaded.


@meindex debuggerClass
@item debuggerClass
Answer which debugger should be used to debug the current
context chain.  The class with the highest debugging
priority is picked among those mentioned in the chain.


@meindex isInternalExceptionHandlingContext
@item isInternalExceptionHandlingContext
Answer whether the receiver is a context that should be hidden to the user
when presenting a backtrace.


@end table



@node ContextPart-enumerating
@subsection ContextPart:@- enumerating

@table @b
@meindex scanBacktraceFor:@-do:@-
@item scanBacktraceFor:@- selectors do:@- aBlock
Scan the backtrace for contexts whose selector is among those
listed in selectors; if one is found, invoke aBlock passing the
context.


@meindex scanBacktraceForAttribute:@-do:@-
@item scanBacktraceForAttribute:@- selector do:@- aBlock
Scan the backtrace for contexts which have the attribute selector
listed in selectors; if one is found, invoke aBlock passing the
context and the attribute.


@end table



@node ContextPart-printing
@subsection ContextPart:@- printing

@table @b
@meindex backtrace
@item backtrace
Print a backtrace from the receiver to the bottom of the stack on the
Transcript.


@meindex backtraceOn:@-
@item backtraceOn:@- aStream
Print a backtrace from the caller to the bottom of the stack on aStream.


@end table



@node ContextPart-security checks
@subsection ContextPart:@- security checks

@table @b
@meindex checkSecurityFor:@-
@item checkSecurityFor:@- perm
Answer the receiver.

@meindex doSecurityCheckForName:@-actions:@-target:@-
@item doSecurityCheckForName:@- name actions:@- actions target:@- target
Not commented.

@meindex securityCheckForName:@-
@item securityCheckForName:@- name
Not commented.

@meindex securityCheckForName:@-action:@-
@item securityCheckForName:@- name action:@- action
Not commented.

@meindex securityCheckForName:@-actions:@-target:@-
@item securityCheckForName:@- name actions:@- actions target:@- target
Not commented.

@meindex securityCheckForName:@-target:@-
@item securityCheckForName:@- name target:@- target
Not commented.

@end table

@node Continuation
@section Continuation
@clindex Continuation

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Object
@itemx Category: Language-Implementation
At my heart, I am something like the goto instruction; my creation
sets the label, and my methods do the jump.  However, this is a really
powerful kind of goto instruction. If your hair is turning green at
this point, don't worry as you will probably only deal with users
of continuations, rather than with the concept itself.
@end table

@menu
* Continuation class-instance creation::  (class)
* Continuation-invocation::  (instance)
@end menu



@node Continuation class-instance creation
@subsection Continuation class:@- instance creation

@table @b
@meindex current
@item current
Return a continuation.


@meindex currentDo:@-
@item currentDo:@- aBlock
Pass a continuation to the one-argument block, aBlock and return the
result of evaluating it.


@meindex escapeDo:@-
@item escapeDo:@- aBlock
Pass a continuation to the one-argument block, knowing that aBlock
does not fall off (either because it includes a method return, or
because it yields control to another continuation).  If it does,
an exception will be signalled and the current process terminated.


@end table



@node Continuation-invocation
@subsection Continuation:@- invocation

@table @b
@meindex callCC
@item callCC
Activate the original continuation, passing back in turn a continuation
for the caller.  The called continuation becomes unusable, and
any attempt to reactivate it will cause an exception.  This is not
a limitation, in general, because this method is used to replace a
continuation with another (see the implementation of the Generator class).


@meindex oneShotValue
@slindex value
@item oneShotValue
Return nil to the original continuation, which becomes unusable.
Attempting to reactivate it will cause an exception.  This is an
optimization over #value.


@meindex oneShotValue:@-
@slindex value:@-
@item oneShotValue:@- v
Return anObject to the original continuation, which becomes unusable.
Attempting to reactivate it will cause an exception.  This is an
optimization over #value:@-.


@meindex value
@item value
Return nil to the original continuation, copying the stack to allow
another activation.


@meindex value:@-
@item value:@- anObject
Return anObject to the original continuation, copying the stack to allow
another activation.


@meindex valueWithArguments:@-
@item valueWithArguments:@- aCollection
Return the sole element of aCollection to the original continuation
(or nil if aCollection is empty), copying the stack to allow
another activation


@end table

@node CPtr
@section CPtr
@clindex CPtr

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: CAggregate
@itemx Category: Language-C interface

@end table

@menu
* CPtr-accessing::  (instance)
@end menu



@node CPtr-accessing
@subsection CPtr:@- accessing

@table @b
@meindex alignof
@item alignof
Answer the receiver's required aligment


@meindex sizeof
@item sizeof
Answer the receiver's size


@meindex value
@item value
Answer the address of the location pointed to by the receiver.


@meindex value:@-
@item value:@- anObject
Set the address of the location pointed to by the receiver
to anObject, which can be either an Integer or a CObject.
if anObject is an Integer, it is interpreted as a 32-bit
or 64-bit address.  If it is a CObject, its address is
stored.


@end table

@node CPtrCType
@section CPtrCType
@clindex CPtrCType

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: CType
@itemx Category: Language-C interface

@end table

@menu
* CPtrCType class-instance creation::  (class)
* CPtrCType-accessing::  (instance)
* CPtrCType-basic::  (instance)
* CPtrCType-storing::  (instance)
@end menu



@node CPtrCType class-instance creation
@subsection CPtrCType class:@- instance creation

@table @b
@meindex elementType:@-
@item elementType:@- aCType
Answer a new instance of CPtrCType that maps pointers to the given CType


@meindex from:@-
@item from:@- type
Private - Called by computeAggregateType:@- for pointers


@end table



@node CPtrCType-accessing
@subsection CPtrCType:@- accessing

@table @b
@meindex elementType
@item elementType
Answer the type of the elements in the receiver's instances


@end table



@node CPtrCType-basic
@subsection CPtrCType:@- basic

@table @b
@meindex =
@item = anObject
Return whether the receiver and anObject are equal.


@meindex hash
@item hash
Return a hash code for the receiver.


@end table



@node CPtrCType-storing
@subsection CPtrCType:@- storing

@table @b
@meindex storeOn:@-
@item storeOn:@- aStream
Not commented.

@end table

@node CScalar
@section CScalar
@clindex CScalar

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: CObject
@itemx Category: Language-C interface

@end table

@menu
* CScalar class-instance creation::  (class)
* CScalar-accessing::  (instance)
@end menu



@node CScalar class-instance creation
@subsection CScalar class:@- instance creation

@table @b
@meindex gcValue:@-
@item gcValue:@- anObject
Answer a newly allocated CObject containing the passed value,
anObject, in garbage-collected storage.


@meindex type
@item type
Answer a CType for the receiver---for example, CByteType if
the receiver is CByte.


@meindex value:@-
@slindex addToBeFinalized
@item value:@- anObject
Answer a newly allocated CObject containing the passed value,
anObject. Remember to call #addToBeFinalized if you want the
CObject to be automatically freed


@end table



@node CScalar-accessing
@subsection CScalar:@- accessing

@table @b
@meindex cObjStoredType
@slindex at:@-put:@-
@item cObjStoredType
Private - Provide a conversion from a CObject to a Smalltalk object
to be stored by #at:@-put:@-


@meindex value
@item value
Answer the value the receiver is pointing to. The exact returned
value depends on the receiver's class


@meindex value:@-
@item value:@- aValue
Set the receiver to point to the value, aValue. The exact meaning
of aValue depends on the receiver's class


@end table

@node CScalarCType
@section CScalarCType
@clindex CScalarCType

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: CType
@itemx Category: Language-C interface

@end table

@menu
* CScalarCType-accessing::  (instance)
* CScalarCType-storing::  (instance)
@end menu



@node CScalarCType-accessing
@subsection CScalarCType:@- accessing

@table @b
@meindex valueType
@item valueType
valueType is used as a means to communicate to the interpreter the
underlying type of the data.  For scalars, it is supplied by the
CObject subclass.


@end table



@node CScalarCType-storing
@subsection CScalarCType:@- storing

@table @b
@meindex storeOn:@-
@item storeOn:@- aStream
Store Smalltalk code that compiles to the receiver


@end table

@node CShort
@section CShort
@clindex CShort

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: CScalar
@itemx Category: Language-C interface

@end table

@menu
* CShort class-accessing::  (class)
* CShort-accessing::  (instance)
@end menu



@node CShort class-accessing
@subsection CShort class:@- accessing

@table @b
@meindex alignof
@item alignof
Answer the receiver's instances required aligment


@meindex cObjStoredType
@item cObjStoredType
Private - Answer an index referring to the receiver's instances scalar type


@meindex sizeof
@item sizeof
Answer the receiver's instances size


@end table



@node CShort-accessing
@subsection CShort:@- accessing

@table @b
@meindex alignof
@item alignof
Answer the receiver's required aligment


@meindex cObjStoredType
@item cObjStoredType
Private - Answer an index referring to the receiver's scalar type


@meindex sizeof
@item sizeof
Answer the receiver's size


@end table

@node CSmalltalk
@section CSmalltalk
@clindex CSmalltalk

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: CScalar
@itemx Category: Language-C interface

@end table

@menu
* CSmalltalk class-accessing::  (class)
* CSmalltalk-accessing::  (instance)
@end menu



@node CSmalltalk class-accessing
@subsection CSmalltalk class:@- accessing

@table @b
@meindex alignof
@item alignof
Answer the receiver's instances required aligment


@meindex cObjStoredType
@item cObjStoredType
Private - Answer an index referring to the receiver's instances scalar type


@meindex sizeof
@item sizeof
Answer the receiver's instances size


@end table



@node CSmalltalk-accessing
@subsection CSmalltalk:@- accessing

@table @b
@meindex alignof
@item alignof
Answer the receiver's required aligment


@meindex cObjStoredType
@item cObjStoredType
Private - Answer an index referring to the receiver's scalar type


@meindex sizeof
@item sizeof
Answer the receiver's size


@end table

@node CString
@section CString
@clindex CString

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: CPtr
@itemx Category: Language-C interface
Technically, CString is really a pointer to CChar.  However, it can be
very useful as a distinct datatype because it is a separate datatype
in Smalltalk, so we allow developers to express their semantics more
precisely by using a more descriptive type.

Note that like CChar is a pointer to char, CString is actually a *pointer*
to string:@- a char ** in C terms.  If you need to take a String out of a
char *, use CChar>>@-#asString.

In general, I behave like a cross between an array of characters and a pointer
to a character.  I provide the protocol for both data types.  My #value
method returns a Smalltalk String, as you would expect for a scalar datatype.

@end table

@menu
* CString class-accessing::  (class)
* CString class-instance creation::  (class)
* CString-accessing::  (instance)
@end menu



@node CString class-accessing
@subsection CString class:@- accessing

@table @b
@meindex cObjStoredType
@slindex at:@-put:@-
@item cObjStoredType
Private - Provide a conversion from a CObject to a Smalltalk object
to be stored by #at:@-put:@-


@end table



@node CString class-instance creation
@subsection CString class:@- instance creation

@table @b
@meindex type
@item type
Answer a CType for the receiver---for example, CByteType if
the receiver is CByte.


@meindex value:@-
@slindex addToBeFinalized
@item value:@- anObject
Answer a newly allocated CObject containing the passed value,
anObject. Remember to call #addToBeFinalized if you want the
CObject to be automatically freed


@end table



@node CString-accessing
@subsection CString:@- accessing

@table @b
@meindex cObjStoredType
@slindex at:@-put:@-
@item cObjStoredType
Private - Provide a conversion from a CObject to a Smalltalk object
to be stored by #at:@-put:@-


@meindex value
@item value
Answer the value the receiver is pointing to. The exact returned
value depends on the receiver's class


@meindex value:@-
@item value:@- aValue
Set the receiver to point to the value, aValue. The exact meaning
of aValue depends on the receiver's class


@end table

@node CStringCType
@section CStringCType
@clindex CStringCType

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: CScalarCType
@itemx Category: Language-C interface

@end table

@menu
* CStringCType-accessing::  (instance)
@end menu



@node CStringCType-accessing
@subsection CStringCType:@- accessing

@table @b
@meindex elementType
@item elementType
Answer the type of the elements in the receiver's instances


@end table

@node CStruct
@section CStruct
@clindex CStruct

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: CCompound
@itemx Category: Language-C interface

@end table

@menu
* CStruct class-subclass creation::  (class)
@end menu



@node CStruct class-subclass creation
@subsection CStruct class:@- subclass creation

@table @b
@meindex declaration:@-
@item declaration:@- array
Compile methods that implement the declaration in array.


@end table

@node CType
@section CType
@clindex CType

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Object
@itemx Category: Language-C interface
I am not part of the standard Smalltalk kernel class hierarchy.
I contain type information used by subclasses of CObject, which represents
external C data items.

My only instance variable, cObjectType, is used to hold onto the CObject
subclass that gets created for a given CType.  Used primarily in the C part
of the interpreter because internally it cannot execute methods to get values,
so it has a simple way to access instance variable which holds the desired
subclass.

My subclasses have instances which represent the actual data types; for the
scalar types, there is only one instance created of each, but for the 
aggregate types, there is at least one instance per base type and/or number of
elements.
@end table

@menu
* CType class-C instance creation::  (class)
* CType class-initialization::  (class)
* CType-accessing::  (instance)
* CType-basic::  (instance)
* CType-C instance creation::  (instance)
* CType-storing::  (instance)
@end menu



@node CType class-C instance creation
@subsection CType class:@- C instance creation

@table @b
@meindex cObjectBinding:@-
@item cObjectBinding:@- aCObjectSubclassBinding
Create a new CType for the given subclass of CObject


@meindex cObjectType:@-
@item cObjectType:@- aCObjectSubclass
Create a new CType for the given subclass of CObject


@meindex computeAggregateType:@-
@slindex array
@slindex int
@slindex ptr
@item computeAggregateType:@- type
Private - Called by from:@- for pointers/arrays.
Format of type:@-
(@-#array #int 3) or
(@-#ptr #@{FooStruct@})


@meindex from:@-
@item from:@- type
Private - Pass the size, alignment, and description of CType for aBlock,
given the field description in `type' (the second element of each pair).


@end table



@node CType class-initialization
@subsection CType class:@- initialization

@table @b
@meindex initialize
@item initialize
Initialize the receiver's TypeMap


@end table



@node CType-accessing
@subsection CType:@- accessing

@table @b
@meindex alignof
@item alignof
Answer the size of the receiver's instances


@meindex arrayType:@-
@item arrayType:@- size
Answer a CArrayCType which represents an array with the given size
of CObjects whose type is in turn represented by the receiver


@meindex cObjectType
@item cObjectType
Answer the CObject subclass whose instance is created when new is sent
to the receiver


@meindex new:@-
@item new:@- anInteger
Allocate a new CObject with room for anInteger C objects of the type
(class) identified by the receiver.  It is the caller's
responsibility to free the memory allocated for it.


@meindex ptrType
@item ptrType
Answer a CPtrCType which represents a pointer to CObjects whose
type is in turn represented by the receiver


@meindex sizeof
@item sizeof
Answer the size of the receiver's instances


@meindex valueType
@item valueType
valueType is used as a means to communicate to the interpreter the
underlying type of the data.  For anything but scalars, it's just 'self'


@end table



@node CType-basic
@subsection CType:@- basic

@table @b
@meindex =
@item = anObject
Return whether the receiver and anObject are equal.


@meindex hash
@item hash
Return a hash code for the receiver.


@end table



@node CType-C instance creation
@subsection CType:@- C instance creation

@table @b
@meindex address:@-
@item address:@- cObjOrInt
Create a new CObject with the type (class) identified by the receiver,
pointing to the given address (identified by an Integer or CObject).


@meindex gcNew
@item gcNew
Allocate a new CObject with the type (class) identified by the receiver.
The object is movable in memory, but on the other hand it is
garbage-collected automatically.


@meindex gcNew:@-
@item gcNew:@- anInteger
Allocate a new CObject with room for anInteger C object of the type
(class) identified by the receiver.  The object is movable
in memory, but on the other hand it is garbage-collected
automatically.


@meindex new
@item new
Allocate a new CObject with the type (class) identified by the receiver.
It is the caller's responsibility to free the memory allocated for it.


@end table



@node CType-storing
@subsection CType:@- storing

@table @b
@meindex storeOn:@-
@item storeOn:@- aStream
Store Smalltalk code that compiles to the receiver


@end table

@node CUChar
@section CUChar
@clindex CUChar

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: CScalar
@itemx Category: Language-C interface

@end table

@menu
* CUChar class-getting info::  (class)
* CUChar-accessing::  (instance)
@end menu



@node CUChar class-getting info
@subsection CUChar class:@- getting info

@table @b
@meindex alignof
@item alignof
Answer the receiver's instances required aligment


@meindex cObjStoredType
@item cObjStoredType
Private - Answer an index referring to the receiver's instances scalar type


@meindex sizeof
@item sizeof
Answer the receiver's instances size


@end table



@node CUChar-accessing
@subsection CUChar:@- accessing

@table @b
@meindex alignof
@item alignof
Answer the receiver's required aligment


@meindex cObjStoredType
@item cObjStoredType
Private - Answer an index referring to the receiver's scalar type


@meindex sizeof
@item sizeof
Answer the receiver's size


@end table

@node CUInt
@section CUInt
@clindex CUInt

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: CScalar
@itemx Category: Language-C interface

@end table

@menu
* CUInt class-accessing::  (class)
* CUInt-accessing::  (instance)
@end menu



@node CUInt class-accessing
@subsection CUInt class:@- accessing

@table @b
@meindex alignof
@item alignof
Answer the receiver's instances required aligment


@meindex cObjStoredType
@item cObjStoredType
Private - Answer an index referring to the receiver's instances scalar type


@meindex sizeof
@item sizeof
Answer the receiver's instances size


@end table



@node CUInt-accessing
@subsection CUInt:@- accessing

@table @b
@meindex alignof
@item alignof
Answer the receiver's required aligment


@meindex cObjStoredType
@item cObjStoredType
Private - Answer an index referring to the receiver's scalar type


@meindex sizeof
@item sizeof
Answer the receiver's size


@end table

@node CULong
@section CULong
@clindex CULong

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: CScalar
@itemx Category: Language-C interface

@end table

@menu
* CULong class-accessing::  (class)
* CULong-accessing::  (instance)
@end menu



@node CULong class-accessing
@subsection CULong class:@- accessing

@table @b
@meindex alignof
@item alignof
Answer the receiver's instances required aligment


@meindex cObjStoredType
@item cObjStoredType
Private - Answer an index referring to the receiver's instances scalar type


@meindex sizeof
@item sizeof
Answer the receiver's instances size


@end table



@node CULong-accessing
@subsection CULong:@- accessing

@table @b
@meindex alignof
@item alignof
Answer the receiver's required aligment


@meindex cObjStoredType
@item cObjStoredType
Private - Answer an index referring to the receiver's scalar type


@meindex sizeof
@item sizeof
Answer the receiver's size


@end table

@node CULongLong
@section CULongLong
@clindex CULongLong

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: CScalar
@itemx Category: Language-C interface

@end table

@menu
* CULongLong class-accessing::  (class)
* CULongLong-accessing::  (instance)
@end menu



@node CULongLong class-accessing
@subsection CULongLong class:@- accessing

@table @b
@meindex alignof
@item alignof
Answer the receiver's instances required aligment


@meindex cObjStoredType
@item cObjStoredType
Private - Answer an index referring to the receiver's instances scalar type


@meindex sizeof
@item sizeof
Answer the receiver's instances size


@end table



@node CULongLong-accessing
@subsection CULongLong:@- accessing

@table @b
@meindex alignof
@item alignof
Answer the receiver's required aligment


@meindex cObjStoredType
@item cObjStoredType
Private - Answer an index referring to the receiver's scalar type


@meindex sizeof
@item sizeof
Answer the receiver's size


@end table

@node CUnion
@section CUnion
@clindex CUnion

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: CCompound
@itemx Category: Language-C interface

@end table

@menu
* CUnion class-subclass creation::  (class)
@end menu



@node CUnion class-subclass creation
@subsection CUnion class:@- subclass creation

@table @b
@meindex declaration:@-
@item declaration:@- array
Compile methods that implement the declaration in array.


@end table

@node CUShort
@section CUShort
@clindex CUShort

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: CScalar
@itemx Category: Language-C interface

@end table

@menu
* CUShort class-accessing::  (class)
* CUShort-accessing::  (instance)
@end menu



@node CUShort class-accessing
@subsection CUShort class:@- accessing

@table @b
@meindex alignof
@item alignof
Answer the receiver's instances required aligment


@meindex cObjStoredType
@item cObjStoredType
Private - Answer an index referring to the receiver's instances scalar type


@meindex sizeof
@item sizeof
Answer the receiver's instances size


@end table



@node CUShort-accessing
@subsection CUShort:@- accessing

@table @b
@meindex alignof
@item alignof
Answer the receiver's required aligment


@meindex cObjStoredType
@item cObjStoredType
Private - Answer an index referring to the receiver's scalar type


@meindex sizeof
@item sizeof
Answer the receiver's size


@end table

@node Date
@section Date
@clindex Date

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Magnitude
@itemx Category: Language-Data types
My instances represent dates.  My base date is defined to be Jan 1, 1901.
I provide methods for instance creation (including via "symbolic" dates, 
such as "Date newDay:@- 14 month:@- #Feb year:@- 1990".

PLEASE BE WARNED -- use this class only for dates after 1582 AD; that's the
beginning of the epoch. Dates before 1582 will not be correctly printed. In
addition, since ten days were lost from October 5 through October 15,
operations between a Gregorian date (after 15-Oct-1582) and a Julian date
(before 5-Oct-1582) will give incorrect results; or, 4-Oct-1582 + 2 days will
yield 6-Oct-1582 (a non-existent day!), not 16-Oct-1582.

In fact, if you pass a year < 1582 to a method like #newDay:@-month:@-year:@-
it will assume that it is a two-digit year (e.g. 90=1990, 1000=2900). The only
way to create Julian calendar dates is with the #fromDays:@- instance creation
method.
@end table

@menu
* Date class-basic::  (class)
* Date class-instance creation (ANSI)::  (class)
* Date class-instance creation (Blue Book)::  (class)
* Date-basic::  (instance)
* Date-compatibility (non-ANSI)::  (instance)
* Date-date computations::  (instance)
* Date-printing::  (instance)
* Date-still unclassified::  (instance)
* Date-storing::  (instance)
* Date-testing::  (instance)
@end menu



@node Date class-basic
@subsection Date class:@- basic

@table @b
@meindex abbreviationOfDay:@-
@item abbreviationOfDay:@- dayIndex
Answer the abbreviated name of the day of week corresponding to the given
index


@meindex dayOfWeek:@-
@item dayOfWeek:@- dayName
Answer the index of the day of week corresponding to the given name


@meindex daysInMonth:@-forYear:@-
@item daysInMonth:@- monthName forYear:@- yearInteger
Answer the number of days in the given (named) month for the given year


@meindex daysInYear:@-
@item daysInYear:@- i
Answer the number of days in the given year


@meindex indexOfMonth:@-
@item indexOfMonth:@- monthName
Answer the index of the month corresponding to the given name


@meindex initDayNameDict
@item initDayNameDict
Initialize the DayNameDict to the names of the days


@meindex initMonthNameDict
@item initMonthNameDict
Initialize the MonthNameDict to the names of the months


@meindex initialize
@item initialize
Initialize the receiver


@meindex nameOfDay:@-
@item nameOfDay:@- dayIndex
Answer the name of the day of week corresponding to the given index


@meindex nameOfMonth:@-
@item nameOfMonth:@- monthIndex
Answer the name of the month corresponding to the given index


@meindex shortNameOfMonth:@-
@item shortNameOfMonth:@- monthIndex
Answer the name of the month corresponding to the given index


@end table



@node Date class-instance creation (ANSI)
@subsection Date class:@- instance creation (ANSI)

@table @b
@meindex year:@-day:@-hour:@-minute:@-second:@-
@item year:@- y day:@- d hour:@- h minute:@- min second:@- s
Answer a Date denoting the d-th day of the given year


@meindex year:@-month:@-day:@-hour:@-minute:@-second:@-
@item year:@- y month:@- m day:@- d hour:@- h minute:@- min second:@- s
Answer a Date denoting the d-th day of the given (as a number)
month and year


@end table



@node Date class-instance creation (Blue Book)
@subsection Date class:@- instance creation (Blue Book)

@table @b
@meindex dateAndTimeNow
@item dateAndTimeNow
Answer an array containing the current date and time


@meindex fromDays:@-
@item fromDays:@- dayCount
Answer a Date denoting dayCount days past 1/1/1901


@meindex fromJulian:@-
@item fromJulian:@- jd
Answer a Date denoting the jd-th day in the astronomical Julian calendar.


@meindex fromSeconds:@-
@item fromSeconds:@- time
Answer a Date denoting the date time seconds past Jan 1st, 1901


@meindex newDay:@-month:@-year:@-
@item newDay:@- day month:@- monthName year:@- yearInteger
Answer a Date denoting the dayCount day of the given (named)
month and year


@meindex newDay:@-monthIndex:@-year:@-
@item newDay:@- day monthIndex:@- monthIndex year:@- yearInteger
Answer a Date denoting the dayCount day of the given (as a number)
month and year


@meindex newDay:@-year:@-
@item newDay:@- dayCount year:@- yearInteger
Answer a Date denoting the dayCount day of the yearInteger year


@meindex readFrom:@-
@item readFrom:@- aStream
Parse an instance of the receiver from aStream


@meindex today
@item today
Answer a Date denoting the current date in local time


@meindex utcDateAndTimeNow
@item utcDateAndTimeNow
Answer an array containing the current date and time in Coordinated
Universal Time (UTC)


@meindex utcToday
@item utcToday
Answer a Date denoting the current date in Coordinated Universal
Time (UTC)


@end table



@node Date-basic
@subsection Date:@- basic

@table @b
@meindex -
@item - aDate
Answer a new Duration counting the number of days between the
receiver and aDate.


@meindex addDays:@-
@item addDays:@- dayCount
Answer a new Date pointing dayCount past the receiver


@meindex subtractDate:@-
@item subtractDate:@- aDate
Answer the number of days between aDate and the receiver (negative
if the receiver is before aDate)


@meindex subtractDays:@-
@item subtractDays:@- dayCount
Answer a new Date pointing dayCount before the receiver


@end table



@node Date-compatibility (non-ANSI)
@subsection Date:@- compatibility (non-ANSI)

@table @b
@meindex day
@item day
Answer the day represented by the receiver


@meindex dayName
@item dayName
Answer the day of week of the receiver as a Symbol


@meindex shortMonthName
@item shortMonthName
Answer the abbreviated name of the month represented by the receiver


@end table



@node Date-date computations
@subsection Date:@- date computations

@table @b
@meindex asSeconds
@item asSeconds
Answer the date as the number of seconds from 1/1/1901.


@meindex dayOfMonth
@slindex day
@item dayOfMonth
Answer the day represented by the receiver (same as #day)


@meindex dayOfWeek
@item dayOfWeek
Answer the day of week of the receiver. 1 = Monday, 7 = Sunday


@meindex dayOfWeekAbbreviation
@item dayOfWeekAbbreviation
Answer the day of week of the receiver as a Symbol


@meindex dayOfWeekName
@item dayOfWeekName
Answer the day of week of the receiver as a Symbol


@meindex dayOfYear
@item dayOfYear
Answer the days passed since 31/12 of last year; e.g. New Year's Day is 1


@meindex daysFromBaseDay
@item daysFromBaseDay
Answer the days passed since 1/1/1901


@meindex daysInMonth
@item daysInMonth
Answer the days in the month represented by the receiver


@meindex daysInYear
@item daysInYear
Answer the days in the year represented by the receiver


@meindex daysLeftInMonth
@item daysLeftInMonth
Answer the days to the end of the month represented by the receiver


@meindex daysLeftInYear
@item daysLeftInYear
Answer the days to the end of the year represented by the receiver


@meindex firstDayOfMonth
@item firstDayOfMonth
Answer a Date representing the first day of the month represented by the
receiver


@meindex isLeapYear
@item isLeapYear
Answer whether the receiver refers to a date in a leap year.


@meindex lastDayOfMonth
@item lastDayOfMonth
Answer a Date representing the last day of the month represented by the
receiver


@meindex month
@item month
Answer the index of the month represented by the receiver


@meindex monthAbbreviation
@item monthAbbreviation
Answer the abbreviated name of the month represented by the receiver


@meindex monthIndex
@item monthIndex
Answer the index of the month represented by the receiver


@meindex monthName
@item monthName
Answer the name of the month represented by the receiver


@meindex year
@item year
Answer the year represented by the receiver


@end table



@node Date-printing
@subsection Date:@- printing

@table @b
@meindex printOn:@-
@item printOn:@- aStream
Print a representation for the receiver on aStream


@end table



@node Date-still unclassified
@subsection Date:@- still unclassified

@table @b
@meindex +
@item + aDuration
Answer a new Date or DateTime pointing aDuration time past the
receiver.


@end table



@node Date-storing
@subsection Date:@- storing

@table @b
@meindex storeOn:@-
@item storeOn:@- aStream
Store on aStream Smalltalk code compiling to the receiver


@end table



@node Date-testing
@subsection Date:@- testing

@table @b
@meindex <
@item < aDate
Answer whether the receiver indicates a date preceding aDate


@meindex =
@item = aDate
Answer whether the receiver indicates the same date as aDate


@meindex hash
@item hash
Answer an hash value for the receievr


@end table

@node DateTime
@section DateTime
@clindex DateTime

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Date
@itemx Category: Language-Data types
My instances represent timestamps.
@end table

@menu
* DateTime class-information::  (class)
* DateTime class-instance creation::  (class)
* DateTime class-instance creation (non-ANSI)::  (class)
* DateTime-basic::  (instance)
* DateTime-computations::  (instance)
* DateTime-printing::  (instance)
* DateTime-splitting in dates & times::  (instance)
* DateTime-storing::  (instance)
* DateTime-testing::  (instance)
* DateTime-time zones::  (instance)
@end menu



@node DateTime class-information
@subsection DateTime class:@- information

@table @b
@meindex clockPrecision
@item clockPrecision
Answer `ClockPrecision'.

@meindex initialize
@item initialize
Initialize the receiver's class variables


@end table



@node DateTime class-instance creation
@subsection DateTime class:@- instance creation

@table @b
@meindex now
@item now
Answer an instance of the receiver referring to the current
date and time.


@meindex readFrom:@-
@item readFrom:@- aStream
Parse an instance of the receiver from aStream


@meindex today
@item today
Answer an instance of the receiver referring to midnight of today
in local time.


@meindex year:@-day:@-hour:@-minute:@-second:@-
@item year:@- y day:@- d hour:@- h minute:@- min second:@- s
Answer a DateTime denoting the d-th day of the given year, and
setting the time part to the given hour, minute, and second


@meindex year:@-day:@-hour:@-minute:@-second:@-offset:@-
@item year:@- y day:@- d hour:@- h minute:@- min second:@- s offset:@- ofs
Answer a DateTime denoting the d-th day of the given year.
Set the offset field to ofs (a Duration), and the time part
to the given hour, minute, and second


@meindex year:@-month:@-day:@-hour:@-minute:@-second:@-
@item year:@- y month:@- m day:@- d hour:@- h minute:@- min second:@- s
Answer a DateTime denoting the d-th day of the given (as a number)
month and year, setting the time part to the given hour, minute,
and second


@meindex year:@-month:@-day:@-hour:@-minute:@-second:@-offset:@-
@item year:@- y month:@- m day:@- d hour:@- h minute:@- min second:@- s offset:@- ofs
Answer a DateTime denoting the d-th day of the given (as a number)
month and year. Set the offset field to ofs (a Duration), and
the the time part to the given hour, minute, and second


@end table



@node DateTime class-instance creation (non-ANSI)
@subsection DateTime class:@- instance creation (non-ANSI)

@table @b
@meindex date:@-time:@-
@item date:@- aDate time:@- aTime
Answer a DateTime denoting the given date and time. Set the
offset field to ofs (a Duration).


@meindex date:@-time:@-offset:@-
@item date:@- aDate time:@- aTime offset:@- ofs
Answer a DateTime denoting the given date and time. Set the
offset field to ofs (a Duration).


@meindex fromDays:@-seconds:@-
@item fromDays:@- days seconds:@- secs
Answer a DateTime denoting the given date (as days since
January 1, 1901) and time (as seconds since UTC midnight).


@meindex fromDays:@-seconds:@-offset:@-
@item fromDays:@- days seconds:@- secs offset:@- ofs
Answer a DateTime denoting the given date (as days since
January 1, 1901) and time (as seconds since midnight). Set the
offset field to ofs (a Duration).


@meindex fromSeconds:@-
@item fromSeconds:@- secs
Answer a DateTime denoting the given date and time (as seconds
since January 1, 1901 midnight UTC).


@meindex fromSeconds:@-offset:@-
@item fromSeconds:@- secs offset:@- ofs
Answer a DateTime denoting the given date and time (as seconds
since January 1, 1901 midnight). Set the offset field to ofs (a
Duration).


@end table



@node DateTime-basic
@subsection DateTime:@- basic

@table @b
@meindex +
@item + aDuration
Answer a new Date pointing aDuration time past the receiver


@meindex -
@item - aDateTimeOrDuration
Answer a new Date pointing dayCount before the receiver


@end table



@node DateTime-computations
@subsection DateTime:@- computations

@table @b
@meindex asSeconds
@item asSeconds
Answer the date as the number of seconds from 1/1/1901.


@meindex dayOfWeek
@item dayOfWeek
Answer the day of week of the receiver. Unlike Dates, DateAndTimes
have 1 = Sunday, 7 = Saturday


@meindex hour
@item hour
Answer the hour in a 24-hour clock


@meindex hour12
@item hour12
Answer the hour in a 12-hour clock


@meindex hour24
@item hour24
Answer the hour in a 24-hour clock


@meindex meridianAbbreviation
@slindex AM
@slindex PM
@item meridianAbbreviation
Answer either #AM (for anti-meridian) or #PM (for post-meridian)


@meindex minute
@item minute
Answer the minute


@meindex second
@item second
Answer the month represented by the receiver


@end table



@node DateTime-printing
@subsection DateTime:@- printing

@table @b
@meindex printOn:@-
@item printOn:@- aStream
Print a representation for the receiver on aStream


@end table



@node DateTime-splitting in dates & times
@subsection DateTime:@- splitting in dates & times

@table @b
@meindex asDate
@item asDate
Answer a Date referring to the same day as the receiver


@meindex asTime
@item asTime
Answer a Time referring to the same time (from midnight) as the receiver


@meindex at:@-
@item at:@- anIndex
Since in the past timestamps were referred to as Arrays containing
a Date and a Time (in this order), this method provides access to
DateTime objects like if they were two-element Arrays.


@end table



@node DateTime-storing
@subsection DateTime:@- storing

@table @b
@meindex storeOn:@-
@item storeOn:@- aStream
Store on aStream Smalltalk code compiling to the receiver


@end table



@node DateTime-testing
@subsection DateTime:@- testing

@table @b
@meindex <
@item < aDateTime
Answer whether the receiver indicates a date preceding aDate


@meindex =
@item = aDateTime
Answer whether the receiver indicates the same date as aDate


@meindex hash
@item hash
Answer an hash value for the receievr


@end table



@node DateTime-time zones
@subsection DateTime:@- time zones

@table @b
@meindex asLocal
@item asLocal
Answer the receiver, since DateTime objects store themselves
in Local time


@meindex asUTC
@item asUTC
Convert the receiver to UTC time, and answer a new DateTime object.


@meindex offset
@item offset
Answer the receiver's offset from UTC to local time (e.g. +3600 seconds
for Central Europe Time, -3600*6 seconds for Eastern Standard Time).
The offset is expressed as a Duration


@meindex offset:@-
@item offset:@- anOffset
Answer a copy of the receiver with the offset from UTC to local time
changed to anOffset (a Duration).


@meindex timeZoneAbbreviation
@item timeZoneAbbreviation
Answer an abbreviated indication of the receiver's offset, expressed
as `shhmm', where `hh' is the number of hours and `mm' is the number
of minutes between UTC and local time, and `s' can be `+' for the
Eastern hemisphere and `-' for the Western hemisphere.


@meindex timeZoneName
@slindex timeZoneAbbreviation
@item timeZoneName
Answer the time zone name for the receiver (currently, it is
simply `GMT +xxxx', where `xxxx' is the receiver's
#timeZoneAbbreviation).


@end table

@node DeferredVariableBinding
@section DeferredVariableBinding
@clindex DeferredVariableBinding

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: LookupKey
@itemx Category: Language-Data types
I represent a binding to a variable that is not tied to a particular
dictionary until the first access.  Then, lookup rules for global variables
in the scope of a given class are used.
@end table

@menu
* DeferredVariableBinding class-basic::  (class)
* DeferredVariableBinding-basic::  (instance)
* DeferredVariableBinding-storing::  (instance)
@end menu



@node DeferredVariableBinding class-basic
@subsection DeferredVariableBinding class:@- basic

@table @b
@meindex key:@-class:@-defaultDictionary:@-
@slindex resolveBinding
@item key:@- aSymbol class:@- aClass defaultDictionary:@- aDictionary
Answer a binding that will look up aSymbol as a variable in
aClass's environment at first access.  See #resolveBinding's
comment for aDictionary's meaning.


@meindex path:@-class:@-defaultDictionary:@-
@slindex key:@-class:@-defaultDictionary:@-
@item path:@- anArray class:@- aClass defaultDictionary:@- aDictionary
As with #key:@-class:@-defaultDictionary:@-, but accepting an array
of symbols, representing a namespace path, instead.


@end table



@node DeferredVariableBinding-basic
@subsection DeferredVariableBinding:@- basic

@table @b
@meindex path
@item path
Answer the path followed after resolving the first key.


@meindex value
@item value
Answer a new instance of the receiver with the given key and value


@meindex value:@-
@item value:@- anObject
Answer a new instance of the receiver with the given key and value


@end table



@node DeferredVariableBinding-storing
@subsection DeferredVariableBinding:@- storing

@table @b
@meindex printOn:@-
@item printOn:@- aStream
Put on aStream some Smalltalk code compiling to the receiver


@meindex storeOn:@-
@item storeOn:@- aStream
Put on aStream some Smalltalk code compiling to the receiver


@end table

@node Delay
@section Delay
@clindex Delay

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Object
@itemx Category: Kernel-Processes
I am the ultimate agent for frustration in the world.  I cause things to wait 
(sometimes much more than is appropriate, but it is those losing operating
systems' fault).  When a process sends one of my instances a wait message,
that process goes to sleep for the interval specified when the instance was
created.
@end table

@menu
* Delay class-instance creation::  (class)
* Delay class-still unclassified::  (class)
* Delay class-timer process::  (class)
* Delay-accessing::  (instance)
* Delay-comparing::  (instance)
* Delay-copying::  (instance)
* Delay-delaying::  (instance)
* Delay-initialization::  (instance)
* Delay-instance creation::  (instance)
* Delay-testing::  (instance)
* Delay-timeout::  (instance)
@end menu



@node Delay class-instance creation
@subsection Delay class:@- instance creation

@table @b
@meindex forMilliseconds:@-
@item forMilliseconds:@- millisecondCount
Answer a Delay waiting for millisecondCount milliseconds


@meindex forNanoseconds:@-
@item forNanoseconds:@- nanosecondCount
Answer a Delay waiting for nanosecondCount nanoseconds


@meindex forSeconds:@-
@item forSeconds:@- secondCount
Answer a Delay waiting for secondCount seconds


@meindex untilMilliseconds:@-
@item untilMilliseconds:@- millisecondCount
Answer a Delay waiting until millisecondCount milliseconds after startup


@meindex untilNanoseconds:@-
@item untilNanoseconds:@- nanosecondCount
Answer a Delay waiting until nanosecondCount nanoseconds after startup


@end table



@node Delay class-still unclassified
@subsection Delay class:@- still unclassified

@table @b
@meindex update:@-
@item update:@- aspect
Prime the timer event loop when the image starts running.


@end table



@node Delay class-timer process
@subsection Delay class:@- timer process

@table @b
@meindex activeDelay
@item activeDelay
Return the delay at the head of the queue.


@meindex handleDelayRequestor
@item handleDelayRequestor
Handle a timer event; which can be either:@-
- a schedule or unschedule request (DelayRequestor notNil)
- a timer signal (not explicitly specified)
We check for timer expiry every time we get a signal.


@meindex runDelayProcess
@item runDelayProcess
Run the timer event loop.


@meindex scheduleDelay:@-
@item scheduleDelay:@- aDelay
Private - Schedule this Delay.  Run in the timer process, which
is the only one that manipulates Queue.


@meindex startDelayLoop
@item startDelayLoop
Start the timer event loop.


@meindex unscheduleDelay:@-
@item unscheduleDelay:@- aDelay
Private - Unschedule this Delay.  Run in the timer process, which
is the only one that manipulates Queue.


@end table



@node Delay-accessing
@subsection Delay:@- accessing

@table @b
@meindex asAbsolute
@item asAbsolute
Answer a delay that waits until the current delay's resumptionTime,
or delayDuration milliseconds from now if that would be nil.  May
answer the receiver if it is already waiting until an absolute time.


@meindex delayDuration
@item delayDuration
Answer the time I have left to wait, in milliseconds.


@meindex isAbsolute
@item isAbsolute
Answer whether the receiver waits until an absolute time on the
millisecond clock.


@meindex resumptionTime
@item resumptionTime
Answer `resumptionTime'.

@end table



@node Delay-comparing
@subsection Delay:@- comparing

@table @b
@meindex =
@item = aDelay
Answer whether the receiver and aDelay denote the same delay


@meindex hash
@item hash
Answer an hash value for the receiver


@end table



@node Delay-copying
@subsection Delay:@- copying

@table @b
@meindex postCopy
@item postCopy
Adjust the current delay so that it behaves as if it had just been
created.


@end table



@node Delay-delaying
@subsection Delay:@- delaying

@table @b
@meindex timedWaitOn:@-
@item timedWaitOn:@- aSemaphore
Schedule this Delay and wait on it. The current process will be
suspended for the amount of time specified when this Delay was created,
or until aSemaphore is signaled.


@meindex wait
@item wait
Schedule this Delay and wait on it. The current process will be
suspended for the amount of time specified when this Delay was created.


@end table



@node Delay-initialization
@subsection Delay:@- initialization

@table @b
@meindex initForNanoseconds:@-
@item initForNanoseconds:@- value
Initialize a Delay waiting for millisecondCount milliseconds


@end table



@node Delay-instance creation
@subsection Delay:@- instance creation

@table @b
@meindex initUntilNanoseconds:@-
@item initUntilNanoseconds:@- value
Initialize a Delay waiting for millisecondCount milliseconds after startup


@end table



@node Delay-testing
@subsection Delay:@- testing

@table @b
@meindex isActive
@item isActive
Answer whether this Delay is being waited on.


@end table



@node Delay-timeout
@subsection Delay:@- timeout

@table @b
@meindex value:@-onTimeoutDo:@-
@item value:@- aBlock onTimeoutDo:@- aTimeoutBlock
Execute aBlock for up to the time of my own delay; in case the code
did not finish abort the execution, unwind the block and then
evaluate aTimeoutBlock.


@end table

@node DelayedAdaptor
@section DelayedAdaptor
@clindex DelayedAdaptor

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: PluggableAdaptor
@itemx Category: Language-Data types
I can be used where many expensive updates must be performed. My
instances buffer the last value that was set, and only actually set the
value when the #trigger message is sent. Apart from this, I'm equivalent
to PluggableAdaptor.
@end table

@menu
* DelayedAdaptor-accessing::  (instance)
@end menu



@node DelayedAdaptor-accessing
@subsection DelayedAdaptor:@- accessing

@table @b
@meindex trigger
@item trigger
Really set the value of the receiver.


@meindex value
@item value
Get the value of the receiver.


@meindex value:@-
@slindex trigger
@item value:@- anObject
Set the value of the receiver - actually, the value is cached and
is not set until the #trigger method is sent.


@end table

@node Dictionary
@section Dictionary
@clindex Dictionary

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: HashedCollection
@itemx Category: Collections-Keyed
I implement a dictionary, which is an object that is indexed by
unique objects (typcially instances of Symbol), and associates another
object with that index.  I use the equality operator = to determine
equality of indices.

In almost all places where you would use a plain Dictionary, a
LookupTable would be more efficient; see LookupTable's comment before
you use it.  I do have a couple of special features that are useful in
certain special cases.
@end table

@menu
* Dictionary class-instance creation::  (class)
* Dictionary-accessing::  (instance)
* Dictionary-awful ST-80 compatibility hacks::  (instance)
* Dictionary-compilation::  (instance)
* Dictionary-dictionary enumerating::  (instance)
* Dictionary-dictionary removing::  (instance)
* Dictionary-dictionary testing::  (instance)
* Dictionary-namespace protocol::  (instance)
* Dictionary-printing::  (instance)
* Dictionary-rehashing::  (instance)
* Dictionary-removing::  (instance)
* Dictionary-storing::  (instance)
* Dictionary-testing::  (instance)
@end menu



@node Dictionary class-instance creation
@subsection Dictionary class:@- instance creation

@table @b
@meindex from:@-
@item from:@- anArray
Answer a new dictionary created from the keys and values of
Associations in anArray, such as @{1 -> 2. 3 -> 4@}.  anArray
should be specified using brace-syntax.


@meindex new
@item new
Create a new dictionary with a default size


@end table



@node Dictionary-accessing
@subsection Dictionary:@- accessing

@table @b
@meindex add:@-
@item add:@- newObject
Add the newObject association to the receiver


@meindex addAll:@-
@item addAll:@- aCollection
Adds all the elements of 'aCollection' to the receiver, answer
aCollection


@meindex associationAt:@-
@item associationAt:@- key
Answer the key/value Association for the given key. Fail if the key
is not found


@meindex associationAt:@-ifAbsent:@-
@item associationAt:@- key ifAbsent:@- aBlock
Answer the key/value Association for the given key. Evaluate aBlock
(answering the result) if the key is not found


@meindex associations
@item associations
Returns the content of a Dictionary as a Set of Associations.


@meindex at:@-
@item at:@- key
Answer the value associated to the given key. Fail if the key
is not found


@meindex at:@-ifAbsent:@-
@item at:@- key ifAbsent:@- aBlock
Answer the value associated to the given key, or the result of evaluating
aBlock if the key is not found


@meindex at:@-ifAbsentPut:@-
@item at:@- aKey ifAbsentPut:@- aBlock
Answer the value associated to the given key. If the key is not found,
evaluate aBlock and associate the result to aKey before returning.


@meindex at:@-ifPresent:@-
@item at:@- aKey ifPresent:@- aBlock
If aKey is absent, answer nil. Else, evaluate aBlock passing the
associated value and answer the result of the invocation


@meindex at:@-put:@-
@item at:@- key put:@- value
Store value as associated to the given key


@meindex atAll:@-
@item atAll:@- keyCollection
Answer a Dictionary that only includes the given keys. Fail if any of
them is not found


@meindex keyAtValue:@-
@item keyAtValue:@- value
Answer the key associated to the given value, or nil if the value is not found


@meindex keyAtValue:@-ifAbsent:@-
@item keyAtValue:@- value ifAbsent:@- exceptionBlock
Answer the key associated to the given value. Evaluate exceptionBlock
(answering the result) if the value is not found.
IMPORTANT:@- == is used to compare values


@meindex keys
@item keys
Answer a kind of Set containing the keys of the receiver


@meindex values
@item values
Answer an Array containing the values of the receiver


@end table



@node Dictionary-awful ST-80 compatibility hacks
@subsection Dictionary:@- awful ST-80 compatibility hacks

@table @b
@meindex findKeyIndex:@-
@item findKeyIndex:@- key
Tries to see if key exists as a the key of an indexed variable. As soon
as nil or an association with the correct key is found, the index of that
slot is answered


@end table



@node Dictionary-compilation
@subsection Dictionary:@- compilation

@table @b
@meindex scopeDictionary
@item scopeDictionary
Answer the dictionary that is used when the receiver is before
a period in Smalltalk source code.


@end table



@node Dictionary-dictionary enumerating
@subsection Dictionary:@- dictionary enumerating

@table @b
@meindex associationsDo:@-
@item associationsDo:@- aBlock
Pass each association in the dictionary to aBlock


@meindex collect:@-
@item collect:@- aBlock
Answer a new dictionary where the keys are the same and the values are
obtained by passing each value to aBlock and collecting the return values


@meindex do:@-
@item do:@- aBlock
Pass each value in the dictionary to aBlock


@meindex keysAndValuesDo:@-
@item keysAndValuesDo:@- aBlock
Pass each key/value pair in the dictionary as two distinct parameters
to aBlock


@meindex keysDo:@-
@item keysDo:@- aBlock
Pass each key in the dictionary to aBlock


@meindex reject:@-
@item reject:@- aBlock
Answer a new dictionary containing the key/value pairs for which aBlock
returns false. aBlock only receives the value part of the pairs.


@meindex select:@-
@item select:@- aBlock
Answer a new dictionary containing the key/value pairs for which aBlock
returns true. aBlock only receives the value part of the pairs.


@end table



@node Dictionary-dictionary removing
@subsection Dictionary:@- dictionary removing

@table @b
@meindex remove:@-
@item remove:@- anAssociation
Remove anAssociation's key from the dictionary


@meindex remove:@-ifAbsent:@-
@item remove:@- anAssociation ifAbsent:@- aBlock
Remove anAssociation's key from the dictionary


@meindex removeAllKeys:@-
@item removeAllKeys:@- keys
Remove all the keys in keys, without raising any errors


@meindex removeAllKeys:@-ifAbsent:@-
@item removeAllKeys:@- keys ifAbsent:@- aBlock
Remove all the keys in keys, passing the missing keys as parameters
to aBlock as they're encountered


@meindex removeKey:@-
@item removeKey:@- key
Remove the passed key from the dictionary, fail if it is not found


@meindex removeKey:@-ifAbsent:@-
@item removeKey:@- key ifAbsent:@- aBlock
Remove the passed key from the dictionary, answer the result of
evaluating aBlock if it is not found


@end table



@node Dictionary-dictionary testing
@subsection Dictionary:@- dictionary testing

@table @b
@meindex includes:@-
@item includes:@- anObject
Answer whether the receiver contains anObject as
one of its values


@meindex includesAssociation:@-
@item includesAssociation:@- anAssociation
Answer whether the receiver contains the key which is
anAssociation's key and its value is anAssociation's value


@meindex includesKey:@-
@item includesKey:@- key
Answer whether the receiver contains the given key


@meindex occurrencesOf:@-
@item occurrencesOf:@- aValue
Answer whether the number of occurrences of aValue as
one of the receiver's values


@end table



@node Dictionary-namespace protocol
@subsection Dictionary:@- namespace protocol

@table @b
@meindex allSuperspaces
@item allSuperspaces
Answer all the receiver's superspaces in a collection


@meindex allSuperspacesDo:@-
@item allSuperspacesDo:@- aBlock
Evaluate aBlock once for each of the receiver's superspaces (which
is none for BindingDictionary).


@meindex definedKeys
@item definedKeys
Answer a kind of Set containing the keys of the receiver


@meindex definesKey:@-
@item definesKey:@- key
Answer whether the receiver defines the given key. `Defines'
means that the receiver's superspaces, if any, are not considered.


@meindex hereAssociationAt:@-
@item hereAssociationAt:@- key
Return the association for the variable named as specified
by `key' *in this namespace*. If the key is not found search will
*not* be carried on in superspaces and the method will fail.


@meindex hereAssociationAt:@-ifAbsent:@-
@item hereAssociationAt:@- key ifAbsent:@- aBlock
Return the association for the variable named as specified
by `key' *in this namespace*. If the key is not found search will
*not* be carried on in superspaces and aBlock will be immediately
evaluated.


@meindex hereAt:@-
@item hereAt:@- key
Return the value associated to the variable named as specified
by `key' *in this namespace*. If the key is not found search will
*not* be carried on in superspaces and the method will fail.


@meindex hereAt:@-ifAbsent:@-
@item hereAt:@- key ifAbsent:@- aBlock
Return the value associated to the variable named as specified
by `key' *in this namespace*. If the key is not found search will
*not* be carried on in superspaces and aBlock will be immediately
evaluated.


@meindex inheritsFrom:@-
@item inheritsFrom:@- aNamespace
Answer whether aNamespace is one of the receiver's direct and
indirect superspaces


@meindex superspace
@item superspace
Answer the receiver's superspace, which is nil for BindingDictionary.


@meindex withAllSuperspaces
@item withAllSuperspaces
Answer the receiver and all of its superspaces in a collection,
which is none for BindingDictionary


@meindex withAllSuperspacesDo:@-
@item withAllSuperspacesDo:@- aBlock
Invokes aBlock for the receiver and all superspaces, both direct
and indirect (though a BindingDictionary does not have any).


@end table



@node Dictionary-printing
@subsection Dictionary:@- printing

@table @b
@meindex examineOn:@-
@item examineOn:@- aStream
Print all the instance variables and objects in the receiver on aStream


@meindex printOn:@-
@item printOn:@- aStream
Print a representation of the receiver on aStream


@end table



@node Dictionary-rehashing
@subsection Dictionary:@- rehashing

@table @b
@meindex rehash
@item rehash
Rehash the receiver


@end table



@node Dictionary-removing
@subsection Dictionary:@- removing

@table @b
@meindex removeAllKeysSuchThat:@-
@item removeAllKeysSuchThat:@- aBlock
Remove from the receiver all keys for which aBlock returns true.


@end table



@node Dictionary-storing
@subsection Dictionary:@- storing

@table @b
@meindex storeOn:@-
@item storeOn:@- aStream
Print Smalltalk code compiling to the receiver on aStream


@end table



@node Dictionary-testing
@subsection Dictionary:@- testing

@table @b
@meindex =
@item = aDictionary
Answer whether the receiver and aDictionary are equal


@meindex hash
@item hash
Answer the hash value for the receiver


@end table

@node DirectedMessage
@section DirectedMessage
@clindex DirectedMessage

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Message
@itemx Category: Language-Implementation
I represent a message send:@- I contain the receiver, selector and arguments
for a message.
@end table

@menu
* DirectedMessage class-creating instances::  (class)
* DirectedMessage-accessing::  (instance)
* DirectedMessage-basic::  (instance)
* DirectedMessage-multiple process::  (instance)
* DirectedMessage-saving and loading::  (instance)
@end menu



@node DirectedMessage class-creating instances
@subsection DirectedMessage class:@- creating instances

@table @b
@meindex receiver:@-selector:@-
@item receiver:@- anObject selector:@- aSymbol
Create a new instance of the receiver


@meindex receiver:@-selector:@-argument:@-
@item receiver:@- receiverObject selector:@- aSymbol argument:@- argumentObject
Create a new instance of the receiver


@meindex receiver:@-selector:@-arguments:@-
@item receiver:@- anObject selector:@- aSymbol arguments:@- anArray
Create a new instance of the receiver


@meindex selector:@-arguments:@-
@item selector:@- aSymbol arguments:@- anArray
This method should not be called for instances of this class.

@meindex selector:@-arguments:@-receiver:@-
@item selector:@- aSymbol arguments:@- anArray receiver:@- anObject
Create a new instance of the receiver


@end table



@node DirectedMessage-accessing
@subsection DirectedMessage:@- accessing

@table @b
@meindex receiver
@item receiver
Answer the receiver


@meindex receiver:@-
@item receiver:@- anObject
Change the receiver


@end table



@node DirectedMessage-basic
@subsection DirectedMessage:@- basic

@table @b
@meindex printOn:@-
@item printOn:@- aStream
Print a representation of the receiver on aStream


@meindex send
@item send
Send the message


@meindex value
@item value
Send the message (this message provides interoperability
between DirectedMessages and blocks)


@meindex value:@-
@item value:@- anObject
Send the message with the sole argument anObject (this message
provides interoperability between DirectedMessages and blocks)


@meindex value:@-value:@-
@item value:@- obj1 value:@- obj2
Send the message with the arguments obj1 and obj2 (this message
provides interoperability between DirectedMessages and blocks)


@meindex valueWithArguments:@-
@item valueWithArguments:@- anArray
Send the message with the arguments replaced by anArray (this
message provides interoperability between DirectedMessages and blocks)


@end table



@node DirectedMessage-multiple process
@subsection DirectedMessage:@- multiple process

@table @b
@meindex fork
@item fork
Create a new process executing the receiver and start it


@meindex forkAt:@-
@item forkAt:@- priority
Create a new process executing the receiver with given priority
and start it


@meindex newProcess
@item newProcess
Create a new process executing the receiver in suspended state.
The priority is the same as for the calling process. The receiver
must not contain returns


@end table



@node DirectedMessage-saving and loading
@subsection DirectedMessage:@- saving and loading

@table @b
@meindex reconstructOriginalObject
@item reconstructOriginalObject
This method is used when DirectedMessages are used together
with PluggableProxies (see ObjectDumper).  It sends the receiver
to reconstruct the object that was originally stored.


@end table

@node Directory
@section Directory
@clindex Directory

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Object
@itemx Category: Streams-Files
I am the counterpart of File in a tree-structured file system.
I provide the notion of a current working directory and know several well-known
places in the file system.

However, all navigation methods for directories are under FilePath or File
for efficiency reasons.  Refer to the manual of FilePath for information on
how to use the instances returned by my class methods.
@end table

@menu
* Directory class-file name management::  (class)
* Directory class-file operations::  (class)
* Directory class-reading system defaults::  (class)
@end menu



@node Directory class-file name management
@subsection Directory class:@- file name management

@table @b
@meindex append:@-to:@-
@item append:@- fileName to:@- directory
Answer the name of a file named `fileName' which resides in a directory
named `directory'.


@meindex pathSeparator
@item pathSeparator
Answer (as a Character) the character used to separate directory names


@meindex pathSeparatorString
@item pathSeparatorString
Answer (in a String) the character used to separate directory names


@end table



@node Directory class-file operations
@subsection Directory class:@- file operations

@table @b
@meindex allFilesMatching:@-do:@-
@slindex allFilesMatching:@-do:@-
@item allFilesMatching:@- aPattern do:@- aBlock
Invoke #allFilesMatching:@-do:@- on the current working directory.


@meindex create:@-
@item create:@- dirName
Create a directory named dirName and answer it.


@meindex createTemporary:@-
@item createTemporary:@- prefix
Create an empty directory whose name starts with prefix and answer it.


@meindex working
@item working
Answer the current working directory, not following symlinks.


@meindex working:@-
@item working:@- dirName
Change the current working directory to dirName.


@end table



@node Directory class-reading system defaults
@subsection Directory class:@- reading system defaults

@table @b
@meindex execPrefix
@item execPrefix
Answer the path to GNU Smalltalk's executable installation prefix


@meindex home
@item home
Answer the path to the user's home directory


@meindex image
@item image
Answer the path to GNU Smalltalk's image file


@meindex kernel
@item kernel
Answer the path in which a local version of the GNU Smalltalk kernel's
Smalltalk source files were searched when the image was created.


@meindex libexec
@item libexec
Answer the path to GNU Smalltalk's auxiliary executables


@meindex localKernel
@item localKernel
Answer the path to the GNU Smalltalk kernel's Smalltalk source files.
Same as `Directory kernel' since GNU Smalltalk 3.0.


@meindex module
@item module
Answer the path to GNU Smalltalk's dynamically loaded modules


@meindex prefix
@item prefix
Answer the path to GNU Smalltalk's installation prefix


@meindex systemKernel
@item systemKernel
Answer the path to the installed Smalltalk kernel source files.


@meindex temporary
@item temporary
Answer the path in which temporary files can be created.  This is
read from the environment, and guessed if that fails.


@meindex userBase
@item userBase
Answer the base path under which file for user customization of GNU
Smalltalk are stored.


@end table

@node DLD
@section DLD
@clindex DLD

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Object
@itemx Category: Language-C interface
...and Gandalf said:@-
``Many folk like to know beforehand what is to be set on the
table; but those who have laboured to prepare the feast like
to keep their secret; for wonder makes the words of praise
louder.''

I am just an ancillary class used to reference some C functions.
Most of my actual functionality is used by redefinitions of methods
in CFunctionDescriptor.
@end table

@menu
* DLD class-C call-outs::  (class)
* DLD class-dynamic linking::  (class)
@end menu



@node DLD class-C call-outs
@subsection DLD class:@- C call-outs

@table @b
@meindex defineCFunc:@-as:@-
@item defineCFunc:@- aName as:@- aFuncAddr
Register aFuncAddr as the target for cCalls to aName.


@end table



@node DLD class-dynamic linking
@subsection DLD class:@- dynamic linking

@table @b
@meindex addLibrary:@-
@item addLibrary:@- library
Add library to the search path of libraries to be used by DLD.


@meindex addLibraryHandle:@-
@item addLibraryHandle:@- libraryHandle
This is called internally by gst_dlopen.  The library will
be open and put in the search path.


@meindex addModule:@-
@item addModule:@- library
Add library to the list of modules to be loaded when the image is
started.  The gst_initModule function in the library is called,
but the library will not be put in the search path used whenever
a C function is requested but not registered.


@meindex defineExternFunc:@-
@slindex primDefineExternFunc:@-
@item defineExternFunc:@- aFuncName
This method calls #primDefineExternFunc:@- to try to link to a function with
the given name, and answers whether the linkage was successful. You can
redefine this method to restrict the ability to do dynamic linking.


@meindex initialize
@item initialize
Private - Initialize the receiver's class variables


@meindex libraryList
@item libraryList
Answer a copy of the search path of libraries to be used by DLD


@meindex moduleList
@item moduleList
Answer a copy of the modules reloaded when the image is started


@meindex primDefineExternFunc:@-
@item primDefineExternFunc:@- aFuncName
This method tries to link to a function with the given name, and answers
whether the linkage was successful. It should not be overridden.


@meindex update:@-
@item update:@- aspect
Called on startup - Make DLD re-link and reset the addresses of
all the externally defined functions


@end table

@node DumperProxy
@section DumperProxy
@clindex DumperProxy

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Object
@itemx Category: Streams-Files
I am an helper class for ObjectDumper. When an
object cannot be saved in the standard way, you can register a subclass of me
to provide special means to save that object.
@end table

@menu
* DumperProxy class-accessing::  (class)
* DumperProxy class-instance creation::  (class)
* DumperProxy-saving and restoring::  (instance)
@end menu



@node DumperProxy class-accessing
@subsection DumperProxy class:@- accessing

@table @b
@meindex acceptUsageForClass:@-
@item acceptUsageForClass:@- aClass
The receiver was asked to be used as a proxy for the class aClass.
Answer whether the registration is fine.  By default, answer true


@meindex loadFrom:@-
@item loadFrom:@- anObjectDumper
Reload a proxy stored in anObjectDumper and reconstruct the object


@end table



@node DumperProxy class-instance creation
@subsection DumperProxy class:@- instance creation

@table @b
@meindex on:@-
@slindex dumpTo:@-
@item on:@- anObject
Answer a proxy to be used to save anObject. This method
MUST be overridden and anObject must NOT be stored in the
object's instance variables unless you override #dumpTo:@-,
because that would result in an infinite loop!


@end table



@node DumperProxy-saving and restoring
@subsection DumperProxy:@- saving and restoring

@table @b
@meindex dumpTo:@-
@slindex loadFrom:@-
@item dumpTo:@- anObjectDumper
Dump the proxy to anObjectDumper -- the #loadFrom:@- class method
will reconstruct the original object.


@meindex object
@item object
Reconstruct the object stored in the proxy and answer it


@end table

@node Duration
@section Duration
@clindex Duration

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Time
@itemx Category: Language-Data types
My instances represent differences between timestamps.
@end table

@menu
* Duration class-instance creation::  (class)
* Duration class-instance creation (non ANSI)::  (class)
* Duration-arithmetics::  (instance)
* Duration-processes::  (instance)
* Duration-storing::  (instance)
@end menu



@node Duration class-instance creation
@subsection Duration class:@- instance creation

@table @b
@meindex days:@-
@item days:@- d
Answer a duration of `d' days


@meindex days:@-hours:@-minutes:@-seconds:@-
@item days:@- d hours:@- h minutes:@- m seconds:@- s
Answer a duration of `d' days and the given number of hours,
minutes, and seconds.


@meindex initialize
@item initialize
Initialize the receiver's instance variables


@meindex milliseconds:@-
@item milliseconds:@- msec
Answer a duration of `msec' milliseconds


@meindex readFrom:@-
@item readFrom:@- aStream
Parse an instance of the receiver (hours/minutes/seconds) from
aStream


@meindex weeks:@-
@item weeks:@- w
Answer a duration of `w' weeks


@meindex zero
@item zero
Answer a duration of zero seconds.


@end table



@node Duration class-instance creation (non ANSI)
@subsection Duration class:@- instance creation (non ANSI)

@table @b
@meindex fromDays:@-seconds:@-offset:@-
@item fromDays:@- days seconds:@- secs offset:@- unused
Answer a duration of `d' days and `secs' seconds.  The last
parameter is unused; this message is available for interoperability
with the DateTime class.


@end table



@node Duration-arithmetics
@subsection Duration:@- arithmetics

@table @b
@meindex *
@item * factor
Answer a Duration that is `factor' times longer than the receiver


@meindex +
@item + aDuration
Answer a Duration that is the sum of the receiver and aDuration's
lengths.


@meindex -
@item - aDuration
Answer a Duration that is the difference of the receiver and aDuration's
lengths.


@meindex /
@item / factorOrDuration
If the parameter is a Duration, answer the ratio between the receiver
and factorOrDuration.  Else divide the receiver by factorOrDuration (a
Number) and answer a new Duration that is correspondingly shorter.


@meindex abs
@item abs
Answer a Duration that is as long as the receiver, but always in
the future.


@meindex days
@item days
Answer the number of days in the receiver


@meindex isZero
@item isZero
Answer whether the receiver correspond to a duration of zero seconds.


@meindex negated
@item negated
Answer a Duration that is as long as the receiver, but with past and
future exchanged.


@meindex negative
@item negative
Answer whether the receiver is in the past.


@meindex positive
@item positive
Answer whether the receiver is a zero-second duration or is
in the future.


@meindex printOn:@-
@item printOn:@- aStream
Print a represention of the receiver on aStream.


@end table



@node Duration-processes
@subsection Duration:@- processes

@table @b
@meindex wait
@item wait
Answer a Delay waiting for the amount of time represented
by the receiver and start waiting on it.


@end table



@node Duration-storing
@subsection Duration:@- storing

@table @b
@meindex storeOn:@-
@item storeOn:@- aStream
Store on aStream Smalltalk code compiling to the receiver


@end table

@node DynamicVariable
@section DynamicVariable
@clindex DynamicVariable

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Object
@itemx Category: Language-Utilities
I am a variable that is visible only in the stackframes
outgoing from this one.  Do not use DynamicVariable directly,
instead create a subclass for each variable you want to use.

You can override the #value class method, and call #valueIfAbsent:@- from
there if you want the default value to be something else than nil.
@end table

@menu
* DynamicVariable class-evaluating::  (class)
@end menu



@node DynamicVariable class-evaluating
@subsection DynamicVariable class:@- evaluating

@table @b
@meindex use:@-during:@-
@item use:@- anObject during:@- aBlock
Not commented.

@meindex value
@item value
Not commented.

@meindex valueIfAbsent:@-
@item valueIfAbsent:@- aBlock
Not commented.

@end table

@node Error
@section Error
@clindex Error

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Exception
@itemx Category: Language-Exceptions
Error represents a fatal error.  Instances of it are not resumable.
@end table

@menu
* Error-exception description::  (instance)
@end menu



@node Error-exception description
@subsection Error:@- exception description

@table @b
@meindex description
@item description
Answer a textual description of the exception.


@meindex isResumable
@item isResumable
Answer false.  Error exceptions are by default unresumable; subclasses
can override this method if desired.


@end table

@node Exception
@section Exception
@clindex Exception

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Object
@itemx Category: Language-Exceptions

My instances describe an exception that has happened, and are passed to
exception handlers. Classes describe the kind of exception.

Apart from containing information on the generated exception,
my instances contain methods that allow you to resume
execution, leave the #on:@-do:@-... block, and pass the exception to an
handler with a lower priority.
@end table

@menu
* Exception class-comparison::  (class)
* Exception class-creating ExceptionCollections::  (class)
* Exception class-instance creation::  (class)
* Exception class-interoperability with TrappableEvents::  (class)
* Exception-accessing::  (instance)
* Exception-built ins::  (instance)
* Exception-comparison::  (instance)
* Exception-copying::  (instance)
* Exception-exception description::  (instance)
* Exception-exception handling::  (instance)
* Exception-exception signaling::  (instance)
* Exception-still unclassified::  (instance)
@end menu



@node Exception class-comparison
@subsection Exception class:@- comparison

@table @b
@meindex goodness:@-
@item goodness:@- anExceptionClass
Answer how good the receiver is at handling the given exception.  A
negative value indicates that the receiver is not able to handle
the exception.


@meindex handles:@-
@item handles:@- anException
Answer whether the receiver handles `anException'.


@end table



@node Exception class-creating ExceptionCollections
@subsection Exception class:@- creating ExceptionCollections

@table @b
@meindex ,
@item , aTrappableEvent
Answer an ExceptionCollection containing all the exceptions in the
receiver and all the exceptions in aTrappableEvent


@end table



@node Exception class-instance creation
@subsection Exception class:@- instance creation

@table @b
@meindex new
@item new
Create an instance of the receiver, which you will be able to
signal later.


@meindex signal
@item signal
Create an instance of the receiver, give it default attributes,
and signal it immediately.


@meindex signal:@-
@item signal:@- messageText
Create an instance of the receiver, set its message text,
and signal it immediately.


@end table



@node Exception class-interoperability with TrappableEvents
@subsection Exception class:@- interoperability with TrappableEvents

@table @b
@meindex allExceptionsDo:@-
@item allExceptionsDo:@- aBlock
Private - Pass ourselves to aBlock


@end table



@node Exception-accessing
@subsection Exception:@- accessing

@table @b
@meindex basicMessageText
@item basicMessageText
Answer an exception's message text.  Do not override this method.


@meindex messageText
@item messageText
Answer an exception's message text.


@meindex messageText:@-
@item messageText:@- aString
Set an exception's message text.


@meindex tag
@item tag
Answer an exception's tag value.  If not specified, it
is the same as the message text.


@meindex tag:@-
@item tag:@- anObject
Set an exception's tag value.  If nil, the tag value will
be the same as the message text.


@end table



@node Exception-built ins
@subsection Exception:@- built ins

@table @b
@meindex resignalAsUnhandled:@-
@slindex basicPrint
@slindex printOn:@-
@item resignalAsUnhandled:@- message
This might start the debugger... Note that we use #basicPrint
'cause #printOn:@- might invoke an error.


@end table



@node Exception-comparison
@subsection Exception:@- comparison

@table @b
@meindex =
@item = anObject
Answer whether the receiver is equal to anObject.  This is true if
either the receiver or its class are the same object as anObject.


@end table



@node Exception-copying
@subsection Exception:@- copying

@table @b
@meindex postCopy
@item postCopy
Modify the receiver so that it does not refer to any instantiated
exception handler.


@end table



@node Exception-exception description
@subsection Exception:@- exception description

@table @b
@meindex defaultAction
@item defaultAction
Execute the default action that is attached to the receiver.


@meindex description
@item description
Answer a textual description of the exception.


@meindex isResumable
@item isResumable
Answer true.  Exceptions are by default resumable.


@end table



@node Exception-exception handling
@subsection Exception:@- exception handling

@table @b
@meindex context
@slindex on:@-do:@-
@item context
Return the execution context for the #on:@-do:@- snippet


@meindex isNested
@item isNested
Answer whether the current exception handler is within the scope of
another handler for the same exception.


@meindex outer
@slindex outer
@slindex outer
@slindex pass
@item outer
Raise the exception that instantiated the receiver, passing the same
parameters.
If the receiver is resumable and the evaluated exception action resumes
then the result returned from #outer will be the resumption value of the
evaluated exception action. If the receiver is not resumable or if the
exception action does not resume then this message will not return, and
#outer will be equivalent to #pass.


@meindex pass
@slindex outer
@item pass
Yield control to the enclosing exception action for the receiver.
Similar to #outer, but control does not return to the currently active exception
handler.


@meindex resignalAs:@-
@item resignalAs:@- replacementException
Reinstate all handlers and execute the handler for `replacementException';
control does not return to the currently active exception handler. The
new Signal object that is created has the same contents as the receiver
(this might or not be correct -- if it isn't you can use an idiom such
as `sig retryUsing:@- [ replacementException signal ])


@meindex resume
@item resume
If the exception is resumable, resume the execution of the block that
raised the exception; the method that was used to signal the exception
will answer the receiver.
Use this method IF AND ONLY IF you know who caused the exception and if
it is possible to resume it in that particular case


@meindex resume:@-
@item resume:@- anObject
If the exception is resumable, resume the execution of the block that
raised the exception; the method that was used to signal the exception
will answer anObject.
Use this method IF AND ONLY IF you know who caused the exception and if
it is possible to resume it in that particular case


@meindex retry
@slindex on:@-do:@-
@item retry
Re-execute the receiver of the #on:@-do:@- message. All handlers are
reinstated:@- watch out, this can easily cause an infinite loop.


@meindex retryUsing:@-
@slindex signal
@item retryUsing:@- aBlock
Execute aBlock reinstating all handlers, and return its result from
the #signal method.


@meindex return
@slindex on:@-do:@-
@item return
Exit the #on:@-do:@- snippet, answering nil to its caller.


@meindex return:@-
@slindex on:@-do:@-
@item return:@- anObject
Exit the #on:@-do:@- snippet, answering anObject to its caller.


@end table



@node Exception-exception signaling
@subsection Exception:@- exception signaling

@table @b
@meindex signal
@item signal
Raise the exceptional event represented by the receiver


@meindex signal:@-
@item signal:@- messageText
Raise the exceptional event represented by the receiver, setting
its message text to messageText.


@end table



@node Exception-still unclassified
@subsection Exception:@- still unclassified

@table @b
@meindex signalingContext
@item signalingContext
Return the execution context for the place that signaled the
exception, or nil if it is not available anymore (for example
if the exception handler has returned.


@end table

@node ExceptionSet
@section ExceptionSet
@clindex ExceptionSet

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Object
@itemx Category: Language-Exceptions

My instances are not real exceptions:@- they can only be used as arguments to
#on:@-do:@-... methods in BlockClosure. They act as shortcuts that allows you to
use the same handler for many exceptions without having to write duplicate
code
@end table

@menu
* ExceptionSet class-instance creation::  (class)
* ExceptionSet-enumerating::  (instance)
* ExceptionSet-instance creation::  (instance)
@end menu



@node ExceptionSet class-instance creation
@subsection ExceptionSet class:@- instance creation

@table @b
@meindex new
@item new
Private - Answer a new, empty ExceptionSet


@end table



@node ExceptionSet-enumerating
@subsection ExceptionSet:@- enumerating

@table @b
@meindex allExceptionsDo:@-
@item allExceptionsDo:@- aBlock
Private - Evaluate aBlock for every exception in the receiver. Answer the
receiver


@meindex goodness:@-
@item goodness:@- exception
Answer how good the receiver is at handling the given exception.  A
negative value indicates that the receiver is not able to handle
the exception.


@meindex handles:@-
@item handles:@- exception
Answer whether the receiver handles `exception'.


@end table



@node ExceptionSet-instance creation
@subsection ExceptionSet:@- instance creation

@table @b
@meindex ,
@item , aTrappableEvent
Answer an ExceptionSet containing all the exceptions in the
receiver and all the exceptions in aTrappableEvent


@end table

@node False
@section False
@clindex False

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Boolean
@itemx Category: Language-Data types
I always tell lies. 
I have a single instance in the system, which represents the value false.
@end table

@menu
* False-basic::  (instance)
* False-C hacks::  (instance)
* False-printing::  (instance)
@end menu



@node False-basic
@subsection False:@- basic

@table @b
@meindex &
@item & aBoolean
We are false -- anded with anything, we always answer false


@meindex and:@-
@item and:@- aBlock
We are false -- anded with anything, we always answer false


@meindex eqv:@-
@item eqv:@- aBoolean
Answer whether the receiver and aBoolean represent the
same boolean value


@meindex ifFalse:@-
@item ifFalse:@- falseBlock
We are false -- evaluate the falseBlock


@meindex ifFalse:@-ifTrue:@-
@item ifFalse:@- falseBlock ifTrue:@- trueBlock
We are false -- evaluate the falseBlock


@meindex ifTrue:@-
@item ifTrue:@- trueBlock
We are false -- answer nil


@meindex ifTrue:@-ifFalse:@-
@item ifTrue:@- trueBlock ifFalse:@- falseBlock
We are false -- evaluate the falseBlock


@meindex not
@item not
We are false -- answer true


@meindex or:@-
@item or:@- aBlock
We are false -- ored with anything, we always answer the other operand,
so evaluate aBlock


@meindex xor:@-
@item xor:@- aBoolean
Answer whether the receiver and aBoolean represent different
boolean values


@meindex |
@item | aBoolean
We are false -- ored with anything, we always answer the other operand


@end table



@node False-C hacks
@subsection False:@- C hacks

@table @b
@meindex asCBooleanValue
@item asCBooleanValue
Answer `0'.

@end table



@node False-printing
@subsection False:@- printing

@table @b
@meindex printOn:@-
@item printOn:@- aStream
Print a representation of the receiver on aStream


@end table

@node File
@section File
@clindex File

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: FilePath
@itemx Category: Streams-Files
I enable access to the properties of files that are on disk.
@end table

@menu
* File class-C functions::  (class)
* File class-file operations::  (class)
* File class-initialization::  (class)
* File class-instance creation::  (class)
* File class-reading system defaults::  (class)
* File class-testing::  (class)
* File-accessing::  (instance)
* File-basic::  (instance)
* File-directory operations::  (instance)
* File-file name management::  (instance)
* File-file operations::  (instance)
* File-still unclassified::  (instance)
* File-testing::  (instance)
@end menu



@node File class-C functions
@subsection File class:@- C functions

@table @b
@meindex errno
@item errno
Answer the current value of C errno.


@meindex stringError:@-
@item stringError:@- errno
Answer C strerror's result for errno.


@end table



@node File class-file operations
@subsection File class:@- file operations

@table @b
@meindex checkError
@item checkError
Return whether an error had been reported or not.
If there had been one, raise an exception too


@meindex checkError:@-
@item checkError:@- errno
The error with the C code `errno' has been reported.
If errno >= 1, raise an exception


@meindex remove:@-
@item remove:@- fileName
Remove the file with the given path name


@meindex rename:@-to:@-
@item rename:@- oldFileName to:@- newFileName
Rename the file with the given path name oldFileName to newFileName


@meindex symlink:@-as:@-
@item symlink:@- srcName as:@- destName
Create a symlink for the srcName file with the given path name


@meindex symlink:@-from:@-
@item symlink:@- destName from:@- srcName
Create a symlink named destName file from the given path (relative to
destName)


@meindex touch:@-
@item touch:@- fileName
Update the timestamp of the file with the given path name.


@end table



@node File class-initialization
@subsection File class:@- initialization

@table @b
@meindex initialize
@item initialize
Initialize the receiver's class variables


@end table



@node File class-instance creation
@subsection File class:@- instance creation

@table @b
@meindex name:@-
@item name:@- aName
Answer a new file with the given path.  The path is turned into
an absolute path.


@meindex path:@-
@item path:@- aString
Answer a new file with the given path.  The path is not validated until
some of the fields of the newly created objects are accessed


@end table



@node File class-reading system defaults
@subsection File class:@- reading system defaults

@table @b
@meindex executable
@item executable
Answer the full path to the executable being run.


@meindex image
@item image
Answer the full path to the image being used.


@end table



@node File class-testing
@subsection File class:@- testing

@table @b
@meindex exists:@-
@item exists:@- fileName
Answer whether a file with the given name exists


@meindex isAccessible:@-
@item isAccessible:@- fileName
Answer whether a directory with the given name exists and can be accessed


@meindex isExecutable:@-
@item isExecutable:@- fileName
Answer whether a file with the given name exists and can be executed


@meindex isReadable:@-
@item isReadable:@- fileName
Answer whether a file with the given name exists and is readable


@meindex isWriteable:@-
@item isWriteable:@- fileName
Answer whether a file with the given name exists and is writeable


@end table



@node File-accessing
@subsection File:@- accessing

@table @b
@meindex asString
@item asString
Answer the name of the file identified by the receiver


@meindex at:@-
@item at:@- aString
Answer a File or Directory object as appropriate for a file named
'aName' in the directory represented by the receiver.


@meindex creationTime
@item creationTime
Answer the creation time of the file identified by the receiver.
On some operating systems, this could actually be the last change time
(the `last change time' has to do with permissions, ownership and the
like).


@meindex isDirectory
@item isDirectory
Answer whether the file is a directory.


@meindex isSocket
@item isSocket
Answer whether the file is an AF_UNIX socket.


@meindex isSymbolicLink
@item isSymbolicLink
Answer whether the file is a symbolic link.


@meindex lastAccessTime
@item lastAccessTime
Answer the last access time of the file identified by the receiver


@meindex lastChangeTime
@item lastChangeTime
Answer the last change time of the file identified by the receiver
(the `last change time' has to do with permissions, ownership and the
like). On some operating systems, this could actually be the
file creation time.


@meindex lastModifyTime
@item lastModifyTime
Answer the last modify time of the file identified by the receiver
(the `last modify time' has to do with the actual file contents).


@meindex mode
@item mode
Answer the permission bits for the file identified by the receiver


@meindex mode:@-
@item mode:@- anInteger
Set the permission bits for the file identified by the receiver to be
anInteger.


@meindex name
@item name
Answer the name of the file identified by the receiver


@meindex pathTo:@-
@item pathTo:@- destName
Compute the relative path from the receiver to destName.


@meindex refresh
@item refresh
Refresh the statistics for the receiver


@meindex size
@item size
Answer the size of the file identified by the receiver


@end table



@node File-basic
@subsection File:@- basic

@table @b
@meindex =
@item = aFile
Answer whether the receiver represents the same file as the receiver.


@meindex hash
@item hash
Answer a hash value for the receiver.


@end table



@node File-directory operations
@subsection File:@- directory operations

@table @b
@meindex createDirectory
@item createDirectory
Create the receiver as a directory.


@meindex namesDo:@-
@item namesDo:@- aBlock
Evaluate aBlock once for each file in the directory represented by the
receiver, passing its name. aBlock should not return.


@end table



@node File-file name management
@subsection File:@- file name management

@table @b
@meindex full
@item full
Answer the full name of the receiver, resolving the `.' and
`..' directory entries, and answer the result.  Answer nil if the
name is invalid (such as '/usr/../../badname')


@end table



@node File-file operations
@subsection File:@- file operations

@table @b
@meindex lastAccessTime:@-lastModifyTime:@-
@item lastAccessTime:@- accessDateTime lastModifyTime:@- modifyDateTime
Set the receiver's timestamps to be accessDateTime and modifyDateTime.


@meindex open:@-mode:@-ifFail:@-
@item open:@- class mode:@- mode ifFail:@- aBlock
Open the receiver in the given mode (as answered by FileStream's
class constant methods)


@meindex owner:@-group:@-
@item owner:@- ownerString group:@- groupString
Set the receiver's owner and group to be ownerString and groupString.


@meindex pathFrom:@-
@item pathFrom:@- dir
Compute the relative path from the directory dirName to the receiver


@meindex remove
@item remove
Remove the file with the given path name


@meindex renameTo:@-
@item renameTo:@- newFileName
Rename the file with the given path name to newFileName


@meindex symlinkAs:@-
@item symlinkAs:@- destName
Create destName as a symbolic link of the receiver.  The appropriate
relative path is computed automatically.


@meindex symlinkFrom:@-
@item symlinkFrom:@- srcName
Create the receiver as a symlink from path destName


@end table



@node File-still unclassified
@subsection File:@- still unclassified

@table @b
@meindex ,
@item , aName
Answer an object of the same kind as the receiver, whose name
is suffixed with aName.


@end table



@node File-testing
@subsection File:@- testing

@table @b
@meindex exists
@item exists
Answer whether a file with the name contained in the receiver does exist.


@meindex isAbsolute
@item isAbsolute
Answer whether the receiver identifies an absolute path.


@meindex isAccessible
@item isAccessible
Answer whether a directory with the name contained in the receiver
does exist and is accessible


@meindex isExecutable
@item isExecutable
Answer whether a file with the name contained in the receiver does exist
and is executable


@meindex isFileSystemPath
@item isFileSystemPath
Answer whether the receiver corresponds to a real filesystem path.


@meindex isReadable
@item isReadable
Answer whether a file with the name contained in the receiver does exist
and is readable


@meindex isWriteable
@item isWriteable
Answer whether a file with the name contained in the receiver does exist
and is writeable


@end table

@node FileDescriptor
@section FileDescriptor
@clindex FileDescriptor

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Stream
@itemx Category: Streams-Files
My instances are what conventional programmers think of as files.
My instance creation methods accept the name of a disk file (or any named
file object, such as /dev/rmt0 on UNIX or MTA0:@- on VMS).  In addition,
they accept a virtual filesystem path like `configure.gz@-#ugz' which can
be used to transparently extract or decompress files from archives, or
do arbitrary processing on the files.
@end table

@menu
* FileDescriptor class-initialization::  (class)
* FileDescriptor class-instance creation::  (class)
* FileDescriptor class-still unclassified::  (class)
* FileDescriptor-accessing::  (instance)
* FileDescriptor-basic::  (instance)
* FileDescriptor-binary I/O::  (instance)
* FileDescriptor-built ins::  (instance)
* FileDescriptor-class type methods::  (instance)
* FileDescriptor-initialize-release::  (instance)
* FileDescriptor-low-level access::  (instance)
* FileDescriptor-overriding inherited methods::  (instance)
* FileDescriptor-polymorphism::  (instance)
* FileDescriptor-positioning::  (instance)
* FileDescriptor-printing::  (instance)
* FileDescriptor-testing::  (instance)
@end menu



@node FileDescriptor class-initialization
@subsection FileDescriptor class:@- initialization

@table @b
@meindex initialize
@item initialize
Initialize the receiver's class variables


@meindex update:@-
@item update:@- aspect
Close open files before quitting


@end table



@node FileDescriptor class-instance creation
@subsection FileDescriptor class:@- instance creation

@table @b
@meindex append
@item append
Open for writing.  The file is created if it does not exist.  The stream
is positioned at the end of the file.


@meindex create
@item create
Open for reading and writing.  The file is created if it does not exist,
otherwise it is truncated.  The stream is positioned at the beginning of
the file.


@meindex fopen:@-mode:@-
@slindex append
@slindex create
@slindex readWrite
@slindex read
@slindex write
@slindex close
@slindex removeToBeFinalized
@item fopen:@- fileName mode:@- fileMode
Open fileName in the required mode - answered by #append, #create,
#readWrite, #read or #write - and fail if the file cannot be opened.
Else answer a new FileStream. For mode anyway you can use any
standard C non-binary fopen mode.
The file will be automatically closed upon GC if the object is not
referenced anymore, but it is better to close it as soon as you're
finished with it anyway, using #close. To keep a file open even when
no references exist anymore, send it #removeToBeFinalized


@meindex fopen:@-mode:@-ifFail:@-
@slindex append
@slindex create
@slindex readWrite
@slindex read
@slindex write
@slindex close
@slindex removeToBeFinalized
@item fopen:@- fileName mode:@- fileMode ifFail:@- aBlock
Open fileName in the required mode - answered by #append, #create,
#readWrite, #read or #write - and evaluate aBlock if the file cannot
be opened. Else answer a new FileStream. For mode anyway you can use any
The file will be automatically closed upon GC if the object is not
referenced anymore, but it is better to close it as soon as you're
finished with it anyway, using #close. To keep a file open even when
no references exist anymore, send it #removeToBeFinalized


@meindex on:@-
@item on:@- fd
Open a FileDescriptor on the given file descriptor.  Read-write access
is assumed.


@meindex open:@-
@slindex close
@slindex removeToBeFinalized
@item open:@- fileName
Open fileName in read-write mode - fail if the file cannot be opened.
Else answer a new FileStream.
The file will be automatically closed upon GC if the object is not
referenced anymore, but you should close it with #close anyway.
To keep a file open, send it #removeToBeFinalized


@meindex open:@-mode:@-ifFail:@-
@slindex append
@slindex create
@slindex readWrite
@slindex read
@slindex write
@slindex close
@slindex removeToBeFinalized
@item open:@- fileName mode:@- fileMode ifFail:@- aBlock
Open fileName in the required mode - answered by #append, #create,
#readWrite, #read or #write - and evaluate aBlock if the file cannot
be opened. Else answer a new instance of the receiver. For mode
anyway you can use any standard C non-binary fopen mode.  fileName
can be a `virtual filesystem' path, including URLs and '@-#' suffixes
that are inspected by the virtual filesystem layers and replaced with
tasks such as un-gzipping a file or extracting a file from an
archive.

The file will be automatically closed upon GC if the object is not
referenced anymore, but it is better to close it as soon as you're
finished with it anyway, using #close. To keep a file open even when
no references exist anymore, send it #removeToBeFinalized


@meindex openTemporaryFile:@-
@item openTemporaryFile:@- baseName
Open for writing a file whose name starts with baseName, followed
by six random alphanumeric characters.  The file is created with mode
read/write and permissions 0666 or 0600 on most recent operating
systems (beware, the former behavior might constitute a security
problem).  The file is opened with the O_EXCL flag, guaranteeing that
when the method returns successfully we are the only user.


@meindex popen:@-dir:@-
@slindex read
@slindex write
@item popen:@- commandName dir:@- direction
Open a pipe on the given command and fail if the file cannot be opened.
Else answer a new FileStream.
The pipe will not be automatically closed upon GC, even if the object
is not referenced anymore, because when you close a pipe you have to wait
for the associated process to terminate.
direction is returned by #read or #write ('r' or 'w') and is interpreted
from the point of view of Smalltalk:@- reading means Smalltalk reads the
standard output of the command, writing means Smalltalk writes the standard input of the command. The other channel
(stdin when reading, stdout when writing) is the same as GST's, unless
commandName alters it.


@meindex popen:@-dir:@-ifFail:@-
@item popen:@- commandName dir:@- direction ifFail:@- aBlock
Open a pipe on the given command and evaluate aBlock
file cannot be opened. Else answer a new FileStream.
The pipe will not be automatically closed upon GC, even if the object
is not referenced anymore, because when you close a pipe you have to wait
for the associated process to terminate.
direction is interpreted from the point of view of Smalltalk:@- reading
means that Smalltalk reads the standard output of the command, writing
means that Smalltalk writes the standard input of the command


@meindex read
@item read
Open text file for reading.  The stream is positioned at the beginning of
the file.


@meindex readWrite
@item readWrite
Open for reading and writing.  The stream is positioned at the beginning
of the file.


@meindex write
@item write
Truncate file to zero length or create text file for writing.  The stream
is positioned at the beginning of the file.


@end table



@node FileDescriptor class-still unclassified
@subsection FileDescriptor class:@- still unclassified

@table @b
@meindex open:@-mode:@-
@slindex append
@slindex create
@slindex readWrite
@slindex read
@slindex write
@slindex close
@slindex removeToBeFinalized
@item open:@- fileName mode:@- fileMode
Open fileName in the required mode - answered by #append, #create,
#readWrite, #read or #write - and fail if the file cannot be opened.
Else answer a new FileStream. For mode anyway you can use any
standard C non-binary fopen mode.  fileName can be a `virtual
filesystem' path, including URLs and '@-#' suffixes that are
inspected by the virtual filesystem layers and replaced with
tasks such as un-gzipping a file or extracting a file from an
archive.

The file will be automatically closed upon GC if the object is not
referenced anymore, but it is better to close it as soon as you're
finished with it anyway, using #close. To keep a file open even when
no references exist anymore, send it #removeToBeFinalized


@end table



@node FileDescriptor-accessing
@subsection FileDescriptor:@- accessing

@table @b
@meindex canRead
@item canRead
Answer whether the file is open and we can read from it


@meindex canWrite
@item canWrite
Answer whether the file is open and we can write from it


@meindex ensureReadable
@item ensureReadable
If the file is open, wait until data can be read from it.  The wait
allows other Processes to run.


@meindex ensureWriteable
@item ensureWriteable
If the file is open, wait until we can write to it.  The wait
allows other Processes to run.


@meindex exceptionalCondition
@item exceptionalCondition
Answer whether the file is open and an exceptional condition (such
as presence of out of band data) has occurred on it


@meindex fd
@item fd
Return the OS file descriptor of the file


@meindex file
@item file
Return the name of the file


@meindex isOpen
@item isOpen
Answer whether the file is still open


@meindex isPeerAlive
@item isPeerAlive
Present for compatibility with sockets.  For files, it answers
whether the file is still open


@meindex isPipe
@item isPipe
Answer whether the file is a pipe or an actual disk file


@meindex name
@item name
Return the name of the file


@meindex waitForException
@item waitForException
If the file is open, wait until an exceptional condition (such
as presence of out of band data) has occurred on it.  The wait
allows other Processes to run.


@end table



@node FileDescriptor-basic
@subsection FileDescriptor:@- basic

@table @b
@meindex checkError
@slindex checkError
@item checkError
Perform error checking.  By default, we call
File class>>@-#checkError.


@meindex close
@item close
Close the file


@meindex contents
@item contents
Answer the whole contents of the file


@meindex copyFrom:@-to:@-
@item copyFrom:@- from to:@- to
Answer the contents of the file between the two given positions


@meindex finalize
@item finalize
Close the file if it is still open by the time the object becomes
garbage.


@meindex invalidate
@item invalidate
Invalidate a file descriptor


@meindex next
@item next
Return the next character in the file, or nil at eof


@meindex nextByte
@item nextByte
Return the next byte in the file, or nil at eof


@meindex nextPut:@-
@item nextPut:@- aCharacter
Store aCharacter on the file


@meindex nextPutByte:@-
@item nextPutByte:@- anInteger
Store the byte, anInteger, on the file


@meindex nextPutByteArray:@-
@item nextPutByteArray:@- aByteArray
Store aByteArray on the file


@meindex peek
@item peek
Returns the next element of the stream without moving the pointer.
Returns nil when at end of stream.


@meindex peekFor:@-
@item peekFor:@- anObject
Returns whether the next element of the stream is equal to anObject,
without moving the pointer if it is not.


@meindex position
@item position
Answer the zero-based position from the start of the file


@meindex position:@-
@item position:@- n
Set the file pointer to the zero-based position n


@meindex reset
@item reset
Reset the stream to its beginning


@meindex shutdown
@item shutdown
Close the transmission side of a full-duplex connection.  This is useful
on read-write pipes.


@meindex size
@item size
Return the current size of the file, in bytes


@meindex truncate
@item truncate
Truncate the file at the current position


@end table



@node FileDescriptor-binary I/O
@subsection FileDescriptor:@- binary I/O

@table @b
@meindex nextByteArray:@-
@item nextByteArray:@- numBytes
Return the next numBytes bytes in the byte array


@meindex nextDouble
@item nextDouble
Return the next 64-bit float in the byte array


@meindex nextFloat
@item nextFloat
Return the next 32-bit float in the byte array


@meindex nextLong
@item nextLong
Return the next 4 bytes in the byte array, interpreted as a 32 bit signed int


@meindex nextLongLong
@item nextLongLong
Return the next 8 bytes in the byte array, interpreted as a 64 bit signed int


@meindex nextPutDouble:@-
@item nextPutDouble:@- aDouble
Store aDouble as a 64-bit float in the byte array


@meindex nextPutFloat:@-
@item nextPutFloat:@- aFloat
Return the next 32-bit float in the byte array


@meindex nextPutInt64:@-
@item nextPutInt64:@- anInteger
Store anInteger (range:@- -2^63..2^64-1) on the byte array as 8 bytes


@meindex nextPutLong:@-
@item nextPutLong:@- anInteger
Store anInteger (range:@- -2^31..2^32-1) on the byte array as 4 bytes


@meindex nextPutShort:@-
@item nextPutShort:@- anInteger
Store anInteger (range:@- -32768..65535) on the byte array as 2 bytes


@meindex nextShort
@item nextShort
Return the next 2 bytes in the byte array, interpreted as a 16 bit signed int


@meindex nextSignedByte
@item nextSignedByte
Return the next byte in the byte array, interpreted as a 8 bit signed number


@meindex nextUint64
@item nextUint64
Return the next 8 bytes in the byte array, interpreted as a 64 bit unsigned int


@meindex nextUlong
@item nextUlong
Return the next 4 bytes in the byte array, interpreted as a 32 bit unsigned int


@meindex nextUshort
@item nextUshort
Return the next 2 bytes in the byte array, interpreted as a 16 bit unsigned int


@end table



@node FileDescriptor-built ins
@subsection FileDescriptor:@- built ins

@table @b
@meindex fileIn
@item fileIn
File in the contents of the receiver.
During a file in operation, global variables (starting with an
uppercase letter) that are not declared don't yield an `unknown
variable' error. Instead, they are defined as nil in the `Undeclared'
dictionary (a global variable residing in Smalltalk).
As soon as you add the variable to a namespace (for example by creating
a class) the Association will be removed from Undeclared and reused
in the namespace, so that the old references will automagically point
to the new value.


@meindex fileOp:@-
@item fileOp:@- ioFuncIndex
Private - Used to limit the number of primitives used by FileStreams


@meindex fileOp:@-ifFail:@-
@item fileOp:@- ioFuncIndex ifFail:@- aBlock
Private - Used to limit the number of primitives used by FileStreams.


@meindex fileOp:@-with:@-
@item fileOp:@- ioFuncIndex with:@- arg1
Private - Used to limit the number of primitives used by FileStreams


@meindex fileOp:@-with:@-ifFail:@-
@item fileOp:@- ioFuncIndex with:@- arg1 ifFail:@- aBlock
Private - Used to limit the number of primitives used by FileStreams.


@meindex fileOp:@-with:@-with:@-
@item fileOp:@- ioFuncIndex with:@- arg1 with:@- arg2
Private - Used to limit the number of primitives used by FileStreams


@meindex fileOp:@-with:@-with:@-ifFail:@-
@item fileOp:@- ioFuncIndex with:@- arg1 with:@- arg2 ifFail:@- aBlock
Private - Used to limit the number of primitives used by FileStreams.


@meindex fileOp:@-with:@-with:@-with:@-
@item fileOp:@- ioFuncIndex with:@- arg1 with:@- arg2 with:@- arg3
Private - Used to limit the number of primitives used by FileStreams


@meindex fileOp:@-with:@-with:@-with:@-ifFail:@-
@item fileOp:@- ioFuncIndex with:@- arg1 with:@- arg2 with:@- arg3 ifFail:@- aBlock
Private - Used to limit the number of primitives used by FileStreams.


@meindex fileOp:@-with:@-with:@-with:@-with:@-
@item fileOp:@- ioFuncIndex with:@- arg1 with:@- arg2 with:@- arg3 with:@- arg4
Private - Used to limit the number of primitives used by FileStreams


@meindex fileOp:@-with:@-with:@-with:@-with:@-ifFail:@-
@item fileOp:@- ioFuncIndex with:@- arg1 with:@- arg2 with:@- arg3 with:@- arg4 ifFail:@- aBlock
Private - Used to limit the number of primitives used by FileStreams.


@end table



@node FileDescriptor-class type methods
@subsection FileDescriptor:@- class type methods

@table @b
@meindex isBinary
@item isBinary
We answer characters, so answer false


@meindex isExternalStream
@item isExternalStream
We stream on an external entity (a file), so answer true


@meindex isText
@item isText
We answer characters, so answer true


@end table



@node FileDescriptor-initialize-release
@subsection FileDescriptor:@- initialize-release

@table @b
@meindex addToBeFinalized
@item addToBeFinalized
Add me to the list of open files.


@meindex initialize
@item initialize
Initialize the receiver's instance variables


@meindex readStream
@item readStream
Answer myself, or an alternate stream coerced for reading.


@meindex removeToBeFinalized
@item removeToBeFinalized
Remove me from the list of open files.


@end table



@node FileDescriptor-low-level access
@subsection FileDescriptor:@- low-level access

@table @b
@meindex next:@-putAll:@-startingAt:@-
@item next:@- n putAll:@- aCollection startingAt:@- position
Put the characters in the supplied range of aCollection in the file


@meindex nextAvailable:@-into:@-startingAt:@-
@item nextAvailable:@- n into:@- aCollection startingAt:@- position
Ignoring any buffering, try to fill the given range of aCollection
with the contents of the file


@end table



@node FileDescriptor-overriding inherited methods
@subsection FileDescriptor:@- overriding inherited methods

@table @b
@meindex isEmpty
@item isEmpty
Answer whether the receiver is empty


@meindex nextPutAllOn:@-
@item nextPutAllOn:@- aStream
Put all the characters of the receiver in aStream.


@meindex reverseContents
@item reverseContents
Return the contents of the file from the last byte to the first


@meindex setToEnd
@item setToEnd
Reset the file pointer to the end of the file


@meindex skip:@-
@item skip:@- anInteger
Skip anInteger bytes in the file


@end table



@node FileDescriptor-polymorphism
@subsection FileDescriptor:@- polymorphism

@table @b
@meindex pastEnd
@item pastEnd
The end of the stream has been reached.  Signal a Notification.


@end table



@node FileDescriptor-positioning
@subsection FileDescriptor:@- positioning

@table @b
@meindex isPositionable
@slindex skip:@-
@item isPositionable
Answer true if the stream supports moving backwards with #skip:@-.


@end table



@node FileDescriptor-printing
@subsection FileDescriptor:@- printing

@table @b
@meindex printOn:@-
@item printOn:@- aStream
Print a representation of the receiver on aStream


@end table



@node FileDescriptor-testing
@subsection FileDescriptor:@- testing

@table @b
@meindex atEnd
@item atEnd
Answer whether data has come to an end


@end table

@node FilePath
@section FilePath
@clindex FilePath

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Object
@itemx Category: Streams-Files
I expose the syntax of file names, including paths.  I know how to
manipulate such a path by splitting it into its components.  In addition,
I expose information about files (both real and virtual) such as their
size and timestamps.
@end table

@menu
* FilePath class-file name management::  (class)
* FilePath class-still unclassified::  (class)
* FilePath-accessing::  (instance)
* FilePath-converting::  (instance)
* FilePath-decoration::  (instance)
* FilePath-directory operations::  (instance)
* FilePath-enumerating::  (instance)
* FilePath-file name management::  (instance)
* FilePath-file operations::  (instance)
* FilePath-printing::  (instance)
* FilePath-still unclassified::  (instance)
* FilePath-testing::  (instance)
* FilePath-virtual filesystems::  (instance)
@end menu



@node FilePath class-file name management
@subsection FilePath class:@- file name management

@table @b
@meindex append:@-to:@-
@item append:@- fileName to:@- directory
Answer the name of a file named `fileName' which resides in a directory
named `directory'.


@meindex extensionFor:@-
@item extensionFor:@- aString
Answer the extension of a file named `aString'.  Note:@- the extension
includes an initial dot.


@meindex fullNameFor:@-
@item fullNameFor:@- aString
Answer the full path to a file called `aString', resolving the `.' and
`..' directory entries, and answer the result.  `/..' is the same as '/'.


@meindex pathFor:@-
@item pathFor:@- aString
Determine the path of the name of a file called `aString', and
answer the result.  With the exception of the root directory, the
final slash is stripped.


@meindex pathFor:@-ifNone:@-
@item pathFor:@- aString ifNone:@- aBlock
Determine the path of the name of a file called `aString', and
answer the result.  With the exception of the root directory, the
final slash is stripped.  If there is no path, evaluate aBlock and
return the result.


@meindex pathFrom:@-to:@-
@item pathFrom:@- srcName to:@- destName
Answer the relative path to destName when the current
directory is srcName's directory.


@meindex stripExtensionFrom:@-
@item stripExtensionFrom:@- aString
Remove the extension from the name of a file called `aString', and
answer the result.


@meindex stripFileNameFor:@-
@item stripFileNameFor:@- aString
Determine the path of the name of a file called `aString', and
answer the result as a directory name including the final slash.


@meindex stripPathFrom:@-
@item stripPathFrom:@- aString
Remove the path from the name of a file called `aString', and
answer the file name plus extension.


@end table



@node FilePath class-still unclassified
@subsection FilePath class:@- still unclassified

@table @b
@meindex isAbsolute:@-
@item isAbsolute:@- aString
Answer whether aString is an absolute ptah.


@end table



@node FilePath-accessing
@subsection FilePath:@- accessing

@table @b
@meindex at:@-
@item at:@- aName
Answer a File or Directory object as appropriate for a file named
'aName' in the directory represented by the receiver.


@meindex creationTime
@item creationTime
Answer the creation time of the file identified by the receiver.
On some operating systems, this could actually be the last change time
(the `last change time' has to do with permissions, ownership and the
like).


@meindex group:@-
@item group:@- aString
Set the group of the file identified by the receiver to be aString.


@meindex includes:@-
@item includes:@- aName
Answer whether a file named `aName' exists in the directory represented
by the receiver.


@meindex lastAccessTime
@item lastAccessTime
Answer the last access time of the file identified by the receiver


@meindex lastAccessTime:@-
@item lastAccessTime:@- aDateTime
Update the last access time of the file corresponding to the receiver,
to be aDateTime.


@meindex lastAccessTime:@-lastModifyTime:@-
@item lastAccessTime:@- accessDateTime lastModifyTime:@- modifyDateTime
Update the timestamps of the file corresponding to the receiver, to be
accessDateTime and modifyDateTime.


@meindex lastChangeTime
@item lastChangeTime
Answer the last change time of the file identified by the receiver
(the `last change time' has to do with permissions, ownership and the
like). On some operating systems, this could actually be the
file creation time.


@meindex lastModifyTime
@item lastModifyTime
Answer the last modify time of the file identified by the receiver
(the `last modify time' has to do with the actual file contents).


@meindex lastModifyTime:@-
@item lastModifyTime:@- aDateTime
Update the last modification timestamp of the file corresponding to the
receiver, to be aDateTime.


@meindex mode
@item mode
Answer the permission bits for the file identified by the receiver


@meindex mode:@-
@item mode:@- anInteger
Set the permission bits for the file identified by the receiver to be
anInteger.


@meindex owner:@-
@item owner:@- aString
Set the owner of the file identified by the receiver to be aString.


@meindex owner:@-group:@-
@item owner:@- ownerString group:@- groupString
Set the owner and group of the file identified by the receiver to be
aString.


@meindex pathTo:@-
@item pathTo:@- destName
Compute the relative path from the receiver to destName.


@meindex refresh
@item refresh
Refresh the statistics for the receiver


@meindex size
@item size
Answer the size of the file identified by the receiver


@end table



@node FilePath-converting
@subsection FilePath:@- converting

@table @b
@meindex asFile
@item asFile
Answer the receiver.


@end table



@node FilePath-decoration
@subsection FilePath:@- decoration

@table @b
@meindex all
@item all
Return a decorator of the receiver that will provide recursive
descent into directories for iteration methods.  Furthermore,
iteration on the returned wrapper will not include '.' or '..'
directory entries, and will include the receiver (directly, not
via '.').


@end table



@node FilePath-directory operations
@subsection FilePath:@- directory operations

@table @b
@meindex createDirectories
@item createDirectories
Create the receiver as a directory, together with all its parents.


@meindex createDirectory
@item createDirectory
Create the receiver as a directory, together with all its parents.


@meindex nameAt:@-
@item nameAt:@- aName
Answer a FilePath for a file named `aName' residing in the directory
represented by the receiver.


@end table



@node FilePath-enumerating
@subsection FilePath:@- enumerating

@table @b
@meindex allFilesMatching:@-do:@-
@slindex match:@-
@item allFilesMatching:@- aPattern do:@- aBlock
Evaluate aBlock on the File objects that match aPattern (according to
String>>@-#match:@-) in the directory named by the receiver. Recursively
descend into directories.


@meindex directories
@item directories
Answer an Array with Directory objects for the subdirectories
of the directory represented by the receiver.


@meindex do:@-
@item do:@- aBlock
Evaluate aBlock once for each file in the directory represented by the
receiver, passing a FilePath object (or a subclass) to it.  It depends
on the subclass whether iteration will include the '.' and '..'
directory entries.


@meindex entries
@item entries
Answer an Array with File or Directory objects for the contents
of the directory represented by the receiver.


@meindex entryNames
@item entryNames
Answer an Array with the names of the files in the directory
represented by the receiver.


@meindex files
@item files
Answer an Array with File objects for the contents of the directory
represented by the receiver.


@meindex filesMatching:@-
@item filesMatching:@- aPattern
Evaluate aBlock once for each file in the directory represented by the
receiver, passing a File or Directory object to aBlock. Returns the
*names* of the files for which aBlock returns true.


@meindex filesMatching:@-do:@-
@slindex match:@-
@item filesMatching:@- aPattern do:@- block
Evaluate block on the File objects that match aPattern (according to
String>>@-#match:@-) in the directory named by the receiver.


@meindex namesDo:@-
@item namesDo:@- aBlock
Evaluate aBlock once for each file in the directory represented by the
receiver, passing its name.  It depends on the subclass whether
iteration will include the '.' and '..'  directory entries.


@meindex namesMatching:@-do:@-
@slindex match:@-
@item namesMatching:@- aPattern do:@- block
Evaluate block on the file names that match aPattern (according to
String>>@-#match:@-) in the directory named by the receiver.


@meindex reject:@-
@item reject:@- aBlock
Evaluate aBlock once for each file in the directory represented by the
receiver, passing a File or Directory object to aBlock. Returns the
*names* of the files for which aBlock returns true.


@meindex select:@-
@item select:@- aBlock
Evaluate aBlock once for each file in the directory represented by the
receiver, passing a File or Directory object to aBlock. Returns the
*names* of the files for which aBlock returns true.


@end table



@node FilePath-file name management
@subsection FilePath:@- file name management

@table @b
@meindex directory
@item directory
Answer the Directory object for the receiver's path


@meindex extension
@item extension
Answer the extension of the receiver


@meindex full
@item full
Answer the full name of the receiver, resolving the `.' and
`..' directory entries, and answer the result.  Answer nil if the
name is invalid (such as '/usr/../../badname')


@meindex fullName
@slindex name
@item fullName
Answer a String with the full path to the receiver (same as #name;
it is useless to override this method).


@meindex name
@slindex fullName
@item name
Answer String with the full path to the receiver (same as #fullName).


@meindex parent
@item parent
Answer the Directory object for the receiver's path


@meindex path
@item path
Answer the path (if any) of the receiver


@meindex stripExtension
@item stripExtension
Answer the path (if any) and file name of the receiver


@meindex stripFileName
@item stripFileName
Answer the path of the receiver, always including a directory
name (possibly `.') and the final directory separator


@meindex stripPath
@item stripPath
Answer the file name and extension (if any) of the receiver


@end table



@node FilePath-file operations
@subsection FilePath:@- file operations

@table @b
@meindex contents
@item contents
Open a read-only FileStream on the receiver, read its contents,
close the stream and answer the contents


@meindex fileIn
@item fileIn
File in the receiver


@meindex open:@-
@item open:@- mode
Open the receiver in the given mode (as answered by FileStream's
class constant methods)


@meindex open:@-ifFail:@-
@item open:@- mode ifFail:@- aBlock
Open the receiver in the given mode (as answered by FileStream's
class constant methods). Upon failure, evaluate aBlock.


@meindex open:@-mode:@-ifFail:@-
@item open:@- class mode:@- mode ifFail:@- aBlock
Open the receiver in the given mode (as answered by FileStream's
class constant methods)


@meindex openDescriptor:@-
@item openDescriptor:@- mode
Open the receiver in the given mode (as answered by FileStream's
class constant methods)


@meindex openDescriptor:@-ifFail:@-
@item openDescriptor:@- mode ifFail:@- aBlock
Open the receiver in the given mode (as answered by FileStream's
class constant methods). Upon failure, evaluate aBlock.


@meindex pathFrom:@-
@item pathFrom:@- dirName
Compute the relative path from the directory dirName to the receiver


@meindex readStream
@item readStream
Open a read-only FileStream on the receiver


@meindex remove
@item remove
Remove the file identified by the receiver


@meindex renameTo:@-
@item renameTo:@- newName
Rename the file identified by the receiver to newName


@meindex symlinkAs:@-
@item symlinkAs:@- destName
Create destName as a symbolic link of the receiver.  The appropriate
relative path is computed automatically.


@meindex symlinkFrom:@-
@item symlinkFrom:@- srcName
Create the receiver as a symbolic link from srcName (relative to the
path of the receiver).


@meindex touch
@item touch
Update the timestamp of the file corresponding to the receiver.


@meindex withReadStreamDo:@-
@item withReadStreamDo:@- aBlock
Answer the result of invoking aBlock with a reading stream
open on me, closing it when the dynamic extent of aBlock ends.


@meindex withWriteStreamDo:@-
@item withWriteStreamDo:@- aBlock
Answer the result of invoking aBlock with a writing stream
open on me, closing it when the dynamic extent of aBlock ends.


@meindex writeStream
@item writeStream
Open a write-only FileStream on the receiver


@end table



@node FilePath-printing
@subsection FilePath:@- printing

@table @b
@meindex asString
@item asString
Print a representation of the receiver on aStream.


@meindex displayOn:@-
@item displayOn:@- aStream
Print a representation of the receiver on aStream.


@meindex printOn:@-
@item printOn:@- aStream
Print a representation of the receiver on aStream.


@meindex withShellEscapes
@item withShellEscapes
Return the representation of the receiver with shell characters
escaped.


@end table



@node FilePath-still unclassified
@subsection FilePath:@- still unclassified

@table @b
@meindex /
@item / aName
Answer a File or Directory object as appropriate for a file named
'aName' in the directory represented by the receiver.


@end table



@node FilePath-testing
@subsection FilePath:@- testing

@table @b
@meindex exists
@item exists
Answer whether a file with the name contained in the receiver does exist.


@meindex isAbsolute
@item isAbsolute
Answer whether the receiver identifies an absolute path.


@meindex isAccessible
@item isAccessible
Answer whether a directory with the name contained in the receiver does
exist and can be accessed


@meindex isDirectory
@item isDirectory
Answer whether a file with the name contained in the receiver does exist
and identifies a directory.


@meindex isExecutable
@item isExecutable
Answer whether a file with the name contained in the receiver does exist
and is executable


@meindex isFile
@item isFile
Answer whether a file with the name contained in the receiver does exist
and does not identify a directory.


@meindex isFileSystemPath
@item isFileSystemPath
Answer whether the receiver corresponds to a real filesystem path.


@meindex isReadable
@item isReadable
Answer whether a file with the name contained in the receiver does exist
and is readable


@meindex isRelative
@item isRelative
Answer whether the receiver identifies a relative path.


@meindex isSymbolicLink
@item isSymbolicLink
Answer whether a file with the name contained in the receiver does exist
and identifies a symbolic link.


@meindex isWriteable
@item isWriteable
Answer whether a file with the name contained in the receiver does exist
and is writeable


@end table



@node FilePath-virtual filesystems
@subsection FilePath:@- virtual filesystems

@table @b
@meindex zip
@item zip
Not commented.

@end table

@node FileSegment
@section FileSegment
@clindex FileSegment

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Object
@itemx Category: Language-Implementation
My instances represent sections of files.  I am primarily used by the
compiler to record source code locations.  I am not a part of the normal
Smalltalk-80 kernel; I am specific to the GNU Smalltalk implementation.
@end table

@menu
* FileSegment class-basic::  (class)
* FileSegment class-installing::  (class)
* FileSegment-basic::  (instance)
* FileSegment-equality::  (instance)
* FileSegment-printing::  (instance)
@end menu



@node FileSegment class-basic
@subsection FileSegment class:@- basic

@table @b
@meindex on:@-startingAt:@-for:@-
@item on:@- aFile startingAt:@- startPos for:@- sizeInteger
Create a new FileSegment referring to the contents of the given file,
from the startPos-th byte and for sizeInteger bytes.  Note that
FileSegments should always be created with full paths because
relative paths are interpreted to be relative to the kernel
directory.


@end table



@node FileSegment class-installing
@subsection FileSegment class:@- installing

@table @b
@meindex relocate
@item relocate
Remove the kernel path from all paths that start with it.  Needed to
support $(DESTDIR) and relocatable installation.


@end table



@node FileSegment-basic
@subsection FileSegment:@- basic

@table @b
@meindex asString
@item asString
Answer a String containing the required segment of the file


@meindex copyFrom:@-to:@-
@item copyFrom:@- from to:@- to
Answer a String containing the given subsegment of the file.  As for
streams, from and to are 0-based.


@meindex file
@item file
Answer the File object for the file containing the segment


@meindex fileName
@item fileName
Answer the name of the file containing the segment


@meindex filePos
@item filePos
Answer the position in the file where the segment starts


@meindex relocateFrom:@-map:@-
@item relocateFrom:@- startPath map:@- map
If the path starts with startPath, remove that part of the path.
map is a Dictionary that is used so that equal filenames stay equal,
without increasing the amount of memory that the image uses.


@meindex size
@item size
Answer the length of the segment


@meindex withFileDo:@-
@item withFileDo:@- aBlock
Evaluate aBlock passing it the FileStream in which the segment
identified by the receiver is stored


@end table



@node FileSegment-equality
@subsection FileSegment:@- equality

@table @b
@meindex =
@item = aFileSegment
Answer whether the receiver and aFileSegment are equal.


@meindex hash
@item hash
Answer an hash value for the receiver.


@end table



@node FileSegment-printing
@subsection FileSegment:@- printing

@table @b
@meindex printedFileName
@item printedFileName
Answer a printed representation of the file containing the segment.
While introducing some ambiguity, this representation is compact
eliminates the path for kernel files, and produces a relative path
from the current working directory for other files.


@end table

@node FileStream
@section FileStream
@clindex FileStream

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: FileDescriptor
@itemx Category: Streams-Files
My instances are what conventional programmers think of as files.
My instance creation methods accept the name of a disk file (or any named
file object, such as /dev/rmt0 on UNIX or MTA0:@- on VMS).
@end table

@menu
* FileStream class-file-in::  (class)
* FileStream class-standard streams::  (class)
* FileStream-basic::  (instance)
* FileStream-buffering::  (instance)
* FileStream-compiling::  (instance)
* FileStream-initialize-release::  (instance)
* FileStream-overriding inherited methods::  (instance)
* FileStream-testing::  (instance)
@end menu



@node FileStream class-file-in
@subsection FileStream class:@- file-in

@table @b
@meindex fileIn:@-
@item fileIn:@- aFileName
File in the aFileName file. During a file in operation, global variables
(starting with an uppercase letter) that are not declared yet don't yield
an `unknown variable' error. Instead, they are defined as nil in the
`Undeclared' dictionary (a global variable residing in Smalltalk).
As soon as you add the variable to a namespace (for example by creating
a class) the Association will be removed from Undeclared and reused
in the namespace, so that the old references will automagically point
to the new value.


@meindex fileIn:@-ifMissing:@-
@item fileIn:@- aFileName ifMissing:@- aSymbol
Conditionally do a file in, only if the key (often a class) specified
by 'aSymbol' is not present in the Smalltalk system dictionary already.
During a file in operation, global variables (starting with an
uppercase letter) that are not declared don't yield an `unknown
variable' error. Instead, they are defined as nil in the `Undeclared'
dictionary (a global variable residing in Smalltalk).
As soon as you add the variable to a namespace (for example by creating
a class) the Association will be removed from Undeclared and reused
in the namespace, so that the old references will automagically point
to the new value.


@meindex fileIn:@-ifTrue:@-
@item fileIn:@- aFileName ifTrue:@- aBoolean
Conditionally do a file in, only if the supplied boolean is true.
During a file in operation, global variables (starting with an
uppercase letter) that are not declared don't yield an `unknown
variable' error. Instead, they are defined as nil in the `Undeclared'
dictionary (a global variable residing in Smalltalk).
As soon as you add the variable to a namespace (for example by creating
a class) the Association will be removed from Undeclared and reused
in the namespace, so that the old references will automagically point
to the new value.


@meindex fileIn:@-line:@-from:@-at:@-
@item fileIn:@- aFileName line:@- lineInteger from:@- realFileName at:@- aCharPos
File in the aFileName file giving errors such as if it was loaded
from the given line, file name and starting position (instead of 1).


@meindex generateMakefileOnto:@-
@item generateMakefileOnto:@- aStream
Generate a make file for the file-ins since record was last set to true.
Store it on aStream


@meindex initialize
@item initialize
Private - Initialize the receiver's class variables


@meindex record:@-
@slindex generateMakefileOnto:@-
@item record:@- recordFlag
Set whether Smalltalk should record information about nested file-ins.
When recording is enabled, use #generateMakefileOnto:@- to automatically
generate a valid makefile for the intervening file-ins.


@meindex require:@-
@item require:@- assoc
Conditionally do a file in from the value of assoc, only if the
key of assoc is not present in the Smalltalk system dictionary already.
During a file in operation, global variables (starting with an
uppercase letter) that are not declared don't yield an `unknown
variable' error. Instead, they are defined as nil in the `Undeclared'
dictionary (a global variable residing in Smalltalk).
As soon as you add the variable to a namespace (for example by creating
a class) the Association will be removed from Undeclared and reused
in the namespace, so that the old references will automagically point
to the new value.


@meindex verbose:@-
@item verbose:@- verboseFlag
Set whether Smalltalk should output debugging messages when filing in


@end table



@node FileStream class-standard streams
@subsection FileStream class:@- standard streams

@table @b
@meindex stderr
@item stderr
Answer a FileStream that is attached the Smalltalk program's standard
error file handle, which can be used for error messages and diagnostics
issued by the program.


@meindex stdin
@item stdin
Answer a FileStream that is attached the Smalltalk program's standard
input file handle, which is the normal source of input for the program.


@meindex stdout
@item stdout
Answer a FileStream that is attached the Smalltalk program's standard
output file handle; this is used for normal output from the program.


@end table



@node FileStream-basic
@subsection FileStream:@- basic

@table @b
@meindex bufferStart
@item bufferStart
Private - Answer the offset from the start of the file corresponding
to the beginning of the read buffer.


@meindex copyFrom:@-to:@-
@item copyFrom:@- from to:@- to
Answer the contents of the file between the two given positions


@meindex next
@item next
Return the next character in the file, or nil at eof


@meindex nextPut:@-
@item nextPut:@- aCharacter
Store aCharacter on the file


@meindex peek
@item peek
Return the next character in the file, or nil at eof.
Don't advance the file pointer.


@meindex position
@item position
Answer the zero-based position from the start of the file


@meindex position:@-
@item position:@- n
Set the file pointer to the zero-based position n


@meindex size
@item size
Return the current size of the file, in bytes


@meindex truncate
@item truncate
Truncate the file at the current position


@end table



@node FileStream-buffering
@subsection FileStream:@- buffering

@table @b
@meindex bufferSize
@item bufferSize
Answer the file's current buffer


@meindex bufferSize:@-
@item bufferSize:@- bufSize
Flush the file and set the buffer's size to bufSize


@meindex clean
@item clean
Synchronize the file descriptor's state with the object's state.


@meindex fill
@item fill
Private - Fill the input buffer


@meindex flush
@item flush
Flush the output buffer.


@meindex newBuffer
@item newBuffer
Private - Answer a String to be used as the receiver's buffer


@meindex next:@-bufferAll:@-startingAt:@-
@item next:@- n bufferAll:@- aCollection startingAt:@- pos
Private - Assuming that the buffer has space for n characters, store
n characters of aCollection in the buffer, starting from the pos-th.


@meindex nextAvailable:@-into:@-startingAt:@-
@item nextAvailable:@- anInteger into:@- aCollection startingAt:@- pos
Read up to anInteger bytes from the stream and store them
into aCollection.  Return the number of bytes read.


@meindex nextAvailable:@-putAllOn:@-
@item nextAvailable:@- anInteger putAllOn:@- aStream
Copy up to anInteger bytes from the stream into
aStream.  Return the number of bytes read.


@meindex pendingWrite
@item pendingWrite
Answer whether the output buffer is full.


@end table



@node FileStream-compiling
@subsection FileStream:@- compiling

@table @b
@meindex segmentFrom:@-to:@-
@slindex asString
@item segmentFrom:@- startPos to:@- endPos
Answer an object that, when sent #asString, will yield the result
of sending `copyFrom:@- startPos to:@- endPos' to the receiver


@end table



@node FileStream-initialize-release
@subsection FileStream:@- initialize-release

@table @b
@meindex initialize
@item initialize
Initialize the receiver's instance variables


@end table



@node FileStream-overriding inherited methods
@subsection FileStream:@- overriding inherited methods

@table @b
@meindex next:@-putAll:@-startingAt:@-
@item next:@- n putAll:@- aCollection startingAt:@- pos
Write n values from aCollection, the first being at pos.


@meindex nextLine
@item nextLine
Returns a collection of the same type that the stream accesses, containing
the next line up to the next new-line character.  Returns the entire rest of the
stream's contents if no new-line character is found.


@meindex nextPutAllOn:@-
@item nextPutAllOn:@- aStream
Put all the characters of the receiver in aStream.


@meindex upTo:@-
@item upTo:@- aCharacter
Returns a collection of the same type that the stream accesses,
containing data up to aCharacter.  Returns the entire rest of
the stream's contents if no such character is found.


@end table



@node FileStream-testing
@subsection FileStream:@- testing

@table @b
@meindex atEnd
@item atEnd
Answer whether data has come to an end


@end table

@node Float
@section Float
@clindex Float

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Number
@itemx Category: Language-Data types
My instances represent floating point numbers that have arbitrary
precision.  Besides the standard numerical operations, they provide
transcendental operations too.  They implement IEEE-754 correctly
if the hardware supports it.
@end table

@menu
* Float class-byte-order dependancies::  (class)
* Float class-characterization::  (class)
* Float-arithmetic::  (instance)
* Float-basic::  (instance)
* Float-built ins::  (instance)
* Float-coercing::  (instance)
* Float-coercion::  (instance)
* Float-comparing::  (instance)
* Float-compiler::  (instance)
* Float-converting::  (instance)
* Float-floating point::  (instance)
* Float-misc math::  (instance)
* Float-printing::  (instance)
* Float-storing::  (instance)
* Float-testing::  (instance)
* Float-testing functionality::  (instance)
* Float-transcendental operations::  (instance)
* Float-truncation and round off::  (instance)
@end menu



@node Float class-byte-order dependancies
@subsection Float class:@- byte-order dependancies

@table @b
@meindex signByte
@item signByte
Answer the byte of the receiver that contains the sign bit


@end table



@node Float class-characterization
@subsection Float class:@- characterization

@table @b
@meindex denormalized
@item denormalized
Answer whether instances of the receiver can be in denormalized
form.


@meindex e
@item e
Returns the value of e. Hope is that it is precise enough


@meindex epsilon
@item epsilon
Return the smallest Float x for which is 1 + x ~= 1


@meindex fmin
@item fmin
Return the smallest Float that is > 0.


@meindex fminDenormalized
@item fminDenormalized
Return the smallest Float that is > 0 if denormalized values
are supported, else return 0.


@meindex ln10
@item ln10
Returns the value of ln 10. Hope is that it is precise enough


@meindex log10Base2
@item log10Base2
Returns the value of log2 10. Hope is that it is precise enough


@meindex pi
@item pi
Returns the value of pi. Hope is that it is precise enough


@meindex radix
@item radix
Answer the base in which computations between instances of the receiver
are made.  This should be 2 on about every known computer, so GNU
Smalltalk always answers 2.


@end table



@node Float-arithmetic
@subsection Float:@- arithmetic

@table @b
@meindex integerPart
@item integerPart
Return the receiver's integer part


@meindex negated
@item negated
Return the negation of the receiver.  Unlike 0-self, this converts
correctly signed zeros.


@meindex raisedToInteger:@-
@item raisedToInteger:@- anInteger
Return self raised to the anInteger-th power


@end table



@node Float-basic
@subsection Float:@- basic

@table @b
@meindex hash
@item hash
Answer an hash value for the receiver.  Not-a-number values do not
have a hash code and cannot be put in a hashed collection.


@end table



@node Float-built ins
@subsection Float:@- built ins

@table @b
@meindex arcCos
@item arcCos
Answer the arc-cosine of the receiver


@meindex arcSin
@item arcSin
Answer the arc-sine of the receiver


@meindex arcTan
@item arcTan
Answer the arc-tangent of the receiver


@meindex ceiling
@item ceiling
Answer the integer part of the receiver, truncated towards +infinity


@meindex cos
@item cos
Answer the cosine of the receiver


@meindex exp
@item exp
Answer 'e' (2.718281828459...) raised to the receiver


@meindex floor
@item floor
Answer the integer part of the receiver, truncated towards -infinity


@meindex ln
@item ln
Answer the logarithm of the receiver in base 'e' (2.718281828459...)


@meindex primHash
@item primHash
Private - Answer an hash value for the receiver


@meindex raisedTo:@-
@item raisedTo:@- aNumber
Answer the receiver raised to its aNumber power


@meindex sin
@item sin
Answer the sine of the receiver


@meindex sqrt
@item sqrt
Answer the square root of the receiver


@meindex tan
@item tan
Answer the tangent of the receiver


@end table



@node Float-coercing
@subsection Float:@- coercing

@table @b
@meindex asExactFraction
@item asExactFraction
Convert the receiver into a fraction with optimal approximation,
but with usually huge terms.


@meindex asFraction
@item asFraction
Convert the receiver into a fraction with a good (but undefined)
approximation


@meindex truncated
@item truncated
Convert the receiver to an Integer.  Only used for LargeIntegers,
there are primitives for the other cases.


@end table



@node Float-coercion
@subsection Float:@- coercion

@table @b
@meindex asCNumber
@item asCNumber
Convert the receiver to a kind of number that is understood by
the C call-out mechanism.


@end table



@node Float-comparing
@subsection Float:@- comparing

@table @b
@meindex max:@-
@item max:@- aNumber
Answer the maximum between the receiver and aNumber.  Redefine
in subclasses if necessary to ensure that if either self or
aNumber is a NaN, it is always answered.


@meindex min:@-
@item min:@- aNumber
Answer the minimum between the receiver and aNumber.  Redefine
in subclasses if necessary to ensure that if either self or
aNumber is a NaN, it is always answered.


@meindex withSignOf:@-
@item withSignOf:@- aNumber
Answer the receiver, with its sign possibly changed to match
that of aNumber.


@end table



@node Float-compiler
@subsection Float:@- compiler

@table @b
@meindex literalEquals:@-
@item literalEquals:@- anObject
Not commented.

@meindex literalHash
@item literalHash
Not commented.

@end table



@node Float-converting
@subsection Float:@- converting

@table @b
@meindex half
@item half
Answer 0.5 in the representation of the receiver


@end table



@node Float-floating point
@subsection Float:@- floating point

@table @b
@meindex predecessor
@item predecessor
Not commented.

@meindex successor
@item successor
Not commented.

@end table



@node Float-misc math
@subsection Float:@- misc math

@table @b
@meindex log:@-
@item log:@- aNumber
Answer log base aNumber of the receiver


@end table



@node Float-printing
@subsection Float:@- printing

@table @b
@meindex printOn:@-
@item printOn:@- aStream
Print a representation of the receiver on aStream


@end table



@node Float-storing
@subsection Float:@- storing

@table @b
@meindex isLiteralObject
@item isLiteralObject
Answer whether the receiver is expressible as a Smalltalk literal.


@meindex storeLiteralOn:@-
@item storeLiteralOn:@- aStream
Store on aStream some Smalltalk code which compiles to the receiver


@meindex storeOn:@-
@item storeOn:@- aStream
Print a representation of the receiver on aStream


@end table



@node Float-testing
@subsection Float:@- testing

@table @b
@meindex isExact
@item isExact
Answer whether the receiver performs exact arithmetic.  Floats
do not.


@meindex isFinite
@item isFinite
Answer whether the receiver does not represent infinity, nor a NaN


@meindex isInfinite
@item isInfinite
Answer whether the receiver represents positive or negative infinity


@meindex isNaN
@item isNaN
Answer whether the receiver represents a NaN


@meindex negative
@item negative
Answer whether the receiver is negative


@meindex positive
@item positive
Answer whether the receiver is positive.  Negative zero is
not positive, so the definition is not simply >= 0.


@meindex sign
@item sign
Answer 1 if the receiver is greater than 0, -1 if less than 0,
else 0.  Negative zero is the same as positive zero.


@meindex strictlyPositive
@item strictlyPositive
Answer whether the receiver is > 0


@end table



@node Float-testing functionality
@subsection Float:@- testing functionality

@table @b
@meindex isFloat
@item isFloat
Answer `true'.

@end table



@node Float-transcendental operations
@subsection Float:@- transcendental operations

@table @b
@meindex asFloat
@item asFloat
Just defined for completeness.  Return the receiver.


@meindex ceilingLog:@-
@item ceilingLog:@- radix
Answer (self log:@- radix) ceiling.  Use exact arithmetic if radix
is not a floating point value.


@meindex estimatedLog
@item estimatedLog
Answer an estimate of (self abs floorLog:@- 10)


@meindex floorLog:@-
@item floorLog:@- radix
Answer (self log:@- radix) floor.  Use exact arithmetic if radix
is not a floating point value.


@meindex log
@item log
Answer log base 10 of the receiver.


@end table



@node Float-truncation and round off
@subsection Float:@- truncation and round off

@table @b
@meindex rounded
@item rounded
Answer the receiver, rounded to the nearest integer


@end table

@node FloatD
@section FloatD
@clindex FloatD

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Float
@itemx Category: Language-Data types
My instances represent floating point numbers that have the same
accuracy as C's "double" numbers.
@end table

@menu
* FloatD class-byte-order dependencies::  (class)
* FloatD class-characterization::  (class)
* FloatD class-converting::  (class)
* FloatD-built ins::  (instance)
* FloatD-coercing::  (instance)
* FloatD-converting::  (instance)
@end menu



@node FloatD class-byte-order dependencies
@subsection FloatD class:@- byte-order dependencies

@table @b
@meindex fromBytes:@-
@item fromBytes:@- aByteArray
Answer a float with the bytes in aByteArray, which are in
big-endian format.


@meindex signByte
@item signByte
Answer the byte of the receiver that contains the sign bit


@end table



@node FloatD class-characterization
@subsection FloatD class:@- characterization

@table @b
@meindex decimalDigits
@item decimalDigits
Return the number of decimal digits of precision for a FloatD.
Technically, if P is the precision for the representation, then
the decimal precision Q is the maximum number of decimal digits
such that any floating point number with Q base 10 digits can be
rounded to a floating point number with P base 2 digits and back
again, without change to the Q decimal digits.


@meindex emax
@item emax
Return the maximum allowable exponent for a FloatD that is finite.


@meindex emin
@item emin
Return the maximum allowable exponent for a FloatD that is finite.


@meindex fmax
@item fmax
Return the largest normalized FloatD that is not infinite.


@meindex fminNormalized
@item fminNormalized
Return the smallest normalized FloatD that is > 0


@meindex infinity
@item infinity
Return a FloatD that represents positive infinity.


@meindex nan
@item nan
Return a FloatD that represents a mathematically indeterminate value
(e.g. Inf - Inf, Inf / Inf).


@meindex negativeInfinity
@item negativeInfinity
Return a FloatD that represents negative infinity.


@meindex precision
@item precision
Answer the number of bits in the mantissa. 1 + (2^-precision) = 1


@end table



@node FloatD class-converting
@subsection FloatD class:@- converting

@table @b
@meindex coerce:@-
@item coerce:@- aNumber
Answer aNumber converted to a FloatD


@end table



@node FloatD-built ins
@subsection FloatD:@- built ins

@table @b
@meindex *
@item * arg
Multiply the receiver and arg and answer another Number


@meindex +
@item + arg
Sum the receiver and arg and answer another Number


@meindex -
@item - arg
Subtract arg from the receiver and answer another Number


@meindex /
@item / arg
Divide the receiver by arg and answer another FloatD


@meindex <
@item < arg
Answer whether the receiver is less than arg


@meindex <=
@item <= arg
Answer whether the receiver is less than or equal to arg


@meindex =
@item = arg
Answer whether the receiver is equal to arg


@meindex >
@item > arg
Answer whether the receiver is greater than arg


@meindex >=
@item >= arg
Answer whether the receiver is greater than or equal to arg


@meindex asFloatE
@item asFloatE
Answer the receiver converted to a FloatE


@meindex asFloatQ
@item asFloatQ
Answer the receiver converted to a FloatQ


@meindex exponent
@item exponent
Answer the exponent of the receiver in mantissa*2^exponent
representation ( |mantissa|<=1 )


@meindex fractionPart
@item fractionPart
Answer the fractional part of the receiver


@meindex timesTwoPower:@-
@item timesTwoPower:@- arg
Answer the receiver multiplied by 2^arg


@meindex truncated
@item truncated
Truncate the receiver towards zero and answer the result


@meindex ~=
@item ~= arg
Answer whether the receiver is not equal to arg


@end table



@node FloatD-coercing
@subsection FloatD:@- coercing

@table @b
@meindex asFloatD
@item asFloatD
Just defined for completeness.  Return the receiver.


@meindex coerce:@-
@item coerce:@- aNumber
Coerce aNumber to the receiver's class


@meindex generality
@item generality
Answer the receiver's generality


@meindex unity
@item unity
Coerce 1 to the receiver's class


@meindex zero
@item zero
Coerce 0 to the receiver's class


@end table



@node FloatD-converting
@subsection FloatD:@- converting

@table @b
@meindex half
@item half
Coerce 0.5 to the receiver's class


@end table

@node FloatE
@section FloatE
@clindex FloatE

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Float
@itemx Category: Language-Data types
My instances represent floating point numbers that have the same
accuracy as C's "float" numbers.
@end table

@menu
* FloatE class-byte-order dependancies::  (class)
* FloatE class-byte-order dependencies::  (class)
* FloatE class-characterization::  (class)
* FloatE class-converting::  (class)
* FloatE-built ins::  (instance)
* FloatE-coercing::  (instance)
* FloatE-converting::  (instance)
@end menu



@node FloatE class-byte-order dependancies
@subsection FloatE class:@- byte-order dependancies

@table @b
@meindex signByte
@item signByte
Answer the byte of the receiver that contains the sign bit


@end table



@node FloatE class-byte-order dependencies
@subsection FloatE class:@- byte-order dependencies

@table @b
@meindex fromBytes:@-
@item fromBytes:@- aByteArray
Answer a float with the bytes in aByteArray, which are in
big-endian format.


@end table



@node FloatE class-characterization
@subsection FloatE class:@- characterization

@table @b
@meindex decimalDigits
@item decimalDigits
Return the number of decimal digits of precision for a FloatE.
Technically, if P is the precision for the representation, then
the decimal precision Q is the maximum number of decimal digits
such that any floating point number with Q base 10 digits can be
rounded to a floating point number with P base 2 digits and back
again, without change to the Q decimal digits.


@meindex e
@item e
Returns the value of e. Hope is that it is precise enough


@meindex emax
@item emax
Return the maximum allowable exponent for a FloatE that is finite.


@meindex emin
@item emin
Return the maximum allowable exponent for a FloatE that is finite.


@meindex fmax
@item fmax
Return the largest normalized FloatE that is not infinite.


@meindex fminNormalized
@item fminNormalized
Return the smallest normalized FloatE that is > 0


@meindex infinity
@item infinity
Return a FloatE that represents positive infinity.


@meindex ln10
@item ln10
Returns the value of ln 10. Hope is that it is precise enough


@meindex log10Base2
@item log10Base2
Returns the value of log2 10. Hope is that it is precise enough


@meindex nan
@item nan
Return a FloatE that represents a mathematically indeterminate value
(e.g. Inf - Inf, Inf / Inf).


@meindex negativeInfinity
@item negativeInfinity
Return a FloatE that represents negative infinity.


@meindex pi
@item pi
Returns the value of pi. Hope is that it is precise enough


@meindex precision
@item precision
Answer the number of bits in the mantissa. 1 + (2^-precision) = 1


@end table



@node FloatE class-converting
@subsection FloatE class:@- converting

@table @b
@meindex coerce:@-
@item coerce:@- aNumber
Answer aNumber converted to a FloatE


@end table



@node FloatE-built ins
@subsection FloatE:@- built ins

@table @b
@meindex *
@item * arg
Multiply the receiver and arg and answer another Number


@meindex +
@item + arg
Sum the receiver and arg and answer another Number


@meindex -
@item - arg
Subtract arg from the receiver and answer another Number


@meindex /
@item / arg
Divide the receiver by arg and answer another FloatE


@meindex <
@item < arg
Answer whether the receiver is less than arg


@meindex <=
@item <= arg
Answer whether the receiver is less than or equal to arg


@meindex =
@item = arg
Answer whether the receiver is equal to arg


@meindex >
@item > arg
Answer whether the receiver is greater than arg


@meindex >=
@item >= arg
Answer whether the receiver is greater than or equal to arg


@meindex asFloatD
@item asFloatD
Answer the receiver converted to a FloatD


@meindex asFloatQ
@item asFloatQ
Answer the receiver converted to a FloatQ


@meindex exponent
@item exponent
Answer the exponent of the receiver in mantissa*2^exponent
representation ( |mantissa|<=1 )


@meindex fractionPart
@item fractionPart
Answer the fractional part of the receiver


@meindex timesTwoPower:@-
@item timesTwoPower:@- arg
Answer the receiver multiplied by 2^arg


@meindex truncated
@item truncated
Truncate the receiver towards zero and answer the result


@meindex ~=
@item ~= arg
Answer whether the receiver is not equal to arg


@end table



@node FloatE-coercing
@subsection FloatE:@- coercing

@table @b
@meindex asFloatE
@item asFloatE
Just defined for completeness.  Return the receiver.


@meindex coerce:@-
@item coerce:@- aNumber
Coerce aNumber to the receiver's class


@meindex generality
@item generality
Answer the receiver's generality


@meindex unity
@item unity
Coerce 1 to the receiver's class


@meindex zero
@item zero
Coerce 0 to the receiver's class


@end table



@node FloatE-converting
@subsection FloatE:@- converting

@table @b
@meindex half
@item half
Coerce 0.5 to the receiver's class


@end table

@node FloatQ
@section FloatQ
@clindex FloatQ

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Float
@itemx Category: Language-Data types
My instances represent floating point numbers that have the same
accuracy as C's "long double" numbers.
@end table

@menu
* FloatQ class-byte-order dependancies::  (class)
* FloatQ class-characterization::  (class)
* FloatQ class-converting::  (class)
* FloatQ-built ins::  (instance)
* FloatQ-coercing::  (instance)
* FloatQ-converting::  (instance)
@end menu



@node FloatQ class-byte-order dependancies
@subsection FloatQ class:@- byte-order dependancies

@table @b
@meindex signByte
@item signByte
Answer the byte of the receiver that contains the sign bit


@end table



@node FloatQ class-characterization
@subsection FloatQ class:@- characterization

@table @b
@meindex decimalDigits
@item decimalDigits
Return the number of decimal digits of precision for a FloatQ.
Technically, if P is the precision for the representation, then
the decimal precision Q is the maximum number of decimal digits
such that any floating point number with Q base 10 digits can be
rounded to a floating point number with P base 2 digits and back
again, without change to the Q decimal digits.


@meindex e
@item e
Returns the value of e. Hope is that it is precise enough


@meindex emax
@item emax
Return the maximum allowable exponent for a FloatQ that is finite.


@meindex emin
@item emin
Return the maximum allowable exponent for a FloatQ that is finite.


@meindex fmax
@item fmax
Return the largest normalized FloatQ that is not infinite.


@meindex fminNormalized
@item fminNormalized
Return the smallest normalized FloatQ that is > 0


@meindex infinity
@item infinity
Return a FloatQ that represents positive infinity.


@meindex ln10
@item ln10
Returns the value of ln 10. Hope is that it is precise enough


@meindex log10Base2
@item log10Base2
Returns the value of log2 10. Hope is that it is precise enough


@meindex nan
@item nan
Return a FloatQ that represents a mathematically indeterminate value
(e.g. Inf - Inf, Inf / Inf).


@meindex negativeInfinity
@item negativeInfinity
Return a FloatQ that represents negative infinity.


@meindex pi
@item pi
Returns the value of pi. Hope is that it is precise enough


@meindex precision
@item precision
Answer the number of bits in the mantissa. 1 + (2^-precision) = 1


@end table



@node FloatQ class-converting
@subsection FloatQ class:@- converting

@table @b
@meindex coerce:@-
@item coerce:@- aNumber
Answer aNumber converted to a FloatQ


@end table



@node FloatQ-built ins
@subsection FloatQ:@- built ins

@table @b
@meindex *
@item * arg
Multiply the receiver and arg and answer another Number


@meindex +
@item + arg
Sum the receiver and arg and answer another Number


@meindex -
@item - arg
Subtract arg from the receiver and answer another Number


@meindex /
@item / arg
Divide the receiver by arg and answer another FloatQ


@meindex <
@item < arg
Answer whether the receiver is less than arg


@meindex <=
@item <= arg
Answer whether the receiver is less than or equal to arg


@meindex =
@item = arg
Answer whether the receiver is equal to arg


@meindex >
@item > arg
Answer whether the receiver is greater than arg


@meindex >=
@item >= arg
Answer whether the receiver is greater than or equal to arg


@meindex asFloatD
@item asFloatD
Answer the receiver converted to a FloatD


@meindex asFloatE
@item asFloatE
Answer the receiver converted to a FloatE


@meindex exponent
@item exponent
Answer the exponent of the receiver in mantissa*2^exponent
representation ( |mantissa|<=1 )


@meindex fractionPart
@item fractionPart
Answer the fractional part of the receiver


@meindex timesTwoPower:@-
@item timesTwoPower:@- arg
Answer the receiver multiplied by 2^arg


@meindex truncated
@item truncated
Truncate the receiver towards zero and answer the result


@meindex ~=
@item ~= arg
Answer whether the receiver is not equal to arg


@end table



@node FloatQ-coercing
@subsection FloatQ:@- coercing

@table @b
@meindex asFloatQ
@item asFloatQ
Just defined for completeness.  Return the receiver.


@meindex coerce:@-
@item coerce:@- aNumber
Coerce aNumber to the receiver's class


@meindex generality
@item generality
Answer the receiver's generality


@meindex unity
@item unity
Coerce 1 to the receiver's class


@meindex zero
@item zero
Coerce 0 to the receiver's class


@end table



@node FloatQ-converting
@subsection FloatQ:@- converting

@table @b
@meindex half
@item half
Coerce 0.5 to the receiver's class


@end table

@node Fraction
@section Fraction
@clindex Fraction

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Number
@itemx Category: Language-Data types
 I represent rational numbers in the form (p/q) where p and q are integers.
The arithmetic operations  *, +, -, /,  on fractions, all return a reduced 
fraction.
@end table

@menu
* Fraction class-converting::  (class)
* Fraction class-instance creation::  (class)
* Fraction-accessing::  (instance)
* Fraction-arithmetic::  (instance)
* Fraction-coercing::  (instance)
* Fraction-coercion::  (instance)
* Fraction-comparing::  (instance)
* Fraction-converting::  (instance)
* Fraction-optimized cases::  (instance)
* Fraction-printing::  (instance)
* Fraction-testing::  (instance)
@end menu



@node Fraction class-converting
@subsection Fraction class:@- converting

@table @b
@meindex coerce:@-
@item coerce:@- aNumber
Answer aNumber converted to a Fraction


@end table



@node Fraction class-instance creation
@subsection Fraction class:@- instance creation

@table @b
@meindex initialize
@item initialize
Initialize the receiver's class variables


@meindex numerator:@-denominator:@-
@item numerator:@- nInteger denominator:@- dInteger
Answer a new instance of fraction (nInteger/dInteger)


@end table



@node Fraction-accessing
@subsection Fraction:@- accessing

@table @b
@meindex denominator
@item denominator
Answer the receiver's denominator


@meindex numerator
@item numerator
Answer the receiver's numerator


@end table



@node Fraction-arithmetic
@subsection Fraction:@- arithmetic

@table @b
@meindex *
@item * aNumber
Multiply two numbers and answer the result.


@meindex +
@item + aNumber
Sum two numbers and answer the result.


@meindex -
@item - aNumber
Subtract aNumber from the receiver and answer the result.


@meindex /
@item / aNumber
Divide the receiver by aNumber and answer the result.


@meindex //
@item // aNumber
Return the integer quotient of dividing the receiver by aNumber with
truncation towards negative infinity.


@meindex \\
@item \\ aNumber
Return the remainder from dividing the receiver by aNumber, (using //).


@meindex estimatedLog
@item estimatedLog
Answer an estimate of (self abs floorLog:@- 10)


@end table



@node Fraction-coercing
@subsection Fraction:@- coercing

@table @b
@meindex ceiling
@item ceiling
Truncate the receiver towards positive infinity
and return the truncated result


@meindex coerce:@-
@item coerce:@- aNumber
Coerce aNumber to the receiver's class


@meindex floor
@item floor
Truncate the receiver towards negative infinity
and return the truncated result


@meindex generality
@item generality
Return the receiver's generality


@meindex truncated
@item truncated
Truncate the receiver and return the truncated result


@meindex unity
@item unity
Coerce 1 to the receiver's class


@meindex zero
@item zero
Coerce 0 to the receiver's class


@end table



@node Fraction-coercion
@subsection Fraction:@- coercion

@table @b
@meindex asCNumber
@item asCNumber
Convert the receiver to a kind of number that is understood by
the C call-out mechanism.


@end table



@node Fraction-comparing
@subsection Fraction:@- comparing

@table @b
@meindex <
@item < arg
Test if the receiver is less than arg.


@meindex <=
@item <= arg
Test if the receiver is less than or equal to arg.


@meindex =
@item = arg
Test if the receiver equals arg.


@meindex >
@item > arg
Test if the receiver is more than arg.


@meindex >=
@item >= arg
Test if the receiver is greater than or equal to arg.


@meindex hash
@item hash
Answer an hash value for the receiver


@end table



@node Fraction-converting
@subsection Fraction:@- converting

@table @b
@meindex asExactFraction
@item asExactFraction
Answer the receiver, it is already a Fraction


@meindex asFloatD
@item asFloatD
Answer the receiver converted to a FloatD


@meindex asFloatE
@item asFloatE
Answer the receiver converted to a FloatD


@meindex asFloatQ
@item asFloatQ
Answer the receiver converted to a FloatD


@meindex asFraction
@item asFraction
Answer the receiver, it is already a Fraction


@meindex integerPart
@item integerPart
Answer the integer part of the receiver, expressed as a Fraction


@end table



@node Fraction-optimized cases
@subsection Fraction:@- optimized cases

@table @b
@meindex negated
@item negated
Return the receiver, with its sign changed.


@meindex raisedToInteger:@-
@item raisedToInteger:@- anInteger
Return self raised to the anInteger-th power.


@meindex reciprocal
@item reciprocal
Return the reciprocal of the receiver


@meindex sqrt
@item sqrt
Return the square root of the receiver.


@meindex squared
@item squared
Return the square of the receiver.


@end table



@node Fraction-printing
@subsection Fraction:@- printing

@table @b
@meindex printOn:@-
@item printOn:@- aStream
Print a representation of the receiver on aStream


@meindex storeOn:@-
@item storeOn:@- aStream
Store Smalltalk code compiling to the receiver on aStream


@end table



@node Fraction-testing
@subsection Fraction:@- testing

@table @b
@meindex isRational
@item isRational
Answer whether the receiver is rational - true


@end table

@node Generator
@section Generator
@clindex Generator

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Stream
@itemx Category: Streams-Generators
A Generator object provides a way to use blocks to define a Stream
of many return values.  The return values are computed one at a time,
as needed, and hence need not even be finite.

A generator block is converted to a Generator with "Generator
on:@- [...]".  The Generator itself is passed to the block,
and as soon as a message like #next, #peek, #atEnd or #peekFor:@- is
sent to the generator, execution of the block starts/resumes and
goes on until the generator's #yield:@- method is called:@- then the
argument of #yield:@- will be the Generator's next element.  If the
block goes on to the end without calling #yield:@-, the Generator
will produce no more elements and #atEnd will return true.

You could achieve the effect of generators manually by writing your
own class and storing all the local variables of the generator as
instance variables.  For example, returning a list of integers could
be done by setting a variable to 0, and having the #next method
increment it and return it.  However, for a moderately complicated
generator, writing a corresponding class would be much messier (and
might lead to code duplication or inefficiency if you want to support
#peek, #peekFor:@- and/or #atEnd):@- in general, providing a #do:@--like
interface is easy, but not providing a Stream-like one (think binary
trees).

The idea of generators comes from other programming languages, in
particular this interface looks much like Scheme streams and Python
generators.  But Python in turn mutuated the idea for example from
Icon, where the idea of generators is central.  In Icon, every
expression and function call behaves like a generator, and if a
statement manages scalars, it automatically uses up all the results
that the corresponding generator provides; on the other hand, Icon
does not represent generators as first-class objects like Python and
Smalltalk do.
@end table

@menu
* Generator class-instance creation::  (class)
* Generator-stream protocol::  (instance)
@end menu



@node Generator class-instance creation
@subsection Generator class:@- instance creation

@table @b
@meindex inject:@-into:@-
@item inject:@- aValue into:@- aBlock
Return an infinite generator; the first item is aValue, the following
items are obtained by passing the previous value to aBlock.


@meindex on:@-
@slindex next
@slindex yield:@-
@item on:@- aBlock
Return a generator and pass it to aBlock.  When #next is sent
to the generator, the block will start execution, and will be
suspended again as soon as #yield:@- is sent from the block to
the generator.


@meindex on:@-do:@-
@item on:@- aCollection do:@- aBlock
Return a generator; for each item of aCollection, evaluate aBlock
passing the generator and the item.


@end table



@node Generator-stream protocol
@subsection Generator:@- stream protocol

@table @b
@meindex atEnd
@item atEnd
Answer whether more data can be generated.


@meindex next
@item next
Evaluate the generator until it generates the next value or
decides that nothing else can be generated.


@meindex peek
@slindex peek
@slindex next
@item peek
Evaluate the generator until it generates the next value or
decides that nothing else can be generated, and save the value
so that #peek or #next will return it again.


@meindex peekFor:@-
@slindex peek
@slindex next
@item peekFor:@- anObject
Evaluate the generator until it generates the next value or
decides that nothing else can be generated, and if it is not equal
to anObject, save the value so that #peek or #next will return it
again.


@meindex yield:@-
@item yield:@- anObject
When entering from the generator the code in the block is executed and
control flow goes back to the consumer.  When entering from the consumer,
the code after the continuation is executed, which resumes execution of
the generator block.


@end table

@node Getopt
@section Getopt
@clindex Getopt

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Object
@itemx Category: Language-Data types
This class is usually not instantiated.  Class methods provide a way
to parse command lines from Smalltalk.
@end table

@menu
* Getopt class-instance creation::  (class)
@end menu



@node Getopt class-instance creation
@subsection Getopt class:@- instance creation

@table @b
@meindex parse:@-with:@-do:@-
@slindex parse:@-with:@-do:@-ifError:@-
@item parse:@- args with:@- pattern do:@- actionBlock
Parse the command-line arguments in args according to the syntax specified in
pattern.  For every command-line option found, the two-argument block
actionBlock is evaluated passing the option name and the argument.  For
file names (or in general, other command-line arguments than options) the
block's first argument will be nil.  For options without arguments, or with
unspecified optional arguments, the block's second argument will be nil.
The option name will be passed as a character object for short options,
and as a string for long options.

If an error is found, nil is returned.  For more information on the syntax
of pattern, see #parse:@-with:@-do:@-ifError:@-.


@meindex parse:@-with:@-do:@-ifError:@-
@item parse:@- args with:@- pattern do:@- actionBlock ifError:@- errorBlock
Parse the command-line arguments in args according to the syntax specified in
pattern.  For every command-line option found, the two-argument block
actionBlock is evaluated passing the option name and the argument.  For
file names (or in general, other command-line arguments than options) the
block's first argument will be nil.  For options without arguments, or with
unspecified optional arguments, the block's second argument will be nil.
The option name will be passed as a character object for short options,
and as a string for long options.

If an error is found, the parsing is interrupted, errorBlock is evaluated,
and the returned value is answered.

Every whitespace-separated part (`word') of pattern specifies a command-line
option.  If a word ends with a colon, the option will have a mandatory argument.
If a word ends with two colons, the option will have an optional argument.
Before the colons, multiple option names (either short names like `-l' or
long names like `--long') can be specified.  Before passing the option to
actionBlock, the name will be canonicalized to the last one.

Prefixes of long options are accepted as long as they're unique, and they are
canonicalized to the full name before passing it to actionBlock.  Additionally,
the full name of an option is accepted even if it is the prefix of a longer
option.

Mandatory arguments can appear in the next argument, or in the same argument
(separated by an = for arguments to long options).  Optional arguments must
appear in the same argument.


@end table

@node Halt
@section Halt
@clindex Halt

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Exception
@itemx Category: Language-Exceptions
Halt represents a resumable error, usually a bug.
@end table

@menu
* Halt-description::  (instance)
@end menu



@node Halt-description
@subsection Halt:@- description

@table @b
@meindex description
@item description
Answer a textual description of the exception.


@meindex isResumable
@slindex halt
@item isResumable
Answer true.  #halt exceptions are by default resumable.


@end table

@node HashedCollection
@section HashedCollection
@clindex HashedCollection

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Collection
@itemx Category: Collections-Unordered
I am an hashed collection that can store objects uniquely and
give fast responses on their presence in the collection.
@end table

@menu
* HashedCollection class-instance creation::  (class)
* HashedCollection-accessing::  (instance)
* HashedCollection-builtins::  (instance)
* HashedCollection-copying::  (instance)
* HashedCollection-enumerating the elements of a collection::  (instance)
* HashedCollection-rehashing::  (instance)
* HashedCollection-removing::  (instance)
* HashedCollection-saving and loading::  (instance)
* HashedCollection-storing::  (instance)
* HashedCollection-testing collections::  (instance)
@end menu



@node HashedCollection class-instance creation
@subsection HashedCollection class:@- instance creation

@table @b
@meindex new
@item new
Answer a new instance of the receiver with a default size


@meindex new:@-
@item new:@- anInteger
Answer a new instance of the receiver with the given capacity


@meindex withAll:@-
@item withAll:@- aCollection
Answer a collection whose elements are all those in aCollection


@end table



@node HashedCollection-accessing
@subsection HashedCollection:@- accessing

@table @b
@meindex add:@-
@item add:@- newObject
Add newObject to the set, if and only if the set doesn't already contain
an occurrence of it. Don't fail if a duplicate is found. Answer anObject


@meindex at:@-
@item at:@- index
This method should not be called for instances of this class.

@meindex at:@-put:@-
@item at:@- index put:@- value
This method should not be called for instances of this class.

@end table



@node HashedCollection-builtins
@subsection HashedCollection:@- builtins

@table @b
@meindex primAt:@-
@item primAt:@- anIndex
Private - Answer the anIndex-th item of the hash table for the receiver.
Using this instead of basicAt:@- allows for easier changes in the
representation


@meindex primAt:@-put:@-
@item primAt:@- anIndex put:@- value
Private - Store value in the anIndex-th item of the hash table for the
receiver. Using this instead of basicAt:@-put:@- allows for easier
changes in the representation


@meindex primSize
@item primSize
Private - Answer the size of the hash table for the receiver.
Using this instead of basicSize allows for easier changes
in the representation


@end table



@node HashedCollection-copying
@subsection HashedCollection:@- copying

@table @b
@meindex deepCopy
@item deepCopy
Returns a deep copy of the receiver (the instance variables are
copies of the receiver's instance variables)


@meindex shallowCopy
@item shallowCopy
Returns a shallow copy of the receiver (the instance variables are
not copied)


@end table



@node HashedCollection-enumerating the elements of a collection
@subsection HashedCollection:@- enumerating the elements of a collection

@table @b
@meindex do:@-
@item do:@- aBlock
Enumerate all the non-nil members of the set


@end table



@node HashedCollection-rehashing
@subsection HashedCollection:@- rehashing

@table @b
@meindex rehash
@item rehash
Rehash the receiver


@end table



@node HashedCollection-removing
@subsection HashedCollection:@- removing

@table @b
@meindex remove:@-ifAbsent:@-
@item remove:@- oldObject ifAbsent:@- anExceptionBlock
Remove oldObject from the set. If it is found, answer oldObject.
Otherwise, evaluate anExceptionBlock and answer its value.


@end table



@node HashedCollection-saving and loading
@subsection HashedCollection:@- saving and loading

@table @b
@meindex postLoad
@item postLoad
Called after loading an object; rehash the collection because identity
objects will most likely mutate their hashes.


@meindex postStore
@slindex postLoad
@item postStore
Called after an object is dumped.  Do nothing -- necessary because
by default this calls #postLoad by default


@end table



@node HashedCollection-storing
@subsection HashedCollection:@- storing

@table @b
@meindex storeOn:@-
@item storeOn:@- aStream
Store on aStream some Smalltalk code which compiles to the receiver


@end table



@node HashedCollection-testing collections
@subsection HashedCollection:@- testing collections

@table @b
@meindex =
@item = aHashedCollection
Returns true if the two sets have the same membership, false if not


@meindex capacity
@item capacity
Answer how many elements the receiver can hold before having to grow.


@meindex hash
@item hash
Return the hash code for the members of the set.  Since order is
unimportant, we use a commutative operator to compute the hash value.


@meindex includes:@-
@item includes:@- anObject
Answer whether the receiver contains an instance of anObject.


@meindex isEmpty
@item isEmpty
Answer whether the receiver is empty.


@meindex occurrencesOf:@-
@item occurrencesOf:@- anObject
Return the number of occurrences of anObject.  Since we're a set, this
is either 0 or 1.  Nil is never directly in the set, so we special case
it (the result is always 1).


@meindex size
@item size
Answer the receiver's size


@end table

@node HomedAssociation
@section HomedAssociation
@clindex HomedAssociation

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Association
@itemx Category: Language-Data types
My instances represent know about their parent namespace, which
is of use when implementing weak collections and finalizations.
@end table

@menu
* HomedAssociation class-basic::  (class)
* HomedAssociation-accessing::  (instance)
* HomedAssociation-finalization::  (instance)
* HomedAssociation-storing::  (instance)
@end menu



@node HomedAssociation class-basic
@subsection HomedAssociation class:@- basic

@table @b
@meindex key:@-value:@-environment:@-
@item key:@- aKey value:@- aValue environment:@- aNamespace
Answer a new association with the given key and value


@end table



@node HomedAssociation-accessing
@subsection HomedAssociation:@- accessing

@table @b
@meindex environment
@item environment
Answer the namespace in which I live.


@meindex environment:@-
@item environment:@- aNamespace
Set the namespace in which I live to be aNamespace.


@end table



@node HomedAssociation-finalization
@subsection HomedAssociation:@- finalization

@table @b
@meindex mourn
@item mourn
This message is sent to the receiver when the object is made ephemeron
(which is common when HomedAssociations are used by a WeakKeyDictionary
or a WeakSet).  The mourning of the object's key is first of all demanded
to the environment (which will likely remove the object from itself), and
then performed as usual by clearing the key and value fields.


@end table



@node HomedAssociation-storing
@subsection HomedAssociation:@- storing

@table @b
@meindex storeOn:@-
@item storeOn:@- aStream
Put on aStream some Smalltalk code compiling to the receiver


@end table

@node IdentityDictionary
@section IdentityDictionary
@clindex IdentityDictionary

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: LookupTable
@itemx Category: Collections-Keyed
I am similar to LookupTable, except that I use the object identity
comparision message == to determine equivalence of indices.
@end table

@menu
@end menu

@node IdentitySet
@section IdentitySet
@clindex IdentitySet

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Set
@itemx Category: Collections-Unordered
I am the typical set object; I can store any objects uniquely.  I
use the == operator to determine duplication of objects.
@end table

@menu
* IdentitySet-testing::  (instance)
@end menu



@node IdentitySet-testing
@subsection IdentitySet:@- testing

@table @b
@meindex identityIncludes:@-
@slindex includes:@-
@item identityIncludes:@- anObject
Answer whether we include the anObject object; for IdentitySets
this is identical to #includes:@-


@end table

@node Integer
@section Integer
@clindex Integer

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Number
@itemx Category: Language-Data types
I am the abstract integer class of the GNU Smalltalk system.  My
subclasses' instances can represent signed integers of various
sizes (a subclass is picked according to the size), with varying
efficiency.
@end table

@menu
* Integer class-converting::  (class)
* Integer-accessing::  (instance)
* Integer-basic::  (instance)
* Integer-bit operators::  (instance)
* Integer-converting::  (instance)
* Integer-extension::  (instance)
* Integer-iterators::  (instance)
* Integer-math methods::  (instance)
* Integer-printing::  (instance)
* Integer-storing::  (instance)
* Integer-testing functionality::  (instance)
@end menu



@node Integer class-converting
@subsection Integer class:@- converting

@table @b
@meindex coerce:@-
@item coerce:@- aNumber
Answer aNumber converted to a kind of Integer


@end table



@node Integer-accessing
@subsection Integer:@- accessing

@table @b
@meindex denominator
@item denominator
Answer `1'.

@meindex numerator
@item numerator
Answer the receiver.

@end table



@node Integer-basic
@subsection Integer:@- basic

@table @b
@meindex hash
@item hash
Answer an hash value for the receiver


@end table



@node Integer-bit operators
@subsection Integer:@- bit operators

@table @b
@meindex allMask:@-
@item allMask:@- anInteger
True if all 1 bits in anInteger are 1 in the receiver


@meindex anyMask:@-
@item anyMask:@- anInteger
True if any 1 bits in anInteger are 1 in the receiver


@meindex bitAt:@-
@item bitAt:@- index
Answer the index-th bit of the receiver (the LSB has an index
of 1)


@meindex bitAt:@-put:@-
@item bitAt:@- index put:@- value
Answer an integer which is identical to the receiver,
possibly with the exception of the index-th bit of the
receiver (the LSB having an index of 1), which assumes
a value equal to the low-order bit of the second parameter.


@meindex bitClear:@-
@item bitClear:@- aMask
Answer an Integer equal to the receiver, except that all the bits
that are set in aMask are cleared.


@meindex bitInvert
@item bitInvert
Return the 1's complement of the bits of the receiver


@meindex clearBit:@-
@item clearBit:@- index
Clear the index-th bit of the receiver and answer a new Integer


@meindex digitAt:@-
@item digitAt:@- index
Answer the index-th base-256 digit of the receiver (byte), expressed
in two's complement


@meindex highBit
@item highBit
Return the index of the highest order 1 bit of the receiver.


@meindex isBitSet:@-
@item isBitSet:@- index
Answer whether the index-th bit of the receiver is set


@meindex lowBit
@item lowBit
Return the index of the lowest order 1 bit of the receiver.


@meindex noMask:@-
@item noMask:@- anInteger
Answer true if no 1 bits in anInteger are 1 in the receiver.


@meindex setBit:@-
@item setBit:@- index
Set the index-th bit of the receiver and answer a new Integer


@end table



@node Integer-converting
@subsection Integer:@- converting

@table @b
@meindex asCharacter
@item asCharacter
Return self as a Character or UnicodeCharacter object.


@meindex asFraction
@item asFraction
Return the receiver converted to a fraction


@meindex asScaledDecimal:@-
@item asScaledDecimal:@- n
Answer the receiver, converted to a ScaledDecimal object.
The scale is forced to be 0.


@meindex ceiling
@item ceiling
Return the receiver - it's already truncated


@meindex coerce:@-
@item coerce:@- aNumber
Coerce aNumber to the receiver's class.


@meindex floor
@item floor
Return the receiver - it's already truncated


@meindex rounded
@item rounded
Return the receiver - it's already truncated


@meindex truncated
@item truncated
Return the receiver - it's already truncated


@end table



@node Integer-extension
@subsection Integer:@- extension

@table @b
@meindex alignTo:@-
@item alignTo:@- anInteger
Answer the receiver, truncated to the first higher or equal
multiple of anInteger (which must be a power of two)


@end table



@node Integer-iterators
@subsection Integer:@- iterators

@table @b
@meindex timesRepeat:@-
@item timesRepeat:@- aBlock
Evaluate aBlock a number of times equal to the receiver's value.
Compiled in-line for no argument aBlocks without temporaries, and
therefore not overridable.


@end table



@node Integer-math methods
@subsection Integer:@- math methods

@table @b
@meindex binomial:@-
@item binomial:@- anInteger
Compute the number of combinations of anInteger objects among
a number of objects given by the receiver.


@meindex ceilingLog:@-
@item ceilingLog:@- radix
Answer (self log:@- radix) ceiling. Optimized to answer an integer.


@meindex estimatedLog
@item estimatedLog
Answer an estimate of (self abs floorLog:@- 10)


@meindex even
@item even
Return whether the receiver is even


@meindex factorial
@item factorial
Return the receiver's factorial.


@meindex floorLog:@-
@item floorLog:@- radix
Answer (self log:@- radix) floor. Optimized to answer an integer.


@meindex gcd:@-
@item gcd:@- anInteger
Return the greatest common divisor (Euclid's algorithm) between the
receiver and anInteger


@meindex lcm:@-
@item lcm:@- anInteger
Return the least common multiple between the receiver and anInteger


@meindex odd
@item odd
Return whether the receiver is odd


@end table



@node Integer-printing
@subsection Integer:@- printing

@table @b
@meindex displayOn:@-
@item displayOn:@- aStream
Print on aStream the base 10 representation of the receiver


@meindex displayString
@item displayString
Return the base 10 representation of the receiver


@meindex isLiteralObject
@item isLiteralObject
Answer whether the receiver is expressible as a Smalltalk literal.


@meindex printOn:@-
@item printOn:@- aStream
Print on aStream the base 10 representation of the receiver


@meindex printOn:@-base:@-
@item printOn:@- aStream base:@- b
Print on aStream the base b representation of the receiver


@meindex printOn:@-paddedWith:@-to:@-
@item printOn:@- aStream paddedWith:@- padding to:@- size
Print on aStream the base 10 representation of the receiver,
padded if necessary to size characters with copies of padding.


@meindex printOn:@-paddedWith:@-to:@-base:@-
@item printOn:@- aStream paddedWith:@- padding to:@- size base:@- baseInteger
Print on aStream the base b representation of the receiver,
padded if necessary to size characters with copies of padding.


@meindex printPaddedWith:@-to:@-
@item printPaddedWith:@- padding to:@- size
Return the base baseInteger representation of the receiver, padded if
necessary to size characters with copies of padding.


@meindex printPaddedWith:@-to:@-base:@-
@item printPaddedWith:@- padding to:@- size base:@- baseInteger
Return the base baseInteger representation of the receiver, padded if
necessary to size characters with copies of padding.


@meindex printString
@item printString
Return the base 10 representation of the receiver


@meindex printString:@-
@item printString:@- baseInteger
Return the base baseInteger representation of the receiver


@meindex printStringRadix:@-
@item printStringRadix:@- baseInteger
Return the base baseInteger representation of the receiver, with BBr in
front of it


@meindex radix:@-
@slindex printStringRadix:@-
@item radix:@- baseInteger
Return the base baseInteger representation of the receiver, with BBr in
front of it.  This method is deprecated, use #printStringRadix:@-
instead.


@meindex storeLiteralOn:@-
@item storeLiteralOn:@- aStream
Store on aStream some Smalltalk code which compiles to the receiver


@meindex storeOn:@-base:@-
@item storeOn:@- aStream base:@- b
Print on aStream Smalltalk code compiling to the receiver,
represented in base b


@end table



@node Integer-storing
@subsection Integer:@- storing

@table @b
@meindex storeOn:@-
@item storeOn:@- aStream
Print on aStream the base 10 representation of the receiver


@meindex storeString
@item storeString
Return the base 10 representation of the receiver


@end table



@node Integer-testing functionality
@subsection Integer:@- testing functionality

@table @b
@meindex isInteger
@item isInteger
Answer `true'.

@meindex isRational
@item isRational
Answer whether the receiver is rational - true


@end table

@node Interval
@section Interval
@clindex Interval

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: ArrayedCollection
@itemx Category: Collections-Sequenceable
My instances represent ranges of objects, typically Number type
objects.  I provide iteration/enumeration messages for producing all the
members that my instance represents.
@end table

@menu
* Interval class-instance creation::  (class)
* Interval-basic::  (instance)
* Interval-printing::  (instance)
* Interval-storing::  (instance)
* Interval-testing::  (instance)
@end menu



@node Interval class-instance creation
@subsection Interval class:@- instance creation

@table @b
@meindex from:@-to:@-
@item from:@- startInteger to:@- stopInteger
Answer an Interval going from startInteger to the
stopInteger, with a step of 1


@meindex from:@-to:@-by:@-
@item from:@- startInteger to:@- stopInteger by:@- stepInteger
Answer an Interval going from startInteger to the
stopInteger, with a step of stepInteger


@meindex withAll:@-
@item withAll:@- aCollection
Answer an Interval containing the same elements as aCollection.
Fail if it is not possible to create one.


@end table



@node Interval-basic
@subsection Interval:@- basic

@table @b
@meindex at:@-
@item at:@- index
Answer the index-th element of the receiver.


@meindex at:@-put:@-
@item at:@- index put:@- anObject
This method should not be called for instances of this class.

@meindex collect:@-
@item collect:@- aBlock
Evaluate the receiver for each element in aBlock,
collect in an array the result of the evaluations.


@meindex copyFrom:@-to:@-
@item copyFrom:@- startIndex to:@- stopIndex
Not commented.

@meindex do:@-
@item do:@- aBlock
Evaluate the receiver for each element in aBlock


@meindex isEmpty
@item isEmpty
Answer whether the receiver is empty.


@meindex reverse
@item reverse
Answer a copy of the receiver with all of its items reversed


@meindex size
@item size
Answer the number of elements in the receiver.


@meindex species
@item species
Answer `Array'.

@end table



@node Interval-printing
@subsection Interval:@- printing

@table @b
@meindex first
@item first
Not commented.

@meindex increment
@item increment
Answer `step'.

@meindex last
@item last
Answer the last value.


@meindex printOn:@-
@item printOn:@- aStream
Print a representation for the receiver on aStream


@end table



@node Interval-storing
@subsection Interval:@- storing

@table @b
@meindex storeOn:@-
@item storeOn:@- aStream
Store Smalltalk code compiling to the receiver on aStream


@end table



@node Interval-testing
@subsection Interval:@- testing

@table @b
@meindex =
@item = anInterval
Answer whether anInterval is the same interval as the receiver


@meindex hash
@item hash
Answer an hash value for the receiver


@meindex isExact
@item isExact
Answer whether elements of the receiver are computed using exact
arithmetic.  This is true as long as the start and step value
are exact (i.e. not floating-point).


@end table

@node Iterable
@section Iterable
@clindex Iterable

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Object
@itemx Category: Collections
I am an abstract class.  My instances are collections of objects
that can be iterated.  The details on how they can be mutated (if at
all possible) are left to the subclasses.
@end table

@menu
* Iterable class-multibyte encodings::  (class)
* Iterable-enumeration::  (instance)
* Iterable-iteration::  (instance)
* Iterable-streaming::  (instance)
@end menu



@node Iterable class-multibyte encodings
@subsection Iterable class:@- multibyte encodings

@table @b
@meindex isUnicode
@item isUnicode
Answer true; the receiver is able to store arbitrary
Unicode characters.


@end table



@node Iterable-enumeration
@subsection Iterable:@- enumeration

@table @b
@meindex ,
@item , anIterable
Answer an iterable that enumerates first the elements of the receiver
and then the elements of anIterable.


@meindex allSatisfy:@-
@item allSatisfy:@- aBlock
Search the receiver for an element for which aBlock returns false.
Answer true if none does, false otherwise.


@meindex anySatisfy:@-
@item anySatisfy:@- aBlock
Search the receiver for an element for which aBlock returns true.
Answer true if some does, false otherwise.


@meindex collect:@-
@item collect:@- aBlock
Answer a new instance of a Collection containing all the results
of evaluating aBlock passing each of the receiver's elements


@meindex conform:@-
@item conform:@- aBlock
Search the receiver for an element for which aBlock returns false.
Answer true if none does, false otherwise.


@meindex contains:@-
@item contains:@- aBlock
Search the receiver for an element for which aBlock returns true.
Answer true if some does, false otherwise.


@meindex count:@-
@item count:@- aBlock
Count the elements of the receiver for which aBlock returns true,
and return their number.


@meindex detect:@-
@item detect:@- aBlock
Search the receiver for an element for which aBlock returns true.
If some does, answer it. If none does, fail


@meindex detect:@-ifNone:@-
@item detect:@- aBlock ifNone:@- exceptionBlock
Search the receiver for an element for which aBlock returns true.
If some does, answer it. If none does, answer the result of evaluating
aBlock


@meindex do:@-
@item do:@- aBlock
Enumerate each object of the receiver, passing them to aBlock


@meindex do:@-separatedBy:@-
@item do:@- aBlock separatedBy:@- separatorBlock
Enumerate each object of the receiver, passing them to aBlock.
Between every two invocations of aBlock, invoke separatorBlock


@meindex fold:@-
@item fold:@- binaryBlock
First, pass to binaryBlock the first and second elements of the
receiver; for each subsequent element, pass the result of the previous
evaluation and an element. Answer the result of the last invocation,
or the first element if the collection has size 1.  Fail if the collection
is empty.


@meindex inject:@-into:@-
@item inject:@- thisValue into:@- binaryBlock
First, pass to binaryBlock thisValue and the first element of the
receiver; for each subsequent element, pass the result of the previous
evaluation and an element. Answer the result of the last invocation.


@meindex noneSatisfy:@-
@item noneSatisfy:@- aBlock
Search the receiver for an element for which aBlock returns true.
Answer true if none does, false otherwise.


@meindex reject:@-
@item reject:@- aBlock
Answer a new instance of a Collection containing all the elements
in the receiver which, when passed to aBlock, don't answer true


@meindex select:@-
@item select:@- aBlock
Answer a new instance of a Collection containing all the elements
in the receiver which, when passed to aBlock, answer true


@end table



@node Iterable-iteration
@subsection Iterable:@- iteration

@table @b
@meindex ifNil:@-ifNotNilDo:@-
@item ifNil:@- nilBlock ifNotNilDo:@- iterableBlock
Evaluate nilBlock if the receiver is nil, else evaluate
iterableBlock with each element of the receiver (which
should be an Iterable).


@meindex ifNotNilDo:@-
@item ifNotNilDo:@- iterableBlock
Evaluate iterableBlock with each element of the receiver (which
should be an Iterable) if not nil.  Else answer nil


@meindex ifNotNilDo:@-ifNil:@-
@item ifNotNilDo:@- iterableBlock ifNil:@- nilBlock
Evaluate nilBlock if the receiver is nil, else evaluate
iterableBlock, passing each element of the receiver (which
should be an Iterable).


@end table



@node Iterable-streaming
@subsection Iterable:@- streaming

@table @b
@meindex nextPutAllOn:@-
@item nextPutAllOn:@- aStream
Write all the objects in the receiver to aStream


@meindex readStream
@item readStream
Return a stream with the same contents as the receiver.


@end table

@node LargeArray
@section LargeArray
@clindex LargeArray

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: LargeArrayedCollection
@itemx Category: Collections-Sequenceable

I am similar to a plain array, but I'm specially designed to save
memory when lots of items are nil.
@end table

@menu
* LargeArray-overridden::  (instance)
@end menu



@node LargeArray-overridden
@subsection LargeArray:@- overridden

@table @b
@meindex newCollection:@-
@item newCollection:@- size
Create an Array of the given size


@end table

@node LargeArrayedCollection
@section LargeArrayedCollection
@clindex LargeArrayedCollection

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: ArrayedCollection
@itemx Category: Collections-Sequenceable

I am an abstract class specially designed to save
memory when lots of items have the same value.
@end table

@menu
* LargeArrayedCollection class-instance creation::  (class)
* LargeArrayedCollection-accessing::  (instance)
* LargeArrayedCollection-basic::  (instance)
@end menu



@node LargeArrayedCollection class-instance creation
@subsection LargeArrayedCollection class:@- instance creation

@table @b
@meindex new:@-
@item new:@- anInteger
Answer a new instance of the receiver, with room for anInteger elements.


@end table



@node LargeArrayedCollection-accessing
@subsection LargeArrayedCollection:@- accessing

@table @b
@meindex at:@-
@item at:@- anIndex
Answer the anIndex-th item of the receiver.


@meindex at:@-put:@-
@item at:@- anIndex put:@- anObject
Replace the anIndex-th item of the receiver with anObject.


@meindex compress
@item compress
Arrange the representation of the array for maximum memory saving.


@end table



@node LargeArrayedCollection-basic
@subsection LargeArrayedCollection:@- basic

@table @b
@meindex =
@item = aLargeArray
Answer whether the receiver and aLargeArray have the same contents


@meindex hash
@item hash
Answer an hash value for the receiver


@meindex size
@item size
Answer the maximum valid index for the receiver


@end table

@node LargeByteArray
@section LargeByteArray
@clindex LargeByteArray

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: LargeArrayedCollection
@itemx Category: Collections-Sequenceable

I am similar to a plain ByteArray, but I'm specially designed to save
memory when lots of items are zero.
@end table

@menu
* LargeByteArray-overridden::  (instance)
@end menu



@node LargeByteArray-overridden
@subsection LargeByteArray:@- overridden

@table @b
@meindex costOfNewIndex
@item costOfNewIndex
Answer the maximum number of consecutive items set to the defaultElement
that can be present in a compressed array.


@meindex defaultElement
@item defaultElement
Answer the value which is hoped to be the most common in the array


@meindex newCollection:@-
@item newCollection:@- size
Create a ByteArray of the given size


@end table

@node LargeInteger
@section LargeInteger
@clindex LargeInteger

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Integer
@itemx Category: Language-Data types

I represent a large integer, which has to be stored as a long sequence
of bytes. I have methods to do arithmetics and comparisons, but I need
some help from my children, LargePositiveInteger and LargeNegativeInteger,
to speed them up a bit.
@end table

@menu
* LargeInteger-accessing::  (instance)
* LargeInteger-arithmetic::  (instance)
* LargeInteger-bit operations::  (instance)
* LargeInteger-built-ins::  (instance)
* LargeInteger-coercion::  (instance)
* LargeInteger-disabled::  (instance)
* LargeInteger-primitive operations::  (instance)
* LargeInteger-testing::  (instance)
@end menu



@node LargeInteger-accessing
@subsection LargeInteger:@- accessing

@table @b
@meindex raisedToInteger:@-
@item raisedToInteger:@- n
Return self raised to the anInteger-th power


@end table



@node LargeInteger-arithmetic
@subsection LargeInteger:@- arithmetic

@table @b
@meindex *
@item * aNumber
Multiply aNumber and the receiver, answer the result


@meindex +
@item + aNumber
Sum the receiver and aNumber, answer the result


@meindex -
@item - aNumber
Subtract aNumber from the receiver, answer the result


@meindex /
@item / aNumber
Divide aNumber and the receiver, answer the result (an Integer or
Fraction)


@meindex //
@item // aNumber
Divide aNumber and the receiver, answer the result truncated towards
-infinity


@meindex \\
@item \\ aNumber
Divide aNumber and the receiver, answer the remainder truncated
towards -infinity


@meindex divExact:@-
@item divExact:@- aNumber
Dividing receiver by arg assuming that the remainder is zero, and answer
the result


@meindex estimatedLog
@item estimatedLog
Answer an estimate of (self abs floorLog:@- 10)


@meindex negated
@item negated
Answer the receiver's negated


@meindex quo:@-
@item quo:@- aNumber
Divide aNumber and the receiver, answer the result truncated
towards 0


@meindex rem:@-
@item rem:@- aNumber
Divide aNumber and the receiver, answer the remainder truncated
towards 0


@end table



@node LargeInteger-bit operations
@subsection LargeInteger:@- bit operations

@table @b
@meindex bitAnd:@-
@item bitAnd:@- aNumber
Answer the receiver ANDed with aNumber


@meindex bitAt:@-
@item bitAt:@- aNumber
Answer the aNumber-th bit in the receiver, where the LSB is 1


@meindex bitInvert
@item bitInvert
Answer the receiver's 1's complement


@meindex bitOr:@-
@item bitOr:@- aNumber
Answer the receiver ORed with aNumber


@meindex bitShift:@-
@item bitShift:@- aNumber
Answer the receiver shifted by aNumber places


@meindex bitXor:@-
@item bitXor:@- aNumber
Answer the receiver XORed with aNumber


@meindex lowBit
@item lowBit
Return the index of the lowest order 1 bit of the receiver.


@end table



@node LargeInteger-built-ins
@subsection LargeInteger:@- built-ins

@table @b
@meindex at:@-
@item at:@- anIndex
Answer the anIndex-th byte in the receiver's representation


@meindex at:@-put:@-
@item at:@- anIndex put:@- aNumber
Set the anIndex-th byte in the receiver's representation


@meindex digitAt:@-
@item digitAt:@- anIndex
Answer the index-th base-256 digit of the receiver (byte), expressed
in two's complement


@meindex digitAt:@-put:@-
@item digitAt:@- anIndex put:@- aNumber
Set the anIndex-th base-256 digit in the receiver's representation


@meindex digitLength
@item digitLength
Answer the number of base-256 digits in the receiver


@meindex hash
@item hash
Answer an hash value for the receiver


@meindex primReplaceFrom:@-to:@-with:@-startingAt:@-
@item primReplaceFrom:@- start to:@- stop with:@- replacementString startingAt:@- replaceStart
Private - Replace the characters from start to stop with new
characters contained in replacementString (which, actually, can be
any variable byte class), starting at the replaceStart location of
replacementString


@meindex size
@item size
Answer the number of indexed instance variable in the receiver


@end table



@node LargeInteger-coercion
@subsection LargeInteger:@- coercion

@table @b
@meindex asCNumber
@item asCNumber
Convert the receiver to a kind of number that is understood by
the C call-out mechanism.


@meindex coerce:@-
@item coerce:@- aNumber
Truncate the number; if needed, convert it to LargeInteger
representation.


@meindex generality
@item generality
Answer the receiver's generality


@meindex unity
@item unity
Coerce 1 to the receiver's class


@meindex zero
@item zero
Coerce 0 to the receiver's class


@end table



@node LargeInteger-disabled
@subsection LargeInteger:@- disabled

@table @b
@meindex asObject
@item asObject
This method always fails. The number of OOPs is far less than
the minimum number represented with a LargeInteger.


@meindex asObjectNoFail
@item asObjectNoFail
Answer `nil'.

@end table



@node LargeInteger-primitive operations
@subsection LargeInteger:@- primitive operations

@table @b
@meindex basicLeftShift:@-
@item basicLeftShift:@- totalShift
Private - Left shift the receiver by aNumber places


@meindex basicRightShift:@-
@item basicRightShift:@- totalShift
Private - Right shift the receiver by 'shift' places


@meindex largeNegated
@item largeNegated
Private - Same as negated, but always answer a LargeInteger


@end table



@node LargeInteger-testing
@subsection LargeInteger:@- testing

@table @b
@meindex <
@item < aNumber
Answer whether the receiver is smaller than aNumber


@meindex <=
@item <= aNumber
Answer whether the receiver is smaller than aNumber or equal to it


@meindex =
@item = aNumber
Answer whether the receiver and aNumber identify the same number.


@meindex >
@item > aNumber
Answer whether the receiver is greater than aNumber


@meindex >=
@item >= aNumber
Answer whether the receiver is greater than aNumber or equal to it


@meindex ~=
@item ~= aNumber
Answer whether the receiver and aNumber identify different numbers.


@end table

@node LargeNegativeInteger
@section LargeNegativeInteger
@clindex LargeNegativeInteger

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: LargeInteger
@itemx Category: Language-Data types

Just like my brother LargePositiveInteger, I provide a few methods that
allow LargeInteger to determine the sign of a large integer in a fast way
during its calculations. For example, I know that I am smaller than any
LargePositiveInteger
@end table

@menu
* LargeNegativeInteger-converting::  (instance)
* LargeNegativeInteger-numeric testing::  (instance)
* LargeNegativeInteger-reverting to LargePositiveInteger::  (instance)
@end menu



@node LargeNegativeInteger-converting
@subsection LargeNegativeInteger:@- converting

@table @b
@meindex asFloatD
@item asFloatD
Answer the receiver converted to a FloatD


@meindex asFloatE
@item asFloatE
Answer the receiver converted to a FloatE


@meindex asFloatQ
@item asFloatQ
Answer the receiver converted to a FloatQ


@end table



@node LargeNegativeInteger-numeric testing
@subsection LargeNegativeInteger:@- numeric testing

@table @b
@meindex abs
@item abs
Answer the receiver's absolute value.


@meindex negative
@item negative
Answer whether the receiver is < 0


@meindex positive
@item positive
Answer whether the receiver is >= 0


@meindex sign
@item sign
Answer the receiver's sign


@meindex strictlyPositive
@item strictlyPositive
Answer whether the receiver is > 0


@end table



@node LargeNegativeInteger-reverting to LargePositiveInteger
@subsection LargeNegativeInteger:@- reverting to LargePositiveInteger

@table @b
@meindex +
@item + aNumber
Sum the receiver and aNumber, answer the result


@meindex -
@item - aNumber
Subtract aNumber from the receiver, answer the result


@meindex gcd:@-
@item gcd:@- anInteger
Return the greatest common divisor between the receiver and anInteger


@meindex highBit
@item highBit
Answer the receiver's highest bit's index


@end table

@node LargePositiveInteger
@section LargePositiveInteger
@clindex LargePositiveInteger

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: LargeInteger
@itemx Category: Language-Data types

Just like my brother LargeNegativeInteger, I provide a few methods that
allow LargeInteger to determine the sign of a large integer in a fast way
during its calculations.  For example, I know that I am larger than any
LargeNegativeInteger.  In addition I implement the guts of arbitrary
precision arithmetic.
@end table

@menu
* LargePositiveInteger-arithmetic::  (instance)
* LargePositiveInteger-converting::  (instance)
* LargePositiveInteger-helper byte-level methods::  (instance)
* LargePositiveInteger-numeric testing::  (instance)
* LargePositiveInteger-primitive operations::  (instance)
@end menu



@node LargePositiveInteger-arithmetic
@subsection LargePositiveInteger:@- arithmetic

@table @b
@meindex +
@item + aNumber
Sum the receiver and aNumber, answer the result


@meindex -
@item - aNumber
Subtract aNumber from the receiver, answer the result


@meindex gcd:@-
@item gcd:@- anInteger
Calculate the GCD between the receiver and anInteger


@meindex highBit
@item highBit
Answer the receiver's highest bit's index


@end table



@node LargePositiveInteger-converting
@subsection LargePositiveInteger:@- converting

@table @b
@meindex asFloatD
@item asFloatD
Answer the receiver converted to a FloatD


@meindex asFloatE
@item asFloatE
Answer the receiver converted to a FloatE


@meindex asFloatQ
@item asFloatQ
Answer the receiver converted to a FloatQ


@meindex replace:@-withStringBase:@-
@item replace:@- str withStringBase:@- radix
Return in a String str the base radix representation of the
receiver.


@end table



@node LargePositiveInteger-helper byte-level methods
@subsection LargePositiveInteger:@- helper byte-level methods

@table @b
@meindex bytes:@-from:@-compare:@-
@item bytes:@- byteArray1 from:@- j compare:@- byteArray2
Private - Answer the sign of byteArray2 - byteArray1; the
j-th byte of byteArray1 is compared with the first of byteArray2,
the j+1-th with the second, and so on.


@meindex bytes:@-from:@-subtract:@-
@item bytes:@- byteArray1 from:@- j subtract:@- byteArray2
Private - Sutract the bytes in byteArray2 from those in byteArray1


@meindex bytes:@-multiply:@-
@item bytes:@- bytes multiply:@- anInteger
Private - Multiply the bytes in bytes by anInteger, which must be < 255.
Put the result back in bytes.


@meindex bytesLeftShift:@-
@item bytesLeftShift:@- aByteArray
Private - Left shift by 1 place the bytes in aByteArray


@meindex bytesLeftShift:@-big:@-
@item bytesLeftShift:@- aByteArray big:@- totalShift
Private - Left shift the bytes in aByteArray by totalShift places


@meindex bytesLeftShift:@-n:@-
@item bytesLeftShift:@- aByteArray n:@- shift
Private - Left shift by shift places the bytes in aByteArray
(shift <= 7)


@meindex bytesRightShift:@-big:@-
@item bytesRightShift:@- aByteArray big:@- totalShift
Private - Right shift the bytes in aByteArray by totalShift places


@meindex bytesRightShift:@-n:@-
@item bytesRightShift:@- bytes n:@- aNumber
Private - Right shift the bytes in `bytes' by 'aNumber' places
(shift <= 7)


@meindex bytesTrailingZeros:@-
@item bytesTrailingZeros:@- bytes
Private - Answer the number of trailing zero bits in the receiver


@meindex primDivide:@-
@item primDivide:@- rhs
Private - Implements Knuth's divide and correct algorithm from
`Seminumerical Algorithms' 3rd Edition, section 4.3.1 (which
is basically an enhanced version of the divide `algorithm' for
two-digit divisors which is taught in primary school!!!)


@end table



@node LargePositiveInteger-numeric testing
@subsection LargePositiveInteger:@- numeric testing

@table @b
@meindex abs
@item abs
Answer the receiver's absolute value


@meindex negative
@item negative
Answer whether the receiver is < 0


@meindex positive
@item positive
Answer whether the receiver is >= 0


@meindex sign
@item sign
Answer the receiver's sign


@meindex strictlyPositive
@item strictlyPositive
Answer whether the receiver is > 0


@end table



@node LargePositiveInteger-primitive operations
@subsection LargePositiveInteger:@- primitive operations

@table @b
@meindex divide:@-using:@-
@item divide:@- aNumber using:@- aBlock
Private - Divide the receiver by aNumber (unsigned division). Evaluate
aBlock passing the result ByteArray, the remainder ByteArray, and
whether the division had a remainder


@meindex isSmall
@item isSmall
Private - Answer whether the receiver is small enough to employ simple
scalar algorithms for division and multiplication


@meindex multiply:@-
@item multiply:@- aNumber
Private - Multiply the receiver by aNumber (unsigned multiply)


@end table

@node LargeWordArray
@section LargeWordArray
@clindex LargeWordArray

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: LargeArrayedCollection
@itemx Category: Collections-Sequenceable

I am similar to a plain WordArray, but I'm specially designed to save
memory when lots of items are zero.
@end table

@menu
* LargeWordArray-overridden::  (instance)
@end menu



@node LargeWordArray-overridden
@subsection LargeWordArray:@- overridden

@table @b
@meindex defaultElement
@item defaultElement
Answer the value which is hoped to be the most common in the array


@meindex newCollection:@-
@item newCollection:@- size
Create a WordArray of the given size


@end table

@node LargeZeroInteger
@section LargeZeroInteger
@clindex LargeZeroInteger

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: LargePositiveInteger
@itemx Category: Language-Data types

I am quite a strange class. Indeed, the concept of a "large integer"
that is zero is a weird one. Actually my only instance is zero but
is represented like LargeIntegers, has the same generality as
LargeIntegers, and so on. That only instance is stored in the class
variable Zero, and is used in arithmetical methods, when we have to
coerce a parameter that is zero.
@end table

@menu
* LargeZeroInteger-accessing::  (instance)
* LargeZeroInteger-arithmetic::  (instance)
* LargeZeroInteger-numeric testing::  (instance)
* LargeZeroInteger-printing::  (instance)
@end menu



@node LargeZeroInteger-accessing
@subsection LargeZeroInteger:@- accessing

@table @b
@meindex at:@-
@item at:@- anIndex
Answer `0'.

@meindex hash
@item hash
Answer `0'.

@meindex size
@item size
Answer `0'.

@end table



@node LargeZeroInteger-arithmetic
@subsection LargeZeroInteger:@- arithmetic

@table @b
@meindex *
@item * aNumber
Multiply aNumber and the receiver, answer the result


@meindex +
@item + aNumber
Sum the receiver and aNumber, answer the result


@meindex -
@item - aNumber
Subtract aNumber from the receiver, answer the result


@meindex /
@item / aNumber
Divide aNumber and the receiver, answer the result (an Integer or
Fraction)


@meindex //
@item // aNumber
Divide aNumber and the receiver, answer the result truncated towards
-infinity


@meindex \\
@item \\ aNumber
Divide aNumber and the receiver, answer the remainder truncated
towards -infinity


@meindex quo:@-
@item quo:@- aNumber
Divide aNumber and the receiver, answer the result truncated
towards 0


@meindex rem:@-
@item rem:@- aNumber
Divide aNumber and the receiver, answer the remainder truncated
towards 0


@end table



@node LargeZeroInteger-numeric testing
@subsection LargeZeroInteger:@- numeric testing

@table @b
@meindex sign
@item sign
Answer the receiver's sign


@meindex strictlyPositive
@item strictlyPositive
Answer whether the receiver is > 0


@end table



@node LargeZeroInteger-printing
@subsection LargeZeroInteger:@- printing

@table @b
@meindex replace:@-withStringBase:@-
@item replace:@- str withStringBase:@- radix
Return in a string the base radix representation of the receiver.


@end table

@node Link
@section Link
@clindex Link

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Object
@itemx Category: Collections-Sequenceable
I represent simple linked lists.  Generally, I am not used by myself, but
rather a subclass adds other instance variables that hold the information
for each node, and I hold the glue that keeps them together.
@end table

@menu
* Link class-instance creation::  (class)
* Link-basic::  (instance)
* Link-iteration::  (instance)
@end menu



@node Link class-instance creation
@subsection Link class:@- instance creation

@table @b
@meindex nextLink:@-
@item nextLink:@- aLink
Create an instance with the given next link


@end table



@node Link-basic
@subsection Link:@- basic

@table @b
@meindex nextLink
@item nextLink
Answer the next item in the list


@meindex nextLink:@-
@item nextLink:@- aLink
Set the next item in the list


@end table



@node Link-iteration
@subsection Link:@- iteration

@table @b
@meindex at:@-
@item at:@- index
Retrieve a node (instance of Link) that is at a distance of `index'
after the receiver.


@meindex at:@-put:@-
@item at:@- index put:@- object
This method should not be called for instances of this class.

@meindex do:@-
@item do:@- aBlock
Evaluate aBlock for each element in the list


@meindex size
@item size
Answer the number of elements in the list. Warning:@- this is O(n)


@end table

@node LinkedList
@section LinkedList
@clindex LinkedList

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: SequenceableCollection
@itemx Category: Collections-Sequenceable
I provide methods that access and manipulate linked lists.  I assume that 
the elements of the linked list are subclasses of Link, because I use 
the methods that class Link supplies to implement my methods.
@end table

@menu
* LinkedList-accessing::  (instance)
* LinkedList-adding::  (instance)
* LinkedList-enumerating::  (instance)
* LinkedList-iteration::  (instance)
* LinkedList-testing::  (instance)
@end menu



@node LinkedList-accessing
@subsection LinkedList:@- accessing

@table @b
@meindex at:@-
@item at:@- index
Return the element that is index into the linked list.


@meindex at:@-put:@-
@item at:@- index put:@- object
This method should not be called for instances of this class.

@end table



@node LinkedList-adding
@subsection LinkedList:@- adding

@table @b
@meindex add:@-
@item add:@- aLink
Add aLink at the end of the list; return aLink.


@meindex addFirst:@-
@item addFirst:@- aLink
Add aLink at the head of the list; return aLink.


@meindex addLast:@-
@item addLast:@- aLink
Add aLink at then end of the list; return aLink.


@meindex remove:@-ifAbsent:@-
@item remove:@- aLink ifAbsent:@- aBlock
Remove aLink from the list and return it, or invoke aBlock if it's not
found in the list.


@meindex removeFirst
@item removeFirst
Remove the first element from the list and return it, or error if the
list is empty.


@meindex removeLast
@item removeLast
Remove the final element from the list and return it, or error if the
list is empty.


@end table



@node LinkedList-enumerating
@subsection LinkedList:@- enumerating

@table @b
@meindex do:@-
@item do:@- aBlock
Enumerate each object in the list, passing it to aBlock (actual
behavior might depend on the subclass of Link that is being used).


@meindex identityIncludes:@-
@item identityIncludes:@- anObject
Answer whether we include the anObject object


@meindex includes:@-
@item includes:@- anObject
Answer whether we include anObject


@end table



@node LinkedList-iteration
@subsection LinkedList:@- iteration

@table @b
@meindex first
@item first
Retrieve the first element of the list and return it, or error if the
list is empty.


@meindex last
@item last
Retrieve the last element of the list and return it, or error if the
list is empty.


@end table



@node LinkedList-testing
@subsection LinkedList:@- testing

@table @b
@meindex isEmpty
@item isEmpty
Returns true if the list contains no members


@meindex notEmpty
@item notEmpty
Returns true if the list contains at least a member


@meindex size
@item size
Answer the number of elements in the list. Warning:@- this is O(n)


@end table

@node LookupKey
@section LookupKey
@clindex LookupKey

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Magnitude
@itemx Category: Language-Data types
I represent a key for looking up entries in a data structure. Subclasses
of me, such as Association, typically represent dictionary entries.
@end table

@menu
* LookupKey class-basic::  (class)
* LookupKey-accessing::  (instance)
* LookupKey-printing::  (instance)
* LookupKey-storing::  (instance)
* LookupKey-testing::  (instance)
@end menu



@node LookupKey class-basic
@subsection LookupKey class:@- basic

@table @b
@meindex key:@-
@item key:@- aKey
Answer a new instance of the receiver with the given key and value


@end table



@node LookupKey-accessing
@subsection LookupKey:@- accessing

@table @b
@meindex key
@item key
Answer the receiver's key


@meindex key:@-
@item key:@- aKey
Set the receiver's key to aKey


@end table



@node LookupKey-printing
@subsection LookupKey:@- printing

@table @b
@meindex printOn:@-
@item printOn:@- aStream
Put on aStream a representation of the receiver


@end table



@node LookupKey-storing
@subsection LookupKey:@- storing

@table @b
@meindex storeOn:@-
@item storeOn:@- aStream
Put on aStream some Smalltalk code compiling to the receiver


@end table



@node LookupKey-testing
@subsection LookupKey:@- testing

@table @b
@meindex <
@item < aLookupKey
Answer whether the receiver's key is less than aLookupKey's


@meindex =
@item = aLookupKey
Answer whether the receiver's key and value are the same as
aLookupKey's, or false if aLookupKey is not an instance of
the receiver


@meindex hash
@item hash
Answer an hash value for the receiver


@end table

@node LookupTable
@section LookupTable
@clindex LookupTable

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Dictionary
@itemx Category: Collections-Keyed
I am a more efficient variant of Dictionary that cannot be used as a
pool dictionary of variables, as I don't use Associations to store
key-value pairs.  I also cannot have nil as a key; if you need to be
able to store nil as a key, use Dictionary instead.  I use the object
equality comparison message #= to determine equivalence of indices.
@end table

@menu
* LookupTable class-instance creation::  (class)
* LookupTable-accessing::  (instance)
* LookupTable-enumerating::  (instance)
* LookupTable-hashing::  (instance)
* LookupTable-rehashing::  (instance)
* LookupTable-removing::  (instance)
* LookupTable-storing::  (instance)
@end menu



@node LookupTable class-instance creation
@subsection LookupTable class:@- instance creation

@table @b
@meindex new
@item new
Create a new LookupTable with a default size


@end table



@node LookupTable-accessing
@subsection LookupTable:@- accessing

@table @b
@meindex add:@-
@item add:@- anAssociation
Add the anAssociation key to the receiver


@meindex associationAt:@-ifAbsent:@-
@item associationAt:@- key ifAbsent:@- aBlock
Answer the key/value Association for the given key. Evaluate aBlock
(answering the result) if the key is not found


@meindex at:@-ifAbsent:@-
@item at:@- key ifAbsent:@- aBlock
Answer the value associated to the given key, or the result of evaluating
aBlock if the key is not found


@meindex at:@-ifPresent:@-
@item at:@- aKey ifPresent:@- aBlock
If aKey is absent, answer nil. Else, evaluate aBlock passing the
associated value and answer the result of the invocation


@meindex at:@-put:@-
@item at:@- key put:@- value
Store value as associated to the given key


@end table



@node LookupTable-enumerating
@subsection LookupTable:@- enumerating

@table @b
@meindex associationsDo:@-
@item associationsDo:@- aBlock
Pass each association in the LookupTable to aBlock.


@meindex do:@-
@item do:@- aBlock
Pass each value in the LookupTable to aBlock.


@meindex keysAndValuesDo:@-
@item keysAndValuesDo:@- aBlock
Pass each key/value pair in the LookupTable as two distinct parameters
to aBlock.


@meindex keysDo:@-
@item keysDo:@- aBlock
Pass each key in the LookupTable to aBlock.


@end table



@node LookupTable-hashing
@subsection LookupTable:@- hashing

@table @b
@meindex hash
@item hash
Answer the hash value for the receiver


@end table



@node LookupTable-rehashing
@subsection LookupTable:@- rehashing

@table @b
@meindex rehash
@item rehash
Rehash the receiver


@end table



@node LookupTable-removing
@subsection LookupTable:@- removing

@table @b
@meindex remove:@-
@item remove:@- anAssociation
Remove anAssociation's key from the dictionary


@meindex remove:@-ifAbsent:@-
@item remove:@- anAssociation ifAbsent:@- aBlock
Remove anAssociation's key from the dictionary


@meindex removeKey:@-ifAbsent:@-
@item removeKey:@- key ifAbsent:@- aBlock
Remove the passed key from the LookupTable, answer the result of
evaluating aBlock if it is not found


@end table



@node LookupTable-storing
@subsection LookupTable:@- storing

@table @b
@meindex storeOn:@-
@item storeOn:@- aStream
Print Smalltalk code compiling to the receiver on aStream


@end table

@node Magnitude
@section Magnitude
@clindex Magnitude

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Object
@itemx Category: Language-Data types
I am an abstract class.  My objects represent things that are discrete and 
map to a number line.  My instances can be compared with < and >.
@end table

@menu
* Magnitude-basic::  (instance)
* Magnitude-misc methods::  (instance)
@end menu



@node Magnitude-basic
@subsection Magnitude:@- basic

@table @b
@meindex <
@item < aMagnitude
Answer whether the receiver is less than aMagnitude


@meindex <=
@item <= aMagnitude
Answer whether the receiver is less than or equal to aMagnitude


@meindex =
@item = aMagnitude
Answer whether the receiver is equal to aMagnitude


@meindex >
@item > aMagnitude
Answer whether the receiver is greater than aMagnitude


@meindex >=
@item >= aMagnitude
Answer whether the receiver is greater than or equal to aMagnitude


@end table



@node Magnitude-misc methods
@subsection Magnitude:@- misc methods

@table @b
@meindex between:@-and:@-
@item between:@- min and:@- max
Returns true if object is inclusively between min and max.


@meindex max:@-
@item max:@- aMagnitude
Returns the greatest object between the receiver and aMagnitude


@meindex min:@-
@item min:@- aMagnitude
Returns the least object between the receiver and aMagnitude


@end table

@node MappedCollection
@section MappedCollection
@clindex MappedCollection

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Collection
@itemx Category: Collections-Keyed
I represent collections of objects that are indirectly indexed by names.
There are really two collections involved:@- domain and a map.  The map maps
between external names and indices into domain, which contains the
real association.  In order to work properly, the domain must be an instance
of a subclass of SequenceableCollection, and the map must be an instance of
Dictionary, or of a subclass of SequenceableCollection.

As an example of using me, consider implenting a Dictionary whose elements
are indexed. The domain would be a SequenceableCollection with n elements,
the map a Dictionary associating each key to an index in the domain. To
access by key, to perform enumeration, etc. you would ask an instance of me;
to access by index, you would access the domain directly.

Another idea could be to implement row access or column access to a matrix
implemented as a single n*m Array:@- the Array would be the domain, while the
map would be an Interval.

@end table

@menu
* MappedCollection class-instance creation::  (class)
* MappedCollection-basic::  (instance)
@end menu



@node MappedCollection class-instance creation
@subsection MappedCollection class:@- instance creation

@table @b
@meindex collection:@-map:@-
@item collection:@- aCollection map:@- aMap
Answer a new MappedCollection using the given domain (aCollection)
and map


@meindex new
@slindex collection:@-map:@-
@item new
This method should not be used; instead, use #collection:@-map:@- to
create MappedCollection.


@end table



@node MappedCollection-basic
@subsection MappedCollection:@- basic

@table @b
@meindex add:@-
@item add:@- anObject
This method should not be called for instances of this class.

@meindex at:@-
@item at:@- key
Answer the object at the given key


@meindex at:@-put:@-
@item at:@- key put:@- value
Store value at the given key


@meindex atAll:@-
@item atAll:@- keyCollection
Answer a new MappedCollection that only includes the given keys. The new
MappedCollection might use keyCollection or consecutive integers for the
keys, depending on the map's type. Fail if any of them is not found in
the map.


@meindex collect:@-
@item collect:@- aBlock
Answer a Collection with the same keys as the map, where accessing
a key yields the value obtained by passing through aBlock the value
accessible from the key in the receiver.  The result need not be
another MappedCollection


@meindex contents
@item contents
Answer a bag with the receiver's values


@meindex copyFrom:@-to:@-
@item copyFrom:@- a to:@- b
Answer a new collection containing all the items in the receiver from the
a-th to the b-th.


@meindex do:@-
@item do:@- aBlock
Evaluate aBlock for each object


@meindex domain
@item domain
Answer the receiver's domain


@meindex keys
@item keys
Answer the keys that can be used to access this collection.


@meindex keysAndValuesDo:@-
@item keysAndValuesDo:@- aBlock
Evaluate aBlock passing two arguments, one being a key that can be used to
access this collection, and the other one being the value.


@meindex keysDo:@-
@item keysDo:@- aBlock
Evaluate aBlock on the keys that can be used to access this collection.


@meindex map
@item map
Answer the receiver's map


@meindex reject:@-
@item reject:@- aBlock
Answer the objects in the domain for which aBlock returns false


@meindex select:@-
@item select:@- aBlock
Answer the objects in the domain for which aBlock returns true


@meindex size
@item size
Answer the receiver's size


@end table

@node Memory
@section Memory
@clindex Memory

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Object
@itemx Category: Language-Implementation
I provide access to actual machine addresses of OOPs and objects.  I
have no instances; you send messages to my class to map between an object
and the address of its OOP or object. In addition I provide direct
memory access with different C types (ints, chars, OOPs, floats,...).
@end table

@menu
* Memory class-accessing::  (class)
@end menu



@node Memory class-accessing
@subsection Memory class:@- accessing

@table @b
@meindex at:@-
@item at:@- anAddress
Access the Smalltalk object (OOP) at the given address.


@meindex at:@-put:@-
@item at:@- anAddress put:@- aValue
Store a pointer (OOP) to the Smalltalk object identified by `value'
at the given address.


@meindex bigEndian
@item bigEndian
Answer whether we're running on a big- or little-endian system.


@meindex charAt:@-
@item charAt:@- anAddress
Access the C char at the given address. The value is
returned as a Smalltalk Character.


@meindex charAt:@-put:@-
@item charAt:@- anAddress put:@- aValue
Store as a C char the Smalltalk Character or Integer object
identified by `value', at the given address, using sizeof(char)
bytes - i.e. 1 byte.


@meindex deref:@-
@item deref:@- anAddress
Access the C int pointed by the given address


@meindex doubleAt:@-
@item doubleAt:@- anAddress
Access the C double at the given address.


@meindex doubleAt:@-put:@-
@item doubleAt:@- anAddress put:@- aValue
Store the Smalltalk Float object identified by `value', at the
given address, writing it like a C double.


@meindex floatAt:@-
@item floatAt:@- anAddress
Access the C float at the given address.


@meindex floatAt:@-put:@-
@item floatAt:@- anAddress put:@- aValue
Store the Smalltalk Float object identified by `value', at the
given address, writing it like a C float.


@meindex intAt:@-
@item intAt:@- anAddress
Access the C int at the given address.


@meindex intAt:@-put:@-
@item intAt:@- anAddress put:@- aValue
Store the Smalltalk Integer object identified by `value', at the
given address, using sizeof(int) bytes.


@meindex longAt:@-
@item longAt:@- anAddress
Access the C long int at the given address.


@meindex longAt:@-put:@-
@item longAt:@- anAddress put:@- aValue
Store the Smalltalk Integer object identified by `value', at the
given address, using sizeof(long) bytes.


@meindex longDoubleAt:@-
@item longDoubleAt:@- anAddress
Access the C long double at the given address.


@meindex longDoubleAt:@-put:@-
@item longDoubleAt:@- anAddress put:@- aValue
Store the Smalltalk Float object identified by `value', at the
given address, writing it like a C long double.


@meindex shortAt:@-
@item shortAt:@- anAddress
Access the C short int at the given address.


@meindex shortAt:@-put:@-
@item shortAt:@- anAddress put:@- aValue
Store the Smalltalk Integer object identified by `value', at the
given address, using sizeof(short) bytes.


@meindex stringAt:@-
@item stringAt:@- anAddress
Access the string pointed by the C `char *' at the given given address.


@meindex stringAt:@-put:@-
@item stringAt:@- anAddress put:@- aValue
Store the Smalltalk String object identified by `value', at the
given address in memory, writing it like a *FRESHLY ALLOCATED*
C string. It is the caller's responsibility to free it if
necessary.


@meindex ucharAt:@-put:@-
@item ucharAt:@- anAddress put:@- aValue
Store as a C char the Smalltalk Character or Integer object
identified by `value', at the given address, using sizeof(char)
bytes - i.e. 1 byte.


@meindex uintAt:@-put:@-
@item uintAt:@- anAddress put:@- aValue
Store the Smalltalk Integer object identified by `value', at the
given address, using sizeof(int) bytes.


@meindex ulongAt:@-put:@-
@item ulongAt:@- anAddress put:@- aValue
Store the Smalltalk Integer object identified by `value', at the
given address, using sizeof(long) bytes.


@meindex unsignedCharAt:@-
@item unsignedCharAt:@- anAddress
Access the C unsigned char at the given address.
The value is returned as a Smalltalk Character.


@meindex unsignedCharAt:@-put:@-
@item unsignedCharAt:@- anAddress put:@- aValue
Store as a C char the Smalltalk Character or Integer object
identified by `value', at the given address, using sizeof(char)
bytes - i.e. 1 byte.


@meindex unsignedIntAt:@-
@item unsignedIntAt:@- anAddress
Access the C unsigned int at the given address.


@meindex unsignedIntAt:@-put:@-
@item unsignedIntAt:@- anAddress put:@- aValue
Store the Smalltalk Integer object identified by `value', at the
given address, using sizeof(int) bytes.


@meindex unsignedLongAt:@-
@item unsignedLongAt:@- anAddress
Access the C unsigned long int at the given address.


@meindex unsignedLongAt:@-put:@-
@item unsignedLongAt:@- anAddress put:@- aValue
Store the Smalltalk Integer object identified by `value', at the
given address, using sizeof(long) bytes.


@meindex unsignedShortAt:@-
@item unsignedShortAt:@- anAddress
Access the C unsigned short int at the given address.


@meindex unsignedShortAt:@-put:@-
@item unsignedShortAt:@- anAddress put:@- aValue
Store the Smalltalk Integer object identified by `value', at the
given address, using sizeof(short) bytes.


@meindex ushortAt:@-put:@-
@item ushortAt:@- anAddress put:@- aValue
Store the Smalltalk Integer object identified by `value', at the
given address, using sizeof(short) bytes.


@end table

@node Message
@section Message
@clindex Message

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Object
@itemx Category: Language-Implementation
I represent a message send.  My instances are created to hold a message
that has failed, so that error reporting methods can examine the sender
and arguments, but also to represent method attributes (like
<primitive:@- 111> since their syntax is isomorphic to that of a
message send.
@end table

@menu
* Message class-creating instances::  (class)
* Message-accessing::  (instance)
* Message-basic::  (instance)
* Message-printing::  (instance)
@end menu



@node Message class-creating instances
@subsection Message class:@- creating instances

@table @b
@meindex selector:@-argument:@-
@item selector:@- aSymbol argument:@- anObject
Create a new Message with the given selector and argument


@meindex selector:@-arguments:@-
@item selector:@- aSymbol arguments:@- anArray
Create a new Message with the given selector and arguments


@end table



@node Message-accessing
@subsection Message:@- accessing

@table @b
@meindex argument
@item argument
Answer the first of the receiver's arguments


@meindex arguments
@item arguments
Answer the receiver's arguments


@meindex arguments:@-
@item arguments:@- anArray
Set the receiver's arguments


@meindex selector
@item selector
Answer the receiver's selector


@meindex selector:@-
@item selector:@- aSymbol
Set the receiver's selector


@end table



@node Message-basic
@subsection Message:@- basic

@table @b
@meindex printAsAttributeOn:@-
@item printAsAttributeOn:@- aStream
Print a representation of the receiver on aStream, modeling
it after the source code for a attribute.


@end table



@node Message-printing
@subsection Message:@- printing

@table @b
@meindex printOn:@-
@item printOn:@- aStream
Print a representation of the receiver on aStream


@meindex reinvokeFor:@-
@item reinvokeFor:@- aReceiver
Resend to aReceiver - present for compatibility


@meindex sendTo:@-
@item sendTo:@- aReceiver
Resend to aReceiver


@end table

@node MessageNotUnderstood
@section MessageNotUnderstood
@clindex MessageNotUnderstood

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Error
@itemx Category: Language-Exceptions
MessageNotUnderstood represents an error during message lookup. Signaling
it is the default action of the #doesNotUnderstand:@- handler
@end table

@menu
* MessageNotUnderstood-accessing::  (instance)
* MessageNotUnderstood-description::  (instance)
@end menu



@node MessageNotUnderstood-accessing
@subsection MessageNotUnderstood:@- accessing

@table @b
@meindex message
@item message
Answer the message that wasn't understood


@meindex receiver
@item receiver
Answer the object to whom the message send was directed


@end table



@node MessageNotUnderstood-description
@subsection MessageNotUnderstood:@- description

@table @b
@meindex description
@item description
Answer a textual description of the exception.


@meindex isResumable
@slindex doesNotUnderstand:@-
@item isResumable
Answer true.  #doesNotUnderstand:@- exceptions are by default resumable.


@end table

@node Metaclass
@section Metaclass
@clindex Metaclass

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: ClassDescription
@itemx Category: Language-Implementation
I am the root of the class hierarchy.  My instances are metaclasses, one for
each real class.  My instances have a single instance, which they hold
onto, which is the class that they are the metaclass of.  I provide methods
for creation of actual class objects from metaclass object, and the creation
of metaclass objects, which are my instances.  If this is confusing to you,
it should be...the Smalltalk metaclass system is strange and complex.
@end table

@menu
* Metaclass class-instance creation::  (class)
* Metaclass-accessing::  (instance)
* Metaclass-basic::  (instance)
* Metaclass-compiling methods::  (instance)
* Metaclass-delegation::  (instance)
* Metaclass-filing::  (instance)
* Metaclass-printing::  (instance)
* Metaclass-testing functionality::  (instance)
@end menu



@node Metaclass class-instance creation
@subsection Metaclass class:@- instance creation

@table @b
@meindex subclassOf:@-
@item subclassOf:@- superMeta
Answer a new metaclass representing a subclass of superMeta


@end table



@node Metaclass-accessing
@subsection Metaclass:@- accessing

@table @b
@meindex instanceClass
@item instanceClass
Answer the only instance of the metaclass


@meindex primaryInstance
@item primaryInstance
Answer the only instance of the metaclass - present for compatibility


@meindex soleInstance
@item soleInstance
Answer the only instance of the metaclass - present for compatibility


@end table



@node Metaclass-basic
@subsection Metaclass:@- basic

@table @b
@meindex name:@-environment:@-subclassOf:@-
@item name:@- className environment:@- aNamespace subclassOf:@- theSuperclass
Private - create a full featured class and install it, or change the
superclass or shape of an existing one; instance variable names,
class variable names and pool dictionaries are left untouched.


@meindex name:@-environment:@-subclassOf:@-instanceVariableArray:@-shape:@-classPool:@-poolDictionaries:@-category:@-
@item name:@- className environment:@- aNamespace subclassOf:@- newSuperclass instanceVariableArray:@- variableArray shape:@- shape classPool:@- classVarDict poolDictionaries:@- sharedPoolNames category:@- categoryName
Private - create a full featured class and install it, or change an
existing one


@meindex name:@-environment:@-subclassOf:@-instanceVariableNames:@-shape:@-classVariableNames:@-poolDictionaries:@-category:@-
@item name:@- newName environment:@- aNamespace subclassOf:@- theSuperclass instanceVariableNames:@- stringOfInstVarNames shape:@- shape classVariableNames:@- stringOfClassVarNames poolDictionaries:@- stringOfPoolNames category:@- categoryName
Private - parse the instance and class variables, and the pool
dictionaries, then create the class.


@meindex newMeta:@-environment:@-subclassOf:@-instanceVariableArray:@-shape:@-classPool:@-poolDictionaries:@-category:@-
@item newMeta:@- className environment:@- aNamespace subclassOf:@- theSuperclass instanceVariableArray:@- arrayOfInstVarNames shape:@- shape classPool:@- classVarDict poolDictionaries:@- sharedPoolNames category:@- categoryName
Private - create a full featured class and install it


@end table



@node Metaclass-compiling methods
@subsection Metaclass:@- compiling methods

@table @b
@meindex poolResolution
@item poolResolution
Use my instance's poolResolution.


@end table



@node Metaclass-delegation
@subsection Metaclass:@- delegation

@table @b
@meindex addClassVarName:@-
@item addClassVarName:@- aString
Add a class variable with the given name to the class pool dictionary


@meindex addSharedPool:@-
@item addSharedPool:@- aDictionary
Add the given shared pool to the list of the class' pool dictionaries


@meindex allClassVarNames
@item allClassVarNames
Answer the names of the variables in the receiver's class pool dictionary
and in each of the superclasses' class pool dictionaries


@meindex allSharedPoolDictionariesDo:@-
@item allSharedPoolDictionariesDo:@- aBlock
Answer the shared pools visible from methods in the metaclass,
in the correct search order.


@meindex allSharedPools
@item allSharedPools
Return the names of the shared pools defined by the class and any of
its superclasses


@meindex category
@item category
Answer the class category


@meindex classPool
@item classPool
Answer the class pool dictionary


@meindex classVarNames
@item classVarNames
Answer the names of the variables in the class pool dictionary


@meindex comment
@item comment
Answer the class comment


@meindex debuggerClass
@item debuggerClass
Answer the debugger class that was set in the instance class


@meindex environment
@item environment
Answer the namespace in which the receiver is implemented


@meindex name
@item name
Answer the class name - it has none, actually


@meindex pragmaHandlerFor:@-
@item pragmaHandlerFor:@- aSymbol
Answer the (possibly inherited) registered handler for pragma
aSymbol, or nil if not found.


@meindex removeClassVarName:@-
@item removeClassVarName:@- aString
Removes the class variable from the class, error if not present, or
still in use.


@meindex removeSharedPool:@-
@item removeSharedPool:@- aDictionary
Remove the given dictionary to the list of the class' pool dictionaries


@meindex sharedPools
@item sharedPools
Return the names of the shared pools defined by the class


@end table



@node Metaclass-filing
@subsection Metaclass:@- filing

@table @b
@meindex fileOutOn:@-
@item fileOutOn:@- aFileStream
File out complete class description:@-  class definition, class and
instance methods


@end table



@node Metaclass-printing
@subsection Metaclass:@- printing

@table @b
@meindex nameIn:@-
@item nameIn:@- aNamespace
Answer the class name when the class is referenced from aNamespace.


@meindex printOn:@-
@item printOn:@- aStream
Print a represention of the receiver on aStream


@meindex printOn:@-in:@-
@item printOn:@- aStream in:@- aNamespace
Print on aStream the class name when the class is referenced from
aNamespace.


@meindex storeOn:@-
@item storeOn:@- aStream
Store Smalltalk code compiling to the receiver on aStream


@end table



@node Metaclass-testing functionality
@subsection Metaclass:@- testing functionality

@table @b
@meindex asClass
@item asClass
Answer `instanceClass'.

@meindex isMetaclass
@item isMetaclass
Answer `true'.

@end table

@node MethodContext
@section MethodContext
@clindex MethodContext

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: ContextPart
@itemx Category: Language-Implementation
My instances represent an actively executing method.  They record various
bits of information about the execution environment, and contain the
execution stack.
@end table

@menu
* MethodContext-accessing::  (instance)
* MethodContext-debugging::  (instance)
* MethodContext-printing::  (instance)
@end menu



@node MethodContext-accessing
@subsection MethodContext:@- accessing

@table @b
@meindex home
@item home
Answer the MethodContext to which the receiver refers
(i.e. the receiver itself)


@meindex isBlock
@item isBlock
Answer whether the receiver is a block context


@meindex isDisabled
@slindex ensure:@-
@item isDisabled
Answers whether the receiver has actually ended execution and will
be skipped when doing a return.  BlockContexts are removed from the
chain whenever a non-local return is done, but MethodContexts need to
stay there in case there is a non-local return from the #ensure:@-
block.


@meindex isEnvironment
@item isEnvironment
To create a valid execution environment for the interpreter even
before it starts, GST creates a fake context which invokes a special
``termination'' method.  Such a context can be used as a marker for
the current execution environment.  Answer whether the receiver is
that kind of context.


@meindex isUnwind
@slindex continue:@-
@slindex ensure:@-
@item isUnwind
Answers whether the context must continue execution even after a
non-local return (a return from the enclosing method of a block, or
a call to the #continue:@- method of ContextPart).  Such contexts are
created only by #ensure:@-.


@meindex mark
@slindex valueWithUnwind
@item mark
To create a valid execution environment for the interpreter even
before it starts, GST creates a fake context which invokes a special
``termination'' method.  A similar context is created by
#valueWithUnwind, by using this method.


@meindex sender
@item sender
Return the context from which the receiver was sent


@end table



@node MethodContext-debugging
@subsection MethodContext:@- debugging

@table @b
@meindex isInternalExceptionHandlingContext
@slindex exceptionHandlingInternal:@-
@item isInternalExceptionHandlingContext
Answer whether the receiver is a context that should be hidden to the user
when presenting a backtrace.  Such contexts are identified through the
#exceptionHandlingInternal:@- attribute:@- if there is such a context in
the backtrace, all those above it are marked as internal.

That is, the attribute being set to true means that the context and all those
above it are to be hidden, while the attribute being set to false means
that the contexts above it must be hidden, but not the context itself.


@end table



@node MethodContext-printing
@subsection MethodContext:@- printing

@table @b
@meindex printOn:@-
@item printOn:@- aStream
Print a representation for the receiver on aStream


@end table

@node MethodDictionary
@section MethodDictionary
@clindex MethodDictionary

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: IdentityDictionary
@itemx Category: Language-Implementation
I am similar to an IdentityDictionary, except that removal and
rehashing operations inside my instances look atomic to the
interpreter.
@end table

@menu
* MethodDictionary-adding::  (instance)
* MethodDictionary-rehashing::  (instance)
* MethodDictionary-removing::  (instance)
@end menu



@node MethodDictionary-adding
@subsection MethodDictionary:@- adding

@table @b
@meindex at:@-put:@-
@item at:@- key put:@- value
Store value as associated to the given key


@end table



@node MethodDictionary-rehashing
@subsection MethodDictionary:@- rehashing

@table @b
@meindex rehash
@item rehash
Rehash the receiver


@end table



@node MethodDictionary-removing
@subsection MethodDictionary:@- removing

@table @b
@meindex remove:@-
@item remove:@- anAssociation
Remove anAssociation's key from the dictionary


@meindex removeKey:@-ifAbsent:@-
@item removeKey:@- anElement ifAbsent:@- aBlock
Remove the passed key from the dictionary, answer the result of
evaluating aBlock if it is not found


@end table

@node MethodInfo
@section MethodInfo
@clindex MethodInfo

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Object
@itemx Category: Language-Implementation
I provide information about particular methods.  I can produce the category
that a method was filed under, and can be used to access the source
code of the method.
@end table

@menu
* MethodInfo-accessing::  (instance)
* MethodInfo-equality::  (instance)
@end menu



@node MethodInfo-accessing
@subsection MethodInfo:@- accessing

@table @b
@meindex category
@item category
Answer the method category


@meindex category:@-
@item category:@- aCategory
Set the method category


@meindex methodClass
@item methodClass
Answer the class in which the method is defined


@meindex methodClass:@-
@item methodClass:@- aClass
Set the class in which the method is defined


@meindex selector
@item selector
Answer the selector through which the method is called


@meindex selector:@-
@item selector:@- aSymbol
Set the selector through which the method is called


@meindex sourceCode
@item sourceCode
Answer a FileSegment or String or nil containing the method source code


@meindex sourceFile
@item sourceFile
Answer the name of the file where the method source code is


@meindex sourcePos
@item sourcePos
Answer the starting position of the method source code in the sourceFile


@meindex sourceString
@item sourceString
Answer a String containing the method source code


@meindex stripSourceCode
@item stripSourceCode
Remove the reference to the source code for the method


@end table



@node MethodInfo-equality
@subsection MethodInfo:@- equality

@table @b
@meindex =
@item = aMethodInfo
Compare the receiver and aMethodInfo, answer whether they're equal


@meindex hash
@item hash
Answer an hash value for the receiver


@end table

@node Namespace
@section Namespace
@clindex Namespace

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: AbstractNamespace
@itemx Category: Language-Implementation
I am a Namespace that has a super-namespace.
@end table

@menu
* Namespace class-accessing::  (class)
* Namespace class-disabling instance creation::  (class)
* Namespace class-initialization::  (class)
* Namespace-accessing::  (instance)
* Namespace-namespace hierarchy::  (instance)
* Namespace-overrides for superspaces::  (instance)
* Namespace-printing::  (instance)
@end menu



@node Namespace class-accessing
@subsection Namespace class:@- accessing

@table @b
@meindex current
@item current
Answer the current namespace


@meindex current:@-
@item current:@- aNamespaceOrClass
Set the current namespace to be aNamespace or, if it is a class,
its class pool (the Dictionary that holds class variables).


@end table



@node Namespace class-disabling instance creation
@subsection Namespace class:@- disabling instance creation

@table @b
@meindex new
@slindex addSubspace:@-
@item new
Disabled - use #addSubspace:@- to create instances


@meindex new:@-
@slindex addSubspace:@-
@item new:@- size
Disabled - use #addSubspace:@- to create instances


@end table



@node Namespace class-initialization
@subsection Namespace class:@- initialization

@table @b
@meindex initialize
@item initialize
This actually is not needed, the job could be done in dict.c
(function namespace_new).  But I'm lazy and I prefer to rely
on the Smalltalk implementation of IdentitySet.


@end table



@node Namespace-accessing
@subsection Namespace:@- accessing

@table @b
@meindex inheritedKeys
@item inheritedKeys
Answer a Set of all the keys in the receiver and its superspaces


@end table



@node Namespace-namespace hierarchy
@subsection Namespace:@- namespace hierarchy

@table @b
@meindex siblings
@item siblings
Answer all the other namespaces that inherit from the receiver's
superspace.


@meindex siblingsDo:@-
@item siblingsDo:@- aBlock
Evaluate aBlock once for each of the other namespaces that inherit
from the receiver's superspace, passing the namespace as a parameter.


@end table



@node Namespace-overrides for superspaces
@subsection Namespace:@- overrides for superspaces

@table @b
@meindex associationAt:@-ifAbsent:@-
@item associationAt:@- key ifAbsent:@- aBlock
Return the key/value pair associated to the variable named as
specified by `key'. If the key is not found search will be
brought on in superspaces, finally evaluating aBlock if the
variable cannot be found in any of the superspaces.


@meindex associationsDo:@-
@item associationsDo:@- aBlock
Pass each association in the namespace to aBlock


@meindex at:@-ifAbsent:@-
@item at:@- key ifAbsent:@- aBlock
Return the value associated to the variable named as specified
by `key'. If the key is not found search will be brought on in
superspaces, finally evaluating aBlock if the variable cannot be
found in any of the superspaces.


@meindex at:@-ifPresent:@-
@item at:@- key ifPresent:@- aBlock
If aKey is absent from the receiver and all its superspaces,
answer nil. Else, evaluate aBlock passing the associated value
and answer the result of the invocation


@meindex do:@-
@item do:@- aBlock
Pass each value in the namespace to aBlock


@meindex includesKey:@-
@item includesKey:@- key
Answer whether the receiver or any of its superspaces contain
the given key


@meindex keysAndValuesDo:@-
@item keysAndValuesDo:@- aBlock
Pass to aBlock each of the receiver's keys and values, in two
separate parameters


@meindex keysDo:@-
@item keysDo:@- aBlock
Pass to aBlock each of the receiver's keys


@meindex set:@-to:@-ifAbsent:@-
@item set:@- key to:@- newValue ifAbsent:@- aBlock
Assign newValue to the variable named as specified by `key'.
This method won't define a new variable; instead if the key
is not found it will search in superspaces and evaluate
aBlock if it is not found. Answer newValue.


@meindex size
@item size
Answer the number of keys in the receiver and each of its superspaces


@end table



@node Namespace-printing
@subsection Namespace:@- printing

@table @b
@meindex nameIn:@-
@item nameIn:@- aNamespace
Answer Smalltalk code compiling to the receiver when the current
namespace is aNamespace


@meindex printOn:@-in:@-
@item printOn:@- aStream in:@- aNamespace
Print on aStream some Smalltalk code compiling to the receiver
when the current namespace is aNamespace


@meindex storeOn:@-
@item storeOn:@- aStream
Store Smalltalk code compiling to the receiver


@end table

@node NetClients.URIResolver
@section NetClients.URIResolver
@clindex NetClients.URIResolver

@table @b
@item Defined in namespace Smalltalk.NetClients
@itemx Superclass: Object
@itemx Category: NetClients-URIResolver

This class publishes methods to download files from the Internet.
@end table

@menu
* NetClients.URIResolver class-api::  (class)
* NetClients.URIResolver class-instance creation::  (class)
@end menu



@node NetClients.URIResolver class-api
@subsection NetClients.URIResolver class:@- api

@table @b
@meindex openOn:@-
@item openOn:@- aURI
Always raise an error, as this method is not supported
without loading the additional NetClients package.


@meindex openOn:@-ifFail:@-
@item openOn:@- aURI ifFail:@- aBlock
Always evaluate aBlock and answer the result if the additional NetClients
package is not loaded.  If it is, instead, return a WebEntity with the
contents of the resource specified by anURI, and only evaluate the block
if loading the resource fails.


@meindex openStreamOn:@-
@item openStreamOn:@- aURI
Check if aURI can be fetched from the Internet or from the local system,
and if so return a Stream with its contents.  If this is not possible,
raise an exception.


@meindex openStreamOn:@-ifFail:@-
@item openStreamOn:@- aURI ifFail:@- aBlock
Check if aURI can be fetched from the Internet or from the local system,
and if so return a Stream with its contents.  If this is not possible,
instead, evaluate the zero-argument block aBlock and answer the result
of the evaluation.


@end table



@node NetClients.URIResolver class-instance creation
@subsection NetClients.URIResolver class:@- instance creation

@table @b
@meindex on:@-
@item on:@- anURL
Answer a new URIResolver that will do its best to fetch the data for
anURL from the Internet.


@end table

@node NetClients.URL
@section NetClients.URL
@clindex NetClients.URL

@table @b
@item Defined in namespace Smalltalk.NetClients
@itemx Superclass: Object
@itemx Category: NetClients-URIResolver

Copyright (c) Kazuki Yasumatsu, 1995. All rights reserved.


@end table

@menu
* NetClients.URL class-encoding URLs::  (class)
* NetClients.URL class-instance creation::  (class)
* NetClients.URL-accessing::  (instance)
* NetClients.URL-comparing::  (instance)
* NetClients.URL-copying::  (instance)
* NetClients.URL-initialize-release::  (instance)
* NetClients.URL-printing::  (instance)
* NetClients.URL-still unclassified::  (instance)
* NetClients.URL-testing::  (instance)
* NetClients.URL-utilities::  (instance)
@end menu



@node NetClients.URL class-encoding URLs
@subsection NetClients.URL class:@- encoding URLs

@table @b
@meindex decode:@-
@item decode:@- aString
Decode a text/x-www-form-urlencoded String into a text/plain String.


@meindex encode:@-
@item encode:@- anURL
Encode a text/plain into a text/x-www-form-urlencoded String (those
things with lots of % in them).


@meindex initialize
@item initialize
Initialize the receiver's class variables.


@end table



@node NetClients.URL class-instance creation
@subsection NetClients.URL class:@- instance creation

@table @b
@meindex fromString:@-
@item fromString:@- aString
Parse the given URL and answer an URL object based on it.


@meindex new
@item new
Answer a 'blank' URL.


@meindex scheme:@-host:@-path:@-
@item scheme:@- schemeString host:@- hostString path:@- pathString
Answer an URL object made from all the parts passed as arguments.


@meindex scheme:@-host:@-port:@-path:@-
@item scheme:@- schemeString host:@- hostString port:@- portNumber path:@- pathString
Answer an URL object made from all the parts passed as arguments.


@meindex scheme:@-path:@-
@item scheme:@- schemeString path:@- pathString
Answer an URL object made from all the parts passed as arguments.


@meindex scheme:@-username:@-password:@-host:@-port:@-path:@-
@item scheme:@- schemeString username:@- userString password:@- passwordString host:@- hostString port:@- portNumber path:@- pathString
Answer an URL object made from all the parts passed as arguments.


@end table



@node NetClients.URL-accessing
@subsection NetClients.URL:@- accessing

@table @b
@meindex asString
@item asString
Answer the full request string corresponding to the URL.  This is how
the URL would be printed in the address bar of a web browser, except that
the query data is printed even if it is to be sent through a POST request.


@meindex decodedFields
@item decodedFields
Convert the form fields to a Dictionary, answer
nil if no question mark is found in the URL.


@meindex decodedFile
@item decodedFile
Answer the file part of the URL, decoding it from x-www-form-urlencoded
format.


@meindex decodedFragment
@item decodedFragment
Answer the fragment part of the URL, decoding it from x-www-form-urlencoded
format.


@meindex fragment
@item fragment
Answer the fragment part of the URL, leaving it in x-www-form-urlencoded
format.


@meindex fragment:@-
@item fragment:@- aString
Set the fragment part of the URL, which should be in x-www-form-urlencoded
format.


@meindex fullRequestString
@item fullRequestString
Answer the full request string corresponding to the URL.  This is how
the URL would be printed in the address bar of a web browser, except that
the query data is printed even if it is to be sent through a POST request.


@meindex hasPostData
@item hasPostData
Answer whether the URL has a query part but is actually for an HTTP POST
request and not really part of the URL (as it would be for the HTTP
GET request).


@meindex hasPostData:@-
@item hasPostData:@- aBoolean
Set whether the query part of the URL is actually the data for an HTTP POST
request and not really part of the URL (as it would be for the HTTP
GET request).


@meindex host
@item host
Answer the host part of the URL.


@meindex host:@-
@item host:@- aString
Set the host part of the URL to aString.


@meindex newsGroup
@item newsGroup
If the receiver is an nntp url, return the news group.


@meindex password
@item password
Answer the password part of the URL.


@meindex password:@-
@item password:@- aString
Set the password part of the URL to aString.


@meindex path
@item path
Answer the path part of the URL.


@meindex path:@-
@item path:@- aString
Set the path part of the URL to aString.


@meindex port
@item port
Answer the port number part of the URL.


@meindex port:@-
@item port:@- anInteger
Set the port number part of the URL to anInteger.


@meindex postData
@item postData
Answer whether the URL has a query part and it is meant for an HTTP POST
request, answer it.  Else answer nil.


@meindex postData:@-
@item postData:@- aString
Associate to the URL some data that is meant to be sent through an HTTP POST
request, answer it.


@meindex query
@item query
Answer the query data associated to the URL.


@meindex query:@-
@item query:@- aString
Set the query data associated to the URL to aString.


@meindex requestString
@item requestString
Answer the URL as it would be sent in an HTTP stream (that is, the
path and the query data, the latter only if it is to be sent with
an HTTP POST request).


@meindex scheme
@item scheme
Answer the URL's scheme.


@meindex scheme:@-
@item scheme:@- aString
Set the URL's scheme to be aString.


@meindex username
@item username
Answer the username part of the URL.


@meindex username:@-
@item username:@- aString
Set the username part of the URL to aString.


@end table



@node NetClients.URL-comparing
@subsection NetClients.URL:@- comparing

@table @b
@meindex =
@item = anURL
Answer whether the two URLs are equal.  The file and anchor
are converted to full 8-bit ASCII (contrast with urlencoded)
and the comparison is case-sensitive; on the other hand,
the protocol and host are compared without regard to case.


@meindex hash
@item hash
Answer an hash value for the receiver


@end table



@node NetClients.URL-copying
@subsection NetClients.URL:@- copying

@table @b
@meindex copyWithoutAuxiliaryParts
@item copyWithoutAuxiliaryParts
Answer a copy of the receiver where the fragment and query
parts of the URL have been cleared.


@meindex copyWithoutFragment
@item copyWithoutFragment
Answer a copy of the receiver where the fragment
parts of the URL has been cleared.


@meindex postCopy
@item postCopy
All the variables are copied when an URL object is copied.


@end table



@node NetClients.URL-initialize-release
@subsection NetClients.URL:@- initialize-release

@table @b
@meindex initialize
@item initialize
Initialize the object to a consistent state.


@end table



@node NetClients.URL-printing
@subsection NetClients.URL:@- printing

@table @b
@meindex printOn:@-
@item printOn:@- stream
Print a representation of the URL on the given stream.


@end table



@node NetClients.URL-still unclassified
@subsection NetClients.URL:@- still unclassified

@table @b
@meindex contents
@item contents
Not commented.

@meindex entity
@item entity
Not commented.

@meindex readStream
@item readStream
Not commented.

@end table



@node NetClients.URL-testing
@subsection NetClients.URL:@- testing

@table @b
@meindex canCache
@item canCache
Answer whether the URL is cacheable.  The current implementation considers
file URLs not to be cacheable, and everything else to be.


@meindex hasFragment
@item hasFragment
Answer whether the URL points to a particular fragment (anchor) of the
resource.


@meindex hasQuery
@item hasQuery
Answer whether the URL includes query arguments to be submitted when
retrieving the resource.


@meindex isFileScheme
@item isFileScheme
Answer whether the URL is a file URL.


@meindex isFragmentOnly
@item isFragmentOnly
Answer whether the URL only includes the name of a particular fragment (anchor)
of the resource to which it refers.


@end table



@node NetClients.URL-utilities
@subsection NetClients.URL:@- utilities

@table @b
@meindex construct:@-
@item construct:@- anURL
Construct an absolute URL based on the relative URL anURL and the base path
represented by the receiver


@end table

@node Notification
@section Notification
@clindex Notification

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Exception
@itemx Category: Language-Exceptions
Notification represents a resumable, exceptional yet non-erroneous,
situation.  Signaling a notification in absence of an handler simply
returns nil.
@end table

@menu
* Notification-exception description::  (instance)
@end menu



@node Notification-exception description
@subsection Notification:@- exception description

@table @b
@meindex defaultAction
@item defaultAction
Do the default action for notifications, which is to resume execution
of the context which signaled the exception.


@meindex description
@item description
Answer a textual description of the exception.


@meindex isResumable
@item isResumable
Answer true.  Notification exceptions are by default resumable.


@end table

@node NullProxy
@section NullProxy
@clindex NullProxy

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: AlternativeObjectProxy
@itemx Category: Streams-Files
I am a proxy that does no special processing on the object
to be saved. I can be used to disable proxies for particular subclasses.  My
subclasses add to the stored information, but share the fact that the format
is about the same as that of #dump:@- without a proxy.
@end table

@menu
* NullProxy class-instance creation::  (class)
* NullProxy-accessing::  (instance)
@end menu



@node NullProxy class-instance creation
@subsection NullProxy class:@- instance creation

@table @b
@meindex loadFrom:@-
@item loadFrom:@- anObjectDumper
Reload the object stored in anObjectDumper


@end table



@node NullProxy-accessing
@subsection NullProxy:@- accessing

@table @b
@meindex dumpTo:@-
@item dumpTo:@- anObjectDumper
Dump the object stored in the proxy to anObjectDumper


@end table

@node NullValueHolder
@section NullValueHolder
@clindex NullValueHolder

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: ValueAdaptor
@itemx Category: Language-Data types
I pretend to store my value in a variable, but I don't actually.
You can use the only instance of my class (returned by `ValueHolder null')
if you're not interested in a value that is returned as described in
ValueHolder's comment.
@end table

@menu
* NullValueHolder class-creating instances::  (class)
* NullValueHolder-accessing::  (instance)
@end menu



@node NullValueHolder class-creating instances
@subsection NullValueHolder class:@- creating instances

@table @b
@meindex new
@item new
Not used -- use `ValueHolder null' instead


@meindex uniqueInstance
@item uniqueInstance
Answer the sole instance of NullValueHolder


@end table



@node NullValueHolder-accessing
@subsection NullValueHolder:@- accessing

@table @b
@meindex value
@item value
Retrive the value of the receiver. Always answer nil


@meindex value:@-
@item value:@- anObject
Set the value of the receiver. Do nothing, discard the value


@end table

@node Number
@section Number
@clindex Number

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Magnitude
@itemx Category: Language-Data types
I am an abstract class that provides operations on numbers, both floating
point and integer.  I provide some generic predicates, and supply the 
implicit type coercing code for binary operations.
@end table

@menu
* Number class-converting::  (class)
* Number class-testing::  (class)
* Number-arithmetic::  (instance)
* Number-coercion::  (instance)
* Number-comparing::  (instance)
* Number-converting::  (instance)
* Number-copying::  (instance)
* Number-error raising::  (instance)
* Number-misc math::  (instance)
* Number-point creation::  (instance)
* Number-retrying::  (instance)
* Number-shortcuts and iterators::  (instance)
* Number-testing::  (instance)
* Number-truncation and round off::  (instance)
@end menu



@node Number class-converting
@subsection Number class:@- converting

@table @b
@meindex coerce:@-
@item coerce:@- aNumber
Answer aNumber - whatever class it belongs to, it is good


@meindex readFrom:@-
@item readFrom:@- aStream
Answer the number read from the rest of aStream, converted to an
instance of the receiver. If the receiver is number, the class of the
result is undefined -- but the result is good.


@meindex readFrom:@-radix:@-
@item readFrom:@- aStream radix:@- anInteger
Answer the number read from the rest of aStream, converted to an
instance of the receiver. If the receiver is number, the class of the
result is undefined -- but the result is good.

The exponent (for example 1.2e-1) is only parsed if anInteger is 10.


@end table



@node Number class-testing
@subsection Number class:@- testing

@table @b
@meindex isImmediate
@item isImmediate
Answer whether, if x is an instance of the receiver, x copy == x


@end table



@node Number-arithmetic
@subsection Number:@- arithmetic

@table @b
@meindex *
@item * aNumber
Subtract the receiver and aNumber, answer the result


@meindex +
@item + aNumber
Sum the receiver and aNumber, answer the result


@meindex -
@item - aNumber
Subtract aNumber from the receiver, answer the result


@meindex /
@item / aNumber
Divide the receiver by aNumber, answer the result (no loss of
precision).  Raise a ZeroDivide exception or return a valid
(possibly infinite) continuation value if aNumber is zero.


@meindex //
@item // aNumber
Return the integer quotient of dividing the receiver by aNumber with
truncation towards negative infinity.  Raise a ZeroDivide
exception if aNumber is zero


@meindex \\
@item \\ aNumber
Return the remainder of dividing the receiver by aNumber with
truncation towards negative infinity.  Raise a ZeroDivide
exception if aNumber is zero


@meindex quo:@-
@item quo:@- aNumber
Return the integer quotient of dividing the receiver by aNumber with
truncation towards zero.  Raise a ZeroDivide exception if aNumber is
zero


@meindex reciprocal
@item reciprocal
Return the reciprocal of the receiver


@meindex rem:@-
@item rem:@- aNumber
Return the remainder of dividing the receiver by aNumber with
truncation towards zero.  Raise a ZeroDivide exception if aNumber is
zero


@end table



@node Number-coercion
@subsection Number:@- coercion

@table @b
@meindex asCNumber
@item asCNumber
Convert the receiver to a kind of number that is understood by
the C call-out mechanism.


@end table



@node Number-comparing
@subsection Number:@- comparing

@table @b
@meindex max:@-
@item max:@- aNumber
Answer the maximum between the receiver and aNumber.  Redefine
in subclasses if necessary to ensure that if either self or
aNumber is a NaN, it is always answered.


@meindex min:@-
@item min:@- aNumber
Answer the minimum between the receiver and aNumber.  Redefine
in subclasses if necessary to ensure that if either self or
aNumber is a NaN, it is always answered.


@end table



@node Number-converting
@subsection Number:@- converting

@table @b
@meindex asExactFraction
@item asExactFraction
Return the receiver, converted to a Fraction retaining the exact
value of the receiver.


@meindex asFloat
@item asFloat
Convert the receiver to an arbitrary subclass of Float


@meindex asFloatD
@item asFloatD
This method's functionality should be implemented by subclasses of Number

@meindex asFloatE
@item asFloatE
This method's functionality should be implemented by subclasses of Number

@meindex asFloatQ
@item asFloatQ
This method's functionality should be implemented by subclasses of Number

@meindex asFraction
@item asFraction
This method's functionality should be implemented by subclasses of Number

@meindex asNumber
@item asNumber
Answer the receiver, since it is already a number


@meindex asRectangle
@item asRectangle
Answer an empty rectangle whose origin is (self asPoint)


@meindex asScaledDecimal:@-
@item asScaledDecimal:@- n
Answer the receiver, converted to a ScaledDecimal object.


@meindex asScaledDecimal:@-radix:@-scale:@-
@item asScaledDecimal:@- denDigits radix:@- base scale:@- n
Answer the receiver, divided by base^denDigits and converted to
a ScaledDecimal object.


@meindex asString
@slindex displayString
@item asString
Answer the receiver's #displayString, which should be a good enough
conversion to String for a number.


@meindex coerce:@-
@item coerce:@- aNumber
Answer aNumber, converted to an integer or floating-point number.


@meindex degreesToRadians
@item degreesToRadians
Convert the receiver to radians


@meindex generality
@item generality
Answer the receiver's generality


@meindex radiansToDegrees
@item radiansToDegrees
Convert the receiver from radians to degrees


@meindex unity
@item unity
Coerce 1 to the receiver's class. The default implementation works,
but is inefficient


@meindex zero
@item zero
Coerce 0 to the receiver's class. The default implementation works,
but is inefficient


@end table



@node Number-copying
@subsection Number:@- copying

@table @b
@meindex deepCopy
@item deepCopy
Return the receiver - it's an immediate (immutable) object


@meindex shallowCopy
@item shallowCopy
Return the receiver - it's an immediate (immutable) object


@end table



@node Number-error raising
@subsection Number:@- error raising

@table @b
@meindex arithmeticError:@-
@item arithmeticError:@- msg
Raise an ArithmeticError exception having msg as its message text.


@meindex zeroDivide
@item zeroDivide
Raise a division-by-zero (ZeroDivide) exception whose dividend
is the receiver.


@end table



@node Number-misc math
@subsection Number:@- misc math

@table @b
@meindex abs
@item abs
Answer the absolute value of the receiver


@meindex arcCos
@item arcCos
Answer the arc cosine of the receiver


@meindex arcCosh
@item arcCosh
Answer the hyperbolic arc-cosine of the receiver.


@meindex arcSin
@item arcSin
Answer the arc sine of the receiver


@meindex arcSinh
@item arcSinh
Answer the hyperbolic arc-sine of the receiver.


@meindex arcTan
@item arcTan
Answer the arc tangent of the receiver


@meindex arcTan:@-
@item arcTan:@- x
Answer the angle (measured counterclockwise) between (x, self) and
a ray starting in (0, 0) and moving towards (1, 0) - i.e. 3 o'clock


@meindex arcTanh
@item arcTanh
Answer the hyperbolic arc-tangent of the receiver.


@meindex ceilingLog:@-
@item ceilingLog:@- radix
Answer (self log:@- radix) ceiling. Optimized to answer an integer.


@meindex cos
@item cos
Answer the cosine of the receiver


@meindex cosh
@item cosh
Answer the hyperbolic cosine of the receiver.


@meindex estimatedLog
@item estimatedLog
Answer an estimate of (self abs floorLog:@- 10). This method
should be overridden by subclasses, but Number's implementation
does not raise errors - simply, it gives a correct result, so
it is slow.


@meindex exp
@item exp
Answer e raised to the receiver


@meindex floorLog:@-
@item floorLog:@- radix
Answer (self log:@- radix) floor. Optimized to answer an integer.


@meindex ln
@item ln
Answer log base e of the receiver


@meindex log
@item log
Answer log base 10 of the receiver


@meindex log:@-
@item log:@- aNumber
Answer log base aNumber of the receiver


@meindex negated
@item negated
Answer the negated of the receiver


@meindex positiveDifference:@-
@item positiveDifference:@- aNumber
Answer the positive difference of the receiver and
aNumber, that is self - aNumber if it is positive,
0 otherwise.


@meindex raisedTo:@-
@item raisedTo:@- aNumber
Return self raised to aNumber power


@meindex raisedToInteger:@-
@item raisedToInteger:@- anInteger
Return self raised to the anInteger-th power


@meindex sin
@item sin
Answer the sine of the receiver


@meindex sinh
@item sinh
Answer the hyperbolic sine of the receiver.


@meindex sqrt
@item sqrt
Answer the square root of the receiver


@meindex squared
@item squared
Answer the square of the receiver


@meindex tan
@item tan
Answer the tangent of the receiver


@meindex tanh
@item tanh
Answer the hyperbolic tangent of the receiver.


@meindex withSignOf:@-
@item withSignOf:@- aNumber
Answer the receiver, with its sign possibly changed to match
that of aNumber.


@end table



@node Number-point creation
@subsection Number:@- point creation

@table @b
@meindex @@
@item @@ y
Answer a new point whose x is the receiver and whose y is y


@meindex asPoint
@item asPoint
Answer a new point, self @@ self


@end table



@node Number-retrying
@subsection Number:@- retrying

@table @b
@meindex retry:@-coercing:@-
@slindex =
@slindex ~=
@item retry:@- aSymbol coercing:@- aNumber
Coerce to the other number's class the one number between the receiver and
aNumber which has the lowest, and retry calling aSymbol.  aSymbol is
supposed not to be #= or #~= (since those don't fail if aNumber is not
a Number).


@meindex retryDifferenceCoercing:@-
@slindex -
@item retryDifferenceCoercing:@- aNumber
Coerce to the other number's class the one number between the receiver and
aNumber which has the lowest, and retry calling #-.


@meindex retryDivisionCoercing:@-
@slindex /
@item retryDivisionCoercing:@- aNumber
Coerce to the other number's class the one number between the receiver and
aNumber which has the lowest, and retry calling #/.


@meindex retryEqualityCoercing:@-
@slindex =
@item retryEqualityCoercing:@- aNumber
Coerce to the other number's class the one number between the receiver and
aNumber which has the lowest, and retry calling #=.


@meindex retryError
@item retryError
Raise an error---a retrying method was called with two arguments
having the same generality.


@meindex retryInequalityCoercing:@-
@slindex ~=
@item retryInequalityCoercing:@- aNumber
Coerce to the other number's class the one number between the receiver and
aNumber which has the lowest, and retry calling #~=.


@meindex retryMultiplicationCoercing:@-
@slindex *
@item retryMultiplicationCoercing:@- aNumber
Coerce to the other number's class the one number between the receiver and
aNumber which has the lowest, and retry calling #*.


@meindex retryRelationalOp:@-coercing:@-
@item retryRelationalOp:@- aSymbol coercing:@- aNumber
Coerce to the other number's class the one number between the receiver and
aNumber which has the lowest, and retry calling aSymbol (<, <=, >, >=).


@meindex retrySumCoercing:@-
@slindex +
@item retrySumCoercing:@- aNumber
Coerce to the other number's class the one number between the receiver and
aNumber which has the lowest, and retry calling #+.


@end table



@node Number-shortcuts and iterators
@subsection Number:@- shortcuts and iterators

@table @b
@meindex to:@-
@item to:@- stop
Return an interval going from the receiver to stop by 1


@meindex to:@-by:@-
@item to:@- stop by:@- step
Return an interval going from the receiver to stop with the given step


@meindex to:@-by:@-collect:@-
@item to:@- stop by:@- step collect:@- aBlock
Evaluate aBlock for each value in the interval going from the receiver
to stop with the given step.  The results are collected in an Array
and returned.


@meindex to:@-by:@-do:@-
@item to:@- stop by:@- step do:@- aBlock
Evaluate aBlock for each value in the interval going from the receiver
to stop with the given step. Compiled in-line for integer literal steps,
and for one-argument aBlocks without temporaries, and therefore
not overridable.


@meindex to:@-collect:@-
@item to:@- stop collect:@- aBlock
Evaluate aBlock for each value in the interval going from the receiver
to stop by 1.  The results are collected in an Array and returned.


@meindex to:@-do:@-
@item to:@- stop do:@- aBlock
Evaluate aBlock for each value in the interval going from the receiver
to stop by 1. Compiled in-line for one-argument aBlocks without
temporaries, and therefore not overridable.


@end table



@node Number-testing
@subsection Number:@- testing

@table @b
@meindex closeTo:@-
@item closeTo:@- num
Answer whether the receiver can be considered sufficiently
close to num (this is done by checking equality if num is
not a number, and by checking with 0.01% tolerance if num
is a number).


@meindex even
@item even
Returns true if self is divisible by 2


@meindex isExact
@slindex subclassResponsibility
@item isExact
Answer whether the receiver performs exact arithmetic.  Most
numeric classes do (in fact the only exceptions is Float and
its descendants), so the default is to answer true rather than
calling #subclassResponsibility.


@meindex isFinite
@slindex subclassResponsibility
@item isFinite
Answer whether the receiver represents a finite quantity.  Most
numeric classes are for finite quantities, so the default is to
answer true rather than calling #subclassResponsibility.


@meindex isInfinite
@slindex subclassResponsibility
@item isInfinite
Answer whether the receiver represents an infinite quantity.  Most
numeric classes are for finite quantities, so the default is to
answer false rather than calling #subclassResponsibility.


@meindex isNaN
@slindex subclassResponsibility
@item isNaN
Answer whether the receiver is a Not-A-Number.  Most numeric
classes don't handle nans, so the default is to answer false
rather than calling #subclassResponsibility.


@meindex isNumber
@item isNumber
Answer `true'.

@meindex isRational
@item isRational
Answer whether the receiver is rational - false by default


@meindex negative
@item negative
Answer whether the receiver is < 0


@meindex odd
@item odd
Returns true if self is not divisible by 2


@meindex positive
@item positive
Answer whether the receiver is >= 0


@meindex sign
@item sign
Returns the sign of the receiver.


@meindex strictlyPositive
@item strictlyPositive
Answer whether the receiver is > 0


@end table



@node Number-truncation and round off
@subsection Number:@- truncation and round off

@table @b
@meindex asInteger
@item asInteger
Answer the receiver, rounded to the nearest integer


@meindex floor
@item floor
Return the integer nearest the receiver toward negative infinity.


@meindex fractionPart
@slindex integerPart
@item fractionPart
Answer a number which, summed to the #integerPart of the
receiver, gives the receiver itself.


@meindex integerPart
@item integerPart
Answer the receiver, truncated towards zero


@meindex roundTo:@-
@item roundTo:@- aNumber
Answer the receiver, truncated to the nearest multiple
of aNumber


@meindex rounded
@item rounded
Returns the integer nearest the receiver


@meindex truncateTo:@-
@item truncateTo:@- aNumber
Answer the receiver, truncated towards zero to a multiple
of aNumber


@meindex truncated
@item truncated
Answer the receiver, truncated towards zero


@end table

@node Object
@section Object
@clindex Object

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: none
@itemx Category: Language-Implementation
I am the root of the Smalltalk class system. 
All classes in the system are subclasses of me.
@end table

@menu
* Object class-initialization::  (class)
* Object-built ins::  (instance)
* Object-change and update::  (instance)
* Object-class type methods::  (instance)
* Object-compiler::  (instance)
* Object-conversion::  (instance)
* Object-copying::  (instance)
* Object-debugging::  (instance)
* Object-dependents access::  (instance)
* Object-error raising::  (instance)
* Object-finalization::  (instance)
* Object-introspection::  (instance)
* Object-printing::  (instance)
* Object-relational operators::  (instance)
* Object-saving and loading::  (instance)
* Object-storing::  (instance)
* Object-syntax shortcuts::  (instance)
* Object-testing functionality::  (instance)
* Object-VM callbacks::  (instance)
@end menu



@node Object class-initialization
@subsection Object class:@- initialization

@table @b
@meindex dependencies
@item dependencies
Answer a dictionary that associates an object with its dependents.


@meindex dependencies:@-
@item dependencies:@- anObject
Use anObject as the dictionary that associates an object with its dependents.


@meindex finalizableObjects
@item finalizableObjects
Answer a set of finalizable objects.


@meindex initialize
@item initialize
Initialize the Dependencies dictionary to be a WeakKeyIdentityDictionary.


@meindex update:@-
@item update:@- aspect
Do any global tasks for the ObjectMemory events.


@end table



@node Object-built ins
@subsection Object:@- built ins

@table @b
@meindex =
@item = arg
Answer whether the receiver is equal to arg. The equality test is
by default the same as that for identical objects. = must not fail;
answer false if the receiver cannot be compared to arg


@meindex ==
@item == arg
Answer whether the receiver is the same object as arg. This is a
very fast test and is called 'object identity'.


@meindex allOwners
@item allOwners
Return an Array of Objects that point to the receiver.


@meindex asOop
@item asOop
Answer the object index associated to the receiver. The object
index doesn't change when garbage collection is performed.


@meindex at:@-
@item at:@- anIndex
Answer the index-th indexed instance variable of the receiver


@meindex at:@-put:@-
@item at:@- anIndex put:@- value
Store value in the index-th indexed instance variable of the receiver


@meindex basicAt:@-
@item basicAt:@- anIndex
Answer the index-th indexed instance variable of the receiver.
This method must not be overridden, override at:@- instead


@meindex basicAt:@-put:@-
@item basicAt:@- anIndex put:@- value
Store value in the index-th indexed instance variable of the receiver
This method must not be overridden, override at:@-put:@- instead


@meindex basicPrint
@item basicPrint
Print a basic representation of the receiver


@meindex basicSize
@item basicSize
Answer the number of indexed instance variable in the receiver


@meindex become:@-
@slindex become:@-
@item become:@- otherObject
Change all references to the receiver into references to otherObject.
Depending on the implementation, references to otherObject might or
might not be transformed into the receiver (respectively,
'two-way become' and 'one-way become').
Implementations doing one-way become answer the receiver (so that it is
not lost). Most implementations doing two-way become answer otherObject,
but this is not assured - so do answer the receiver for consistency.
GNU Smalltalk does two-way become and answers otherObject, but this
might change in future versions:@- programs should not rely on the behavior
and results of #become:@- .


@meindex becomeForward:@-
@item becomeForward:@- otherObject
Change all references to the receiver into references to otherObject.
References to otherObject are not transformed into the receiver.
Answer the receiver so that it is not lost.


@meindex changeClassTo:@-
@item changeClassTo:@- aBehavior
Mutate the class of the receiver to be aBehavior.
Note:@- Tacitly assumes that the structure is the same
for the original and new class!!


@meindex checkIndexableBounds:@-
@item checkIndexableBounds:@- index
Private - Check the reason why an access to the given indexed
instance variable failed


@meindex checkIndexableBounds:@-ifAbsent:@-
@item checkIndexableBounds:@- index ifAbsent:@- aBlock
Private - Check the reason why an access to the given indexed
instance variable failed.  Evaluate aBlock for an invalid index.


@meindex checkIndexableBounds:@-put:@-
@item checkIndexableBounds:@- index put:@- object
Private - Check the reason why a store to the given indexed
instance variable failed


@meindex class
@item class
Answer the class to which the receiver belongs


@meindex halt
@item halt
Called to enter the debugger


@meindex hash
@item hash
Answer an hash value for the receiver. This hash value is ok
for objects that do not redefine ==.


@meindex identityHash
@item identityHash
Answer an hash value for the receiver. This method must not be
overridden


@meindex instVarAt:@-
@item instVarAt:@- index
Answer the index-th instance variable of the receiver.
This method must not be overridden.


@meindex instVarAt:@-put:@-
@item instVarAt:@- index put:@- value
Store value in the index-th instance variable of the receiver.
This method must not be overridden.


@meindex isReadOnly
@item isReadOnly
Answer whether the object's indexed instance variables can be
written


@meindex isUntrusted
@item isUntrusted
Answer whether the object is to be considered untrusted.


@meindex makeEphemeron
@slindex mourn
@item makeEphemeron
Make the object an 'ephemeron'.  An ephemeron is marked after all
other objects, and if no references are found to the key except from
the object itself, it is sent the #mourn message.


@meindex makeFixed
@item makeFixed
Avoid that the receiver moves in memory across garbage collections.


@meindex makeReadOnly:@-
@item makeReadOnly:@- aBoolean
Set whether the object's indexed instance variables can be written


@meindex makeUntrusted:@-
@item makeUntrusted:@- aBoolean
Set whether the object is to be considered untrusted.


@meindex makeWeak
@slindex mourn
@item makeWeak
Make the object a 'weak' one. When an object is only referenced by weak
objects, it is collected and the slots in the weak objects are changed to
nils by the VM; the weak object is then sent the #mourn message.


@meindex mark:@-
@slindex mark:@-
@slindex mark:@-
@item mark:@- aSymbol
Private - use this method to mark code which needs to be reworked,
removed, etc. You can then find all senders of #mark:@- to find all marked
methods or you can look for all senders of the symbol that you sent to
#mark:@- to find a category of marked methods.


@meindex nextInstance
@item nextInstance
Private - answer another instance of the receiver's class, or
nil if the entire object table has been walked


@meindex notYetImplemented
@item notYetImplemented
Called when a method defined by a class is not yet implemented,
but is going to be


@meindex perform:@-
@item perform:@- selectorOrMessageOrMethod
Send the unary message named selectorOrMessageOrMethod (if a Symbol)
to the receiver, or the message and arguments it identifies (if a Message
or DirectedMessage), or finally execute the method within the receiver
(if a CompiledMethod).  In the last case, the method need not reside on
the hierarchy from the receiver's class to Object -- it need not reside
at all in a MethodDictionary, in fact -- but doing bad things will
compromise stability of the Smalltalk virtual machine (and don't blame
anybody but yourself).

This method should not be overridden


@meindex perform:@-with:@-
@item perform:@- selectorOrMethod with:@- arg1
Send the message named selectorOrMethod (if a Symbol) to the receiver,
passing arg1 to it, or execute the method within the receiver
(if a CompiledMethod).  In the latter case, the method need not reside on
the hierarchy from the receiver's class to Object -- it need not reside
at all in a MethodDictionary, in fact -- but doing bad things will
compromise stability of the Smalltalk virtual machine (and don't blame
anybody but yourself).

This method should not be overridden


@meindex perform:@-with:@-with:@-
@item perform:@- selectorOrMethod with:@- arg1 with:@- arg2
Send the message named selectorOrMethod (if a Symbol) to the receiver,
passing arg1 and arg2 to it, or execute the method within the receiver
(if a CompiledMethod).  In the latter case, the method need not reside on
the hierarchy from the receiver's class to Object -- it need not reside
at all in a MethodDictionary, in fact -- but doing bad things will
compromise stability of the Smalltalk virtual machine (and don't blame
anybody but yourself).

This method should not be overridden


@meindex perform:@-with:@-with:@-with:@-
@item perform:@- selectorOrMethod with:@- arg1 with:@- arg2 with:@- arg3
Send the message named selectorOrMethod (if a Symbol) to the receiver,
passing the other arguments to it, or execute the method within the
receiver (if a CompiledMethod).  In the latter case, the method need not
reside on the hierarchy from the receiver's class to Object -- it need
not reside at all in a MethodDictionary, in fact -- but doing bad things
will compromise stability of the Smalltalk virtual machine (and don't
blame anybody but yourself).

This method should not be overridden


@meindex perform:@-with:@-with:@-with:@-with:@-
@item perform:@- selectorOrMethod with:@- arg1 with:@- arg2 with:@- arg3 with:@- arg4
Send the message named selectorOrMethod (if a Symbol) to the receiver,
passing the other arguments to it, or execute the method within the
receiver (if a CompiledMethod).  In the latter case, the method need not
reside on the hierarchy from the receiver's class to Object -- it need
not reside at all in a MethodDictionary, in fact -- but doing bad things
will compromise stability of the Smalltalk virtual machine (and don't
blame anybody but yourself).

This method should not be overridden


@meindex perform:@-withArguments:@-
@item perform:@- selectorOrMethod withArguments:@- argumentsArray
Send the message named selectorOrMethod (if a Symbol) to the receiver,
passing the elements of argumentsArray as parameters, or execute the
method within the receiver (if a CompiledMethod).  In the latter case,
the method need not reside on the hierarchy from the receiver's class
to Object -- it need not reside at all in a MethodDictionary, in
fact -- but doing bad things will compromise stability of the Smalltalk
virtual machine (and don't blame anybody but yourself).

This method should not be overridden


@meindex primitiveFailed
@item primitiveFailed
Called when a VM primitive fails


@meindex shallowCopy
@item shallowCopy
Returns a shallow copy of the receiver (the instance variables are
not copied)


@meindex shouldNotImplement
@item shouldNotImplement
Called when objects belonging to a class should not answer a
selector defined by a superclass


@meindex size
@item size
Answer the number of indexed instance variable in the receiver


@meindex subclassResponsibility
@item subclassResponsibility
Called when a method defined by a class should be overridden
in a subclass


@meindex tenure
@item tenure
Move the object to oldspace.


@end table



@node Object-change and update
@subsection Object:@- change and update

@table @b
@meindex broadcast:@-
@item broadcast:@- aSymbol
Send the unary message aSymbol to each of the receiver's dependents


@meindex broadcast:@-with:@-
@item broadcast:@- aSymbol with:@- anObject
Send the message aSymbol to each of the receiver's dependents, passing
anObject


@meindex broadcast:@-with:@-with:@-
@item broadcast:@- aSymbol with:@- arg1 with:@- arg2
Send the message aSymbol to each of the receiver's dependents, passing
arg1 and arg2 as parameters


@meindex broadcast:@-withArguments:@-
@item broadcast:@- aSymbol withArguments:@- anArray
Send the message aSymbol to each of the receiver's dependents, passing
the parameters in anArray


@meindex broadcast:@-withBlock:@-
@item broadcast:@- aSymbol withBlock:@- aBlock
Send the message aSymbol to each of the receiver's dependents, passing
the result of evaluating aBlock with each dependent as the parameter


@meindex changed
@item changed
Send update:@- for each of the receiver's dependents, passing them the
receiver


@meindex changed:@-
@item changed:@- aParameter
Send update:@- for each of the receiver's dependents, passing them
aParameter


@meindex update:@-
@slindex changed
@slindex changed:@-
@item update:@- aParameter
Default behavior is to do nothing. Called by #changed and #changed:@-


@end table



@node Object-class type methods
@subsection Object:@- class type methods

@table @b
@meindex species
@slindex class
@slindex species
@slindex copyEmpty:@-
@item species
This method has no unique definition. Generally speaking, methods which
always return the same type usually don't use #class, but #species.
For example, a PositionableStream's species is the class of the collection
on which it is streaming (used by upTo:@-, upToAll:@-, upToEnd). Stream uses
species for obtaining the class of next:@-'s return value, Collection uses
it in its #copyEmpty:@- message, which in turn is used by all collection-returning
methods. An Interval's species is Array (used by collect:@-, select:@-,
reject:@-, etc.).


@meindex yourself
@item yourself
Answer the receiver


@end table



@node Object-compiler
@subsection Object:@- compiler

@table @b
@meindex literalEquals:@-
@item literalEquals:@- anObject
Not commented.

@meindex literalHash
@item literalHash
Not commented.

@end table



@node Object-conversion
@subsection Object:@- conversion

@table @b
@meindex asValue
@item asValue
Answer a ValueHolder whose initial value is the receiver.


@end table



@node Object-copying
@subsection Object:@- copying

@table @b
@meindex copy
@item copy
Returns a shallow copy of the receiver (the instance variables are
not copied). The shallow copy receives the message postCopy and the
result of postCopy is passed back.


@meindex deepCopy
@item deepCopy
Returns a deep copy of the receiver (the instance variables are
copies of the receiver's instance variables)


@meindex postCopy
@item postCopy
Performs any changes required to do on a copied object. This is the
place where one could, for example, put code to replace objects with
copies of the objects


@end table



@node Object-debugging
@subsection Object:@- debugging

@table @b
@meindex examine
@item examine
Print all the instance variables of the receiver on the Transcript


@meindex examineOn:@-
@item examineOn:@- aStream
Print all the instance variables of the receiver on aStream


@meindex inspect
@slindex examine
@item inspect
In a GUI environment, this opens a tool to examine and modify the
receiver.  In the default image, it just calls #examine.


@meindex validSize
@item validSize
Answer how many elements in the receiver should be inspected


@end table



@node Object-dependents access
@subsection Object:@- dependents access

@table @b
@meindex addDependent:@-
@item addDependent:@- anObject
Add anObject to the set of the receiver's dependents. Important:@-
if an object has dependents, it won't be garbage collected.


@meindex dependents
@item dependents
Answer a collection of the receiver's dependents.


@meindex release
@item release
Remove all of the receiver's dependents from the set and allow the
receiver to be garbage collected.


@meindex removeDependent:@-
@item removeDependent:@- anObject
Remove anObject to the set of the receiver's dependents. No problem
if anObject is not in the set of the receiver's dependents.


@end table



@node Object-error raising
@subsection Object:@- error raising

@table @b
@meindex doesNotUnderstand:@-
@item doesNotUnderstand:@- aMessage
Called by the system when a selector was not found. message is a
Message containing information on the receiver


@meindex error:@-
@item error:@- message
Display a walkback for the receiver, with the given error message.
Signal an `Error' exception.


@meindex halt:@-
@item halt:@- message
Display a walkback for the receiver, with the given error message.
Signal an `Halt' exception.


@end table



@node Object-finalization
@subsection Object:@- finalization

@table @b
@meindex addToBeFinalized
@slindex finalize
@item addToBeFinalized
Arrange things so that #finalize is sent to the object when the garbage
collector finds out there are only weak references to it.


@meindex finalize
@item finalize
Do nothing by default


@meindex mourn
@item mourn
This method is sent by the VM to weak and ephemeron objects when one of
their fields is found out to be garbage collectable (this means, for weak
objects, that there are no references to it from non-weak objects, and
for ephemeron objects, that the only paths to the first instance variable
pass through other instance variables of the same ephemeron).  The default
behavior is to do nothing.


@meindex removeToBeFinalized
@slindex finalize
@item removeToBeFinalized
Unregister the object, so that #finalize is no longer sent to the object
when the garbage collector finds out there are only weak references to it.


@end table



@node Object-introspection
@subsection Object:@- introspection

@table @b
@meindex instVarNamed:@-
@item instVarNamed:@- aString
Answer the instance variable named aString in the receiver.


@meindex instVarNamed:@-put:@-
@item instVarNamed:@- aString put:@- anObject
Answer the instance variable named aString in the receiver.


@end table



@node Object-printing
@subsection Object:@- printing

@table @b
@meindex basicPrintNl
@item basicPrintNl
Print a basic representation of the receiver, followed by a new line.


@meindex basicPrintOn:@-
@item basicPrintOn:@- aStream
Print a represention of the receiver on aStream


@meindex display
@slindex print
@item display
Print a represention of the receiver on the Transcript (stdout the GUI
is not active). For most objects this is simply its #print
representation, but for strings and characters, superfluous dollars
or extra pair of quotes are stripped.


@meindex displayNl
@slindex printNl
@item displayNl
Print a represention of the receiver, then put a new line on
the Transcript (stdout the GUI is not active). For most objects this
is simply its #printNl representation, but for strings and
characters, superfluous dollars or extra pair of quotes are stripped.


@meindex displayOn:@-
@slindex printOn:@-
@item displayOn:@- aStream
Print a represention of the receiver on aStream. For most objects
this is simply its #printOn:@- representation, but for strings and
characters, superfluous dollars or extra pair of quotes are stripped.


@meindex displayString
@slindex printString
@item displayString
Answer a String representing the receiver. For most objects
this is simply its #printString, but for strings and characters,
superfluous dollars or extra pair of quotes are stripped.


@meindex print
@item print
Print a represention of the receiver on the Transcript (stdout the GUI
is not active)


@meindex printNl
@item printNl
Print a represention of the receiver on stdout, put a new line
the Transcript (stdout the GUI is not active)


@meindex printOn:@-
@item printOn:@- aStream
Print a represention of the receiver on aStream


@meindex printString
@item printString
Answer a String representing the receiver


@end table



@node Object-relational operators
@subsection Object:@- relational operators

@table @b
@meindex ~=
@item ~= anObject
Answer whether the receiver and anObject are not equal


@meindex ~~
@item ~~ anObject
Answer whether the receiver and anObject are not the same object


@end table



@node Object-saving and loading
@subsection Object:@- saving and loading

@table @b
@meindex binaryRepresentationObject
@item binaryRepresentationObject
This method must be implemented if PluggableProxies are used with
the receiver's class.  The default implementation raises an exception.


@meindex postLoad
@item postLoad
Called after loading an object; must restore it to the state before
`preStore' was called.  Do nothing by default


@meindex postStore
@slindex postLoad
@item postStore
Called after an object is dumped; must restore it to the state before
`preStore' was called.  Call #postLoad by default


@meindex preStore
@item preStore
Called before dumping an object; it must *change* it (it must not answer
a new object) if necessary.  Do nothing by default


@meindex reconstructOriginalObject
@slindex binaryRepresentationObject
@item reconstructOriginalObject
Used if an instance of the receiver's class is returned as the
#binaryRepresentationObject of another object.  The default implementation
raises an exception.


@end table



@node Object-storing
@subsection Object:@- storing

@table @b
@meindex store
@item store
Put a String of Smalltalk code compiling to the receiver on
the Transcript (stdout the GUI is not active)


@meindex storeLiteralOn:@-
@item storeLiteralOn:@- aStream
Put a Smalltalk literal compiling to the receiver on aStream


@meindex storeNl
@item storeNl
Put a String of Smalltalk code compiling to the receiver, followed by
a new line, on the Transcript (stdout the GUI is not active)


@meindex storeOn:@-
@item storeOn:@- aStream
Put Smalltalk code compiling to the receiver on aStream


@meindex storeString
@item storeString
Answer a String of Smalltalk code compiling to the receiver


@end table



@node Object-syntax shortcuts
@subsection Object:@- syntax shortcuts

@table @b
@meindex ->
@item -> anObject
Creates a new instance of Association with the receiver being the key
and the argument becoming the value


@end table



@node Object-testing functionality
@subsection Object:@- testing functionality

@table @b
@meindex ifNil:@-
@item ifNil:@- nilBlock
Evaluate nilBlock if the receiver is nil, else answer self


@meindex ifNil:@-ifNotNil:@-
@item ifNil:@- nilBlock ifNotNil:@- notNilBlock
Evaluate nilBlock if the receiver is nil, else evaluate
notNilBlock, passing the receiver.


@meindex ifNotNil:@-
@item ifNotNil:@- notNilBlock
Evaluate notNilBlock if the receiver is not nil, passing the receiver.
Else answer nil.


@meindex ifNotNil:@-ifNil:@-
@item ifNotNil:@- notNilBlock ifNil:@- nilBlock
Evaluate nilBlock if the receiver is nil, else evaluate
notNilBlock, passing the receiver.


@meindex isArray
@item isArray
Answer `false'.

@meindex isBehavior
@item isBehavior
Answer `false'.

@meindex isCObject
@item isCObject
Answer `false'.

@meindex isCharacter
@item isCharacter
Answer `false'.

@meindex isCharacterArray
@item isCharacterArray
Answer `false'.

@meindex isClass
@item isClass
Answer `false'.

@meindex isFloat
@item isFloat
Answer `false'.

@meindex isInteger
@item isInteger
Answer `false'.

@meindex isKindOf:@-
@item isKindOf:@- aClass
Answer whether the receiver's class is aClass or
a subclass of aClass


@meindex isMemberOf:@-
@item isMemberOf:@- aClass
Returns true if the receiver is an instance of the class 'aClass'


@meindex isMeta
@item isMeta
Same as isMetaclass


@meindex isMetaClass
@item isMetaClass
Same as isMetaclass


@meindex isMetaclass
@item isMetaclass
Answer `false'.

@meindex isNamespace
@item isNamespace
Answer `false'.

@meindex isNil
@item isNil
Answer whether the receiver is nil


@meindex isNumber
@item isNumber
Answer `false'.

@meindex isSmallInteger
@item isSmallInteger
Answer `false'.

@meindex isString
@item isString
Answer `false'.

@meindex isSymbol
@item isSymbol
Answer `false'.

@meindex notNil
@item notNil
Answer whether the receiver is not nil


@meindex respondsTo:@-
@item respondsTo:@- aSymbol
Returns true if the receiver understands the given selector


@end table



@node Object-VM callbacks
@subsection Object:@- VM callbacks

@table @b
@meindex badReturnError
@item badReturnError
Called back when a block performs a bad return.


@meindex mustBeBoolean
@item mustBeBoolean
Called by the system when ifTrue:@-*, ifFalse:@-*, and:@- or or:@- are sent to
anything but a boolean


@meindex noRunnableProcess
@item noRunnableProcess
Called back when all processes are suspended


@meindex userInterrupt
@item userInterrupt
Called back when the user presses Ctrl-Break


@end table

@node ObjectDumper
@section ObjectDumper
@clindex ObjectDumper

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Stream
@itemx Category: Streams-Files
I'm not part of a normal Smalltalk system, but most
Smalltalks provide a similar feature:@- that is, support for storing objects
in a binary format; there are many advantages in using me instead of #storeOn:@-
and the Smalltalk compiler.

The data is stored in a very compact format, which has the side effect of
making loading much faster when compared with compiling the Smalltalk code
prepared by #storeOn:@-.  In addition, my instances support circular references
between objects, while #storeOn:@- supports it only if you know of such
references at design time and you override #storeOn:@- to deal with them
@end table

@menu
* ObjectDumper class-establishing proxy classes::  (class)
* ObjectDumper class-instance creation::  (class)
* ObjectDumper class-shortcuts::  (class)
* ObjectDumper class-testing::  (class)
* ObjectDumper-accessing::  (instance)
* ObjectDumper-loading/dumping objects::  (instance)
* ObjectDumper-stream interface::  (instance)
@end menu



@node ObjectDumper class-establishing proxy classes
@subsection ObjectDumper class:@- establishing proxy classes

@table @b
@meindex disableProxyFor:@-
@item disableProxyFor:@- aClass
Disable proxies for instances of aClass and its descendants


@meindex hasProxyFor:@-
@item hasProxyFor:@- aClass
Answer whether a proxy class has been registered for instances
of aClass.


@meindex proxyClassFor:@-
@item proxyClassFor:@- anObject
Answer the class of a valid proxy for an object, or nil if none could
be found


@meindex proxyFor:@-
@item proxyFor:@- anObject
Answer a valid proxy for an object, or the object itself if none could
be found


@meindex registerProxyClass:@-for:@-
@item registerProxyClass:@- aProxyClass for:@- aClass
Register the proxy class aProxyClass - descendent of DumperProxy -
to be used for instances of aClass and its descendants


@end table



@node ObjectDumper class-instance creation
@subsection ObjectDumper class:@- instance creation

@table @b
@meindex new
@item new
This method should not be called for instances of this class.

@meindex on:@-
@item on:@- aFileStream
Answer an ObjectDumper working on aFileStream.


@end table



@node ObjectDumper class-shortcuts
@subsection ObjectDumper class:@- shortcuts

@table @b
@meindex dump:@-to:@-
@item dump:@- anObject to:@- aFileStream
Dump anObject to aFileStream. Answer anObject


@meindex loadFrom:@-
@item loadFrom:@- aFileStream
Load an object from aFileStream and answer it


@end table



@node ObjectDumper class-testing
@subsection ObjectDumper class:@- testing

@table @b
@meindex example
@item example
This is a real torture test:@- it outputs recursive objects,
identical objects multiple times, classes, metaclasses,
integers, characters and proxies (which is also a test of more
complex objects)!


@end table



@node ObjectDumper-accessing
@subsection ObjectDumper:@- accessing

@table @b
@meindex flush
@item flush
`Forget' any information on previously stored objects.


@meindex stream
@item stream
Answer the ByteStream to which the ObjectDumper will write
and from which it will read.


@meindex stream:@-
@item stream:@- aByteStream
Set the ByteStream to which the ObjectDumper will write
and from which it will read.


@end table



@node ObjectDumper-loading/dumping objects
@subsection ObjectDumper:@- loading/dumping objects

@table @b
@meindex dump:@-
@item dump:@- anObject
Dump anObject on the stream associated with the receiver. Answer
anObject


@meindex load
@item load
Load an object from the stream associated with the receiver and answer
it


@end table



@node ObjectDumper-stream interface
@subsection ObjectDumper:@- stream interface

@table @b
@meindex atEnd
@item atEnd
Answer whether the underlying stream is at EOF


@meindex next
@item next
Load an object from the underlying stream


@meindex nextPut:@-
@item nextPut:@- anObject
Store an object on the underlying stream


@end table

@node ObjectMemory
@section ObjectMemory
@clindex ObjectMemory

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Object
@itemx Category: Language-Implementation
I provide a few methods that enable one to tune the
virtual machine's usage of memory.  In addition, I can signal to my
dependants some `events' that can happen during the virtual machine's
life.

ObjectMemory has both class-side and instance-side methods.  In general,
class-side methods provide means to tune the parameters of the memory
manager, while instance-side methods are used together with the #current
class-side method to take a look at statistics on the memory manager's
state.
@end table

@menu
* ObjectMemory class-accessing::  (class)
* ObjectMemory class-builtins::  (class)
* ObjectMemory class-initialization::  (class)
* ObjectMemory class-saving the image::  (class)
* ObjectMemory-accessing::  (instance)
* ObjectMemory-builtins::  (instance)
* ObjectMemory-derived information::  (instance)
@end menu



@node ObjectMemory class-accessing
@subsection ObjectMemory class:@- accessing

@table @b
@meindex current
@item current
Return a snapshot of the VM's memory management statistics.


@end table



@node ObjectMemory class-builtins
@subsection ObjectMemory class:@- builtins

@table @b
@meindex abort
@item abort
Quit the Smalltalk environment, dumping core.


@meindex addressOf:@-
@item addressOf:@- anObject
Returns the address of the actual object that anObject
references.  Note that, with the exception of fixed objects
this address is only valid until the next garbage collection;
thus it's pretty risky to count on the address returned by
this method for very long.


@meindex addressOfOOP:@-
@item addressOfOOP:@- anObject
Returns the address of the OOP (object table slot) for anObject.
The address is an Integer and will not change over time (i.e. is
immune from garbage collector action) except if the virtual machine
is stopped and restarted.


@meindex bigObjectThreshold
@item bigObjectThreshold
Answer the smallest size for objects that are allocated outside
the main heap in the hope of providing more locality of reference
between small objects.


@meindex bigObjectThreshold:@-
@item bigObjectThreshold:@- bytes
Set the smallest size for objects that are allocated outside
the main heap in the hope of providing more locality of reference
between small objects.  bytes must be a positive SmallInteger.


@meindex compact
@item compact
Force a full garbage collection, including compaction of oldspace


@meindex finishIncrementalGC
@item finishIncrementalGC
Do a step in the incremental garbage collection.


@meindex gcMessage
@item gcMessage
Answer whether messages indicating that garbage collection is taking
place are printed on stdout


@meindex gcMessage:@-
@item gcMessage:@- aBoolean
Set whether messages indicating that garbage collection is taking
place are printed on stdout


@meindex globalGarbageCollect
@item globalGarbageCollect
Force a full garbage collection


@meindex growThresholdPercent
@item growThresholdPercent
Answer the percentage of the amount of memory used by the system grows
which has to be full for the system to allocate more memory


@meindex growThresholdPercent:@-
@item growThresholdPercent:@- growPercent
Set the percentage of the amount of memory used by the system grows
which has to be full for the system to allocate more memory


@meindex growTo:@-
@item growTo:@- numBytes
Grow the amount of memory used by the system grows to numBytes.


@meindex incrementalGCStep
@item incrementalGCStep
Do a step in the incremental garbage collection.


@meindex quit
@item quit
Quit the Smalltalk environment. Whether files are closed and
other similar cleanup occurs depends on the platform


@meindex quit:@-
@item quit:@- exitStatus
Quit the Smalltalk environment, passing the exitStatus integer
to the OS. Files are closed and other similar cleanups occur.


@meindex scavenge
@item scavenge
Force a minor garbage collection


@meindex smoothingFactor
@item smoothingFactor
Answer the factor (between 0 and 1) used to smooth the statistics
provided by the virtual machine about memory handling.  0 disables
updating the averages, 1 disables the smoothing (the statistics
return the last value).


@meindex smoothingFactor:@-
@item smoothingFactor:@- rate
Set the factor (between 0 and 1) used to smooth the statistics
provided by the virtual machine about memory handling.  0 disables
updating the averages, 1 disables the smoothing (the statistics
return the last value).


@meindex spaceGrowRate
@item spaceGrowRate
Answer the rate with which the amount of memory used by the system grows


@meindex spaceGrowRate:@-
@item spaceGrowRate:@- rate
Set the rate with which the amount of memory used by the system grows


@end table



@node ObjectMemory class-initialization
@subsection ObjectMemory class:@- initialization

@table @b
@meindex changed:@-
@item changed:@- aSymbol
Not commented.

@meindex initialize
@item initialize
Initialize the globals


@end table



@node ObjectMemory class-saving the image
@subsection ObjectMemory class:@- saving the image

@table @b
@meindex snapshot
@item snapshot
Save a snapshot on the image file that was loaded on startup.


@meindex snapshot:@-
@item snapshot:@- aString
Save an image on the aString file


@end table



@node ObjectMemory-accessing
@subsection ObjectMemory:@- accessing

@table @b
@meindex allocFailures
@item allocFailures
Answer the number of times that the old-space allocator found
no block that was at least as big as requested, and had to ask
the operating system for more memory.


@meindex allocMatches
@item allocMatches
Answer the number of times that the old-space allocator found
a block that was exactly as big as requested.


@meindex allocProbes
@item allocProbes
Answer the number of free blocks that the old-space allocator had
to examine so far to allocate all the objects that are in old-space


@meindex allocSplits
@item allocSplits
Answer the number of times that the old-space allocator could not
find a block that was exactly as big as requested, and had to split
a larger free block in two parts.


@meindex bytesPerOOP
@item bytesPerOOP
Answer the number of bytes that is taken by an ordinary
object pointer (in practice, a field such as a named instance
variable).


@meindex bytesPerOTE
@item bytesPerOTE
Answer the number of bytes that is taken by an object
table entry (in practice, the overhead incurred by every
object in the system, with the sole exception of SmallIntegers).


@meindex edenSize
@item edenSize
Answer the number of bytes in the `eden' area of the young
generation (in practice, the number of allocated bytes between
two scavenges).


@meindex edenUsedBytes
@item edenUsedBytes
Answer the number of bytes that are currently filled in the
`eden' area of the young generation.


@meindex fixedSpaceSize
@item fixedSpaceSize
Answer the number of bytes in the special heap devoted to
objects that the garbage collector cannot move around in memory.


@meindex fixedSpaceUsedBytes
@item fixedSpaceUsedBytes
Answer the number of bytes that are currently filled in the
special heap devoted to objects that the garbage collector
cannot move around in memory.


@meindex numCompactions
@item numCompactions
Answer the number of oldspace compactions that happened since
the VM was started.


@meindex numFixedOOPs
@item numFixedOOPs
Answer the number of objects that the garbage collector
cannot move around in memory.


@meindex numFreeOTEs
@item numFreeOTEs
Answer the number of entries that are currently free in the
object table.


@meindex numGlobalGCs
@item numGlobalGCs
Answer the number of global garbage collections (collection
of the entire heap) that happened since the VM was started.


@meindex numGrowths
@item numGrowths
Answer the number of times that oldspace was grown since
the VM was started.


@meindex numOTEs
@item numOTEs
Answer the number of entries that are currently allocated for the
object table.


@meindex numOldOOPs
@item numOldOOPs
Answer the number of objects that reside in the old generation.


@meindex numScavenges
@item numScavenges
Answer the number of scavenges (fast collections of the young
generation) that happened since the VM was started.


@meindex numWeakOOPs
@item numWeakOOPs
Answer the number of weak objects that the garbage collector
is currently tracking.


@meindex oldSpaceSize
@item oldSpaceSize
Answer the number of bytes in the old generation.


@meindex oldSpaceUsedBytes
@item oldSpaceUsedBytes
Answer the number of bytes that are currently filled in the
old generation.


@meindex reclaimedBytesPerGlobalGC
@item reclaimedBytesPerGlobalGC
Answer the average number of bytes that are found to be garbage
during a global garbage collections.


@meindex reclaimedBytesPerScavenge
@item reclaimedBytesPerScavenge
Answer the average number of bytes that are found to be garbage
during a scavenge.


@meindex reclaimedPercentPerScavenge
@item reclaimedPercentPerScavenge
Answer the average percentage of allocated bytes that are found
to be garbage during a scavenge.  If this number falls below 60-70
you should definitely increment the size of the eden, because you
risk that scavenging is eating a considerable fraction of your
execution time; do the measurement on a restarted
image, so that the extra tenuring incurred when creating long-lived
objects such as classes or methods is not considered.


@meindex survSpaceSize
@item survSpaceSize
Answer the number of bytes in the `survivor' area of the young
generation (the area to which young objects are relocated during
scavenges).


@meindex survSpaceUsedBytes
@item survSpaceUsedBytes
Answer the number of bytes that are currently filled in the
`survivor' area of the young generation.


@meindex tenuredBytesPerScavenge
@item tenuredBytesPerScavenge
Answer the average number of bytes that are promoted to oldspace
during a scavenge.


@meindex timeBetweenGlobalGCs
@item timeBetweenGlobalGCs
Answer the average number of milliseconds between two global
garbage collections.


@meindex timeBetweenGrowths
@item timeBetweenGrowths
Answer the average number of milliseconds between decisions to
grow the heap.


@meindex timeBetweenScavenges
@item timeBetweenScavenges
Answer the average number of milliseconds between two scavenges
(fast collections of the young generation).


@meindex timeToCollect
@item timeToCollect
Answer the average number of milliseconds that a global
garbage collection takes.


@meindex timeToCompact
@item timeToCompact
Answer the average number of milliseconds that compacting the
heap takes.  This the same time that is taken by growing the
heap.


@meindex timeToScavenge
@item timeToScavenge
Answer the average number of milliseconds that a scavenge takes
(fast collections of the young generation).


@end table



@node ObjectMemory-builtins
@subsection ObjectMemory:@- builtins

@table @b
@meindex update
@item update
Update the values in the object to the current state of the VM.


@end table



@node ObjectMemory-derived information
@subsection ObjectMemory:@- derived information

@table @b
@meindex scavengesBeforeTenuring
@item scavengesBeforeTenuring
Answer the number of scavenges that an object must on average
survive before being promoted to oldspace; this is however only
an estimate because objects that are reachable from oldspace have
a higher probability to be tenured soon, while objects that are
only reachable from thisContext have a lower probability to be
tenured.  Anyway, if this number falls below 2-3 you should
definitely increment the size of eden and/or of survivor space,
because you are tenuring too often and relying too much on
global garbage collection to keep your heap clean; do the
measurement on a restarted image, so that the extra tenuring
incurred when creating long-lived objects such as classes or
methods is not considered.


@end table

@node OrderedCollection
@section OrderedCollection
@clindex OrderedCollection

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: SequenceableCollection
@itemx Category: Collections-Sequenceable
My instances represent ordered collections of arbitrary typed objects which
are not directly accessible by an index.  They can be accessed indirectly
through an index, and can be manipulated by adding to the end or based
on content (such as add:@-after:@-)
@end table

@menu
* OrderedCollection class-instance creation::  (class)
* OrderedCollection-accessing::  (instance)
* OrderedCollection-adding::  (instance)
* OrderedCollection-built ins::  (instance)
* OrderedCollection-enumerating::  (instance)
* OrderedCollection-removing::  (instance)
@end menu



@node OrderedCollection class-instance creation
@subsection OrderedCollection class:@- instance creation

@table @b
@meindex new
@item new
Answer an OrderedCollection of default size


@meindex new:@-
@item new:@- anInteger
Answer an OrderedCollection of size anInteger


@end table



@node OrderedCollection-accessing
@subsection OrderedCollection:@- accessing

@table @b
@meindex at:@-
@item at:@- anIndex
Answer the anIndex-th item of the receiver


@meindex at:@-put:@-
@item at:@- anIndex put:@- anObject
Store anObject at the anIndex-th item of the receiver, answer anObject


@meindex first
@item first
Answer the first item of the receiver


@meindex last
@item last
Answer the last item of the receiver


@meindex size
@item size
Return the number of objects in the receiver


@end table



@node OrderedCollection-adding
@subsection OrderedCollection:@- adding

@table @b
@meindex add:@-
@item add:@- anObject
Add anObject in the receiver, answer it


@meindex add:@-after:@-
@item add:@- newObject after:@- oldObject
Add newObject in the receiver just after oldObject, answer it.
Fail if oldObject can't be found


@meindex add:@-afterIndex:@-
@item add:@- newObject afterIndex:@- i
Add newObject in the receiver just after the i-th, answer it.
Fail if i < 0 or i > self size


@meindex add:@-before:@-
@item add:@- newObject before:@- oldObject
Add newObject in the receiver just before oldObject, answer it.
Fail if oldObject can't be found


@meindex add:@-beforeIndex:@-
@item add:@- newObject beforeIndex:@- i
Add newObject in the receiver just before the i-th, answer it.
Fail if i < 1 or i > self size + 1


@meindex addAll:@-
@item addAll:@- aCollection
Add every item of aCollection to the receiver, answer it


@meindex addAll:@-after:@-
@item addAll:@- newCollection after:@- oldObject
Add every item of newCollection to the receiver just after
oldObject, answer it. Fail if oldObject is not found


@meindex addAll:@-afterIndex:@-
@item addAll:@- newCollection afterIndex:@- i
Add every item of newCollection to the receiver just after
the i-th, answer it. Fail if i < 0 or i > self size


@meindex addAll:@-before:@-
@item addAll:@- newCollection before:@- oldObject
Add every item of newCollection to the receiver just before
oldObject, answer it. Fail if oldObject is not found


@meindex addAll:@-beforeIndex:@-
@item addAll:@- newCollection beforeIndex:@- i
Add every item of newCollection to the receiver just before
the i-th, answer it. Fail if i < 1 or i > self size + 1


@meindex addAllFirst:@-
@item addAllFirst:@- aCollection
Add every item of newCollection to the receiver right at the start
of the receiver. Answer aCollection


@meindex addAllLast:@-
@item addAllLast:@- aCollection
Add every item of newCollection to the receiver right at the end
of the receiver. Answer aCollection


@meindex addFirst:@-
@item addFirst:@- newObject
Add newObject to the receiver right at the start of the receiver.
Answer newObject


@meindex addLast:@-
@item addLast:@- newObject
Add newObject to the receiver right at the end of the receiver.
Answer newObject


@end table



@node OrderedCollection-built ins
@subsection OrderedCollection:@- built ins

@table @b
@meindex primReplaceFrom:@-to:@-with:@-startingAt:@-
@item primReplaceFrom:@- start to:@- stop with:@- byteArray startingAt:@- replaceStart
Replace the characters from start to stop with new characters whose
ASCII codes are contained in byteArray, starting at the replaceStart
location of byteArray


@end table



@node OrderedCollection-enumerating
@subsection OrderedCollection:@- enumerating

@table @b
@meindex do:@-
@item do:@- aBlock
Evaluate aBlock for all the elements in the collection


@end table



@node OrderedCollection-removing
@subsection OrderedCollection:@- removing

@table @b
@meindex identityRemove:@-
@item identityRemove:@- oldObject
Remove oldObject from the receiver. If absent, fail, else
answer oldObject.


@meindex identityRemove:@-ifAbsent:@-
@item identityRemove:@- anObject ifAbsent:@- aBlock
Remove anObject from the receiver. If it can't be found, answer the
result of evaluating aBlock


@meindex remove:@-ifAbsent:@-
@item remove:@- anObject ifAbsent:@- aBlock
Remove anObject from the receiver. If it can't be found, answer the
result of evaluating aBlock


@meindex removeAtIndex:@-
@item removeAtIndex:@- anIndex
Remove the object at index anIndex from the receiver. Fail if the
index is out of bounds.


@meindex removeFirst
@item removeFirst
Remove an object from the start of the receiver. Fail if the receiver
is empty


@meindex removeLast
@item removeLast
Remove an object from the end of the receiver. Fail if the receiver
is empty


@end table

@node Package
@section Package
@clindex Package

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Kernel.PackageInfo
@itemx Category: Language-Packaging
I am not part of a standard Smalltalk system. I store internally the
information on a Smalltalk package, and can output my description in
XML.
@end table

@menu
* Package class-accessing::  (class)
* Package class-instance creation::  (class)
* Package-accessing::  (instance)
* Package-still unclassified::  (instance)
* Package-version parsing::  (instance)
@end menu



@node Package class-accessing
@subsection Package class:@- accessing

@table @b
@meindex tags
@item tags
Not commented.

@end table



@node Package class-instance creation
@subsection Package class:@- instance creation

@table @b
@meindex parse:@-
@item parse:@- file
Answer a package from the XML description in file.


@end table



@node Package-accessing
@subsection Package:@- accessing

@table @b
@meindex addBuiltFile:@-
@item addBuiltFile:@- aString
Not commented.

@meindex addCallout:@-
@item addCallout:@- aString
Not commented.

@meindex addFeature:@-
@item addFeature:@- aString
Not commented.

@meindex addFile:@-
@item addFile:@- aString
Not commented.

@meindex addFileIn:@-
@item addFileIn:@- aString
Not commented.

@meindex addLibrary:@-
@item addLibrary:@- aString
Not commented.

@meindex addModule:@-
@item addModule:@- aString
Not commented.

@meindex addPrerequisite:@-
@item addPrerequisite:@- aString
Not commented.

@meindex addSunitScript:@-
@item addSunitScript:@- aString
Not commented.

@meindex baseDirectories
@item baseDirectories
Answer `baseDirectories'.

@meindex baseDirectories:@-
@item baseDirectories:@- aCollection
Check if it's possible to resolve the names in the package according to
the base directories in baseDirectories, which depend on where
the packages.xml is found:@- the three possible places are 1) the
system kernel directory's parent directory, 2) the local kernel
directory's parent directory, 3) the local image directory (in
order of decreasing priority).

For a packages.xml found in the system kernel directory's parent
directory, all three directories are searched.  For a packages.xml
found in the local kernel directory's parent directory, only
directories 2 and 3 are searched.  For a packages.xml directory in
the local image directory, instead, only directory 3 is searched.


@meindex builtFiles
@item builtFiles
Answer a (modifiable) OrderedCollection of files that are part of
the package but are not distributed.


@meindex callouts
@item callouts
Answer a (modifiable) Set of call-outs that are required to load
the package.  Their presence is checked after the libraries and
modules are loaded so that you can do a kind of versioning.


@meindex directory
@item directory
Answer the base directory from which to load the package.


@meindex features
@item features
Answer a (modifiable) Set of features provided by the package.


@meindex fileIns
@item fileIns
Answer a (modifiable) OrderedCollections of files that are to be
filed-in to load the package.  This is usually a subset of
`files' and `builtFiles'.


@meindex files
@item files
Answer a (modifiable) OrderedCollection of files that are part of
the package.


@meindex fullPathOf:@-
@item fullPathOf:@- fileName
Try appending 'self directory' and fileName to each of the directory
in baseDirectories, and return the path to the first tried filename that
exists.  Raise a PackageNotAvailable exception if no directory is
found that contains the file.


@meindex libraries
@item libraries
Answer a (modifiable) Set of shared library names
that are required to load the package.


@meindex modules
@item modules
Answer a (modifiable) Set of modules that are
required to load the package.


@meindex namespace
@item namespace
Answer the namespace in which the package is loaded.


@meindex namespace:@-
@item namespace:@- aString
Set to aString the namespace in which the package is loaded.


@meindex prerequisites
@item prerequisites
Answer a (modifiable) Set of prerequisites.


@meindex primFileIn
@item primFileIn
Private - File in the given package without paying attention at
dependencies and C callout availability


@meindex relativeDirectory
@item relativeDirectory
Answer the directory, relative to the packages file, from which to load
the package.


@meindex relativeDirectory:@-
@item relativeDirectory:@- dir
Set the directory, relative to the packages file, from which to load
the package, to dir.


@meindex startScript
@item startScript
Answer the start script for the package.


@meindex startScript:@-
@item startScript:@- aString
Set the start script for the package to aString.


@meindex stopScript
@item stopScript
Answer the start script for the package.


@meindex stopScript:@-
@item stopScript:@- aString
Set the stop script for the package to aString.


@meindex sunitScripts
@item sunitScripts
Answer a (modifiable) OrderedCollection of SUnit scripts that
compose the package's test suite.


@meindex test
@item test
Answer the test sub-package.


@meindex test:@-
@item test:@- aPackage
Set the test sub-package to be aPackage.


@meindex url
@item url
Answer the URL at which the package repository can be found.


@meindex url:@-
@item url:@- aString
Set to aString the URL at which the package repository can be found.


@meindex version
@item version
Not commented.

@meindex version:@-
@item version:@- aVersion
Not commented.

@end table



@node Package-still unclassified
@subsection Package:@- still unclassified

@table @b
@meindex checkTagIfInPath:@-
@item checkTagIfInPath:@- aString
Not commented.

@meindex dir:@-tag:@-
@item dir:@- file tag:@- aDictionary
Not commented.

@meindex isInPath
@item isInPath
Not commented.

@meindex parseAttributes:@-
@item parseAttributes:@- aString
Not commented.

@meindex path
@item path
Not commented.

@meindex path:@-
@item path:@- aString
Not commented.

@end table



@node Package-version parsing
@subsection Package:@- version parsing

@table @b
@meindex parseVersion:@-
@item parseVersion:@- aString
Not commented.

@end table

@node PackageLoader
@section PackageLoader
@clindex PackageLoader

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Object
@itemx Category: Language-Packaging
I am not part of a standard Smalltalk system. I provide methods for
retrieving package information from an XML file and to load packages
into a Smalltalk image, correctly handling dependencies.
@end table

@menu
* PackageLoader class-accessing::  (class)
* PackageLoader class-loading::  (class)
* PackageLoader class-testing::  (class)
@end menu



@node PackageLoader class-accessing
@subsection PackageLoader class:@- accessing

@table @b
@meindex builtFilesFor:@-
@slindex directoryFor:@-
@item builtFilesFor:@- package
Answer a Set of Strings containing the filenames of the given package's
machine-generated files (relative to the directory answered by
#directoryFor:@-)


@meindex calloutsFor:@-
@slindex directoryFor:@-
@item calloutsFor:@- package
Answer a Set of Strings containing the filenames of the given package's
required callouts (relative to the directory answered by #directoryFor:@-)


@meindex directoryFor:@-
@item directoryFor:@- package
Answer a Directory object to the given package's files


@meindex featuresFor:@-
@item featuresFor:@- package
Answer a Set of Strings containing the features provided by the given
package.


@meindex fileInsFor:@-
@slindex directoryFor:@-
@item fileInsFor:@- package
Answer a Set of Strings containing the filenames of the given package's
file-ins (relative to the directory answered by #directoryFor:@-)


@meindex filesFor:@-
@slindex directoryFor:@-
@item filesFor:@- package
Answer a Set of Strings containing the filenames of the given package's
files (relative to the directory answered by #directoryFor:@-)


@meindex flush
@item flush
Set to reload the `packages.xml' file the next time it is needed.


@meindex ignoreCallouts
@item ignoreCallouts
Answer whether unavailable C callouts must generate errors or not.


@meindex ignoreCallouts:@-
@item ignoreCallouts:@- aBoolean
Set whether unavailable C callouts must generate errors or not.


@meindex librariesFor:@-
@slindex directoryFor:@-
@item librariesFor:@- package
Answer a Set of Strings containing the filenames of the given package's
libraries (relative to the directory answered by #directoryFor:@-)


@meindex modulesFor:@-
@slindex directoryFor:@-
@item modulesFor:@- package
Answer a Set of Strings containing the filenames of the given package's
modules (relative to the directory answered by #directoryFor:@-)


@meindex packageAt:@-
@item packageAt:@- package
Answer a Package object for the given package


@meindex packageAt:@-ifAbsent:@-
@item packageAt:@- package ifAbsent:@- aBlock
Answer a Package object for the given package


@meindex prerequisitesFor:@-
@item prerequisitesFor:@- package
Answer a Set of Strings containing the prerequisites for the given package


@meindex refresh
@item refresh
Reload the `packages.xml' file in the image and kernel directories.
The three possible places are 1) the kernel directory's parent
directory, 2) the `.st' subdirectory of the user's home directory, 3) the
local image directory (in order of decreasing priority).

For a packages.xml found in the kernel directory's parent
directory, all three directories are searched.  For a packages.xml
found in the `.st' subdirectory, only directories 2 and 3 are
searched.  For a packages.xml directory in the local image directory,
finally, only directory 3 is searched.


@meindex sunitScriptFor:@-
@item sunitScriptFor:@- package
Answer a Strings containing a SUnit script that describes the package's
test suite.


@end table



@node PackageLoader class-loading
@subsection PackageLoader class:@- loading

@table @b
@meindex fileInPackage:@-
@item fileInPackage:@- package
File in the given package into GNU Smalltalk.


@meindex fileInPackages:@-
@item fileInPackages:@- packagesList
File in all the packages in packagesList into GNU Smalltalk.


@end table



@node PackageLoader class-testing
@subsection PackageLoader class:@- testing

@table @b
@meindex canLoad:@-
@item canLoad:@- package
Answer whether all the needed pre-requisites for package are available.


@end table

@node Permission
@section Permission
@clindex Permission

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Object
@itemx Category: Language-Security
I am the basic class that represents whether operations that could harm
the system's security are allowed or denied.
@end table

@menu
* Permission class-testing::  (class)
* Permission-accessing::  (instance)
* Permission-testing::  (instance)
@end menu



@node Permission class-testing
@subsection Permission class:@- testing

@table @b
@meindex allowing:@-target:@-action:@-
@item allowing:@- aSymbol target:@- aTarget action:@- action
Not commented.

@meindex allowing:@-target:@-actions:@-
@item allowing:@- aSymbol target:@- aTarget actions:@- actionsArray
Not commented.

@meindex denying:@-target:@-action:@-
@item denying:@- aSymbol target:@- aTarget action:@- action
Not commented.

@meindex denying:@-target:@-actions:@-
@item denying:@- aSymbol target:@- aTarget actions:@- actionsArray
Not commented.

@meindex granting:@-target:@-action:@-
@item granting:@- aSymbol target:@- aTarget action:@- action
Not commented.

@meindex granting:@-target:@-actions:@-
@item granting:@- aSymbol target:@- aTarget actions:@- actionsArray
Not commented.

@meindex name:@-target:@-action:@-
@item name:@- aSymbol target:@- aTarget action:@- action
Not commented.

@meindex name:@-target:@-actions:@-
@item name:@- aSymbol target:@- aTarget actions:@- actionsArray
Not commented.

@end table



@node Permission-accessing
@subsection Permission:@- accessing

@table @b
@meindex action:@-
@item action:@- anObject
Not commented.

@meindex actions
@item actions
Answer `actions'.

@meindex actions:@-
@item actions:@- anObject
Not commented.

@meindex allow
@item allow
Not commented.

@meindex allowing
@item allowing
Not commented.

@meindex deny
@item deny
Not commented.

@meindex denying
@item denying
Not commented.

@meindex isAllowing
@item isAllowing
Answer `positive'.

@meindex name
@item name
Answer `name'.

@meindex name:@-
@item name:@- anObject
Not commented.

@meindex target
@item target
Answer `target'.

@meindex target:@-
@item target:@- anObject
Not commented.

@end table



@node Permission-testing
@subsection Permission:@- testing

@table @b
@meindex check:@-for:@-
@item check:@- aPermission for:@- anObject
Not commented.

@meindex implies:@-
@item implies:@- aPermission
Not commented.

@end table

@node PluggableAdaptor
@section PluggableAdaptor
@clindex PluggableAdaptor

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: ValueAdaptor
@itemx Category: Language-Data types
I mediate between complex get/set behavior and the #value/@-#value:@-
protocol used by ValueAdaptors. The get/set behavior can be implemented
by two blocks, or can be delegated to another object with messages 
such as #someProperty to get and #someProperty:@- to set.
@end table

@menu
* PluggableAdaptor class-creating instances::  (class)
* PluggableAdaptor-accessing::  (instance)
@end menu



@node PluggableAdaptor class-creating instances
@subsection PluggableAdaptor class:@- creating instances

@table @b
@meindex getBlock:@-putBlock:@-
@slindex value
@slindex value:@-
@item getBlock:@- getBlock putBlock:@- putBlock
Answer a PluggableAdaptor using the given blocks to implement
#value and #value:@-


@meindex on:@-aspect:@-
@slindex value
@slindex value:@-
@item on:@- anObject aspect:@- aSymbol
Answer a PluggableAdaptor using anObject's aSymbol message to
implement #value, and anObject's aSymbol:@- message (aSymbol
followed by a colon) to implement #value:@-


@meindex on:@-getSelector:@-putSelector:@-
@slindex value
@slindex value:@-
@item on:@- anObject getSelector:@- getSelector putSelector:@- putSelector
Answer a PluggableAdaptor using anObject's getSelector message to
implement #value, and anObject's putSelector message to implement
#value:@-


@meindex on:@-index:@-
@slindex at:@-
@slindex at:@-put:@-
@slindex value
@slindex value:@-
@slindex at:@-
@slindex at:@-put:@-
@item on:@- anObject index:@- anIndex
Answer a PluggableAdaptor using anObject's #at:@- and #at:@-put:@-
message to implement #value and #value:@-; the first parameter
of #at:@- and #at:@-put:@- is anIndex


@meindex on:@-key:@-
@slindex on:@-index:@-
@item on:@- aDictionary key:@- aKey
Same as #on:@-index:@-. Provided for clarity and completeness.


@end table



@node PluggableAdaptor-accessing
@subsection PluggableAdaptor:@- accessing

@table @b
@meindex value
@item value
Get the value of the receiver.


@meindex value:@-
@item value:@- anObject
Set the value of the receiver.


@end table

@node PluggableProxy
@section PluggableProxy
@clindex PluggableProxy

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: AlternativeObjectProxy
@itemx Category: Streams-Files
I am a proxy that stores a different object
and, upon load, sends #reconstructOriginalObject to that object (which
can be a DirectedMessage, in which case the message is sent).  The
object to be stored is retrieved by sending #binaryRepresentationObject to
the object.
@end table

@menu
* PluggableProxy class-accessing::  (class)
* PluggableProxy-saving and restoring::  (instance)
@end menu



@node PluggableProxy class-accessing
@subsection PluggableProxy class:@- accessing

@table @b
@meindex on:@-
@slindex binaryRepresentationObject
@slindex preStore
@slindex postStore
@item on:@- anObject
Answer a proxy to be used to save anObject.  The proxy
stores a different object obtained by sending to anObject
the #binaryRepresentationObject message (embedded
between #preStore and #postStore as usual).


@end table



@node PluggableProxy-saving and restoring
@subsection PluggableProxy:@- saving and restoring

@table @b
@meindex object
@slindex reconstructOriginalObject
@slindex postLoad
@item object
Reconstruct the object stored in the proxy and answer it;
the binaryRepresentationObject is sent the
#reconstructOriginalObject message, and the resulting
object is sent the #postLoad message.


@end table

@node Point
@section Point
@clindex Point

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Object
@itemx Category: Language-Data types
Beginning of a Point class for simple display manipulation.  Has not been
 exhaustively tested but appears to work for the basic primitives and for
 the needs of the Rectangle class.
@end table

@menu
* Point class-instance creation::  (class)
* Point-accessing::  (instance)
* Point-arithmetic::  (instance)
* Point-comparing::  (instance)
* Point-converting::  (instance)
* Point-point functions::  (instance)
* Point-printing::  (instance)
* Point-storing::  (instance)
* Point-truncation and round off::  (instance)
@end menu



@node Point class-instance creation
@subsection Point class:@- instance creation

@table @b
@meindex new
@item new
Create a new point with both coordinates set to 0


@meindex x:@-y:@-
@item x:@- xInteger y:@- yInteger
Create a new point with the given coordinates


@end table



@node Point-accessing
@subsection Point:@- accessing

@table @b
@meindex x
@item x
Answer the x coordinate


@meindex x:@-
@item x:@- aNumber
Set the x coordinate to aNumber


@meindex x:@-y:@-
@item x:@- anXNumber y:@- aYNumber
Set the x and y coordinate to anXNumber and aYNumber, respectively


@meindex y
@item y
Answer the y coordinate


@meindex y:@-
@item y:@- aNumber
Set the y coordinate to aNumber


@end table



@node Point-arithmetic
@subsection Point:@- arithmetic

@table @b
@meindex *
@item * scale
Multiply the receiver by scale, which can be a Number or a Point


@meindex +
@item + delta
Sum the receiver and delta, which can be a Number or a Point


@meindex -
@item - delta
Subtract delta, which can be a Number or a Point, from the receiver


@meindex /
@item / scale
Divide the receiver by scale, which can be a Number or a Point, with
no loss of precision


@meindex //
@item // scale
Divide the receiver by scale, which can be a Number or a Point, with
truncation towards -infinity


@meindex abs
@item abs
Answer a new point whose coordinates are the absolute values of the
receiver's


@end table



@node Point-comparing
@subsection Point:@- comparing

@table @b
@meindex <
@item < aPoint
Answer whether the receiver is higher and to the left of aPoint


@meindex <=
@item <= aPoint
Answer whether aPoint is equal to the receiver, or the receiver
is higher and to the left of aPoint


@meindex =
@item = aPoint
Answer whether the receiver is equal to aPoint


@meindex >
@item > aPoint
Answer whether the receiver is lower and to the right of aPoint


@meindex >=
@item >= aPoint
Answer whether aPoint is equal to the receiver, or the receiver
is lower and to the right of aPoint


@meindex max:@-
@item max:@- aPoint
Answer self if it is lower and to the right of aPoint, aPoint otherwise


@meindex min:@-
@item min:@- aPoint
Answer self if it is higher and to the left of aPoint, aPoint otherwise


@end table



@node Point-converting
@subsection Point:@- converting

@table @b
@meindex asPoint
@item asPoint
Answer the receiver.

@meindex asRectangle
@item asRectangle
Answer an empty rectangle whose origin is self


@meindex corner:@-
@item corner:@- aPoint
Answer a Rectangle whose origin is the receiver and whose corner
is aPoint


@meindex extent:@-
@item extent:@- aPoint
Answer a Rectangle whose origin is the receiver and whose extent
is aPoint


@meindex hash
@item hash
Answer an hash value for the receiver


@end table



@node Point-point functions
@subsection Point:@- point functions

@table @b
@meindex arcTan
@item arcTan
Answer the angle (measured counterclockwise) between the receiver and
a ray starting in (0, 0) and moving towards (1, 0) - i.e. 3 o'clock


@meindex dist:@-
@item dist:@- aPoint
Answer the distance between the receiver and aPoint


@meindex dotProduct:@-
@item dotProduct:@- aPoint
Answer the dot product between the receiver and aPoint


@meindex grid:@-
@item grid:@- aPoint
Answer a new point whose coordinates are rounded towards the nearest
multiple of aPoint


@meindex normal
@item normal
Rotate the Point 90degrees clockwise and get the unit vector


@meindex transpose
@item transpose
Answer a new point whose coordinates are the receiver's coordinates
exchanged (x becomes y, y becomes x)


@meindex truncatedGrid:@-
@item truncatedGrid:@- aPoint
Answer a new point whose coordinates are rounded towards -infinity,
to a multiple of grid (which must be a Point)


@end table



@node Point-printing
@subsection Point:@- printing

@table @b
@meindex printOn:@-
@item printOn:@- aStream
Print a representation for the receiver on aStream


@end table



@node Point-storing
@subsection Point:@- storing

@table @b
@meindex storeOn:@-
@item storeOn:@- aStream
Print Smalltalk code compiling to the receiver on aStream


@end table



@node Point-truncation and round off
@subsection Point:@- truncation and round off

@table @b
@meindex rounded
@item rounded
Answer a new point whose coordinates are rounded to the nearest integer


@meindex truncateTo:@-
@item truncateTo:@- grid
Answer a new point whose coordinates are rounded towards -infinity,
to a multiple of grid (which must be a Number)


@end table

@node PositionableStream
@section PositionableStream
@clindex PositionableStream

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Stream
@itemx Category: Streams-Collections
My instances represent streams where explicit positioning is permitted.
Thus, my streams act in a manner to normal disk files:@- you can read
or write sequentially, but also position the file to a particular place
whenever you choose.  Generally, you'll want to use ReadStream, WriteStream
or ReadWriteStream instead of me to create and use streams.
@end table

@menu
* PositionableStream class-instance creation::  (class)
* PositionableStream-accessing-reading::  (instance)
* PositionableStream-class type methods::  (instance)
* PositionableStream-compiling::  (instance)
* PositionableStream-positioning::  (instance)
* PositionableStream-still unclassified::  (instance)
* PositionableStream-testing::  (instance)
* PositionableStream-truncating::  (instance)
@end menu



@node PositionableStream class-instance creation
@subsection PositionableStream class:@- instance creation

@table @b
@meindex on:@-
@item on:@- aCollection
Answer an instance of the receiver streaming on the
whole contents of aCollection


@meindex on:@-from:@-to:@-
@item on:@- aCollection from:@- firstIndex to:@- lastIndex
Answer an instance of the receiver streaming from
the firstIndex-th item of aCollection to the lastIndex-th


@end table



@node PositionableStream-accessing-reading
@subsection PositionableStream:@- accessing-reading

@table @b
@meindex close
@item close
Disassociate a stream from its backing store.


@meindex contents
@item contents
Returns a collection of the same type that the stream accesses, up to
and including the final element.


@meindex copyFrom:@-to:@-
@slindex position
@item copyFrom:@- start to:@- end
Answer the data on which the receiver is streaming, from
the start-th item to the end-th.  Note that this method is 0-based,
unlike the one in Collection, because a Stream's #position method
returns 0-based values.


@meindex next
@item next
Answer the next item of the receiver.  Returns nil when at end of stream.


@meindex nextAvailable:@-into:@-startingAt:@-
@item nextAvailable:@- anInteger into:@- aCollection startingAt:@- pos
Place up to anInteger objects from the receiver into
aCollection, starting from position pos in the collection
and stopping if no more data is available.


@meindex nextAvailable:@-putAllOn:@-
@item nextAvailable:@- anInteger putAllOn:@- aStream
Copy up to anInteger objects from the receiver into
aStream, stopping if no more data is available.


@meindex peek
@item peek
Returns the next element of the stream without moving the pointer.
Returns nil when at end of stream.


@meindex peekFor:@-
@item peekFor:@- anObject
Returns true and gobbles the next element from the stream of it is
equal to anObject, returns false and doesn't gobble the next element
if the next element is not equal to anObject.


@meindex readStream
@item readStream
Answer a ReadStream on the same contents as the receiver


@meindex reverseContents
@item reverseContents
Returns a collection of the same type that the stream accesses, up to
and including the final element, but in reverse order.


@meindex upTo:@-
@item upTo:@- anObject
Returns a collection of the same type that the stream accesses, up to
but not including the object anObject.  Returns the entire rest of the
stream's contents if anObject is not present.


@meindex upToEnd
@item upToEnd
Returns a collection of the same type that the stream accesses,
containing the entire rest of the stream's contents.


@end table



@node PositionableStream-class type methods
@subsection PositionableStream:@- class type methods

@table @b
@meindex isExternalStream
@item isExternalStream
We stream on a collection residing in the image, so answer false


@meindex species
@slindex upTo:@-
@slindex select:@-
@item species
Return the type of the collections returned by #upTo:@- etc., which are the
same kind as those returned by the collection with methods such as #select:@-.


@end table



@node PositionableStream-compiling
@subsection PositionableStream:@- compiling

@table @b
@meindex name
@item name
Answer a string that represents what the receiver is streaming on


@meindex segmentFrom:@-to:@-
@slindex asString
@item segmentFrom:@- startPos to:@- endPos
Answer an object that, when sent #asString, will yield the result
of sending `copyFrom:@- startPos to:@- endPos' to the receiver


@end table



@node PositionableStream-positioning
@subsection PositionableStream:@- positioning

@table @b
@meindex basicPosition:@-
@item basicPosition:@- anInteger
Move the stream pointer to the anInteger-th object


@meindex isPositionable
@slindex skip:@-
@item isPositionable
Answer true if the stream supports moving backwards with #skip:@-.


@meindex position
@item position
Answer the current value of the stream pointer


@meindex position:@-
@item position:@- anInteger
Move the stream pointer to the anInteger-th object


@meindex reset
@item reset
Move the stream back to its first element. For write-only streams,
the stream is truncated there.


@meindex setToEnd
@item setToEnd
Move the current position to the end of the stream.


@meindex size
@item size
Answer the size of data on which we are streaming.


@meindex skip:@-
@item skip:@- anInteger
Move the current position by anInteger places, either forwards or
backwards.


@end table



@node PositionableStream-still unclassified
@subsection PositionableStream:@- still unclassified

@table @b
@meindex nextPutAllOn:@-
@item nextPutAllOn:@- aStream
Write all the objects in the receiver to aStream.


@end table



@node PositionableStream-testing
@subsection PositionableStream:@- testing

@table @b
@meindex atEnd
@item atEnd
Answer whether the objects in the stream have reached an end


@meindex basicAtEnd
@item basicAtEnd
Answer whether the objects in the stream have reached an end.
This method must NOT be overridden.


@meindex isEmpty
@item isEmpty
Answer whether the stream has no objects


@end table



@node PositionableStream-truncating
@subsection PositionableStream:@- truncating

@table @b
@meindex truncate
@item truncate
Truncate the receiver to the current position - only valid
for writing streams


@end table

@node Process
@section Process
@clindex Process

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Link
@itemx Category: Language-Processes
I represent a unit of computation.  My instances are independantly
executable blocks that have a priority associated with them, and they
can suspend themselves and resume themselves however they wish.
@end table

@menu
* Process-accessing::  (instance)
* Process-basic::  (instance)
* Process-builtins::  (instance)
* Process-debugging::  (instance)
* Process-printing::  (instance)
@end menu



@node Process-accessing
@subsection Process:@- accessing

@table @b
@meindex externalInterruptsEnabled
@item externalInterruptsEnabled
Answer whether the receiver is executed with interrupts enabled


@meindex name
@item name
Answer the user-friendly name of the process.


@meindex name:@-
@item name:@- aString
Give the name aString to the process


@meindex priority
@item priority
Answer the receiver's priority


@meindex priority:@-
@item priority:@- anInteger
Change the receiver's priority to anInteger


@meindex queueInterrupt:@-
@item queueInterrupt:@- aBlock
Force the receiver to be interrupted and to evaluate aBlock as soon as it
becomes the active process (this could mean NOW if the receiver is active).
If the process is temporarily suspended or waiting on a semaphore, it is
temporarily woken up so that the interrupt is processed as soon as the
process priority allows to do.  Answer the receiver.


@meindex suspendedContext
@item suspendedContext
Answer the context that the process was executing at the time it was
suspended.


@meindex suspendedContext:@-
@item suspendedContext:@- aContext
Modify the context that the process was executing at the time it was
suspended.


@meindex valueWithoutInterrupts:@-
@item valueWithoutInterrupts:@- aBlock
Evaluate aBlock and delay all interrupts that are requested during its
execution to after aBlock returns.


@end table



@node Process-basic
@subsection Process:@- basic

@table @b
@meindex context
@item context
Return the execution context of the receiver.


@meindex debugger
@item debugger
Return the object in charge of debugging the receiver.  This always returns
nil unless the DebugTools package is loaded.


@meindex finalize
@item finalize
Terminate processes that are GCed while waiting on a dead semaphore.


@meindex lowerPriority
@slindex lowerPriority
@slindex raisePriority
@item lowerPriority
Lower a bit the priority of the receiver. A #lowerPriority will
cancel a previous #raisePriority, and vice versa.


@meindex makeUntrusted:@-
@item makeUntrusted:@- aBoolean
Set whether the receiver is trusted or not.


@meindex primTerminate
@item primTerminate
Terminate the receiver - This is nothing more than prohibiting to
resume the process, then suspending it.


@meindex raisePriority
@slindex lowerPriority
@slindex raisePriority
@item raisePriority
Raise a bit the priority of the receiver. A #lowerPriority will
cancel a previous #raisePriority, and vice versa.


@meindex singleStep
@slindex singleStepWaitingOn:@-
@item singleStep
Execute a limited amount of code (usually a bytecode, or up to the
next backward jump, or up to the next message send) of the receiver,
which must in a ready-to-run state (neither executing nor terminating
nor suspended), then restart running the current process.  The current
process should have higher priority than the receiver.  For better
performance, use the underlying primitive, Process>>@-#singleStepWaitingOn:@-.


@meindex terminate
@slindex ensure:@-
@slindex ifCurtailed:@-
@item terminate
Terminate the receiver after having evaluated all the #ensure:@- and
#ifCurtailed:@- blocks that are active in it.  This is done by signalling
a ProcessBeingTerminated notification.


@meindex terminateOnQuit
@slindex quit:@-
@item terminateOnQuit
Mark the receiver so that it is terminated when
ObjectMemory class>>@-#quit:@- is sent.


@end table



@node Process-builtins
@subsection Process:@- builtins

@table @b
@meindex resume
@item resume
Resume the receiver's execution


@meindex singleStepWaitingOn:@-
@item singleStepWaitingOn:@- aSemaphore
Execute a limited amount of code (usually a bytecode, or up to the
next backward jump, or up to the next message send) of the receiver,
which must in a ready-to-run state (neither executing nor terminating
nor suspended), then restart running the current process.  aSemaphore
is used as a means to synchronize the execution of the current process
and the receiver and should have no signals on it.  The current process
should have higher priority than the receiver.


@meindex suspend
@item suspend
Do nothing if we're already suspended. Note that the blue book made
suspend a primitive - but the real primitive is yielding control to
another process. Suspending is nothing more than taking ourselves out
of every scheduling list and THEN yielding control to another process


@meindex yield
@item yield
Yield control from the receiver to other processes


@end table



@node Process-debugging
@subsection Process:@- debugging

@table @b
@meindex detach
@item detach
Do nothing, instances of Process are already detached.


@end table



@node Process-printing
@subsection Process:@- printing

@table @b
@meindex printOn:@-
@item printOn:@- aStream
Print a representation of the receiver on aStream


@end table

@node ProcessEnvironment
@section ProcessEnvironment
@clindex ProcessEnvironment

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Object
@itemx Category: Language-Processes
I represent a proxy for thread-local variables defined for
Smalltalk processes.  Associations requested to me retrieve the thread-local
value for the current process.  For now, I don't provide the full protocol of
a Dictionary; in particular the iteration protocol is absent.
@end table

@menu
* ProcessEnvironment class-disabled::  (class)
* ProcessEnvironment class-singleton::  (class)
* ProcessEnvironment-accessing::  (instance)
* ProcessEnvironment-dictionary removing::  (instance)
* ProcessEnvironment-dictionary testing::  (instance)
@end menu



@node ProcessEnvironment class-disabled
@subsection ProcessEnvironment class:@- disabled

@table @b
@meindex new
@item new
This method should not be called for instances of this class.

@end table



@node ProcessEnvironment class-singleton
@subsection ProcessEnvironment class:@- singleton

@table @b
@meindex uniqueInstance
@item uniqueInstance
Return the singleton instance of ProcessEnvironment.


@end table



@node ProcessEnvironment-accessing
@subsection ProcessEnvironment:@- accessing

@table @b
@meindex add:@-
@item add:@- newObject
Add the newObject association to the receiver


@meindex associationAt:@-
@item associationAt:@- key
Answer the value associated to the given key, or the result of evaluating
aBlock if the key is not found


@meindex associationAt:@-ifAbsent:@-
@item associationAt:@- key ifAbsent:@- aBlock
Answer the value associated to the given key, or the result of evaluating
aBlock if the key is not found


@meindex at:@-
@item at:@- key
Answer the value associated to the given key. Return nil if the key
is not found


@meindex at:@-ifAbsent:@-
@item at:@- key ifAbsent:@- aBlock
Answer the value associated to the given key, or the result of evaluating
aBlock if the key is not found


@meindex at:@-ifAbsentPut:@-
@item at:@- key ifAbsentPut:@- aBlock
Answer the value associated to the given key, setting it to
the result of evaluating aBlock if the key is not found.


@meindex at:@-ifPresent:@-
@item at:@- key ifPresent:@- aBlock
Answer the value associated to the given key, or the result of evaluating
aBlock if the key is not found


@meindex at:@-put:@-
@item at:@- key put:@- value
Store value as associated to the given key


@meindex keys
@item keys
Answer a kind of Set containing the keys of the receiver


@end table



@node ProcessEnvironment-dictionary removing
@subsection ProcessEnvironment:@- dictionary removing

@table @b
@meindex remove:@-
@item remove:@- anAssociation
Remove anAssociation's key from the dictionary


@meindex remove:@-ifAbsent:@-
@item remove:@- anAssociation ifAbsent:@- aBlock
Remove anAssociation's key from the dictionary


@meindex removeAllKeys:@-
@item removeAllKeys:@- keys
Remove all the keys in keys, without raising any errors


@meindex removeAllKeys:@-ifAbsent:@-
@item removeAllKeys:@- keys ifAbsent:@- aBlock
Remove all the keys in keys, passing the missing keys as parameters
to aBlock as they're encountered


@meindex removeKey:@-
@item removeKey:@- aSymbol
Remove the aSymbol key from the dictionary


@meindex removeKey:@-ifAbsent:@-
@item removeKey:@- aSymbol ifAbsent:@- aBlock
Remove the aSymbol key from the dictionary


@end table



@node ProcessEnvironment-dictionary testing
@subsection ProcessEnvironment:@- dictionary testing

@table @b
@meindex includesKey:@-
@item includesKey:@- key
Answer whether the receiver contains the given key


@end table

@node ProcessorScheduler
@section ProcessorScheduler
@clindex ProcessorScheduler

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Object
@itemx Category: Language-Processes
I provide methods that control the execution of processes.
@end table

@menu
* ProcessorScheduler class-instance creation::  (class)
* ProcessorScheduler-basic::  (instance)
* ProcessorScheduler-built ins::  (instance)
* ProcessorScheduler-idle tasks::  (instance)
* ProcessorScheduler-printing::  (instance)
* ProcessorScheduler-priorities::  (instance)
* ProcessorScheduler-storing::  (instance)
* ProcessorScheduler-timed invocation::  (instance)
@end menu



@node ProcessorScheduler class-instance creation
@subsection ProcessorScheduler class:@- instance creation

@table @b
@meindex new
@item new
Error---new instances of ProcessorScheduler should not be created.


@end table



@node ProcessorScheduler-basic
@subsection ProcessorScheduler:@- basic

@table @b
@meindex activeDebugger
@item activeDebugger
Answer the active process' debugger


@meindex activePriority
@item activePriority
Answer the active process' priority


@meindex activeProcess
@item activeProcess
Answer the active process


@meindex processEnvironment
@slindex associationAt:@-
@item processEnvironment
Answer another singleton object hosting thread-local variables
for the Smalltalk processes.  This acts like a normal Dictionary
with a couple of differences:@- a) using #associationAt:@- will
return special associations that retrieve a thread-local value;
b) requesting missing keys will return nil, and removing them
will be a nop.


@meindex processesAt:@-
@item processesAt:@- aPriority
Answer a linked list of processes at the given priority


@meindex terminateActive
@item terminateActive
Terminate the active process


@meindex timeSlice
@item timeSlice
Answer the timeslice that is assigned to each Process before it
is automatically preempted by the system (in milliseconds).  An
answer of zero means that preemptive multitasking is disabled.
Note that the system by default is compiled without preemptive
multitasking, and that even if it is enabled it will work only
under BSD derivatives (or, in general, systems that support
ITIMER_VIRTUAL).


@meindex timeSlice:@-
@item timeSlice:@- milliSeconds
Set the timeslice that is assigned to each Process before it is
automatically preempted by the system.  Setting this to zero
disables preemptive multitasking.  Note that the system by
default is compiled with preemptive multitasking disabled, and
that even if it is enabled it will surely work only under BSD
derivatives (or, in general, systems that support ITIMER_VIRTUAL).


@meindex yield
@item yield
Let the active process yield control to other processes


@end table



@node ProcessorScheduler-built ins
@subsection ProcessorScheduler:@- built ins

@table @b
@meindex disableInterrupts
@slindex disableInterrupts
@slindex enableInterrupts
@item disableInterrupts
Disable interrupts caused by external events while the
current process is executing.  Note that interrupts are
disabled on a per-process basis, and that calling
#disableInterrupts twice requires calling #enableInterrupts
twice as well to re-enable interrupts.


@meindex enableInterrupts
@item enableInterrupts
Re-enable interrupts caused by external events while the
current process is executing.  By default, interrupts are
enabled.


@end table



@node ProcessorScheduler-idle tasks
@subsection ProcessorScheduler:@- idle tasks

@table @b
@meindex idle
@item idle
Private - Call the next idle task.  Return whether GNU Smalltalk
should pause until the next OS signal.


@meindex idleAdd:@-
@item idleAdd:@- aBlock
Register aBlock to be executed when things are idle


@meindex initialize
@item initialize
Private - Start the finalization process.


@meindex pause:@-
@item pause:@- aBoolean
Private - Pause for some time if aBoolean is false, or until a signal
if it is true.


@meindex startFinalizers
@item startFinalizers
Private - Fire a low-priority process to finalize the objects


@meindex update:@-
@item update:@- aSymbol
If we left some work behind when the image was saved,
do it now.


@end table



@node ProcessorScheduler-printing
@subsection ProcessorScheduler:@- printing

@table @b
@meindex printOn:@-
@item printOn:@- aStream
Store onto aStream a printed representation of the receiver


@end table



@node ProcessorScheduler-priorities
@subsection ProcessorScheduler:@- priorities

@table @b
@meindex highIOPriority
@item highIOPriority
Answer the priority for system high-priority I/O processes,
such as a process handling input from a network.


@meindex highestPriority
@item highestPriority
Answer the highest valid priority


@meindex idlePriority
@item idlePriority
Answer the priority of idle processes.


@meindex lowIOPriority
@item lowIOPriority
Answer the priority for system low-priority I/O processes.
Examples are the process handling input from the user (keyboard,
pointing device, etc.) and the process distributing input from a
network.


@meindex lowestPriority
@item lowestPriority
Answer the lowest valid priority


@meindex priorityName:@-
@item priorityName:@- priority
Private - Answer a name for the given process priority


@meindex systemBackgroundPriority
@item systemBackgroundPriority
Answer the priority for system background-priority processes.  An
incremental garbage collector could run at this level but now
it runs at idlePriority instead.


@meindex timingPriority
@item timingPriority
Answer the priority for system real-time processes.


@meindex unpreemptedPriority
@slindex valueWithoutPreemption
@item unpreemptedPriority
Answer the highest priority avilable in the system; never
create a process with this priority, instead use
BlockClosure>>@-#valueWithoutPreemption.


@meindex userBackgroundPriority
@item userBackgroundPriority
Answer the priority for user background-priority processes


@meindex userInterruptPriority
@item userInterruptPriority
Answer the priority for user interrupt-priority processes.
Processes run at this level will preempt the window scheduler
and should, therefore, not consume the processor forever.


@meindex userSchedulingPriority
@item userSchedulingPriority
Answer the priority for user standard-priority processes


@end table



@node ProcessorScheduler-storing
@subsection ProcessorScheduler:@- storing

@table @b
@meindex storeOn:@-
@item storeOn:@- aStream
Store onto aStream a Smalltalk expression which evaluates to the receiver


@end table



@node ProcessorScheduler-timed invocation
@subsection ProcessorScheduler:@- timed invocation

@table @b
@meindex isTimeoutProgrammed
@slindex signal:@-atMilliseconds:@-
@item isTimeoutProgrammed
Private - Answer whether there is a pending call to
#signal:@-atMilliseconds:@-


@meindex signal:@-atNanosecondClockValue:@-
@item signal:@- aSemaphore atNanosecondClockValue:@- ns
Private - signal 'aSemaphore' when the nanosecond clock reaches
'ns' nanoseconds.


@meindex signal:@-onInterrupt:@-
@item signal:@- aSemaphore onInterrupt:@- anIntegerSignalNumber
Signal 'aSemaphore' when the given C signal occurs.


@end table

@node ProcessVariable
@section ProcessVariable
@clindex ProcessVariable

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: LookupKey
@itemx Category: Language-Processes
I represent a proxy for a thread-local variable defined
for a process.  Requesting the value will return the thread-local
setting for the current process.
@end table

@menu
* ProcessVariable class-accessing::  (class)
* ProcessVariable-accessing::  (instance)
@end menu



@node ProcessVariable class-accessing
@subsection ProcessVariable class:@- accessing

@table @b
@meindex key:@-
@item key:@- anObject
Return a new ProcessVariable with the given key.  Not that the key
need not be a symbol or string, for example you could use an
array #(@-#@{class name@} 'name').  Setting the variable's value will
automatically create it in the current process, while removal must
be done by hand through the ProcessEnvironment singleton object.


@meindex new
@item new
Return a new ProcessVariable with a new anonymous but unique key.
It is suggested to use a descriptive name instead to ease debugging.
Setting the variable's value will automatically create it in
the current process, while removal must be done by hand through
the ProcessEnvironment singleton object.


@end table



@node ProcessVariable-accessing
@subsection ProcessVariable:@- accessing

@table @b
@meindex environment
@item environment
Return the environment in which this ProcessVariable lives.  This
is the singleton instance of ProcessEnvironment for all variables.


@meindex use:@-during:@-
@item use:@- anObject during:@- aBlock
Set the value of this variable to anObject during the execution
of aBlock, then restore it.


@meindex value
@item value
Return the value of this variable in the current process.


@meindex value:@-
@item value:@- anObject
Set the value of the current process's copy of the variable to be
anObject.


@meindex valueIfAbsent:@-
@item valueIfAbsent:@- aBlock
Return the value of this variable in the current process.


@end table

@node Promise
@section Promise
@clindex Promise

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: ValueHolder
@itemx Category: Language-Data types
I store my value in a variable, and know whether I have been
initialized or not.  If you ask for my value and I have not been
initialized, I suspend the process until a value has been assigned.
@end table

@menu
* Promise class-creating instances::  (class)
* Promise-accessing::  (instance)
* Promise-initializing::  (instance)
* Promise-printing::  (instance)
* Promise-still unclassified::  (instance)
@end menu



@node Promise class-creating instances
@subsection Promise class:@- creating instances

@table @b
@meindex for:@-
@slindex value
@item for:@- aBlock
Invoke aBlock at an indeterminate time in an indeterminate
process before answering its value from #value sent to my
result.


@meindex null
@item null
This method should not be called for instances of this class.

@end table



@node Promise-accessing
@subsection Promise:@- accessing

@table @b
@meindex hasError
@slindex value
@item hasError
Answer whether calling #value will raise an exception.


@meindex hasValue
@slindex value
@item hasValue
Answer whether we already have a value (or calling #value will
raise an error).


@meindex value
@item value
Get the value of the receiver.


@meindex value:@-
@item value:@- anObject
Set the value of the receiver.


@end table



@node Promise-initializing
@subsection Promise:@- initializing

@table @b
@meindex initialize
@item initialize
Private - set the initial state of the receiver


@end table



@node Promise-printing
@subsection Promise:@- printing

@table @b
@meindex printOn:@-
@item printOn:@- aStream
Print a representation of the receiver


@end table



@node Promise-still unclassified
@subsection Promise:@- still unclassified

@table @b
@meindex errorValue:@-
@slindex value
@item errorValue:@- anException
Private - Raise anException whenever #value is called.


@end table

@node Random
@section Random
@clindex Random

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Stream
@itemx Category: Streams
My instances are generator streams that produce random numbers, which are 
floating point values between 0 and 1.
@end table

@menu
* Random class-instance creation::  (class)
* Random class-shortcuts::  (class)
* Random-basic::  (instance)
* Random-testing::  (instance)
@end menu



@node Random class-instance creation
@subsection Random class:@- instance creation

@table @b
@meindex new
@item new
Create a new random number generator whose seed is given by the
current time on the millisecond clock


@meindex seed:@-
@item seed:@- aFloat
Create a new random number generator whose seed is aFloat


@end table



@node Random class-shortcuts
@subsection Random class:@- shortcuts

@table @b
@meindex between:@-and:@-
@item between:@- low and:@- high
Return a random integer between the given extrema


@meindex next
@item next
Return a random number between 0 and 1 (excluded)


@meindex source
@item source
Return a standard source of random numbers.


@end table



@node Random-basic
@subsection Random:@- basic

@table @b
@meindex atEnd
@item atEnd
This stream never ends. Always answer false.


@meindex between:@-and:@-
@item between:@- low and:@- high
Return a random integer between low and high.


@meindex next
@item next
Return the next random number in the sequence.


@meindex nextPut:@-
@item nextPut:@- value
This method should not be called for instances of this class.

@end table



@node Random-testing
@subsection Random:@- testing

@table @b
@meindex chiSquare
@item chiSquare
Compute the chi-square of the random that this class generates.


@meindex chiSquare:@-range:@-
@item chiSquare:@- n range:@- r
Return the chi-square deduced from calculating n random
numbers in the 0..r range.


@end table

@node ReadStream
@section ReadStream
@clindex ReadStream

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: PositionableStream
@itemx Category: Streams-Collections
I implement the set of read-only stream objects.  You may read from
my objects, but you may not write to them.
@end table

@menu
* ReadStream class-instance creation::  (class)
@end menu



@node ReadStream class-instance creation
@subsection ReadStream class:@- instance creation

@table @b
@meindex on:@-
@item on:@- aCollection
Answer a new stream working on aCollection from its start.


@meindex on:@-from:@-to:@-
@item on:@- aCollection from:@- firstIndex to:@- lastIndex
Answer an instance of the receiver streaming from
the firstIndex-th item of aCollection to the lastIndex-th


@end table

@node ReadWriteStream
@section ReadWriteStream
@clindex ReadWriteStream

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: WriteStream
@itemx Category: Streams-Collections
I am the class of streams that may be read and written from simultaneously.
In some sense, I am the best of both ReadStream and WriteStream.
@end table

@menu
* ReadWriteStream class-instance creation::  (class)
* ReadWriteStream-positioning::  (instance)
@end menu



@node ReadWriteStream class-instance creation
@subsection ReadWriteStream class:@- instance creation

@table @b
@meindex on:@-
@item on:@- aCollection
Answer a new stream working on aCollection from its start. The
stream starts at the front of aCollection.


@meindex on:@-from:@-to:@-
@item on:@- aCollection from:@- firstIndex to:@- lastIndex
Answer an instance of the receiver streaming from
the firstIndex-th item of aCollection to the lastIndex-th


@meindex with:@-
@item with:@- aCollection
Answer a new instance of the receiver which streams from the end
of aCollection.


@end table



@node ReadWriteStream-positioning
@subsection ReadWriteStream:@- positioning

@table @b
@meindex contents
@item contents
Unlike WriteStreams, ReadWriteStreams return the whole contents of the
underlying collection.


@end table

@node Rectangle
@section Rectangle
@clindex Rectangle

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Object
@itemx Category: Language-Data types
Beginning of the Rectangle class for simple display manipulation.
 Rectangles require the Point class to be available.  An extension
 to the Point class is made here that since it requires Rectangles
 to be defined (see converting)
@end table

@menu
* Rectangle class-instance creation::  (class)
* Rectangle-accessing::  (instance)
* Rectangle-copying::  (instance)
* Rectangle-printing::  (instance)
* Rectangle-rectangle functions::  (instance)
* Rectangle-testing::  (instance)
* Rectangle-transforming::  (instance)
* Rectangle-truncation and round off::  (instance)
@end menu



@node Rectangle class-instance creation
@subsection Rectangle class:@- instance creation

@table @b
@meindex left:@-right:@-top:@-bottom:@-
@item left:@- leftNumber right:@- rightNumber top:@- topNumber bottom:@- bottomNumber
Answer a rectangle with the given coordinates


@meindex left:@-top:@-right:@-bottom:@-
@item left:@- leftNumber top:@- topNumber right:@- rightNumber bottom:@- bottomNumber
Answer a rectangle with the given coordinates


@meindex new
@item new
Answer the (0 @@ 0 corner:@- 0 @@ 0) rectangle


@meindex origin:@-corner:@-
@item origin:@- originPoint corner:@- cornerPoint
Answer a rectangle with the given corners


@meindex origin:@-extent:@-
@item origin:@- originPoint extent:@- extentPoint
Answer a rectangle with the given origin and size


@end table



@node Rectangle-accessing
@subsection Rectangle:@- accessing

@table @b
@meindex bottom
@item bottom
Answer the corner's y of the receiver


@meindex bottom:@-
@item bottom:@- aNumber
Set the corner's y of the receiver


@meindex bottomCenter
@item bottomCenter
Answer the center of the receiver's bottom side


@meindex bottomLeft
@item bottomLeft
Answer the bottom-left corner of the receiver


@meindex bottomLeft:@-
@item bottomLeft:@- aPoint
Answer the receiver with the bottom-left changed to aPoint


@meindex bottomRight
@item bottomRight
Answer the bottom-right corner of the receiver


@meindex bottomRight:@-
@item bottomRight:@- aPoint
Change the bottom-right corner of the receiver


@meindex center
@item center
Answer the center of the receiver


@meindex corner
@item corner
Answer the corner of the receiver


@meindex corner:@-
@item corner:@- aPoint
Set the corner of the receiver


@meindex extent
@item extent
Answer the extent of the receiver


@meindex extent:@-
@item extent:@- aPoint
Change the size of the receiver, keeping the origin the same


@meindex height
@item height
Answer the height of the receiver


@meindex height:@-
@item height:@- aNumber
Set the height of the receiver


@meindex left
@item left
Answer the x of the left edge of the receiver


@meindex left:@-
@item left:@- aValue
Set the x of the left edge of the receiver


@meindex left:@-top:@-right:@-bottom:@-
@item left:@- l top:@- t right:@- r bottom:@- b
Change all four the coordinates of the receiver's corners


@meindex leftCenter
@item leftCenter
Answer the center of the receiver's left side


@meindex origin
@item origin
Answer the top-left corner of the receiver


@meindex origin:@-
@item origin:@- aPoint
Change the top-left corner of the receiver to aPoint


@meindex origin:@-corner:@-
@item origin:@- pnt1 corner:@- pnt2
Change both the origin (top-left corner) and the corner (bottom-right
corner) of the receiver


@meindex origin:@-extent:@-
@item origin:@- pnt1 extent:@- pnt2
Change the top-left corner and the size of the receiver


@meindex right
@item right
Answer the x of the bottom-right corner of the receiver


@meindex right:@-
@item right:@- aNumber
Change the x of the bottom-right corner of the receiver


@meindex rightCenter
@item rightCenter
Answer the center of the receiver's right side


@meindex top
@item top
Answer the y of the receiver's top-left corner


@meindex top:@-
@item top:@- aValue
Change the y of the receiver's top-left corner


@meindex topCenter
@item topCenter
Answer the center of the receiver's top side


@meindex topLeft
@item topLeft
Answer the receiver's top-left corner


@meindex topLeft:@-
@item topLeft:@- aPoint
Change the receiver's top-left corner's coordinates to aPoint


@meindex topRight
@item topRight
Answer the receiver's top-right corner


@meindex topRight:@-
@item topRight:@- aPoint
Change the receiver's top-right corner to aPoint


@meindex width
@item width
Answer the receiver's width


@meindex width:@-
@item width:@- aNumber
Change the receiver's width to aNumber


@end table



@node Rectangle-copying
@subsection Rectangle:@- copying

@table @b
@meindex copy
@item copy
Return a deep copy of the receiver for safety.


@end table



@node Rectangle-printing
@subsection Rectangle:@- printing

@table @b
@meindex printOn:@-
@item printOn:@- aStream
Print a representation of the receiver on aStream


@meindex storeOn:@-
@item storeOn:@- aStream
Store Smalltalk code compiling to the receiver on aStream


@end table



@node Rectangle-rectangle functions
@subsection Rectangle:@- rectangle functions

@table @b
@meindex amountToTranslateWithin:@-
@item amountToTranslateWithin:@- aRectangle
Answer a Point so that if aRectangle is translated by that point,
its origin lies within the receiver's.


@meindex area
@item area
Answer the receiver's area. The area is the width times the height,
so it is possible for it to be negative if the rectangle is not
normalized.


@meindex areasOutside:@-
@item areasOutside:@- aRectangle
Answer a collection of rectangles containing the parts of the receiver
outside of aRectangle. For all points in the receiver, but outside
aRectangle, exactly one rectangle in the collection will contain that
point.


@meindex expandBy:@-
@item expandBy:@- delta
Answer a new rectangle that is the receiver expanded by aValue:@-
if aValue is a rectangle, calculate origin=origin-aValue origin,
corner=corner+aValue corner; else calculate origin=origin-aValue,
corner=corner+aValue.


@meindex insetBy:@-
@item insetBy:@- delta
Answer a new rectangle that is the receiver inset by aValue:@-
if aValue is a rectangle, calculate origin=origin+aValue origin,
corner=corner-aValue corner; else calculate origin=origin+aValue,
corner=corner-aValue.


@meindex insetOriginBy:@-corner:@-
@item insetOriginBy:@- originDelta corner:@- cornerDelta
Answer a new rectangle that is the receiver inset so that
origin=origin+originDelta, corner=corner-cornerDelta.
The deltas can be points or numbers


@meindex intersect:@-
@item intersect:@- aRectangle
Answers the rectangle (if any) created by the overlap of
rectangles A and B.  Answers nil if the rectangles do not
overlap


@meindex merge:@-
@item merge:@- aRectangle
Answer a new rectangle which is the smallest rectangle containing
both the receiver and aRectangle.


@meindex translatedToBeWithin:@-
@item translatedToBeWithin:@- aRectangle
Answer a copy of the receiver that does not extend beyond aRectangle.


@end table



@node Rectangle-testing
@subsection Rectangle:@- testing

@table @b
@meindex =
@item = aRectangle
Answer whether the receiver is equal to aRectangle


@meindex contains:@-
@item contains:@- aRectangle
Answer true if the receiver contains (see containsPoint:@-) both
aRectangle's origin and aRectangle's corner


@meindex containsPoint:@-
@item containsPoint:@- aPoint
Answer true if aPoint is equal to, or below and to the right of, the
receiver's origin; and aPoint is above and to the left of the receiver's
corner


@meindex hash
@item hash
Answer an hash value for the receiver


@meindex intersects:@-
@item intersects:@- aRectangle
Answer true if the receiver intersect aRectangle, i.e. if it contains
(see containsPoint:@-) any of aRectangle corners or if aRectangle contains
the receiver


@end table



@node Rectangle-transforming
@subsection Rectangle:@- transforming

@table @b
@meindex moveBy:@-
@item moveBy:@- aPoint
Change the receiver so that the origin and corner are shifted by aPoint


@meindex moveTo:@-
@item moveTo:@- aPoint
Change the receiver so that the origin moves to aPoint and the size
remains unchanged


@meindex scaleBy:@-
@item scaleBy:@- scale
Answer a copy of the receiver in which the origin and corner are
multiplied by scale


@meindex translateBy:@-
@item translateBy:@- factor
Answer a copy of the receiver in which the origin and corner are shifted
by aPoint


@end table



@node Rectangle-truncation and round off
@subsection Rectangle:@- truncation and round off

@table @b
@meindex rounded
@item rounded
Answer a copy of the receiver with the coordinates rounded to the nearest
integers


@end table

@node RecursionLock
@section RecursionLock
@clindex RecursionLock

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Object
@itemx Category: Language-Processes

@end table

@menu
* RecursionLock class-instance creation::  (class)
* RecursionLock-accessing::  (instance)
* RecursionLock-mutual exclusion::  (instance)
* RecursionLock-printing::  (instance)
@end menu



@node RecursionLock class-instance creation
@subsection RecursionLock class:@- instance creation

@table @b
@meindex new
@item new
Answer a new semaphore


@end table



@node RecursionLock-accessing
@subsection RecursionLock:@- accessing

@table @b
@meindex isOwnerProcess
@item isOwnerProcess
Answer whether the receiver is the owner of the lock.


@meindex name
@item name
Answer a user-defined name for the lock.


@meindex name:@-
@item name:@- aString
Set to aString the user-defined name for the lock.


@meindex waitingProcesses
@item waitingProcesses
Answer the set of processes that are waiting on the semaphore.


@meindex wouldBlock
@slindex wait
@item wouldBlock
Answer whether sending #wait to the receiver would suspend the
active process.


@end table



@node RecursionLock-mutual exclusion
@subsection RecursionLock:@- mutual exclusion

@table @b
@meindex critical:@-
@item critical:@- aBlock
Wait for the receiver to be free, execute aBlock and signal the receiver
again. Return the result of evaluating aBlock.


@end table



@node RecursionLock-printing
@subsection RecursionLock:@- printing

@table @b
@meindex printOn:@-
@item printOn:@- aStream
Print a human-readable represention of the receiver on aStream.


@end table

@node Regex
@section Regex
@clindex Regex

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Object
@itemx Category: Collections-Text

A Regex is a read-only string for which the regular expression matcher
can cache a compiled representation, thus speeding up matching.  Regex
objects are constructed automatically by methods that expect to match many
times the same regular expression, but can also be constructed explicitly
sending #asRegex to a String or Symbol.

Creation of Regex objects inside a loop is of course slower than creating
them outside the loop, but special care is taken so that the same Regex
object is used whenever possible (when converting Strings to Regex, the
cache is sought for an equivalent, already constructed Regex).
@end table

@menu
* Regex class-instance creation::  (class)
* Regex-basic::  (instance)
* Regex-conversion::  (instance)
* Regex-printing::  (instance)
@end menu



@node Regex class-instance creation
@subsection Regex class:@- instance creation

@table @b
@meindex fromString:@-
@item fromString:@- aString
Like `aString asRegex'.


@meindex new
@item new
Do not send this message.


@end table



@node Regex-basic
@subsection Regex:@- basic

@table @b
@meindex at:@-put:@-
@item at:@- anIndex put:@- anObject
Fail.  Regex objects are read-only.


@meindex copy
@item copy
Answer the receiver; instances of Regex are identity objects because
their only purpose is to ease caching, and we obtain better caching
if we avoid copying Regex objects


@end table



@node Regex-conversion
@subsection Regex:@- conversion

@table @b
@meindex asRegex
@item asRegex
Answer the receiver, which *is* a Regex!


@meindex asString
@item asString
Answer the receiver, converted back to a String


@meindex species
@item species
Answer `String'.

@end table



@node Regex-printing
@subsection Regex:@- printing

@table @b
@meindex displayOn:@-
@slindex printOn:@-
@item displayOn:@- aStream
Print a represention of the receiver on aStream. For most objects
this is simply its #printOn:@- representation, but for strings and
characters, superfluous dollars or extra pairs of quotes are stripped.


@meindex displayString
@slindex printString
@item displayString
Answer a String representing the receiver. For most objects
this is simply its #printString, but for strings and characters,
superfluous dollars or extra pair of quotes are stripped.


@meindex printOn:@-
@item printOn:@- aStream
Print a represention of the receiver on aStream.


@end table

@node RegexResults
@section RegexResults
@clindex RegexResults

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Object
@itemx Category: Collections-Text

I hold the results of a regular expression match, and I can reconstruct
which parts of the matched string were assigned to each subexpression.
Methods such as #=~ return RegexResults objects, while others transform
the string directly without passing the results object back to the
caller.
@end table

@menu
* RegexResults-accessing::  (instance)
* RegexResults-testing::  (instance)
@end menu



@node RegexResults-accessing
@subsection RegexResults:@- accessing

@table @b
@meindex asArray
@item asArray
If the regular expression was matched, return an Array with
the subexpressions that were present in the regular expression.


@meindex at:@-
@item at:@- anIndex
If the regular expression was matched, return the text of the
anIndex-th subexpression in the successful match.


@meindex from
@item from
If the regular expression was matched, return the index
of the first character in the successful match.


@meindex fromAt:@-
@item fromAt:@- anIndex
If the regular expression was matched, return the index of the first
character of the anIndex-th subexpression in the successful match.


@meindex intervalAt:@-
@item intervalAt:@- anIndex
If the regular expression was matched, return an Interval for the range
of indices in the anIndex-th subexpression of the successful match.


@meindex match
@item match
If the regular expression was matched, return the text of the
successful match.


@meindex matchInterval
@item matchInterval
If the regular expression was matched, return an Interval for the
range of indices of the successful match.


@meindex size
@item size
If the regular expression was matched, return the number
of subexpressions that were present in the regular expression.


@meindex subject
@item subject
If the regular expression was matched, return the text
that was matched against it.


@meindex to
@item to
If the regular expression was matched, return the index
of the last character in the successful match.


@meindex toAt:@-
@item toAt:@- anIndex
If the regular expression was matched, return the index of the last
character of the anIndex-th subexpression in the successful match.


@end table



@node RegexResults-testing
@subsection RegexResults:@- testing

@table @b
@meindex ifMatched:@-
@item ifMatched:@- oneArgBlock
If the regular expression was matched, pass the receiver to
oneArgBlock and return its result.  Otherwise, return nil.


@meindex ifMatched:@-ifNotMatched:@-
@item ifMatched:@- oneArgBlock ifNotMatched:@- zeroArgBlock
If the regular expression was matched, evaluate oneArgBlock with the
receiver as the argument.  If it was not, evaluate zeroArgBlock.
Answer the result of the block's evaluation.


@meindex ifNotMatched:@-
@item ifNotMatched:@- zeroArgBlock
If the regular expression was matched, return the receiver.  If it was
not, evaluate zeroArgBlock and return its result.


@meindex ifNotMatched:@-ifMatched:@-
@item ifNotMatched:@- zeroArgBlock ifMatched:@- oneArgBlock
If the regular expression was matched, evaluate oneArgBlock with the
receiver as the argument.  If it was not, evaluate zeroArgBlock.
Answer the result of the block's evaluation.


@meindex matched
@item matched
Answer whether the regular expression was matched


@end table

@node RootNamespace
@section RootNamespace
@clindex RootNamespace

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: AbstractNamespace
@itemx Category: Language-Implementation
I am a special form of dictionary.  Classes hold on
an instance of me; it is called their `environment'. 
@end table

@menu
* RootNamespace class-instance creation::  (class)
* RootNamespace-namespace hierarchy::  (instance)
* RootNamespace-overrides for superspaces::  (instance)
* RootNamespace-printing::  (instance)
@end menu



@node RootNamespace class-instance creation
@subsection RootNamespace class:@- instance creation

@table @b
@meindex new:@-
@item new:@- spaceName
Create a new root namespace with the given name, and add to Smalltalk
a key that references it.


@end table



@node RootNamespace-namespace hierarchy
@subsection RootNamespace:@- namespace hierarchy

@table @b
@meindex siblings
@item siblings
Answer all the other root namespaces


@meindex siblingsDo:@-
@item siblingsDo:@- aBlock
Evaluate aBlock once for each of the other root namespaces,
passing the namespace as a parameter.


@end table



@node RootNamespace-overrides for superspaces
@subsection RootNamespace:@- overrides for superspaces

@table @b
@meindex inheritedKeys
@item inheritedKeys
Answer a Set of all the keys in the receiver and its superspaces


@meindex set:@-to:@-ifAbsent:@-
@item set:@- key to:@- newValue ifAbsent:@- aBlock
Assign newValue to the variable named as specified by `key'.
This method won't define a new variable; instead if the key
is not found it will search in superspaces and evaluate
aBlock if it is not found. Answer newValue.


@end table



@node RootNamespace-printing
@subsection RootNamespace:@- printing

@table @b
@meindex nameIn:@-
@item nameIn:@- aNamespace
Answer Smalltalk code compiling to the receiver when the current
namespace is aNamespace


@meindex printOn:@-in:@-
@item printOn:@- aStream in:@- aNamespace
Print on aStream some Smalltalk code compiling to the receiver
when the current namespace is aNamespace


@meindex storeOn:@-
@item storeOn:@- aStream
Store Smalltalk code compiling to the receiver


@end table

@node RunArray
@section RunArray
@clindex RunArray

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: OrderedCollection
@itemx Category: Collections-Sequenceable
My instances are OrderedCollections that automatically
apply Run Length Encoding compression to the things they store. Be careful
when using me:@- I can provide great space savings, but my instances don't
grant linear access time. RunArray's behavior currently is similar to that
of OrderedCollection (you can add elements to RunArrays); maybe it should
behave like an ArrayedCollection.
@end table

@menu
* RunArray class-instance creation::  (class)
* RunArray-accessing::  (instance)
* RunArray-adding::  (instance)
* RunArray-basic::  (instance)
* RunArray-copying::  (instance)
* RunArray-enumerating::  (instance)
* RunArray-removing::  (instance)
* RunArray-searching::  (instance)
* RunArray-testing::  (instance)
@end menu



@node RunArray class-instance creation
@subsection RunArray class:@- instance creation

@table @b
@meindex new
@item new
Answer an empty RunArray


@meindex new:@-
@item new:@- aSize
Answer a RunArray with space for aSize runs


@end table



@node RunArray-accessing
@subsection RunArray:@- accessing

@table @b
@meindex at:@-
@item at:@- anIndex
Answer the element at index anIndex


@meindex at:@-put:@-
@item at:@- anIndex put:@- anObject
Replace the element at index anIndex with anObject and answer anObject


@end table



@node RunArray-adding
@subsection RunArray:@- adding

@table @b
@meindex add:@-afterIndex:@-
@item add:@- anObject afterIndex:@- anIndex
Add anObject after the element at index anIndex


@meindex addAll:@-afterIndex:@-
@slindex do:@-
@item addAll:@- aCollection afterIndex:@- anIndex
Add all the elements of aCollection after the one at index anIndex. If
aCollection is unordered, its elements could be added in an order which is
not the #do:@- order


@meindex addAllFirst:@-
@slindex do:@-
@item addAllFirst:@- aCollection
Add all the elements of aCollection at the beginning of the receiver. If
aCollection is unordered, its elements could be added in an order which is
not the #do:@- order


@meindex addAllLast:@-
@slindex do:@-
@item addAllLast:@- aCollection
Add all the elements of aCollection at the end of the receiver. If aCollection
is unordered, its elements could be added in an order which is not
the #do:@- order


@meindex addFirst:@-
@item addFirst:@- anObject
Add anObject at the beginning of the receiver. Watch out:@- this operation
can cause serious performance pitfalls


@meindex addLast:@-
@item addLast:@- anObject
Add anObject at the end of the receiver


@end table



@node RunArray-basic
@subsection RunArray:@- basic

@table @b
@meindex first
@item first
Answer the first element in the receiver


@meindex last
@item last
Answer the last element of the receiver


@meindex size
@item size
Answer the number of elements in the receiver


@end table



@node RunArray-copying
@subsection RunArray:@- copying

@table @b
@meindex deepCopy
@slindex copy
@item deepCopy
Answer a copy of the receiver containing copies of the receiver's elements
(@-#copy is used to obtain them)


@meindex shallowCopy
@item shallowCopy
Answer a copy of the receiver. The elements are not copied


@end table



@node RunArray-enumerating
@subsection RunArray:@- enumerating

@table @b
@meindex do:@-
@item do:@- aBlock
Enumerate all the objects in the receiver, passing each one to aBlock


@meindex objectsAndRunLengthsDo:@-
@item objectsAndRunLengthsDo:@- aBlock
Enumerate all the runs in the receiver, passing to aBlock two parameters
for every run:@- the first is the repeated object, the second is the number
of copies


@end table



@node RunArray-removing
@subsection RunArray:@- removing

@table @b
@meindex removeAtIndex:@-
@item removeAtIndex:@- anIndex
Remove the object at index anIndex from the receiver and answer the
removed object


@meindex removeFirst
@item removeFirst
Remove the first object from the receiver and answer the removed object


@meindex removeLast
@item removeLast
Remove the last object from the receiver and answer the removed object


@end table



@node RunArray-searching
@subsection RunArray:@- searching

@table @b
@meindex indexOf:@-startingAt:@-ifAbsent:@-
@item indexOf:@- anObject startingAt:@- anIndex ifAbsent:@- aBlock
Answer the index of the first copy of anObject in the receiver, starting
the search at the element at index anIndex. If no equal object is found,
answer the result of evaluating aBlock


@end table



@node RunArray-testing
@subsection RunArray:@- testing

@table @b
@meindex =
@item = anObject
Answer true if the receiver is equal to anObject


@meindex hash
@item hash
Answer an hash value for the receiver


@end table

@node ScaledDecimal
@section ScaledDecimal
@clindex ScaledDecimal

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Number
@itemx Category: Language-Data types
ScaledDecimal provides a numeric representation of fixed point decimal
numbers able to accurately represent decimal fractions.  It supports
unbounded precision, with no limit to the number of digits before and
after the decimal point.
@end table

@menu
* ScaledDecimal class-instance creation::  (class)
* ScaledDecimal-arithmetic::  (instance)
* ScaledDecimal-coercion::  (instance)
* ScaledDecimal-comparing::  (instance)
* ScaledDecimal-constants::  (instance)
* ScaledDecimal-printing::  (instance)
* ScaledDecimal-storing::  (instance)
@end menu



@node ScaledDecimal class-instance creation
@subsection ScaledDecimal class:@- instance creation

@table @b
@meindex newFromNumber:@-scale:@-
@item newFromNumber:@- aNumber scale:@- scale
Answer a new instance of ScaledDecimal, representing a decimal
fraction with a decimal representation considered valid up to the
scale-th digit.


@end table



@node ScaledDecimal-arithmetic
@subsection ScaledDecimal:@- arithmetic

@table @b
@meindex *
@item * aNumber
Multiply two numbers and answer the result.


@meindex +
@item + aNumber
Sum two numbers and answer the result.


@meindex -
@item - aNumber
Subtract aNumber from the receiver and answer the result.


@meindex /
@item / aNumber
Divide two numbers and answer the result.


@meindex //
@item // aNumber
Answer the integer quotient after dividing the receiver by aNumber
with truncation towards negative infinity.


@meindex \\
@item \\ aNumber
Answer the remainder after integer division the receiver by aNumber
with truncation towards negative infinity.


@end table



@node ScaledDecimal-coercion
@subsection ScaledDecimal:@- coercion

@table @b
@meindex asCNumber
@item asCNumber
Convert the receiver to a kind of number that is understood by
the C call-out mechanism.


@meindex asFloatD
@item asFloatD
Answer the receiver, converted to a FloatD


@meindex asFloatE
@item asFloatE
Answer the receiver, converted to a FloatE


@meindex asFloatQ
@item asFloatQ
Answer the receiver, converted to a FloatQ


@meindex asFraction
@item asFraction
Answer the receiver, converted to a Fraction


@meindex ceiling
@item ceiling
Answer the receiver, converted to an Integer and truncated towards
+infinity.


@meindex coerce:@-
@item coerce:@- aNumber
Answer aNumber, converted to a ScaledDecimal with the same scale
as the receiver.


@meindex fractionPart
@item fractionPart
Answer the fractional part of the receiver.


@meindex generality
@item generality
Return the receiver's generality


@meindex integerPart
@item integerPart
Answer the fractional part of the receiver.


@meindex truncated
@item truncated
Answer the receiver, converted to an Integer and truncated towards
-infinity.


@end table



@node ScaledDecimal-comparing
@subsection ScaledDecimal:@- comparing

@table @b
@meindex <
@item < aNumber
Answer whether the receiver is less than arg.


@meindex <=
@item <= aNumber
Answer whether the receiver is less than or equal to arg.


@meindex =
@item = arg
Answer whether the receiver is equal to arg.


@meindex >
@item > aNumber
Answer whether the receiver is greater than arg.


@meindex >=
@item >= aNumber
Answer whether the receiver is greater than or equal to arg.


@meindex hash
@item hash
Answer an hash value for the receiver.


@meindex ~=
@item ~= arg
Answer whether the receiver is not equal arg.


@end table



@node ScaledDecimal-constants
@subsection ScaledDecimal:@- constants

@table @b
@meindex one
@item one
Answer the receiver's representation of one.


@meindex zero
@item zero
Answer the receiver's representation of zero.


@end table



@node ScaledDecimal-printing
@subsection ScaledDecimal:@- printing

@table @b
@meindex displayOn:@-
@slindex printString
@item displayOn:@- aStream
Print a representation of the receiver on aStream, intended to
be directed to a user.  In this particular case, the `scale'
part of the #printString is not emitted.


@meindex printOn:@-
@item printOn:@- aStream
Print a representation of the receiver on aStream.


@end table



@node ScaledDecimal-storing
@subsection ScaledDecimal:@- storing

@table @b
@meindex isLiteralObject
@item isLiteralObject
Answer whether the receiver is expressible as a Smalltalk literal.


@meindex storeLiteralOn:@-
@item storeLiteralOn:@- aStream
Store on aStream some Smalltalk code which compiles to the receiver


@meindex storeOn:@-
@item storeOn:@- aStream
Print Smalltalk code that compiles to the receiver on aStream.


@end table

@node SecurityPolicy
@section SecurityPolicy
@clindex SecurityPolicy

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Object
@itemx Category: Language-Security
I am the class that represents which operations that could harm
the system's security are allowed or denied to a particular class.  If
a class does not have a policy, it is allowed everything if it is trusted,
and denied everything if it is untrusted
@end table

@menu
* SecurityPolicy-modifying::  (instance)
* SecurityPolicy-querying::  (instance)
@end menu



@node SecurityPolicy-modifying
@subsection SecurityPolicy:@- modifying

@table @b
@meindex addPermission:@-
@item addPermission:@- aPermission
Not commented.

@meindex owner:@-
@item owner:@- aClass
Not commented.

@meindex removePermission:@-
@item removePermission:@- aPermission
Not commented.

@meindex withOwner:@-
@item withOwner:@- aClass
Not commented.

@end table



@node SecurityPolicy-querying
@subsection SecurityPolicy:@- querying

@table @b
@meindex check:@-
@item check:@- aPermission
Not commented.

@meindex implies:@-
@item implies:@- aPermission
Not commented.

@end table

@node Semaphore
@section Semaphore
@clindex Semaphore

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: LinkedList
@itemx Category: Language-Processes
My instances represent counting semaphores.  I provide methods for signalling
the semaphore's availability, and methods for waiting for its availability.
I also provide some methods for implementing critical sections.
@end table

@menu
* Semaphore class-instance creation::  (class)
* Semaphore-accessing::  (instance)
* Semaphore-builtins::  (instance)
* Semaphore-mutual exclusion::  (instance)
* Semaphore-printing::  (instance)
@end menu



@node Semaphore class-instance creation
@subsection Semaphore class:@- instance creation

@table @b
@meindex forMutualExclusion
@item forMutualExclusion
Answer a new semaphore with a signal on it. These semaphores are a useful
shortcut when you use semaphores as critical sections.


@meindex new
@item new
Answer a new semaphore


@end table



@node Semaphore-accessing
@subsection Semaphore:@- accessing

@table @b
@meindex name
@item name
Answer a user-friendly name for the receiver


@meindex name:@-
@item name:@- aString
Answer a user-friendly name for the receiver


@meindex waitingProcesses
@item waitingProcesses
Answer an Array of processes currently waiting on the receiver.


@meindex wouldBlock
@item wouldBlock
Answer whether waiting on the receiver would suspend the current process.


@end table



@node Semaphore-builtins
@subsection Semaphore:@- builtins

@table @b
@meindex lock
@item lock
Without putting the receiver to sleep, force processes that try to wait
on the semaphore to block.  Answer whether this was the case even before.


@meindex notify
@item notify
Resume one of the processes that were waiting on the semaphore if
there were any.  Do not leave a signal on the semaphore if no
process is waiting.


@meindex notifyAll
@item notifyAll
Resume all the processes that were waiting on the semaphore if there
were any.  Do not leave a signal on the semaphore if no process is
waiting.


@meindex signal
@item signal
Signal the receiver, resuming a waiting process' if there is one


@meindex wait
@item wait
Wait for the receiver to be signalled, suspending the executing process
if it is not yet.  Return nil if the wait was interrupted, the
receiver otherwise.


@meindex waitAfterSignalling:@-
@slindex notify
@slindex notifyAll
@item waitAfterSignalling:@- aSemaphore
Signal aSemaphore then, atomically, wait for the receiver to be
signalled, suspending the executing process if it is not yet.  This
is needed to avoid race conditions when the #notify and #notifyAll
are used before waiting on receiver:@- otherwise, if a process sends
any of the two between the time aSemaphore is signaled and the time
the process starts waiting on the receiver, the notification is lost.


@end table



@node Semaphore-mutual exclusion
@subsection Semaphore:@- mutual exclusion

@table @b
@meindex critical:@-
@item critical:@- aBlock
Wait for the receiver to be free, execute aBlock and signal the receiver
again. Return the result of evaluating aBlock.


@end table



@node Semaphore-printing
@subsection Semaphore:@- printing

@table @b
@meindex printOn:@-
@item printOn:@- aStream
Print a human-readable represention of the receiver on aStream.


@end table

@node SequenceableCollection
@section SequenceableCollection
@clindex SequenceableCollection

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Collection
@itemx Category: Collections-Sequenceable
My instances represent collections of objects that are ordered.  I provide
some access and manipulation methods.
@end table

@menu
* SequenceableCollection class-instance creation::  (class)
* SequenceableCollection-basic::  (instance)
* SequenceableCollection-comparing::  (instance)
* SequenceableCollection-concatenating::  (instance)
* SequenceableCollection-copying SequenceableCollections::  (instance)
* SequenceableCollection-enumerating::  (instance)
* SequenceableCollection-manipulation::  (instance)
* SequenceableCollection-replacing items::  (instance)
* SequenceableCollection-sorting::  (instance)
* SequenceableCollection-still unclassified::  (instance)
* SequenceableCollection-testing::  (instance)
* SequenceableCollection-testing collections::  (instance)
@end menu



@node SequenceableCollection class-instance creation
@subsection SequenceableCollection class:@- instance creation

@table @b
@meindex join:@-separatedBy:@-
@item join:@- aCollection separatedBy:@- sepCollection
Where aCollection is a collection of SequenceableCollections,
answer a new instance with all the elements therein, in order,
each separated by an occurrence of sepCollection.


@end table



@node SequenceableCollection-basic
@subsection SequenceableCollection:@- basic

@table @b
@meindex after:@-
@item after:@- oldObject
Return the element after oldObject.  Error if oldObject not found or
if no following object is available


@meindex allButFirst
@item allButFirst
Answer a copy of the receiver without the first object.


@meindex allButFirst:@-
@item allButFirst:@- n
Answer a copy of the receiver without the first n objects.


@meindex allButLast
@item allButLast
Answer a copy of the receiver without the last object.


@meindex allButLast:@-
@item allButLast:@- n
Answer a copy of the receiver without the last n objects.


@meindex at:@-ifAbsent:@-
@item at:@- anIndex ifAbsent:@- aBlock
Answer the anIndex-th item of the collection, or evaluate aBlock
and answer the result if the index is out of range


@meindex atAll:@-
@slindex collect:@-
@item atAll:@- keyCollection
Answer a collection of the same kind returned by #collect:@-, that
only includes the values at the given indices. Fail if any of
the values in keyCollection is out of bounds for the receiver.


@meindex atAll:@-put:@-
@item atAll:@- aCollection put:@- anObject
Put anObject at every index contained in aCollection


@meindex atAllPut:@-
@item atAllPut:@- anObject
Put anObject at every index in the receiver


@meindex atRandom
@item atRandom
Return a random item of the receiver.


@meindex before:@-
@item before:@- oldObject
Return the element before oldObject.  Error if oldObject not found or
if no preceding object is available


@meindex first
@item first
Answer the first item in the receiver


@meindex first:@-
@item first:@- n
Answer the first n items in the receiver


@meindex fourth
@item fourth
Answer the fourth item in the receiver


@meindex identityIncludes:@-
@item identityIncludes:@- anObject
Answer whether we include the anObject object


@meindex identityIndexOf:@-
@item identityIndexOf:@- anElement
Answer the index of the first occurrence of an object identical to
anElement in the receiver. Answer 0 if no item is found


@meindex identityIndexOf:@-ifAbsent:@-
@item identityIndexOf:@- anElement ifAbsent:@- exceptionBlock
Answer the index of the first occurrence of an object identical to
anElement in the receiver. Invoke exceptionBlock and answer its
result if no item is found


@meindex identityIndexOf:@-startingAt:@-
@item identityIndexOf:@- anElement startingAt:@- anIndex
Answer the first index > anIndex which contains an object identical
to anElement. Answer 0 if no item is found


@meindex identityIndexOf:@-startingAt:@-ifAbsent:@-
@item identityIndexOf:@- anObject startingAt:@- anIndex ifAbsent:@- exceptionBlock
Answer the first index > anIndex which contains an object exactly
identical to anObject.
Invoke exceptionBlock and answer its result if no item is found


@meindex identityIndexOfLast:@-ifAbsent:@-
@item identityIndexOfLast:@- anElement ifAbsent:@- exceptionBlock
Answer the last index which contains an object identical to anElement.
Invoke exceptionBlock and answer its result if no item is found


@meindex includes:@-
@item includes:@- anObject
Answer whether we include anObject


@meindex indexOf:@-
@item indexOf:@- anElement
Answer the index of the first occurrence of anElement in the receiver.
Answer 0 if no item is found


@meindex indexOf:@-ifAbsent:@-
@item indexOf:@- anElement ifAbsent:@- exceptionBlock
Answer the index of the first occurrence of anElement in the receiver.
Invoke exceptionBlock and answer its result if no item is found


@meindex indexOf:@-startingAt:@-
@item indexOf:@- anElement startingAt:@- anIndex
Answer the first index > anIndex which contains anElement.
Answer 0 if no item is found


@meindex indexOf:@-startingAt:@-ifAbsent:@-
@item indexOf:@- anElement startingAt:@- anIndex ifAbsent:@- exceptionBlock
Answer the first index > anIndex which contains anElement.
Invoke exceptionBlock and answer its result if no item is found


@meindex indexOfLast:@-ifAbsent:@-
@item indexOfLast:@- anElement ifAbsent:@- exceptionBlock
Answer the last index which contains anElement.
Invoke exceptionBlock and answer its result if no item is found


@meindex indexOfSubCollection:@-
@item indexOfSubCollection:@- aSubCollection
Answer the first index > anIndex at which starts a sequence of
items matching aSubCollection. Answer 0 if no such sequence is found.


@meindex indexOfSubCollection:@-ifAbsent:@-
@item indexOfSubCollection:@- aSubCollection ifAbsent:@- exceptionBlock
Answer the first index > anIndex at which starts a sequence of
items matching aSubCollection. Answer 0 if no such sequence is found.


@meindex indexOfSubCollection:@-startingAt:@-
@item indexOfSubCollection:@- aSubCollection startingAt:@- anIndex
Answer the first index > anIndex at which starts a sequence of
items matching aSubCollection. Answer 0 if no such sequence is found.


@meindex indexOfSubCollection:@-startingAt:@-ifAbsent:@-
@item indexOfSubCollection:@- aSubCollection startingAt:@- anIndex ifAbsent:@- exceptionBlock
Answer the first index > anIndex at which starts a sequence of
items matching aSubCollection.
Invoke exceptionBlock and answer its result if no such sequence is found


@meindex last
@item last
Answer the last item in the receiver


@meindex last:@-
@item last:@- n
Answer the last n items in the receiver


@meindex second
@item second
Answer the second item in the receiver


@meindex third
@item third
Answer the third item in the receiver


@end table



@node SequenceableCollection-comparing
@subsection SequenceableCollection:@- comparing

@table @b
@meindex endsWith:@-
@item endsWith:@- aSequenceableCollection
Returns true if the receiver ends with the same characters as aSequenceableCollection.


@meindex startsWith:@-
@item startsWith:@- aSequenceableCollection
Returns true if the receiver starts with the same characters as aSequenceableCollection.


@end table



@node SequenceableCollection-concatenating
@subsection SequenceableCollection:@- concatenating

@table @b
@meindex join:@-
@item join:@- sepCollection
Answer a new collection like my first element, with all the
elements (in order) of all my elements (which should be
collections) separated by sepCollection.

I use my first element instead of myself as a prototype because
my elements are more likely to share the desired properties than
I am, such as in:@-

#('hello,' 'world') join:@- ' ' => 'hello, world'


@meindex with:@-
@item with:@- aSequenceableCollection
Return an Array with the same size as the receiver and
aSequenceableCollection, each element of which is a 2-element
Arrays including one element from the receiver and one from
aSequenceableCollection.


@meindex with:@-with:@-
@item with:@- seqColl1 with:@- seqColl2
Return an Array with the same size as the receiver and
the arguments, each element of which is a 3-element
Arrays including one element from the receiver and one from
each argument.


@meindex with:@-with:@-with:@-
@item with:@- seqColl1 with:@- seqColl2 with:@- seqColl3
Return an Array with the same size as the receiver and
the arguments, each element of which is a 4-element
Arrays including one element from the receiver and one from
each argument.


@end table



@node SequenceableCollection-copying SequenceableCollections
@subsection SequenceableCollection:@- copying SequenceableCollections

@table @b
@meindex copyAfter:@-
@item copyAfter:@- anObject
Answer a new collection holding all the elements of the receiver
after the first occurrence of anObject, up to the last.


@meindex copyAfterLast:@-
@item copyAfterLast:@- anObject
Answer a new collection holding all the elements of the receiver
after the last occurrence of anObject, up to the last.


@meindex copyFrom:@-
@item copyFrom:@- start
Answer a new collection containing all the items in the receiver from the
start-th.


@meindex copyFrom:@-to:@-
@item copyFrom:@- start to:@- stop
Answer a new collection containing all the items in the receiver from the
start-th and to the stop-th


@meindex copyReplaceAll:@-with:@-
@item copyReplaceAll:@- oldSubCollection with:@- newSubCollection
Answer a new collection in which all the sequences matching
oldSubCollection are replaced with newSubCollection


@meindex copyReplaceFrom:@-to:@-with:@-
@item copyReplaceFrom:@- start to:@- stop with:@- replacementCollection
Answer a new collection of the same class as the receiver that contains the
same elements as the receiver, in the same order, except for elements from
index `start' to index `stop'.

If start < stop, these are replaced by the contents of the
replacementCollection.  Instead, If start = (stop + 1), like in
`copyReplaceFrom:@- 4 to:@- 3 with:@- anArray', then every element of the receiver
will be present in the answered copy; the operation will be an append if
stop is equal to the size of the receiver or, if it is not, an insert before
index `start'.


@meindex copyReplaceFrom:@-to:@-withObject:@-
@item copyReplaceFrom:@- start to:@- stop withObject:@- anObject
Answer a new collection of the same class as the receiver that contains the
same elements as the receiver, in the same order, except for elements from
index `start' to index `stop'.

If start < stop, these are replaced by stop-start+1 copies of anObject.
Instead, If start = (stop + 1), then every element of the receiver
will be present in the answered copy; the operation will be an append if
stop is equal to the size of the receiver or, if it is not, an insert before
index `start'.


@meindex copyUpTo:@-
@item copyUpTo:@- anObject
Answer a new collection holding all the elements of the receiver
from the first up to the first occurrence of anObject, excluded.


@meindex copyUpToLast:@-
@item copyUpToLast:@- anObject
Answer a new collection holding all the elements of the receiver
from the first up to the last occurrence of anObject, excluded.


@meindex copyWithFirst:@-
@item copyWithFirst:@- anObject
Answer a new collection holding all the elements of the receiver
after the first occurrence of anObject, up to the last.


@end table



@node SequenceableCollection-enumerating
@subsection SequenceableCollection:@- enumerating

@table @b
@meindex anyOne
@item anyOne
Answer an unspecified element of the collection.


@meindex do:@-
@item do:@- aBlock
Evaluate aBlock for all the elements in the sequenceable collection


@meindex do:@-separatedBy:@-
@item do:@- aBlock separatedBy:@- sepBlock
Evaluate aBlock for all the elements in the sequenceable collection.
Between each element, evaluate sepBlock without parameters.


@meindex doWithIndex:@-
@slindex keysAndValuesDo:@-
@item doWithIndex:@- aBlock
Evaluate aBlock for all the elements in the sequenceable collection,
passing the index of each element as the second parameter.  This method
is mantained for backwards compatibility and is not mandated by the
ANSI standard; use #keysAndValuesDo:@-


@meindex findFirst:@-
@item findFirst:@- aBlock
Returns the index of the first element of the sequenceable collection
for which aBlock returns true, or 0 if none


@meindex findLast:@-
@item findLast:@- aBlock
Returns the index of the last element of the sequenceable collection
for which aBlock returns true, or 0 if none does


@meindex fold:@-
@item fold:@- binaryBlock
First, pass to binaryBlock the first and second elements of the
receiver; for each subsequent element, pass the result of the previous
evaluation and an element. Answer the result of the last invocation,
or the first element if the collection has size 1.  Fail if the collection
is empty.


@meindex from:@-to:@-do:@-
@item from:@- startIndex to:@- stopIndex do:@- aBlock
Evaluate aBlock for all the elements in the sequenceable collection whose
indices are in the range index to stopIndex


@meindex from:@-to:@-doWithIndex:@-
@slindex from:@-to:@-keysAndValuesDo:@-
@item from:@- startIndex to:@- stopIndex doWithIndex:@- aBlock
Evaluate aBlock for all the elements in the sequenceable collection whose
indices are in the range index to stopIndex, passing the index of each
element as the second parameter.  This method is mantained for backwards
compatibility and is not mandated by the ANSI standard; use
#from:@-to:@-keysAndValuesDo:@-


@meindex from:@-to:@-keysAndValuesDo:@-
@item from:@- startIndex to:@- stopIndex keysAndValuesDo:@- aBlock
Evaluate aBlock for all the elements in the sequenceable collection whose
indices are in the range index to stopIndex, passing the index of each
element as the first parameter and the element as the second.


@meindex keys
@item keys
Return an Interval corresponding to the valid indices in the receiver.


@meindex keysAndValuesDo:@-
@item keysAndValuesDo:@- aBlock
Evaluate aBlock for all the elements in the sequenceable collection,
passing the index of each element as the first parameter and the
element as the second.


@meindex readStream
@item readStream
Answer a ReadStream streaming on the receiver


@meindex readWriteStream
@item readWriteStream
Answer a ReadWriteStream which streams on the receiver


@meindex reverse
@item reverse
Answer the receivers' contents in reverse order


@meindex reverseDo:@-
@item reverseDo:@- aBlock
Evaluate aBlock for all elements in the sequenceable collection, from the
last to the first.


@meindex with:@-collect:@-
@item with:@- aSequenceableCollection collect:@- aBlock
Evaluate aBlock for each pair of elements took respectively from
the receiver and from aSequenceableCollection; answer a collection of
the same kind of the receiver, made with the block's return values. 
Fail if the receiver has not the same size as aSequenceableCollection.


@meindex with:@-do:@-
@item with:@- aSequenceableCollection do:@- aBlock
Evaluate aBlock for each pair of elements took respectively from
the receiver and from aSequenceableCollection. Fail if the receiver
has not the same size as aSequenceableCollection.


@end table



@node SequenceableCollection-manipulation
@subsection SequenceableCollection:@- manipulation

@table @b
@meindex swap:@-with:@-
@item swap:@- anIndex with:@- anotherIndex
Swap the item at index anIndex with the item at index
another index


@end table



@node SequenceableCollection-replacing items
@subsection SequenceableCollection:@- replacing items

@table @b
@meindex replaceAll:@-with:@-
@item replaceAll:@- anObject with:@- anotherObject
In the receiver, replace every occurrence of anObject with anotherObject.


@meindex replaceFrom:@-to:@-with:@-
@item replaceFrom:@- start to:@- stop with:@- replacementCollection
Replace the items from start to stop with replacementCollection's items
from 1 to stop-start+1 (in unexpected order if the collection is not
sequenceable).


@meindex replaceFrom:@-to:@-with:@-startingAt:@-
@item replaceFrom:@- start to:@- stop with:@- replacementCollection startingAt:@- repStart
Replace the items from start to stop with replacementCollection's items
from repStart to repStart+stop-start


@meindex replaceFrom:@-to:@-withObject:@-
@item replaceFrom:@- anIndex to:@- stopIndex withObject:@- replacementObject
Replace every item from start to stop with replacementObject.


@end table



@node SequenceableCollection-sorting
@subsection SequenceableCollection:@- sorting

@table @b
@meindex sort
@slindex <=
@item sort
Sort the contents of the receiver according to the default
sort block, which uses #<= to compare items.


@meindex sort:@-
@item sort:@- sortBlock
Sort the contents of the receiver according to the given
sort block, which accepts pair of items and returns true if
the first item is less than the second one.


@meindex sorted
@slindex <=
@item sorted
Return a copy of the receiver sorted according to the default
sort block, which uses #<= to compare items.


@meindex sorted:@-
@item sorted:@- sortBlock
Return a copy of the receiver sorted according to the given
sort block, which accepts pair of items and returns true if
the first item is less than the second one.


@end table



@node SequenceableCollection-still unclassified
@subsection SequenceableCollection:@- still unclassified

@table @b
@meindex nextPutAllOn:@-
@item nextPutAllOn:@- aStream
Write all the objects in the receiver to aStream


@end table



@node SequenceableCollection-testing
@subsection SequenceableCollection:@- testing

@table @b
@meindex =
@item = aCollection
Answer whether the receiver's items match those in aCollection


@meindex examineOn:@-
@item examineOn:@- aStream
Print all the instance variables and context of the receiver on aStream


@meindex hash
@item hash
Answer an hash value for the receiver


@meindex isSequenceable
@slindex at:@-/@-#at:@-put:@-
@item isSequenceable
Answer whether the receiver can be accessed by a numeric index with
#at:@-/@-#at:@-put:@-.


@end table



@node SequenceableCollection-testing collections
@subsection SequenceableCollection:@- testing collections

@table @b
@meindex size
@slindex do:@-
@item size
Answer a dummy size of 0, so that SequenceableCollection>>@-#do:@- works.


@end table

@node Set
@section Set
@clindex Set

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: HashedCollection
@itemx Category: Collections-Unordered
I am the typical set object; I also known how to do arithmetic
on my instances.
@end table

@menu
* Set-arithmetic::  (instance)
* Set-awful ST-80 compatibility hacks::  (instance)
* Set-comparing::  (instance)
@end menu



@node Set-arithmetic
@subsection Set:@- arithmetic

@table @b
@meindex &
@item & aSet
Compute the set intersection of the receiver and aSet.


@meindex +
@item + aSet
Compute the set union of the receiver and aSet.


@meindex -
@item - aSet
Compute the set difference of the receiver and aSet.


@end table



@node Set-awful ST-80 compatibility hacks
@subsection Set:@- awful ST-80 compatibility hacks

@table @b
@meindex findObjectIndex:@-
@item findObjectIndex:@- object
Tries to see if anObject exists as an indexed variable. As soon as nil
or anObject is found, the index of that slot is answered


@end table



@node Set-comparing
@subsection Set:@- comparing

@table @b
@meindex <
@item < aSet
Answer whether the receiver is a strict subset of aSet


@meindex <=
@item <= aSet
Answer whether the receiver is a subset of aSet


@meindex >
@item > aSet
Answer whether the receiver is a strict superset of aSet


@meindex >=
@item >= aSet
Answer whether the receiver is a superset of aSet


@end table

@node SharedQueue
@section SharedQueue
@clindex SharedQueue

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Object
@itemx Category: Language-Processes
My instances provide a guaranteed safe mechanism to allow for communication
between processes.  All access to the underlying data structures is
controlled with critical sections so that things proceed smoothly.
@end table

@menu
* SharedQueue class-instance creation::  (class)
* SharedQueue-accessing::  (instance)
@end menu



@node SharedQueue class-instance creation
@subsection SharedQueue class:@- instance creation

@table @b
@meindex new
@item new
Create a new instance of the receiver


@meindex sortBlock:@-
@item sortBlock:@- sortBlock
Create a new instance of the receiver which implements a
priority queue with the given sort block


@end table



@node SharedQueue-accessing
@subsection SharedQueue:@- accessing

@table @b
@meindex isEmpty
@item isEmpty
Answer whether there is an object on the queue


@meindex next
@item next
Wait for an object to be on the queue, then remove it and answer it


@meindex nextPut:@-
@item nextPut:@- value
Put value on the queue and answer it


@meindex peek
@slindex next
@item peek
Wait for an object to be on the queue if necessary, then answer the
same object that #next would answer without removing it.


@end table

@node SingletonProxy
@section SingletonProxy
@clindex SingletonProxy

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: AlternativeObjectProxy
@itemx Category: Streams-Files
I am a proxy that stores the class of an
object rather than the object itself, and pretends that a registered
instance (which most likely is a singleton instance of the stored class)
was stored instead.
@end table

@menu
* SingletonProxy class-accessing::  (class)
* SingletonProxy class-instance creation::  (class)
* SingletonProxy-saving and restoring::  (instance)
@end menu



@node SingletonProxy class-accessing
@subsection SingletonProxy class:@- accessing

@table @b
@meindex acceptUsageForClass:@-
@item acceptUsageForClass:@- aClass
The receiver was asked to be used as a proxy for the class aClass.
The registration is fine if the class is actually a singleton.


@end table



@node SingletonProxy class-instance creation
@subsection SingletonProxy class:@- instance creation

@table @b
@meindex on:@-
@item on:@- anObject
Answer a proxy to be used to save anObject.  The proxy
stores the class and restores the object by looking into
a dictionary of class -> singleton objects.


@end table



@node SingletonProxy-saving and restoring
@subsection SingletonProxy:@- saving and restoring

@table @b
@meindex object
@slindex reconstructOriginalObject
@slindex postLoad
@item object
Reconstruct the object stored in the proxy and answer it;
the binaryRepresentationObject is sent the
#reconstructOriginalObject message, and the resulting
object is sent the #postLoad message.


@end table

@node SmallInteger
@section SmallInteger
@clindex SmallInteger

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Integer
@itemx Category: Language-Data types
I am the integer class of the GNU Smalltalk system.  My instances can 
represent signed 30 bit integers and are as efficient as possible.
@end table

@menu
* SmallInteger class-getting limits::  (class)
* SmallInteger class-testing::  (class)
* SmallInteger-bit arithmetic::  (instance)
* SmallInteger-built ins::  (instance)
* SmallInteger-builtins::  (instance)
* SmallInteger-coercion::  (instance)
* SmallInteger-coercion methods::  (instance)
* SmallInteger-testing functionality::  (instance)
@end menu



@node SmallInteger class-getting limits
@subsection SmallInteger class:@- getting limits

@table @b
@meindex bits
@item bits
Answer the number of bits (excluding the sign) that can be represented
directly in an object pointer


@meindex largest
@item largest
Answer the largest integer represented directly in an object pointer


@meindex smallest
@item smallest
Answer the smallest integer represented directly in an object pointer


@end table



@node SmallInteger class-testing
@subsection SmallInteger class:@- testing

@table @b
@meindex isIdentity
@item isIdentity
Answer whether x = y implies x == y for instances of the receiver


@end table



@node SmallInteger-bit arithmetic
@subsection SmallInteger:@- bit arithmetic

@table @b
@meindex highBit
@item highBit
Return the index of the highest order 1 bit of the receiver


@meindex lowBit
@item lowBit
Return the index of the lowest order 1 bit of the receiver.


@end table



@node SmallInteger-built ins
@subsection SmallInteger:@- built ins

@table @b
@meindex *
@item * arg
Multiply the receiver and arg and answer another Number


@meindex +
@item + arg
Sum the receiver and arg and answer another Number


@meindex -
@item - arg
Subtract arg from the receiver and answer another Number


@meindex /
@item / arg
Divide the receiver by arg and answer another Integer or Fraction


@meindex //
@item // arg
Dividing receiver by arg (with truncation towards -infinity) and answer
the result


@meindex <
@item < arg
Answer whether the receiver is less than arg


@meindex <=
@item <= arg
Answer whether the receiver is less than or equal to arg


@meindex =
@item = arg
Answer whether the receiver is equal to arg


@meindex ==
@item == arg
Answer whether the receiver is the same object as arg


@meindex >
@item > arg
Answer whether the receiver is greater than arg


@meindex >=
@item >= arg
Answer whether the receiver is greater than or equal to arg


@meindex \\
@item \\ arg
Calculate the remainder of dividing receiver by arg (with truncation
towards -infinity) and answer it


@meindex asFloatD
@item asFloatD
Convert the receiver to a FloatD, answer the result


@meindex asFloatE
@item asFloatE
Convert the receiver to a FloatE, answer the result


@meindex asFloatQ
@item asFloatQ
Convert the receiver to a FloatQ, answer the result


@meindex asObject
@item asObject
Answer the object whose index is in the receiver, nil if there is a free
object, fail if index is out of bounds


@meindex asObjectNoFail
@item asObjectNoFail
Answer the object whose index is in the receiver, or nil if no object is
found at that index


@meindex bitAnd:@-
@item bitAnd:@- arg
Do a bitwise AND between the receiver and arg, answer the result


@meindex bitOr:@-
@item bitOr:@- arg
Do a bitwise OR between the receiver and arg, answer the result


@meindex bitShift:@-
@item bitShift:@- arg
Shift the receiver by arg places to the left if arg > 0,
by arg places to the right if arg < 0, answer another Number


@meindex bitXor:@-
@item bitXor:@- arg
Do a bitwise XOR between the receiver and arg, answer the result


@meindex divExact:@-
@item divExact:@- arg
Dividing receiver by arg assuming that the remainder is zero, and answer
the result


@meindex nextValidOop
@item nextValidOop
Answer the index of the first non-free OOP after the receiver.  This is
used internally; it is placed here to avoid polluting Object.


@meindex quo:@-
@item quo:@- arg
Dividing receiver by arg (with truncation towards zero) and answer
the result


@meindex ~=
@item ~= arg
Answer whether the receiver is not equal to arg


@meindex ~~
@item ~~ arg
Answer whether the receiver is not the same object as arg


@end table



@node SmallInteger-builtins
@subsection SmallInteger:@- builtins

@table @b
@meindex at:@-
@item at:@- anIndex
Answer the index-th indexed instance variable of the receiver.
This method always fails.


@meindex at:@-put:@-
@item at:@- anIndex put:@- value
Store value in the index-th indexed instance variable of the receiver
This method always fails.


@meindex basicAt:@-
@item basicAt:@- anIndex
Answer the index-th indexed instance variable of the receiver.
This method always fails.


@meindex basicAt:@-put:@-
@item basicAt:@- anIndex put:@- value
Store value in the index-th indexed instance variable of the receiver
This method always fails.


@meindex scramble
@item scramble
Answer the receiver with its bits mixed and matched.


@end table



@node SmallInteger-coercion
@subsection SmallInteger:@- coercion

@table @b
@meindex asCNumber
@item asCNumber
Convert the receiver to a kind of number that is understood by
the C call-out mechanism.


@end table



@node SmallInteger-coercion methods
@subsection SmallInteger:@- coercion methods

@table @b
@meindex generality
@item generality
Return the receiver's generality


@meindex unity
@item unity
Coerce 1 to the receiver's class


@meindex zero
@item zero
Coerce 0 to the receiver's class


@end table



@node SmallInteger-testing functionality
@subsection SmallInteger:@- testing functionality

@table @b
@meindex isSmallInteger
@item isSmallInteger
Answer `true'.

@end table

@node SortedCollection
@section SortedCollection
@clindex SortedCollection

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: OrderedCollection
@itemx Category: Collections-Sequenceable
I am a collection of objects, stored and accessed according to some
sorting criteria.  I store things using heap sort and quick sort.  My
instances have a comparison block associated with them; this block
takes two arguments and is a predicate which returns true if the first
argument should be sorted earlier than the second.  The default block
is [ :a :b | a <= b ], but I will accept any block that conforms to the
above criteria -- actually any object which responds to #value:@-value:@-.
@end table

@menu
* SortedCollection class-hacking::  (class)
* SortedCollection class-instance creation::  (class)
* SortedCollection-basic::  (instance)
* SortedCollection-copying::  (instance)
* SortedCollection-disabled::  (instance)
* SortedCollection-enumerating::  (instance)
* SortedCollection-saving and loading::  (instance)
* SortedCollection-searching::  (instance)
* SortedCollection-sorting::  (instance)
@end menu



@node SortedCollection class-hacking
@subsection SortedCollection class:@- hacking

@table @b
@meindex defaultSortBlock
@item defaultSortBlock
Answer a default sort block for the receiver.


@end table



@node SortedCollection class-instance creation
@subsection SortedCollection class:@- instance creation

@table @b
@meindex new
@item new
Answer a new collection with a default size and sort block


@meindex new:@-
@item new:@- aSize
Answer a new collection with a default sort block and the given size


@meindex sortBlock:@-
@item sortBlock:@- aSortBlock
Answer a new collection with a default size and the given sort block


@end table



@node SortedCollection-basic
@subsection SortedCollection:@- basic

@table @b
@meindex last
@item last
Answer the last item of the receiver


@meindex removeLast
@item removeLast
Remove an object from the end of the receiver. Fail if the receiver
is empty


@meindex sortBlock
@item sortBlock
Answer the receiver's sort criteria


@meindex sortBlock:@-
@item sortBlock:@- aSortBlock
Change the sort criteria for a sorted collection, resort the elements of
the collection, and return it.


@end table



@node SortedCollection-copying
@subsection SortedCollection:@- copying

@table @b
@meindex copyEmpty:@-
@item copyEmpty:@- newSize
Answer an empty copy of the receiver, with the same sort block as the
receiver


@end table



@node SortedCollection-disabled
@subsection SortedCollection:@- disabled

@table @b
@meindex add:@-afterIndex:@-
@item add:@- anObject afterIndex:@- i
This method should not be called for instances of this class.

@meindex addAll:@-afterIndex:@-
@item addAll:@- aCollection afterIndex:@- i
This method should not be called for instances of this class.

@meindex addAllFirst:@-
@item addAllFirst:@- aCollection
This method should not be called for instances of this class.

@meindex addAllLast:@-
@item addAllLast:@- aCollection
This method should not be called for instances of this class.

@meindex addFirst:@-
@item addFirst:@- anObject
This method should not be called for instances of this class.

@meindex addLast:@-
@item addLast:@- anObject
This method should not be called for instances of this class.

@meindex at:@-put:@-
@item at:@- index put:@- anObject
This method should not be called for instances of this class.

@end table



@node SortedCollection-enumerating
@subsection SortedCollection:@- enumerating

@table @b
@meindex beConsistent
@slindex do:@-
@item beConsistent
Prepare the receiver to be walked through with #do:@- or another
enumeration method.


@end table



@node SortedCollection-saving and loading
@subsection SortedCollection:@- saving and loading

@table @b
@meindex postLoad
@item postLoad
Restore the default sortBlock if it is nil


@meindex preStore
@item preStore
Store the default sortBlock as nil


@end table



@node SortedCollection-searching
@subsection SortedCollection:@- searching

@table @b
@meindex includes:@-
@item includes:@- anObject
Private - Answer whether the receiver includes an item which is
equal to anObject


@meindex indexOf:@-startingAt:@-ifAbsent:@-
@item indexOf:@- anObject startingAt:@- index ifAbsent:@- aBlock
Answer the first index > anIndex which contains anElement.
Invoke exceptionBlock and answer its result if no item is found


@meindex occurrencesOf:@-
@item occurrencesOf:@- anObject
Answer how many occurrences of anObject can be found in the receiver


@end table



@node SortedCollection-sorting
@subsection SortedCollection:@- sorting

@table @b
@meindex sort
@item sort
Sort the contents of the receiver according to the given
sort block, which accepts pair of items and returns true if
the first item is less than the second one.  Fails if the
collections's sort block is not the same as the default sort
block.


@meindex sort:@-
@item sort:@- sortBlock
Sort the contents of the receiver according to the given
sort block, which accepts pair of items and returns true if
the first item is less than the second one.  Fails if the
sort block is not the same as the collection's sort block.


@end table

@node Stream
@section Stream
@clindex Stream

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Iterable
@itemx Category: Streams
I am an abstract class that provides interruptable sequential access to
objects.  I can return successive objects from a source, or accept
successive objects and store them sequentially on a sink.  I provide
some simple iteration over the contents of one of my instances, and 
provide for writing collections sequentially.
@end table

@menu
* Stream-accessing-reading::  (instance)
* Stream-accessing-writing::  (instance)
* Stream-basic::  (instance)
* Stream-buffering::  (instance)
* Stream-built ins::  (instance)
* Stream-character writing::  (instance)
* Stream-compiling::  (instance)
* Stream-concatenating::  (instance)
* Stream-enumerating::  (instance)
* Stream-filing out::  (instance)
* Stream-filtering::  (instance)
* Stream-polymorphism::  (instance)
* Stream-positioning::  (instance)
* Stream-printing::  (instance)
* Stream-still unclassified::  (instance)
* Stream-storing::  (instance)
* Stream-streaming protocol::  (instance)
* Stream-testing::  (instance)
@end menu



@node Stream-accessing-reading
@subsection Stream:@- accessing-reading

@table @b
@meindex contents
@item contents
Answer the whole contents of the receiver, from the next object to
the last


@meindex file
@item file
Return nil by default; not all streams have a file.


@meindex name
@item name
Return nil by default; not all streams have a name.


@meindex next
@item next
Return the next object in the receiver


@meindex next:@-
@item next:@- anInteger
Return the next anInteger objects in the receiver


@meindex nextAvailable:@-
@item nextAvailable:@- anInteger
Return up to anInteger objects in the receiver.  Besides stopping if
the end of the stream is reached, this may return less than this
number of bytes for various reasons.  For example, on files and sockets
this operation could be non-blocking, or could do at most one I/O
operation.


@meindex nextAvailable:@-into:@-startingAt:@-
@item nextAvailable:@- anInteger into:@- aCollection startingAt:@- pos
Place the next anInteger objects from the receiver into aCollection,
starting at position pos.  Return the number of items stored.
Besides stopping if the end of the stream is reached, this may
return less than this number of bytes for various reasons.
For example, on files and sockets this operation could be
non-blocking, or could do at most one I/O operation.


@meindex nextAvailable:@-putAllOn:@-
@item nextAvailable:@- anInteger putAllOn:@- aStream
Copy up to anInteger objects in the receiver to aStream.  Besides
stopping if the end of the stream is reached, this may return
less than this number of bytes for various reasons.  For example,
on files and sockets this operation could be non-blocking,
or could do at most one I/O operation.


@meindex nextLine
@item nextLine
Returns a collection of the same type that the stream accesses, containing
the next line up to the next new-line character.  Returns the entire rest of the
stream's contents if no new-line character is found.


@meindex nextMatchFor:@-
@item nextMatchFor:@- anObject
Answer whether the next object is equal to anObject. Even if it does
not, anObject is lost


@meindex splitAt:@-
@slindex =
@item splitAt:@- anObject
Answer an OrderedCollection of parts of the receiver. A new (possibly
empty) part starts at the start of the receiver, or after every
occurrence of an object which is equal to anObject (as compared by
#=).


@meindex upTo:@-
@item upTo:@- anObject
Returns a collection of the same type that the stream accesses, up to
but not including the object anObject.  Returns the entire rest of the
stream's contents if anObject is not present.


@meindex upToAll:@-
@item upToAll:@- aCollection
If there is a sequence of objects remaining in the stream that is
equal to the sequence in aCollection, set the stream position just
past that sequence and answer the elements up to, but not including,
the sequence. Else, set the stream position to its end and answer
all the remaining elements.


@meindex upToEnd
@item upToEnd
Answer every item in the collection on which the receiver is
streaming, from the next one to the last


@end table



@node Stream-accessing-writing
@subsection Stream:@- accessing-writing

@table @b
@meindex next:@-put:@-
@item next:@- anInteger put:@- anObject
Write anInteger copies of anObject to the receiver


@meindex next:@-putAll:@-startingAt:@-
@item next:@- n putAll:@- aCollection startingAt:@- start
Write n objects to the stream, reading them from aCollection
and starting at the start-th item.


@meindex nextPut:@-
@item nextPut:@- anObject
Write anObject to the receiver


@meindex nextPutAll:@-
@item nextPutAll:@- aCollection
Write all the objects in aCollection to the receiver


@meindex nextPutAllFlush:@-
@item nextPutAllFlush:@- aCollection
Put all the elements of aCollection in the stream, then flush the
buffers if supported by the stream.


@end table



@node Stream-basic
@subsection Stream:@- basic

@table @b
@meindex species
@item species
Answer `Array'.

@end table



@node Stream-buffering
@subsection Stream:@- buffering

@table @b
@meindex next:@-into:@-startingAt:@-
@item next:@- anInteger into:@- answer startingAt:@- pos
Read up to anInteger bytes from the stream and store them
into answer.  Return the number of bytes that were read, raising
an exception if we could not read the full amount of data.


@meindex next:@-putAllOn:@-
@item next:@- anInteger putAllOn:@- aStream
Read up to anInteger bytes from the stream and store them
into aStream.  Return the number of bytes that were read, raising
an exception if we could not read the full amount of data.


@end table



@node Stream-built ins
@subsection Stream:@- built ins

@table @b
@meindex fileIn
@item fileIn
File in the contents of the receiver.
During a file in operation, global variables (starting with an
uppercase letter) that are not declared don't yield an `unknown
variable' error. Instead, they are defined as nil in the `Undeclared'
dictionary (a global variable residing in Smalltalk).
As soon as you add the variable to a namespace (for example by creating
a class) the Association will be removed from Undeclared and reused
in the namespace, so that the old references will automagically point
to the new value.


@meindex fileInLine:@-file:@-at:@-
@slindex line
@slindex fileIn
@item fileInLine:@- lineNum file:@- aFile at:@- charPosInt
Private - Much like a preprocessor #line directive; it is used internally
by #fileIn, and explicitly by the Emacs Smalltalk mode.


@meindex fileInLine:@-fileName:@-at:@-
@slindex line
@slindex fileIn
@item fileInLine:@- lineNum fileName:@- aString at:@- charPosInt
Private - Much like a preprocessor #line directive; it is used internally
by #fileIn, and explicitly by the Emacs Smalltalk mode.


@end table



@node Stream-character writing
@subsection Stream:@- character writing

@table @b
@meindex cr
@item cr
Store a cr on the receiver


@meindex crTab
@item crTab
Store a cr and a tab on the receiver


@meindex encoding
@item encoding
Answer the encoding to be used when storing Unicode characters.


@meindex isUnicode
@item isUnicode
Answer whether the receiver is able to store Unicode characters.
Note that if this method returns true, the stream may or may not
be able to store Characters (as opposed to UnicodeCharacters)
whose value is above 127.


@meindex nl
@item nl
Store a new line on the receiver


@meindex nlTab
@item nlTab
Store a new line and a tab on the receiver


@meindex space
@item space
Store a space on the receiver


@meindex space:@-
@item space:@- n
Store n spaces on the receiver


@meindex tab
@item tab
Store a tab on the receiver


@meindex tab:@-
@item tab:@- n
Store n tabs on the receiver


@end table



@node Stream-compiling
@subsection Stream:@- compiling

@table @b
@meindex segmentFrom:@-to:@-
@slindex asString
@item segmentFrom:@- startPos to:@- endPos
Answer an object that, when sent #asString, will yield the result
of sending `copyFrom:@- startPos to:@- endPos' to the receiver


@end table



@node Stream-concatenating
@subsection Stream:@- concatenating

@table @b
@meindex with:@-
@item with:@- aStream
Return a new Stream whose elements are 2-element
Arrays, including one element from the receiver and one from
aStream.


@meindex with:@-with:@-
@item with:@- stream1 with:@- stream2
Return a new Stream whose elements are 3-element
Arrays, including one element from the receiver and one from
each argument.


@meindex with:@-with:@-with:@-
@item with:@- stream1 with:@- stream2 with:@- stream3
Return a new Stream whose elements are 3-element
Arrays, including one element from the receiver and one from
each argument.


@end table



@node Stream-enumerating
@subsection Stream:@- enumerating

@table @b
@meindex do:@-
@item do:@- aBlock
Evaluate aBlock once for every object in the receiver


@meindex linesDo:@-
@item linesDo:@- aBlock
Evaluate aBlock once for every line in the receiver (assuming the
receiver is streaming on Characters).


@end table



@node Stream-filing out
@subsection Stream:@- filing out

@table @b
@meindex fileOut:@-
@item fileOut:@- aClass
File out aClass on the receiver. If aClass is not a metaclass, file out
class and instance methods; if aClass is a metaclass, file out only the
class methods


@end table



@node Stream-filtering
@subsection Stream:@- filtering

@table @b
@meindex ,
@item , anIterable
Answer a new stream that concatenates the data in the receiver with the
data in aStream.  Both the receiver and aStream should be readable.


@meindex collect:@-
@item collect:@- aBlock
Answer a new stream that will pass the returned objects through aBlock,
and return whatever object is returned by aBlock instead.  Note that when
peeking in the returned stream, the block will be invoked multiple times,
with possibly surprising results.


@meindex lines
@item lines
Answer a new stream that answers lines from the receiver.


@meindex peek
@item peek
Returns the next element of the stream without moving the pointer.
Returns nil when at end of stream.  Lookahead is implemented automatically
for streams that are not positionable but can be copied.


@meindex peekFor:@-
@item peekFor:@- aCharacter
Returns true and gobbles the next element from the stream of it is
equal to anObject, returns false and doesn't gobble the next element
if the next element is not equal to anObject.  Lookahead is implemented
automatically for streams that are not positionable but can be copied.


@meindex reject:@-
@item reject:@- aBlock
Answer a new stream that only returns those objects for which aBlock
returns false.  Note that the returned stream will not be positionable.


@meindex select:@-
@item select:@- aBlock
Answer a new stream that only returns those objects for which aBlock
returns true.  Note that the returned stream will not be positionable.


@end table



@node Stream-polymorphism
@subsection Stream:@- polymorphism

@table @b
@meindex close
@item close
Do nothing. This is provided for consistency with file streams


@meindex flush
@item flush
Do nothing. This is provided for consistency with file streams


@meindex pastEnd
@item pastEnd
The end of the stream has been reached.  Signal a Notification.


@end table



@node Stream-positioning
@subsection Stream:@- positioning

@table @b
@meindex isPositionable
@slindex skip:@-
@item isPositionable
Answer true if the stream supports moving backwards with #skip:@-.


@meindex skip:@-
@item skip:@- anInteger
Move the position forwards by anInteger places


@meindex skipSeparators
@slindex next
@slindex skipSeparators
@item skipSeparators
Advance the receiver until we find a character that is not a
separator.  Answer false if we reach the end of the stream,
else answer true; in this case, sending #next will return the
first non-separator character (possibly the same to which the
stream pointed before #skipSeparators was sent).


@meindex skipTo:@-
@item skipTo:@- anObject
Move the current position to after the next occurrence of anObject
and return true if anObject was found.  If anObject doesn't exist, the
pointer is atEnd, and false is returned.


@meindex skipToAll:@-
@item skipToAll:@- aCollection
If there is a sequence of objects remaining in the stream that is
equal to the sequence in aCollection, set the stream position just
past that sequence and answer true. Else, set the stream position
to its end and answer false.


@end table



@node Stream-printing
@subsection Stream:@- printing

@table @b
@meindex <<
@slindex display:@-
@item << anObject
This method is a short-cut for #display:@-; it prints anObject on the
receiver by sending displayOn:@- to anObject. This method is provided
so that you can use cascading and obtain better-looking code


@meindex display:@-
@item display:@- anObject
Print anObject on the receiver by sending displayOn:@- to anObject. This
method is provided so that you can use cascading and obtain
better-looking code


@meindex print:@-
@item print:@- anObject
Print anObject on the receiver by sending printOn:@- to anObject. This
method is provided so that you can use cascading and obtain
better-looking code


@end table



@node Stream-still unclassified
@subsection Stream:@- still unclassified

@table @b
@meindex nextPutAllOn:@-
@item nextPutAllOn:@- aStream
Write all the objects in the receiver to aStream


@end table



@node Stream-storing
@subsection Stream:@- storing

@table @b
@meindex store:@-
@item store:@- anObject
Print Smalltalk code compiling to anObject on the receiver, by sending
storeOn:@- to anObject. This method is provided so that you can use
cascading and obtain better-looking code


@end table



@node Stream-streaming protocol
@subsection Stream:@- streaming protocol

@table @b
@meindex nextAvailablePutAllOn:@-
@item nextAvailablePutAllOn:@- aStream
Copy to aStream a more-or-less arbitrary amount of data.  When used
on files, this does at most one I/O operation.  For other kinds of
stream, the definition may vary.  This method is used to do
stream-to-stream copies.


@end table



@node Stream-testing
@subsection Stream:@- testing

@table @b
@meindex atEnd
@item atEnd
Answer whether the stream has got to an end


@meindex isExternalStream
@item isExternalStream
Answer whether the receiver streams on a file or socket.
By default, answer false.


@meindex isSequenceable
@slindex at:@-/@-#at:@-put:@-
@item isSequenceable
Answer whether the receiver can be accessed by a numeric index with
#at:@-/@-#at:@-put:@-.


@meindex readStream
@item readStream
As a wild guess, return the receiver.  WriteStreams should override
this method.


@end table

@node String
@section String
@clindex String

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: CharacterArray
@itemx Category: Collections-Text
My instances represent 8-bit character strings.  Being a very common
case, they are particularly optimized.

Note that, if you care about multilingualization, you should treat
String only as an encoded representation of a UnicodeString.  The I18N
package adds more Unicode-friendliness to the system so that encoding
and decoding is performed automatically in more cases.  In that case,
String represents a case when the encoding is either unknown, irrelevant,
or assumed to be the system default.
@end table

@menu
* String class-instance creation::  (class)
* String class-multibyte encodings::  (class)
* String-accessing::  (instance)
* String-basic::  (instance)
* String-built ins::  (instance)
* String-CObject::  (instance)
* String-converting::  (instance)
* String-filesystem::  (instance)
* String-printing::  (instance)
* String-regex::  (instance)
* String-still unclassified::  (instance)
* String-testing functionality::  (instance)
@end menu



@node String class-instance creation
@subsection String class:@- instance creation

@table @b
@meindex fromCData:@-
@item fromCData:@- aCObject
Answer a String containing the bytes starting at the location pointed
to by aCObject, up to the first NUL character.


@meindex fromCData:@-size:@-
@item fromCData:@- aCObject size:@- anInteger
Answer a String containing anInteger bytes starting at the location pointed
to by aCObject


@end table



@node String class-multibyte encodings
@subsection String class:@- multibyte encodings

@table @b
@meindex isUnicode
@item isUnicode
Answer false; the receiver stores bytes (i.e. an encoded
form), not characters.


@end table



@node String-accessing
@subsection String:@- accessing

@table @b
@meindex byteAt:@-
@item byteAt:@- index
Answer the ascii value of index-th character variable of the receiver


@meindex byteAt:@-put:@-
@item byteAt:@- index put:@- value
Store (Character value:@- value) in the index-th indexed instance variable
of the receiver


@end table



@node String-basic
@subsection String:@- basic

@table @b
@meindex ,
@item , aString
Answer a new instance of an ArrayedCollection containing all the elements
in the receiver, followed by all the elements in aSequenceableCollection


@meindex =
@item = aCollection
Answer whether the receiver's items match those in aCollection


@meindex indexOf:@-startingAt:@-
@item indexOf:@- anElement startingAt:@- anIndex
Answer the first index > anIndex which contains anElement.
Invoke exceptionBlock and answer its result if no item is found


@meindex indexOf:@-startingAt:@-ifAbsent:@-
@item indexOf:@- anElement startingAt:@- anIndex ifAbsent:@- exceptionBlock
Answer the first index > anIndex which contains anElement.
Invoke exceptionBlock and answer its result if no item is found


@end table



@node String-built ins
@subsection String:@- built ins

@table @b
@meindex asCData:@-
@item asCData:@- aCType
Allocate memory with malloc for a NULL-terminated copy of the
receiver, and return a pointer to it as a CObject of the given type.


@meindex at:@-
@item at:@- anIndex
Answer the index-th indexed instance variable of the receiver


@meindex at:@-ifAbsent:@-
@item at:@- anIndex ifAbsent:@- aBlock
Answer the index-th indexed instance variable of the receiver


@meindex at:@-put:@-
@item at:@- anIndex put:@- value
Store value in the index-th indexed instance variable of the receiver


@meindex basicAt:@-
@item basicAt:@- anIndex
Answer the index-th indexed instance variable of the receiver.
This method must not be overridden, override at:@- instead


@meindex basicAt:@-put:@-
@item basicAt:@- anIndex put:@- value
Store value in the index-th indexed instance variable of the receiver
This method must not be overridden, override at:@-put:@- instead


@meindex hash
@item hash
Answer an hash value for the receiver


@meindex replaceFrom:@-to:@-with:@-startingAt:@-
@item replaceFrom:@- start to:@- stop with:@- aString startingAt:@- replaceStart
Replace the characters from start to stop with new characters whose
ASCII codes are contained in aString, starting at the replaceStart
location of aString


@meindex replaceFrom:@-to:@-withByteArray:@-startingAt:@-
@item replaceFrom:@- start to:@- stop withByteArray:@- byteArray startingAt:@- replaceStart
Replace the characters from start to stop with new characters whose
ASCII codes are contained in byteArray, starting at the replaceStart
location of byteArray


@meindex similarityTo:@-
@item similarityTo:@- aString
Answer a number that denotes the similarity between aString and
the receiver.  0 indicates equality, negative numbers indicate
some difference.  Implemented as a primitive for speed.


@meindex size
@item size
Answer the size of the receiver


@end table



@node String-CObject
@subsection String:@- CObject

@table @b
@meindex asCData
@item asCData
Allocate memory with malloc for a NULL-terminated copy of the
receiver, and return a pointer to it as a CChar.


@end table



@node String-converting
@subsection String:@- converting

@table @b
@meindex asByteArray
@item asByteArray
Return the receiver, converted to a ByteArray of ASCII values


@meindex asString
@item asString
But I already am a String!  Really!


@meindex asSymbol
@item asSymbol
Returns the symbol corresponding to the receiver


@meindex encoding
@item encoding
Answer the encoding of the receiver.  This is not implemented unless
you load the Iconv package.


@end table



@node String-filesystem
@subsection String:@- filesystem

@table @b
@meindex /
@item / aName
Answer a File object as appropriate for a file named
'aName' in the directory represented by the receiver.


@meindex asFile
@item asFile
Answer a File object for the file whose name is in the receiver.


@end table



@node String-printing
@subsection String:@- printing

@table @b
@meindex displayOn:@-
@slindex printOn:@-
@item displayOn:@- aStream
Print a representation of the receiver on aStream. Unlike
#printOn:@-, this method strips extra quotes.


@meindex displayString
@slindex printString
@item displayString
Answer a String representing the receiver. For most objects
this is simply its #printString, but for CharacterArrays and characters,
superfluous dollars or extra pair of quotes are stripped.


@meindex isLiteralObject
@item isLiteralObject
Answer whether the receiver is expressible as a Smalltalk literal.


@meindex printOn:@-
@item printOn:@- aStream
Print a representation of the receiver on aStream


@meindex storeLiteralOn:@-
@item storeLiteralOn:@- aStream
Store a Smalltalk literal compiling to the receiver on aStream


@meindex storeOn:@-
@item storeOn:@- aStream
Store Smalltalk code compiling to the receiver on aStream


@end table



@node String-regex
@subsection String:@- regex

@table @b
@meindex =~
@item =~ pattern
Answer a RegexResults object for matching the receiver against
the Regex or String object pattern.


@meindex allOccurrencesOfRegex:@-
@item allOccurrencesOfRegex:@- pattern
Find all the matches of pattern within the receiver and
collect them into an OrderedCollection.


@meindex allOccurrencesOfRegex:@-do:@-
@item allOccurrencesOfRegex:@- pattern do:@- aBlock
Find all the matches of pattern within the receiver and
pass the RegexResults objects to aBlock.


@meindex allOccurrencesOfRegex:@-from:@-to:@-
@item allOccurrencesOfRegex:@- pattern from:@- from to:@- to
Find all the matches of pattern within the receiver and within the
given range of indices.  Collect them into an OrderedCollection,
which is then returned.


@meindex allOccurrencesOfRegex:@-from:@-to:@-do:@-
@item allOccurrencesOfRegex:@- pattern from:@- from to:@- to do:@- aBlock
Find all the matches of pattern within the receiver and within the
given range of indices.  For each match, pass the RegexResults object
to aBlock.


@meindex asRegex
@item asRegex
Answer the receiver, converted to a Regex object.


@meindex copyFrom:@-to:@-replacingAllRegex:@-with:@-
@slindex %
@item copyFrom:@- from to:@- to replacingAllRegex:@- pattern with:@- aStringOrBlock
Returns the substring of the receiver between from and to.
Any match of pattern in that part of the string is replaced
using aStringOrBlock as follows:@- if it is a block, a RegexResults
object is passed, while if it is a string, %n sequences are
replaced with the captured subexpressions of the match (as in #%).


@meindex copyFrom:@-to:@-replacingRegex:@-with:@-
@slindex %
@item copyFrom:@- from to:@- to replacingRegex:@- pattern with:@- aStringOrBlock
Returns the substring of the receiver between from and to.
If pattern has a match in that part of the string, the match
is replaced using aStringOrBlock as follows:@- if it is
a block, a RegexResults object is passed, while if it is a string,
%n sequences are replaced with the captured subexpressions of the
match (as in #%).


@meindex copyReplacingAllRegex:@-with:@-
@slindex %
@item copyReplacingAllRegex:@- pattern with:@- aStringOrBlock
Returns the receiver after replacing all the matches of pattern (if
any) using aStringOrBlock as follows:@- if it is a block, a RegexResults
object is passed, while if it is a string, %n sequences are
replaced with the captured subexpressions of the match (as in #%).


@meindex copyReplacingRegex:@-with:@-
@slindex %
@item copyReplacingRegex:@- pattern with:@- aStringOrBlock
Returns the receiver after replacing the first match of pattern (if
any) using aStringOrBlock as follows:@- if it is a block, a
RegexResults object is passed, while if it is a string, %n
sequences are replaced with the captured subexpressions of the
match (as in #%).


@meindex indexOfRegex:@-
@item indexOfRegex:@- regexString
If an occurrence of the regex is present in the receiver, return the
Interval corresponding to the leftmost-longest match.  Otherwise return
nil.


@meindex indexOfRegex:@-from:@-to:@-
@item indexOfRegex:@- regexString from:@- from to:@- to
If an occurrence of the regex is present in the receiver, return the
Interval corresponding to the leftmost-longest match occurring within
the given range of indices.  Otherwise return nil.


@meindex indexOfRegex:@-from:@-to:@-ifAbsent:@-
@item indexOfRegex:@- regexString from:@- from to:@- to ifAbsent:@- excBlock
If an occurrence of the regex is present in the receiver, return the
Interval corresponding to the leftmost-longest match occurring within
the given indices.  Otherwise, evaluate excBlock and return the result.


@meindex indexOfRegex:@-ifAbsent:@-
@item indexOfRegex:@- regexString ifAbsent:@- excBlock
If an occurrence of the regex is present in the receiver, return
the Interval corresponding to the leftmost-longest match.  Otherwise,
evaluate excBlock and return the result.


@meindex indexOfRegex:@-startingAt:@-
@item indexOfRegex:@- regexString startingAt:@- index
If an occurrence of the regex is present in the receiver, return the
Interval corresponding to the leftmost-longest match starting after
the given index.  Otherwise return nil.


@meindex indexOfRegex:@-startingAt:@-ifAbsent:@-
@item indexOfRegex:@- regexString startingAt:@- index ifAbsent:@- excBlock
If an occurrence of the regex is present in the receiver, return
the Interval corresponding to the leftmost-longest match starting after
the given index.  Otherwise, evaluate excBlock and return the result.


@meindex matchRegex:@-
@item matchRegex:@- pattern
Answer whether the receiver is an exact match for the pattern.
This means that the pattern is implicitly anchored at the beginning
and the end.


@meindex matchRegex:@-from:@-to:@-
@item matchRegex:@- pattern from:@- from to:@- to
Answer whether the given range of indices is an exact match for the
pattern.  This means that there is a match starting at from and ending
at to (which is not necessarily the longest match starting at from).


@meindex occurrencesOfRegex:@-
@item occurrencesOfRegex:@- pattern
Returns count of how many times pattern repeats in the receiver.


@meindex occurrencesOfRegex:@-from:@-to:@-
@item occurrencesOfRegex:@- pattern from:@- from to:@- to
Return a count of how many times pattern repeats in the receiver within
the given range of index.


@meindex occurrencesOfRegex:@-startingAt:@-
@item occurrencesOfRegex:@- pattern startingAt:@- index
Returns count of how many times pattern repeats in the receiver, starting
the search at the given index.


@meindex onOccurrencesOfRegex:@-do:@-
@item onOccurrencesOfRegex:@- pattern do:@- body
Find all the matches of pattern within the receiver and, for each match,
pass the RegexResults object to aBlock.


@meindex onOccurrencesOfRegex:@-from:@-to:@-do:@-
@item onOccurrencesOfRegex:@- pattern from:@- from to:@- to do:@- aBlock
Find all the matches of pattern within the receiver and within the
given range of indices.  For each match, pass the RegexResults object
to aBlock.


@meindex replacingAllRegex:@-with:@-
@slindex %
@item replacingAllRegex:@- pattern with:@- aStringOrBlock
Returns the receiver if the pattern has no match in it.  Otherwise,
any match of pattern in that part of the string is replaced
using aStringOrBlock as follows:@- if it is a block, a RegexResults
object is passed, while if it is a string, %n sequences are
replaced with the captured subexpressions of the match (as
in #%).


@meindex replacingRegex:@-with:@-
@slindex %
@item replacingRegex:@- pattern with:@- aStringOrBlock
Returns the receiver if the pattern has no match in it.  If it has
a match, it is replaced using aStringOrBlock as follows:@- if it is
a block, a RegexResults object is passed, while if it is a string,
%n sequences are replaced with the captured subexpressions of the
match (as in #%).


@meindex searchRegex:@-
@slindex =~
@item searchRegex:@- pattern
A synonym for #=~.  Answer a RegexResults object for matching the receiver
against the Regex or String object pattern.


@meindex searchRegex:@-from:@-to:@-
@item searchRegex:@- pattern from:@- from to:@- to
Answer a RegexResults object for matching the receiver
against the Regex or String object pattern, restricting the match
to the specified range of indices.


@meindex searchRegex:@-startingAt:@-
@item searchRegex:@- pattern startingAt:@- anIndex
Answer a RegexResults object for matching the receiver
against the Regex or String object pattern, starting the match
at index anIndex.


@meindex tokenize:@-
@item tokenize:@- pattern
Split the receiver at every occurrence of pattern.  All parts that do not
match pattern are separated and stored into an Array of Strings that is
returned.


@meindex tokenize:@-from:@-to:@-
@item tokenize:@- pattern from:@- from to:@- to
Split the receiver at every occurrence of pattern (considering only
the indices between from and to).  All parts that do not match pattern
are separated and stored into an Array of Strings that is returned.


@meindex ~
@item ~ pattern
Answer whether the receiver matched against the Regex or String
object pattern.


@end table



@node String-still unclassified
@subsection String:@- still unclassified

@table @b
@meindex escapeRegex
@item escapeRegex
Answer the receiver with all regex special characters escaped
by a backslash.


@end table



@node String-testing functionality
@subsection String:@- testing functionality

@table @b
@meindex isString
@item isString
Answer `true'.

@end table

@node Symbol
@section Symbol
@clindex Symbol

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: String
@itemx Category: Language-Implementation
My instances are unique throughout the Smalltalk system.  My instances 
behave for the most part like strings, except that they print differently,
and I guarantee that any two instances that have the same printed 
representation are in fact the same instance.
@end table

@menu
* Symbol class-built ins::  (class)
* Symbol class-instance creation::  (class)
* Symbol class-symbol table::  (class)
* Symbol-accessing the method dictionary::  (instance)
* Symbol-basic::  (instance)
* Symbol-built ins::  (instance)
* Symbol-converting::  (instance)
* Symbol-misc::  (instance)
* Symbol-storing::  (instance)
* Symbol-testing::  (instance)
* Symbol-testing functionality::  (instance)
@end menu



@node Symbol class-built ins
@subsection Symbol class:@- built ins

@table @b
@meindex intern:@-
@item intern:@- aString
Private - Same as 'aString asSymbol'


@end table



@node Symbol class-instance creation
@subsection Symbol class:@- instance creation

@table @b
@meindex internCharacter:@-
@item internCharacter:@- aCharacter
Answer the one-character symbol associated to the given character.


@meindex new
@item new
This method should not be called for instances of this class.

@meindex new:@-
@item new:@- size
This method should not be called for instances of this class.

@meindex with:@-
@item with:@- element1
Answer a collection whose only element is element1


@meindex with:@-with:@-
@item with:@- element1 with:@- element2
Answer a collection whose only elements are the parameters in the order
they were passed


@meindex with:@-with:@-with:@-
@item with:@- element1 with:@- element2 with:@- element3
Answer a collection whose only elements are the parameters in the order
they were passed


@meindex with:@-with:@-with:@-with:@-
@item with:@- element1 with:@- element2 with:@- element3 with:@- element4
Answer a collection whose only elements are the parameters in the order
they were passed


@meindex with:@-with:@-with:@-with:@-with:@-
@item with:@- element1 with:@- element2 with:@- element3 with:@- element4 with:@- element5
Answer a collection whose only elements are the parameters in the order
they were passed


@end table



@node Symbol class-symbol table
@subsection Symbol class:@- symbol table

@table @b
@meindex hasInterned:@-ifTrue:@-
@slindex hash
@item hasInterned:@- aString ifTrue:@- aBlock
If aString has not been interned yet, answer false.  Else, pass the
interned version to aBlock and answer true.  Note that this works because
String>>@-#hash calculates the same hash value used by the VM when interning
strings into the SymbolTable.  Changing one of the hashing methods without
changing the other will break this method.


@meindex isSymbolString:@-
@slindex hash
@item isSymbolString:@- aString
Answer whether aString has already been interned. Note that this works
because String>>@-#hash calculates the same hash value used by the VM
when interning strings into the SymbolTable.  Changing one of the
hashing methods without changing the other will break this method.


@meindex rebuildTable
@slindex hash
@item rebuildTable
Rebuild the SymbolTable, thereby garbage-collecting unreferenced
Symbols.  While this process is done, preemption is disabled
because it is not acceptable to leave the SymbolTable in a
partially updated state.  Note that this works because String>>@-#hash
calculates the same hash value used by the VM when interning strings
into the SymbolTable.  Changing one of the hashing methods without
changing the other will break this method.


@end table



@node Symbol-accessing the method dictionary
@subsection Symbol:@- accessing the method dictionary

@table @b
@meindex implementors
@item implementors
Answer a Set of all the compiled method associated with selector
named by the receiver, which is supposed to be a valid message
name.


@end table



@node Symbol-basic
@subsection Symbol:@- basic

@table @b
@meindex deepCopy
@item deepCopy
Returns a deep copy of the receiver. As Symbols are identity objects, we
actually return the receiver itself.


@meindex keywords
@slindex +
@slindex not
@slindex printOn:@-
@slindex ifTrue:@-ifFalse:@-
@item keywords
Answer an array of keywords that compose the receiver, which is supposed
to be a valid message name (@-#+, #not, #printOn:@-, #ifTrue:@-ifFalse:@-, etc.)


@meindex numArgs
@slindex +
@slindex not
@slindex printOn:@-
@slindex ifTrue:@-ifFalse:@-
@item numArgs
Answer the number of arguments supported by the receiver, which is supposed
to be a valid message name (@-#+, #not, #printOn:@-, #ifTrue:@-ifFalse:@-, etc.)


@meindex shallowCopy
@item shallowCopy
Returns a deep copy of the receiver. As Symbols are identity objects, we
actually return the receiver itself.


@end table



@node Symbol-built ins
@subsection Symbol:@- built ins

@table @b
@meindex =
@item = aSymbol
Answer whether the receiver and aSymbol are the same object


@meindex hash
@item hash
Answer an hash value for the receiver. Symbols are optimized
for speed


@end table



@node Symbol-converting
@subsection Symbol:@- converting

@table @b
@meindex asString
@item asString
Answer a String with the same characters as the receiver


@meindex asSymbol
@item asSymbol
But we are already a Symbol, and furthermore, Symbols are identity objects!
So answer the receiver.


@end table



@node Symbol-misc
@subsection Symbol:@- misc

@table @b
@meindex species
@item species
Answer `String'.

@end table



@node Symbol-storing
@subsection Symbol:@- storing

@table @b
@meindex displayOn:@-
@slindex printOn:@-
@item displayOn:@- aStream
Print a represention of the receiver on aStream. For most objects
this is simply its #printOn:@- representation, but for strings and
characters, superfluous dollars or extra pairs of quotes are stripped.


@meindex displayString
@slindex printString
@item displayString
Answer a String representing the receiver. For most objects
this is simply its #printString, but for strings and characters,
superfluous dollars or extra pair of quotes are stripped.


@meindex printOn:@-
@item printOn:@- aStream
Print a represention of the receiver on aStream.


@meindex storeLiteralOn:@-
@item storeLiteralOn:@- aStream
Print Smalltalk code on aStream that compiles
to the same symbol as the receiver.


@meindex storeOn:@-
@item storeOn:@- aStream
Print Smalltalk code on aStream that compiles
to the same symbol as the receiver.


@end table



@node Symbol-testing
@subsection Symbol:@- testing

@table @b
@meindex isSimpleSymbol
@item isSimpleSymbol
Answer whether the receiver must be represented in quoted-string
(e.g. #'abc-def') form.


@end table



@node Symbol-testing functionality
@subsection Symbol:@- testing functionality

@table @b
@meindex isString
@item isString
Answer `false'.

@meindex isSymbol
@item isSymbol
Answer `true'.

@end table

@node SymLink
@section SymLink
@clindex SymLink

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Link
@itemx Category: Language-Implementation
I am used to implement the Smalltalk symbol table.  My instances are
links that contain symbols, and the symbol table basically a hash table that
points to chains of my instances.
@end table

@menu
* SymLink class-instance creation::  (class)
* SymLink-accessing::  (instance)
* SymLink-iteration::  (instance)
* SymLink-printing::  (instance)
@end menu



@node SymLink class-instance creation
@subsection SymLink class:@- instance creation

@table @b
@meindex symbol:@-nextLink:@-
@item symbol:@- aSymbol nextLink:@- aSymLink
Answer a new SymLink, which refers to aSymbol and points to
aSymLink as the next SymLink in the chain.


@end table



@node SymLink-accessing
@subsection SymLink:@- accessing

@table @b
@meindex symbol
@item symbol
Answer the Symbol that the receiver refers to in the symbol table.


@meindex symbol:@-
@item symbol:@- aSymbol
Set the Symbol that the receiver refers to in the symbol table.


@end table



@node SymLink-iteration
@subsection SymLink:@- iteration

@table @b
@meindex do:@-
@item do:@- aBlock
Evaluate aBlock for each symbol in the list


@end table



@node SymLink-printing
@subsection SymLink:@- printing

@table @b
@meindex printOn:@-
@item printOn:@- aStream
Print a representation of the receiver on aStream.


@end table

@node SystemDictionary
@section SystemDictionary
@clindex SystemDictionary

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: RootNamespace
@itemx Category: Language-Implementation
I am a special namespace. I only have one instance, called "Smalltalk",
which is known to the Smalltalk interpreter.  I define
several methods that are "system" related, such as #quitPrimitive.
My instance also helps keep track of dependencies between objects.
@end table

@menu
* SystemDictionary class-initialization::  (class)
* SystemDictionary-basic::  (instance)
* SystemDictionary-builtins::  (instance)
* SystemDictionary-c call-outs::  (instance)
* SystemDictionary-command-line::  (instance)
* SystemDictionary-miscellaneous::  (instance)
* SystemDictionary-printing::  (instance)
* SystemDictionary-profiling::  (instance)
* SystemDictionary-special accessing::  (instance)
* SystemDictionary-testing::  (instance)
@end menu



@node SystemDictionary class-initialization
@subsection SystemDictionary class:@- initialization

@table @b
@meindex initialize
@item initialize
Create the kernel's private namespace.


@end table



@node SystemDictionary-basic
@subsection SystemDictionary:@- basic

@table @b
@meindex halt
@item halt
Interrupt interpreter


@meindex hash
@item hash
Smalltalk usually contains a reference to itself, avoid infinite
loops


@end table



@node SystemDictionary-builtins
@subsection SystemDictionary:@- builtins

@table @b
@meindex basicBacktrace
@item basicBacktrace
Prints the method invocation stack backtrace, as an aid to debugging


@meindex byteCodeCounter
@item byteCodeCounter
Answer the number of bytecodes executed by the VM


@meindex debug
@item debug
This methods provides a way to break in the VM code.  Set a breakpoint
in _gst_debug and call this method near the point where you think
the bug happens.


@meindex declarationTrace
@item declarationTrace
Answer whether compiled bytecodes are printed on stdout


@meindex declarationTrace:@-
@item declarationTrace:@- aBoolean
Set whether compiled bytecodes are printed on stdout


@meindex executionTrace
@item executionTrace
Answer whether executed bytecodes are printed on stdout


@meindex executionTrace:@-
@item executionTrace:@- aBoolean
Set whether executed bytecodes are printed on stdout


@meindex getTraceFlag:@-
@item getTraceFlag:@- anIndex
Private - Returns a boolean value which is one of the interpreter's
tracing flags


@meindex setTraceFlag:@-to:@-
@item setTraceFlag:@- anIndex to:@- aBoolean
Private - Sets the value of one of the interpreter's tracing flags
(indicated by 'anIndex') to the value aBoolean.


@meindex verboseTrace
@item verboseTrace
Answer whether execution tracing prints the object on the stack top


@meindex verboseTrace:@-
@item verboseTrace:@- aBoolean
Set whether execution tracing prints the object on the stack top


@end table



@node SystemDictionary-c call-outs
@subsection SystemDictionary:@- c call-outs

@table @b
@meindex environ
@item environ
Not commented.

@meindex getArgc
@item getArgc
Not commented.

@meindex getArgv:@-
@item getArgv:@- index
Not commented.

@meindex getenv:@-
@item getenv:@- aString
Not commented.

@meindex putenv:@-
@item putenv:@- aString
Not commented.

@meindex system:@-
@item system:@- aString
Not commented.

@meindex system:@-withArguments:@-
@item system:@- aString withArguments:@- args
Not commented.

@end table



@node SystemDictionary-command-line
@subsection SystemDictionary:@- command-line

@table @b
@meindex arguments:@-do:@-
@slindex arguments:@-do:@-ifError:@-
@item arguments:@- pattern do:@- actionBlock
Parse the command-line arguments according to the syntax specified in
pattern.  For every command-line option found, the two-argument block
actionBlock is evaluated passing the option name and the argument.  For
file names (or in general, other command-line arguments than options) the
block's first argument will be nil.  For options without arguments, or with
unspecified optional arguments, the block's second argument will be nil.
The option name will be passed as a character object for short options,
and as a string for long options.

If an error is found, nil is returned.  For more information on the syntax
of pattern, see #arguments:@-do:@-ifError:@-.


@meindex arguments:@-do:@-ifError:@-
@item arguments:@- pattern do:@- actionBlock ifError:@- errorBlock
Parse the command-line arguments according to the syntax specified in
pattern.  For every command-line option found, the two-argument block
actionBlock is evaluated passing the option name and the argument.  For
file names (or in general, other command-line arguments than options) the
block's first argument will be nil.  For options without arguments, or with
unspecified optional arguments, the block's second argument will be nil.
The option name will be passed as a character object for short options,
and as a string for long options.

If an error is found, the parsing is interrupted, errorBlock is evaluated,
and the returned value is answered.

Every whitespace-separated part (`word') of pattern specifies a command-line
option.  If a word ends with a colon, the option will have a mandatory argument.
If a word ends with two colons, the option will have an optional argument.
Before the colons, multiple option names (either short names like `-l' or
long names like `--long') can be specified.  Before passing the option to
actionBlock, the name will be canonicalized to the last one.

Prefixes of long options are accepted as long as they're unique, and they are
canonicalized to the full name before passing it to actionBlock.  Additionally,
the full name of an option is accepted even if it is the prefix of a longer
option.

Mandatory arguments can appear in the next argument, or in the same argument
(separated by an = for arguments to long options).  Optional arguments must
appear in the same argument.


@end table



@node SystemDictionary-miscellaneous
@subsection SystemDictionary:@- miscellaneous

@table @b
@meindex arguments
@item arguments
Return the command line arguments after the -a switch


@meindex backtrace
@item backtrace
Print a backtrace on the Transcript.


@meindex hostSystem
@item hostSystem
Answer the triplet corresponding to the system for which GNU
Smalltalk was built.


@end table



@node SystemDictionary-printing
@subsection SystemDictionary:@- printing

@table @b
@meindex nameIn:@-
@item nameIn:@- aNamespace
Answer `'Smalltalk''.

@meindex printOn:@-in:@-
@item printOn:@- aStream in:@- aNamespace
Store Smalltalk code compiling to the receiver


@meindex storeOn:@-
@item storeOn:@- aStream
Store Smalltalk code compiling to the receiver


@end table



@node SystemDictionary-profiling
@subsection SystemDictionary:@- profiling

@table @b
@meindex rawProfile:@-
@item rawProfile:@- anIdentityDictionary
Set the raw profile to be anIdentityDictionary and return the
old one.


@end table



@node SystemDictionary-special accessing
@subsection SystemDictionary:@- special accessing

@table @b
@meindex addFeature:@-
@item addFeature:@- aFeature
Add the aFeature feature to the Features set


@meindex hasFeatures:@-
@item hasFeatures:@- features
Returns true if the feature or features in 'features' is one of the
implementation dependent features present


@meindex removeFeature:@-
@item removeFeature:@- aFeature
Remove the aFeature feature to the Features set


@meindex version
@item version
Answer the current version of the GNU Smalltalk environment


@end table



@node SystemDictionary-testing
@subsection SystemDictionary:@- testing

@table @b
@meindex imageLocal
@item imageLocal
Answer whether the kernel directory is a subdirectory of the image
directory (non-local image) or not.


@meindex isSmalltalk
@item isSmalltalk
Answer `true'.

@end table

@node SystemExceptions.AlreadyDefined
@section SystemExceptions.AlreadyDefined
@clindex SystemExceptions.AlreadyDefined

@table @b
@item Defined in namespace Smalltalk.SystemExceptions
@itemx Superclass: SystemExceptions.InvalidArgument
@itemx Category: Language-Exceptions
I am raised when one tries to define a symbol (class or pool variable) that
is already defined.
@end table

@menu
* SystemExceptions.AlreadyDefined-accessing::  (instance)
@end menu



@node SystemExceptions.AlreadyDefined-accessing
@subsection SystemExceptions.AlreadyDefined:@- accessing

@table @b
@meindex description
@item description
Answer a description for the error


@end table

@node SystemExceptions.ArgumentOutOfRange
@section SystemExceptions.ArgumentOutOfRange
@clindex SystemExceptions.ArgumentOutOfRange

@table @b
@item Defined in namespace Smalltalk.SystemExceptions
@itemx Superclass: SystemExceptions.InvalidArgument
@itemx Category: Language-Exceptions
I am raised when one invokes a method with an argument outside of its
valid range.
@end table

@menu
* SystemExceptions.ArgumentOutOfRange class-signaling::  (class)
* SystemExceptions.ArgumentOutOfRange-accessing::  (instance)
@end menu



@node SystemExceptions.ArgumentOutOfRange class-signaling
@subsection SystemExceptions.ArgumentOutOfRange class:@- signaling

@table @b
@meindex signalOn:@-mustBeBetween:@-and:@-
@item signalOn:@- value mustBeBetween:@- low and:@- high
Raise the exception.  The given value was not between low and high.


@end table



@node SystemExceptions.ArgumentOutOfRange-accessing
@subsection SystemExceptions.ArgumentOutOfRange:@- accessing

@table @b
@meindex description
@item description
Answer a textual description of the exception.


@meindex high
@item high
Answer the highest value that was permitted.


@meindex high:@-
@item high:@- aMagnitude
Set the highest value that was permitted.


@meindex low
@item low
Answer the lowest value that was permitted.


@meindex low:@-
@item low:@- aMagnitude
Set the lowest value that was permitted.


@end table

@node SystemExceptions.BadReturn
@section SystemExceptions.BadReturn
@clindex SystemExceptions.BadReturn

@table @b
@item Defined in namespace Smalltalk.SystemExceptions
@itemx Superclass: SystemExceptions.VMError
@itemx Category: Language-Exceptions
I am raised when one tries to return from an already-terminated method.
@end table

@menu
* SystemExceptions.BadReturn-accessing::  (instance)
@end menu



@node SystemExceptions.BadReturn-accessing
@subsection SystemExceptions.BadReturn:@- accessing

@table @b
@meindex description
@item description
Answer a textual description of the exception.


@end table

@node SystemExceptions.CInterfaceError
@section SystemExceptions.CInterfaceError
@clindex SystemExceptions.CInterfaceError

@table @b
@item Defined in namespace Smalltalk.SystemExceptions
@itemx Superclass: SystemExceptions.PrimitiveFailed
@itemx Category: Language-Exceptions
I am raised when an error happens that is related to the C interface.
@end table

@menu
* SystemExceptions.CInterfaceError-accessing::  (instance)
@end menu



@node SystemExceptions.CInterfaceError-accessing
@subsection SystemExceptions.CInterfaceError:@- accessing

@table @b
@meindex description
@item description
Answer a textual description of the exception.


@end table

@node SystemExceptions.EmptyCollection
@section SystemExceptions.EmptyCollection
@clindex SystemExceptions.EmptyCollection

@table @b
@item Defined in namespace Smalltalk.SystemExceptions
@itemx Superclass: SystemExceptions.InvalidValue
@itemx Category: Language-Exceptions
I am raised when one invokes a method on an empty collection.
@end table

@menu
* SystemExceptions.EmptyCollection-accessing::  (instance)
@end menu



@node SystemExceptions.EmptyCollection-accessing
@subsection SystemExceptions.EmptyCollection:@- accessing

@table @b
@meindex description
@item description
Answer a textual description of the exception.


@end table

@node SystemExceptions.EndOfStream
@section SystemExceptions.EndOfStream
@clindex SystemExceptions.EndOfStream

@table @b
@item Defined in namespace Smalltalk.SystemExceptions
@itemx Superclass: Notification
@itemx Category: Language-Exceptions
I am raised when a stream reaches its end.
@end table

@menu
* SystemExceptions.EndOfStream class-signaling::  (class)
* SystemExceptions.EndOfStream-accessing::  (instance)
@end menu



@node SystemExceptions.EndOfStream class-signaling
@subsection SystemExceptions.EndOfStream class:@- signaling

@table @b
@meindex signalOn:@-
@item signalOn:@- stream
Answer an exception reporting the parameter has reached its end.


@end table



@node SystemExceptions.EndOfStream-accessing
@subsection SystemExceptions.EndOfStream:@- accessing

@table @b
@meindex description
@item description
Answer a textual description of the exception.


@meindex stream
@item stream
Answer the stream whose end was reached.


@meindex stream:@-
@item stream:@- anObject
Set the stream whose end was reached.


@end table

@node SystemExceptions.FileError
@section SystemExceptions.FileError
@clindex SystemExceptions.FileError

@table @b
@item Defined in namespace Smalltalk.SystemExceptions
@itemx Superclass: SystemExceptions.PrimitiveFailed
@itemx Category: Language-Exceptions
I am raised when an error happens that is related to the file system.
@end table

@menu
* SystemExceptions.FileError-accessing::  (instance)
@end menu



@node SystemExceptions.FileError-accessing
@subsection SystemExceptions.FileError:@- accessing

@table @b
@meindex description
@item description
Answer a textual description of the exception.


@end table

@node SystemExceptions.IndexOutOfRange
@section SystemExceptions.IndexOutOfRange
@clindex SystemExceptions.IndexOutOfRange

@table @b
@item Defined in namespace Smalltalk.SystemExceptions
@itemx Superclass: SystemExceptions.ArgumentOutOfRange
@itemx Category: Language-Exceptions
I am raised when one invokes am accessor method with an index outside of its
valid range.
@end table

@menu
* SystemExceptions.IndexOutOfRange class-signaling::  (class)
* SystemExceptions.IndexOutOfRange-accessing::  (instance)
@end menu



@node SystemExceptions.IndexOutOfRange class-signaling
@subsection SystemExceptions.IndexOutOfRange class:@- signaling

@table @b
@meindex signalOn:@-withIndex:@-
@item signalOn:@- aCollection withIndex:@- value
The given index was out of range in aCollection.


@end table



@node SystemExceptions.IndexOutOfRange-accessing
@subsection SystemExceptions.IndexOutOfRange:@- accessing

@table @b
@meindex collection
@item collection
Answer the collection that triggered the error


@meindex collection:@-
@item collection:@- anObject
Set the collection that triggered the error


@meindex description
@item description
Answer a textual description of the exception.


@meindex messageText
@item messageText
Answer an exception's message text.


@end table

@node SystemExceptions.InvalidArgument
@section SystemExceptions.InvalidArgument
@clindex SystemExceptions.InvalidArgument

@table @b
@item Defined in namespace Smalltalk.SystemExceptions
@itemx Superclass: SystemExceptions.InvalidValue
@itemx Category: Language-Exceptions
I am raised when one invokes a method with an invalid argument.
@end table

@menu
* SystemExceptions.InvalidArgument-accessing::  (instance)
@end menu



@node SystemExceptions.InvalidArgument-accessing
@subsection SystemExceptions.InvalidArgument:@- accessing

@table @b
@meindex messageText
@item messageText
Answer an exception's message text.


@end table

@node SystemExceptions.InvalidProcessState
@section SystemExceptions.InvalidProcessState
@clindex SystemExceptions.InvalidProcessState

@table @b
@item Defined in namespace Smalltalk.SystemExceptions
@itemx Superclass: SystemExceptions.InvalidValue
@itemx Category: Language-Exceptions
I am an error raised when trying to resume a terminated process, or
stuff like that.
@end table

@menu
* SystemExceptions.InvalidProcessState-accessing::  (instance)
@end menu



@node SystemExceptions.InvalidProcessState-accessing
@subsection SystemExceptions.InvalidProcessState:@- accessing

@table @b
@meindex description
@item description
Answer a textual description of the exception.


@end table

@node SystemExceptions.InvalidSize
@section SystemExceptions.InvalidSize
@clindex SystemExceptions.InvalidSize

@table @b
@item Defined in namespace Smalltalk.SystemExceptions
@itemx Superclass: SystemExceptions.InvalidArgument
@itemx Category: Language-Exceptions
I am raised when an argument has an invalid size.
@end table

@menu
* SystemExceptions.InvalidSize-accessing::  (instance)
@end menu



@node SystemExceptions.InvalidSize-accessing
@subsection SystemExceptions.InvalidSize:@- accessing

@table @b
@meindex description
@item description
Answer a textual description of the exception.


@end table

@node SystemExceptions.InvalidState
@section SystemExceptions.InvalidState
@clindex SystemExceptions.InvalidState

@table @b
@item Defined in namespace Smalltalk.SystemExceptions
@itemx Superclass: SystemExceptions.InvalidValue
@itemx Category: Language-Exceptions
I am raised when one invokes a method and the receiver or an argument
are in an invalid state for the method.
@end table

@menu
* SystemExceptions.InvalidState-accessing::  (instance)
@end menu



@node SystemExceptions.InvalidState-accessing
@subsection SystemExceptions.InvalidState:@- accessing

@table @b
@meindex messageText
@item messageText
Answer an exception's message text.


@end table

@node SystemExceptions.InvalidValue
@section SystemExceptions.InvalidValue
@clindex SystemExceptions.InvalidValue

@table @b
@item Defined in namespace Smalltalk.SystemExceptions
@itemx Superclass: Error
@itemx Category: Language-Exceptions
I am raised when one invokes a method with an invalid receiver or argument.
@end table

@menu
* SystemExceptions.InvalidValue class-signaling::  (class)
* SystemExceptions.InvalidValue-accessing::  (instance)
@end menu



@node SystemExceptions.InvalidValue class-signaling
@subsection SystemExceptions.InvalidValue class:@- signaling

@table @b
@meindex signalOn:@-
@item signalOn:@- value
Answer an exception reporting the parameter as invalid.


@meindex signalOn:@-reason:@-
@item signalOn:@- value reason:@- reason
Answer an exception reporting `value' as invalid, for the given
reason.


@end table



@node SystemExceptions.InvalidValue-accessing
@subsection SystemExceptions.InvalidValue:@- accessing

@table @b
@meindex description
@item description
Answer a textual description of the exception.


@meindex messageText
@item messageText
Answer an exception's message text.


@meindex value
@item value
Answer the object that was found to be invalid.


@meindex value:@-
@item value:@- anObject
Set the object that was found to be invalid.


@end table

@node SystemExceptions.MustBeBoolean
@section SystemExceptions.MustBeBoolean
@clindex SystemExceptions.MustBeBoolean

@table @b
@item Defined in namespace Smalltalk.SystemExceptions
@itemx Superclass: SystemExceptions.WrongClass
@itemx Category: Language-Exceptions
I am raised when one invokes a boolean method on a non-boolean.
@end table

@menu
* SystemExceptions.MustBeBoolean class-signaling::  (class)
@end menu



@node SystemExceptions.MustBeBoolean class-signaling
@subsection SystemExceptions.MustBeBoolean class:@- signaling

@table @b
@meindex signalOn:@-
@item signalOn:@- anObject
Signal a new exception, with the bad value in question being
anObject.


@end table

@node SystemExceptions.MutationError
@section SystemExceptions.MutationError
@clindex SystemExceptions.MutationError

@table @b
@item Defined in namespace Smalltalk.SystemExceptions
@itemx Superclass: Error
@itemx Category: Language-Exceptions
I am an error raised when a class is mutated in an invalid way.
@end table

@menu
* SystemExceptions.MutationError class-instance creation::  (class)
* SystemExceptions.MutationError-accessing::  (instance)
@end menu



@node SystemExceptions.MutationError class-instance creation
@subsection SystemExceptions.MutationError class:@- instance creation

@table @b
@meindex new
@item new
Create an instance of the receiver, which you will be able to
signal later.


@end table



@node SystemExceptions.MutationError-accessing
@subsection SystemExceptions.MutationError:@- accessing

@table @b
@meindex description
@item description
Answer a textual description of the exception.


@end table

@node SystemExceptions.NoRunnableProcess
@section SystemExceptions.NoRunnableProcess
@clindex SystemExceptions.NoRunnableProcess

@table @b
@item Defined in namespace Smalltalk.SystemExceptions
@itemx Superclass: SystemExceptions.VMError
@itemx Category: Language-Exceptions
I am raised when no runnable process can be found in the image.
@end table

@menu
* SystemExceptions.NoRunnableProcess-accessing::  (instance)
@end menu



@node SystemExceptions.NoRunnableProcess-accessing
@subsection SystemExceptions.NoRunnableProcess:@- accessing

@table @b
@meindex description
@item description
Answer a textual description of the exception.


@end table

@node SystemExceptions.NotEnoughElements
@section SystemExceptions.NotEnoughElements
@clindex SystemExceptions.NotEnoughElements

@table @b
@item Defined in namespace Smalltalk.SystemExceptions
@itemx Superclass: Error
@itemx Category: Language-Exceptions
I am raised when one invokes #next:@- but not enough items remain in the
stream.
@end table

@menu
* SystemExceptions.NotEnoughElements class-signaling::  (class)
* SystemExceptions.NotEnoughElements-accessing::  (instance)
@end menu



@node SystemExceptions.NotEnoughElements class-signaling
@subsection SystemExceptions.NotEnoughElements class:@- signaling

@table @b
@meindex signalOn:@-
@item signalOn:@- remainingCount
Answer an exception reporting the parameter as invalid.


@end table



@node SystemExceptions.NotEnoughElements-accessing
@subsection SystemExceptions.NotEnoughElements:@- accessing

@table @b
@meindex description
@item description
Answer a textual description of the exception.


@meindex messageText
@item messageText
Answer an exception's message text.


@meindex remainingCount
@item remainingCount
Answer the number of items that were to be read.


@meindex remainingCount:@-
@item remainingCount:@- anObject
Set the number of items that were to be read.


@end table

@node SystemExceptions.NotFound
@section SystemExceptions.NotFound
@clindex SystemExceptions.NotFound

@table @b
@item Defined in namespace Smalltalk.SystemExceptions
@itemx Superclass: SystemExceptions.InvalidArgument
@itemx Category: Language-Exceptions
I am raised when something is searched without success.
@end table

@menu
* SystemExceptions.NotFound class-accessing::  (class)
* SystemExceptions.NotFound-accessing::  (instance)
@end menu



@node SystemExceptions.NotFound class-accessing
@subsection SystemExceptions.NotFound class:@- accessing

@table @b
@meindex signalOn:@-reason:@-
@item signalOn:@- value reason:@- aString
Raise an exception:@- reason specifies the reason of the exception.


@meindex signalOn:@-what:@-
@item signalOn:@- value what:@- aString
Raise an exception; aString specifies what was not found (a key,
an object, a class, and so on).


@end table



@node SystemExceptions.NotFound-accessing
@subsection SystemExceptions.NotFound:@- accessing

@table @b
@meindex description
@item description
Answer a textual description of the exception.


@end table

@node SystemExceptions.NotImplemented
@section SystemExceptions.NotImplemented
@clindex SystemExceptions.NotImplemented

@table @b
@item Defined in namespace Smalltalk.SystemExceptions
@itemx Superclass: Error
@itemx Category: Language-Exceptions
I am raised when a method is called that has not been implemented.
@end table

@menu
* SystemExceptions.NotImplemented-accessing::  (instance)
@end menu



@node SystemExceptions.NotImplemented-accessing
@subsection SystemExceptions.NotImplemented:@- accessing

@table @b
@meindex description
@item description
Answer a textual description of the exception.


@end table

@node SystemExceptions.NotIndexable
@section SystemExceptions.NotIndexable
@clindex SystemExceptions.NotIndexable

@table @b
@item Defined in namespace Smalltalk.SystemExceptions
@itemx Superclass: SystemExceptions.InvalidValue
@itemx Category: Language-Exceptions
I am raised when an object is not indexable.
@end table

@menu
* SystemExceptions.NotIndexable-accessing::  (instance)
@end menu



@node SystemExceptions.NotIndexable-accessing
@subsection SystemExceptions.NotIndexable:@- accessing

@table @b
@meindex description
@item description
Answer a textual description of the exception.


@end table

@node SystemExceptions.NotYetImplemented
@section SystemExceptions.NotYetImplemented
@clindex SystemExceptions.NotYetImplemented

@table @b
@item Defined in namespace Smalltalk.SystemExceptions
@itemx Superclass: SystemExceptions.NotImplemented
@itemx Category: Language-Exceptions
I am raised when a method is called that has not been implemented yet.
@end table

@menu
* SystemExceptions.NotYetImplemented-accessing::  (instance)
@end menu



@node SystemExceptions.NotYetImplemented-accessing
@subsection SystemExceptions.NotYetImplemented:@- accessing

@table @b
@meindex description
@item description
Answer a textual description of the exception.


@end table

@node SystemExceptions.PackageNotAvailable
@section SystemExceptions.PackageNotAvailable
@clindex SystemExceptions.PackageNotAvailable

@table @b
@item Defined in namespace Smalltalk.SystemExceptions
@itemx Superclass: SystemExceptions.NotFound
@itemx Category: Language-Packaging

@end table

@menu
* SystemExceptions.PackageNotAvailable class-still unclassified::  (class)
* SystemExceptions.PackageNotAvailable-description::  (instance)
@end menu



@node SystemExceptions.PackageNotAvailable class-still unclassified
@subsection SystemExceptions.PackageNotAvailable class:@- still unclassified

@table @b
@meindex signal:@-
@item signal:@- aString
Signal an exception saying that the package named aString
can't be found.


@meindex signal:@-reason:@-
@item signal:@- package reason:@- reason
Signal an exception saying that be package named package
can't be found because the reason named reason.


@end table



@node SystemExceptions.PackageNotAvailable-description
@subsection SystemExceptions.PackageNotAvailable:@- description

@table @b
@meindex isResumable
@item isResumable
Answer true.  Package unavailability is resumable, because the
package files might just lie elsewhere.


@end table

@node SystemExceptions.PrimitiveFailed
@section SystemExceptions.PrimitiveFailed
@clindex SystemExceptions.PrimitiveFailed

@table @b
@item Defined in namespace Smalltalk.SystemExceptions
@itemx Superclass: SystemExceptions.VMError
@itemx Category: Language-Exceptions
I am raised when a primitive fails for some reason.
@end table

@menu
* SystemExceptions.PrimitiveFailed-accessing::  (instance)
@end menu



@node SystemExceptions.PrimitiveFailed-accessing
@subsection SystemExceptions.PrimitiveFailed:@- accessing

@table @b
@meindex description
@item description
Answer a textual description of the exception.


@end table

@node SystemExceptions.ProcessBeingTerminated
@section SystemExceptions.ProcessBeingTerminated
@clindex SystemExceptions.ProcessBeingTerminated

@table @b
@item Defined in namespace Smalltalk.SystemExceptions
@itemx Superclass: Notification
@itemx Category: Language-Exceptions
I am raised when a process is terminated.
@end table

@menu
* SystemExceptions.ProcessBeingTerminated class-still unclassified::  (class)
* SystemExceptions.ProcessBeingTerminated-accessing::  (instance)
@end menu



@node SystemExceptions.ProcessBeingTerminated class-still unclassified
@subsection SystemExceptions.ProcessBeingTerminated class:@- still unclassified

@table @b
@meindex initialize
@item initialize
Not commented.

@end table



@node SystemExceptions.ProcessBeingTerminated-accessing
@subsection SystemExceptions.ProcessBeingTerminated:@- accessing

@table @b
@meindex description
@item description
Answer a textual description of the exception.


@meindex semaphore
@item semaphore
If the process was waiting on a semaphore, answer it.


@meindex semaphore:@-
@item semaphore:@- aSemaphore
If the process was waiting on a semaphore, answer it.


@end table

@node SystemExceptions.ProcessTerminated
@section SystemExceptions.ProcessTerminated
@clindex SystemExceptions.ProcessTerminated

@table @b
@item Defined in namespace Smalltalk.SystemExceptions
@itemx Superclass: SystemExceptions.InvalidValue
@itemx Category: Language-Exceptions
I am raised when somebody tries to resume or interrupt a terminated process.
@end table

@menu
* SystemExceptions.ProcessTerminated-accessing::  (instance)
@end menu



@node SystemExceptions.ProcessTerminated-accessing
@subsection SystemExceptions.ProcessTerminated:@- accessing

@table @b
@meindex description
@item description
Answer a textual description of the exception.


@end table

@node SystemExceptions.ReadOnlyObject
@section SystemExceptions.ReadOnlyObject
@clindex SystemExceptions.ReadOnlyObject

@table @b
@item Defined in namespace Smalltalk.SystemExceptions
@itemx Superclass: SystemExceptions.InvalidValue
@itemx Category: Language-Exceptions
I am raised when one writes to a read-only object.
@end table

@menu
* SystemExceptions.ReadOnlyObject-accessing::  (instance)
@end menu



@node SystemExceptions.ReadOnlyObject-accessing
@subsection SystemExceptions.ReadOnlyObject:@- accessing

@table @b
@meindex description
@item description
Answer a textual description of the exception.


@end table

@node SystemExceptions.SecurityError
@section SystemExceptions.SecurityError
@clindex SystemExceptions.SecurityError

@table @b
@item Defined in namespace Smalltalk.SystemExceptions
@itemx Superclass: SystemExceptions.VMError
@itemx Category: Language-Exceptions
I am an error raised when an untrusted object tries to do an insecure
operation.
@end table

@menu
* SystemExceptions.SecurityError class-accessing::  (class)
* SystemExceptions.SecurityError-accessing::  (instance)
@end menu



@node SystemExceptions.SecurityError class-accessing
@subsection SystemExceptions.SecurityError class:@- accessing

@table @b
@meindex signal:@-
@item signal:@- aPermission
Raise the exception, setting to aPermission the permission
that was tested and failed.


@end table



@node SystemExceptions.SecurityError-accessing
@subsection SystemExceptions.SecurityError:@- accessing

@table @b
@meindex description
@item description
Answer a textual description of the exception.


@meindex failedPermission
@item failedPermission
Answer the permission that was tested and that failed.


@meindex failedPermission:@-
@item failedPermission:@- anObject
Set which permission was tested and failed.


@end table

@node SystemExceptions.ShouldNotImplement
@section SystemExceptions.ShouldNotImplement
@clindex SystemExceptions.ShouldNotImplement

@table @b
@item Defined in namespace Smalltalk.SystemExceptions
@itemx Superclass: SystemExceptions.NotImplemented
@itemx Category: Language-Exceptions
I am raised when a method is called that a class wishes that is not
called.
@end table

@menu
* SystemExceptions.ShouldNotImplement-accessing::  (instance)
@end menu



@node SystemExceptions.ShouldNotImplement-accessing
@subsection SystemExceptions.ShouldNotImplement:@- accessing

@table @b
@meindex description
@item description
Answer a textual description of the exception.


@end table

@node SystemExceptions.SubclassResponsibility
@section SystemExceptions.SubclassResponsibility
@clindex SystemExceptions.SubclassResponsibility

@table @b
@item Defined in namespace Smalltalk.SystemExceptions
@itemx Superclass: SystemExceptions.ShouldNotImplement
@itemx Category: Language-Exceptions
I am raised when a method is called whose implementation is the responsibility
of concrete subclass.
@end table

@menu
* SystemExceptions.SubclassResponsibility-accessing::  (instance)
@end menu



@node SystemExceptions.SubclassResponsibility-accessing
@subsection SystemExceptions.SubclassResponsibility:@- accessing

@table @b
@meindex description
@item description
Answer a textual description of the exception.


@end table

@node SystemExceptions.UnhandledException
@section SystemExceptions.UnhandledException
@clindex SystemExceptions.UnhandledException

@table @b
@item Defined in namespace Smalltalk.SystemExceptions
@itemx Superclass: Exception
@itemx Category: Language-Exception
I am raised when a backtrace is shown to terminate the
current process.
@end table

@menu
* SystemExceptions.UnhandledException-accessing::  (instance)
@end menu



@node SystemExceptions.UnhandledException-accessing
@subsection SystemExceptions.UnhandledException:@- accessing

@table @b
@meindex defaultAction
@item defaultAction
Terminate the current process.


@meindex description
@item description
Answer a textual description of the exception.


@meindex originalException
@item originalException
Answer the uncaught exception.


@meindex originalException:@-
@item originalException:@- anObject
Set the uncaught exception to anObject.


@end table

@node SystemExceptions.UserInterrupt
@section SystemExceptions.UserInterrupt
@clindex SystemExceptions.UserInterrupt

@table @b
@item Defined in namespace Smalltalk.SystemExceptions
@itemx Superclass: SystemExceptions.VMError
@itemx Category: Language-Exceptions
I am raised when one presses Ctrl-C.
@end table

@menu
* SystemExceptions.UserInterrupt-accessing::  (instance)
@end menu



@node SystemExceptions.UserInterrupt-accessing
@subsection SystemExceptions.UserInterrupt:@- accessing

@table @b
@meindex description
@item description
Answer a textual description of the exception.


@end table

@node SystemExceptions.VerificationError
@section SystemExceptions.VerificationError
@clindex SystemExceptions.VerificationError

@table @b
@item Defined in namespace Smalltalk.SystemExceptions
@itemx Superclass: SystemExceptions.VMError
@itemx Category: Language-Exceptions
I am raised when the verification of a method fails.
@end table

@menu
* SystemExceptions.VerificationError-accessing::  (instance)
@end menu



@node SystemExceptions.VerificationError-accessing
@subsection SystemExceptions.VerificationError:@- accessing

@table @b
@meindex description
@item description
Answer a textual description of the exception.


@end table

@node SystemExceptions.VMError
@section SystemExceptions.VMError
@clindex SystemExceptions.VMError

@table @b
@item Defined in namespace Smalltalk.SystemExceptions
@itemx Superclass: Error
@itemx Category: Language-Exceptions
I am an error related to the innards of the system.
@end table

@menu
* SystemExceptions.VMError-accessing::  (instance)
@end menu



@node SystemExceptions.VMError-accessing
@subsection SystemExceptions.VMError:@- accessing

@table @b
@meindex description
@item description
Answer a textual description of the exception.


@end table

@node SystemExceptions.WrongArgumentCount
@section SystemExceptions.WrongArgumentCount
@clindex SystemExceptions.WrongArgumentCount

@table @b
@item Defined in namespace Smalltalk.SystemExceptions
@itemx Superclass: SystemExceptions.PrimitiveFailed
@itemx Category: Language-Exceptions
I am raised when one tries to evaluate a method (via #perform:@-...) or a
block but passes the wrong number of arguments.
@end table

@menu
* SystemExceptions.WrongArgumentCount-accessing::  (instance)
@end menu



@node SystemExceptions.WrongArgumentCount-accessing
@subsection SystemExceptions.WrongArgumentCount:@- accessing

@table @b
@meindex description
@item description
Answer a textual description of the exception.


@end table

@node SystemExceptions.WrongClass
@section SystemExceptions.WrongClass
@clindex SystemExceptions.WrongClass

@table @b
@item Defined in namespace Smalltalk.SystemExceptions
@itemx Superclass: SystemExceptions.InvalidValue
@itemx Category: Language-Exceptions
I am raised when an argument is constrained to be an instance of a determinate
class, and this constraint is not respected by the caller.
@end table

@menu
* SystemExceptions.WrongClass class-signaling::  (class)
* SystemExceptions.WrongClass-accessing::  (instance)
@end menu



@node SystemExceptions.WrongClass class-signaling
@subsection SystemExceptions.WrongClass class:@- signaling

@table @b
@meindex signalOn:@-mustBe:@-
@item signalOn:@- anObject mustBe:@- aClassOrArray
Raise an exception.  The given object should have been an instance
of one of the classes indicated by aClassOrArray (which should be
a single class or an array of classes).  Whether instances of
subclasses are allowed should be clear from the context, though
in general (i.e. with the exception of a few system messages)
they should be.


@end table



@node SystemExceptions.WrongClass-accessing
@subsection SystemExceptions.WrongClass:@- accessing

@table @b
@meindex description
@item description
Answer a textual description of the exception.


@meindex messageText
@item messageText
Answer an exception's message text.


@meindex validClasses
@item validClasses
Answer the list of classes whose instances would have been valid.


@meindex validClasses:@-
@item validClasses:@- aCollection
Set the list of classes whose instances would have been valid.


@meindex validClassesString
@item validClassesString
Answer the list of classes whose instances would have been valid,
formatted as a string.


@end table

@node SystemExceptions.WrongMessageSent
@section SystemExceptions.WrongMessageSent
@clindex SystemExceptions.WrongMessageSent

@table @b
@item Defined in namespace Smalltalk.SystemExceptions
@itemx Superclass: SystemExceptions.ShouldNotImplement
@itemx Category: Language-Exceptions
I am raised when a method is called that a class wishes that is not
called.  This exception also includes a suggestion on which message
should be sent instead
@end table

@menu
* SystemExceptions.WrongMessageSent class-signaling::  (class)
* SystemExceptions.WrongMessageSent-accessing::  (instance)
@end menu



@node SystemExceptions.WrongMessageSent class-signaling
@subsection SystemExceptions.WrongMessageSent class:@- signaling

@table @b
@meindex signalOn:@-useInstead:@-
@item signalOn:@- selector useInstead:@- aSymbol
Raise an exception, signaling which selector was sent and suggesting
a valid alternative.


@end table



@node SystemExceptions.WrongMessageSent-accessing
@subsection SystemExceptions.WrongMessageSent:@- accessing

@table @b
@meindex messageText
@item messageText
Answer an exception's message text.


@meindex selector
@item selector
Answer which selector was sent.


@meindex selector:@-
@item selector:@- aSymbol
Set which selector was sent.


@meindex suggestedSelector
@item suggestedSelector
Answer a valid alternative to the selector that was used.


@meindex suggestedSelector:@-
@item suggestedSelector:@- aSymbol
Set a valid alternative to the selector that was used.


@end table

@node TextCollector
@section TextCollector
@clindex TextCollector

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Stream
@itemx Category: Streams
I am a thread-safe class that maps between standard Stream protocol and
a single message to another object (its selector is pluggable and should
roughly correspond to #nextPutAll:@-).  I am, in fact, the class that
implements the global Transcript object.
@end table

@menu
* TextCollector class-accessing::  (class)
* TextCollector-accessing::  (instance)
* TextCollector-printing::  (instance)
* TextCollector-set up::  (instance)
* TextCollector-storing::  (instance)
@end menu



@node TextCollector class-accessing
@subsection TextCollector class:@- accessing

@table @b
@meindex message:@-
@item message:@- receiverToSelectorAssociation
Answer a new instance of the receiver, that uses the message identified
by anAssociation to perform write operations.  anAssociation's
key is the receiver, while its value is the selector.


@meindex new
@item new
This method should not be called for instances of this class.

@end table



@node TextCollector-accessing
@subsection TextCollector:@- accessing

@table @b
@meindex cr
@item cr
Emit a new-line (carriage return) to the Transcript


@meindex critical:@-
@item critical:@- aBlock
Evaluate aBlock while holding the Transcript lock


@meindex endEntry
@item endEntry
Emit two new-lines.  This method is present for compatibility with
VisualWorks.


@meindex next:@-put:@-
@item next:@- anInteger put:@- anObject
Write anInteger copies of anObject to the Transcript


@meindex next:@-putAll:@-startingAt:@-
@item next:@- n putAll:@- aString startingAt:@- pos
Write aString to the Transcript


@meindex nextPut:@-
@item nextPut:@- aCharacter
Emit aCharacter to the Transcript


@meindex show:@-
@item show:@- aString
Write aString to the Transcript


@meindex showCr:@-
@item showCr:@- aString
Write aString to the Transcript, followed by a new-line character


@meindex showOnNewLine:@-
@item showOnNewLine:@- aString
Write aString to the Transcript, preceded by a new-line character


@end table



@node TextCollector-printing
@subsection TextCollector:@- printing

@table @b
@meindex print:@-
@item print:@- anObject
Print anObject's representation to the Transcript


@meindex printOn:@-
@item printOn:@- aStream
Print a representation of the receiver onto aStream


@end table



@node TextCollector-set up
@subsection TextCollector:@- set up

@table @b
@meindex message
@item message
Answer an association representing the message to be sent
to perform write operations.  The key is the receiver, the value is the
selector


@meindex message:@-
@item message:@- receiverToSelectorAssociation
Set the message to be sent to perform write operations
to the one represented by anAssociation.  anAssociation's key is the
receiver, while its value is the selector


@end table



@node TextCollector-storing
@subsection TextCollector:@- storing

@table @b
@meindex store:@-
@item store:@- anObject
Print Smalltalk code which evaluates to anObject on the Transcript


@meindex storeOn:@-
@item storeOn:@- aStream
Print Smalltalk code which evaluates to the receiver onto aStream


@end table

@node Time
@section Time
@clindex Time

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Magnitude
@itemx Category: Language-Data types
My instances represent times of the day.  I provide methods for instance 
creation, methods that access components (hours, minutes, and seconds) of a 
time value, and a block execution timing facility.
@end table

@menu
* Time class-basic (UTC)::  (class)
* Time class-builtins::  (class)
* Time class-clocks::  (class)
* Time class-initialization::  (class)
* Time class-instance creation::  (class)
* Time-accessing (ANSI for DateAndTimes)::  (instance)
* Time-accessing (non ANSI & for Durations)::  (instance)
* Time-arithmetic::  (instance)
* Time-comparing::  (instance)
@end menu



@node Time class-basic (UTC)
@subsection Time class:@- basic (UTC)

@table @b
@meindex midnight
@item midnight
Answer a time representing midnight in Coordinated
Universal Time (UTC)


@meindex utcNow
@item utcNow
Answer a time representing the current time of day in Coordinated
Universal Time (UTC)


@meindex utcSecondClock
@slindex secondClock
@item utcSecondClock
Answer the number of seconds since the midnight of 1/1/1901 (unlike
#secondClock, the reference time is here expressed as UTC, that is
as Coordinated Universal Time).


@end table



@node Time class-builtins
@subsection Time class:@- builtins

@table @b
@meindex primNanosecondClock
@item primNanosecondClock
Returns the number of milliseconds since midnight.


@meindex primSecondClock
@item primSecondClock
Returns the number of seconds to/from 1/1/2000.


@meindex timezone
@item timezone
Answer a String associated with the current timezone (either standard
or daylight-saving) on this operating system. For example, the answer
could be `EST' to indicate Eastern Standard Time; the answer can be
empty and can't be assumed to be a three-character code such as `EST'.


@meindex timezoneBias
@item timezoneBias
Specifies the current bias, in seconds, for local time translation for
the current time. The bias is the difference, in seconds, between
Coordinated Universal Time (UTC) and local time; a positive bias
indicates that the local timezone is to the east of Greenwich (e.g.
Europe, Asia), while a negative bias indicates that it is to the
west (e.g. America)


@meindex timezoneBias:@-
@item timezoneBias:@- seconds
Specifies the bias, in seconds, for local time translation for
the given second clock value (0 being midnight of 1/1/1901).
The bias is the difference, in seconds, between Coordinated
Universal Time (UTC) and local time; a positive bias indicates
that the local timezone is to the east of Greenwich (e.g.
Europe, Asia), while a negative bias indicates that it is to
the west (e.g. America)


@end table



@node Time class-clocks
@subsection Time class:@- clocks

@table @b
@meindex millisecondClock
@item millisecondClock
Answer the number of milliseconds since startup.


@meindex millisecondClockValue
@item millisecondClockValue
Answer the number of milliseconds since startup


@meindex millisecondsPerDay
@item millisecondsPerDay
Answer the number of milliseconds in a day


@meindex millisecondsToRun:@-
@item millisecondsToRun:@- timedBlock
Answer the number of milliseconds which timedBlock took to run


@meindex nanosecondClock
@item nanosecondClock
Answer the number of nanoseconds since startup.


@meindex nanosecondClockValue
@item nanosecondClockValue
Answer the number of milliseconds since startup


@meindex secondClock
@item secondClock
Answer the number of seconds since the midnight of 1/1/1901


@end table



@node Time class-initialization
@subsection Time class:@- initialization

@table @b
@meindex initialize
@item initialize
Initialize the Time class after the image has been bootstrapped


@meindex update:@-
@item update:@- aspect
Private - Initialize the receiver's instance variables


@end table



@node Time class-instance creation
@subsection Time class:@- instance creation

@table @b
@meindex fromSeconds:@-
@item fromSeconds:@- secondCount
Answer a Time representing secondCount seconds past midnight


@meindex hour:@-
@item hour:@- h
Answer a Time that is the given number of hours past midnight


@meindex hour:@-minute:@-second:@-
@item hour:@- h minute:@- m second:@- s
Answer a Time that is the given number of hours, minutes and
seconds past midnight


@meindex hours:@-
@item hours:@- h
Answer a Time that is the given number of hours past midnight


@meindex hours:@-minutes:@-seconds:@-
@item hours:@- h minutes:@- m seconds:@- s
Answer a Time that is the given number of hours, minutes and
seconds past midnight


@meindex minute:@-
@item minute:@- m
Answer a Time that is the given number of minutes past midnight


@meindex minutes:@-
@item minutes:@- m
Answer a Time that is the given number of minutes past midnight


@meindex new
@item new
Answer a Time representing midnight


@meindex now
@item now
Answer a time representing the current time of day


@meindex readFrom:@-
@item readFrom:@- aStream
Parse an instance of the receiver (hours/minutes/seconds) from
aStream


@meindex second:@-
@item second:@- s
Answer a Time that is the given number of seconds past midnight


@meindex seconds:@-
@item seconds:@- s
Answer a Time that is the given number of seconds past midnight


@end table



@node Time-accessing (ANSI for DateAndTimes)
@subsection Time:@- accessing (ANSI for DateAndTimes)

@table @b
@meindex hour
@item hour
Answer the number of hours in the receiver


@meindex hour12
@item hour12
Answer the hour in a 12-hour clock


@meindex hour24
@item hour24
Answer the hour in a 24-hour clock


@meindex minute
@item minute
Answer the number of minutes in the receiver


@meindex second
@item second
Answer the number of seconds in the receiver


@end table



@node Time-accessing (non ANSI & for Durations)
@subsection Time:@- accessing (non ANSI & for Durations)

@table @b
@meindex asMilliseconds
@item asMilliseconds
Not commented.

@meindex asNanoseconds
@item asNanoseconds
Not commented.

@meindex asSeconds
@item asSeconds
Answer `seconds'.

@meindex hours
@item hours
Answer the number of hours in the receiver


@meindex minutes
@item minutes
Answer the number of minutes in the receiver


@meindex seconds
@item seconds
Answer the number of seconds in the receiver


@end table



@node Time-arithmetic
@subsection Time:@- arithmetic

@table @b
@meindex addSeconds:@-
@item addSeconds:@- timeAmount
Answer a new Time that is timeAmount seconds after the receiver


@meindex addTime:@-
@item addTime:@- timeAmount
Answer a new Time that is timeAmount seconds after the receiver;
timeAmount is a Time.


@meindex printOn:@-
@item printOn:@- aStream
Print a representation of the receiver on aStream


@meindex subtractTime:@-
@item subtractTime:@- timeAmount
Answer a new Time that is timeAmount seconds before the receiver;
timeAmount is a Time.


@end table



@node Time-comparing
@subsection Time:@- comparing

@table @b
@meindex <
@item < aTime
Answer whether the receiver is less than aTime


@meindex =
@item = aTime
Answer whether the receiver is equal to aTime


@meindex hash
@item hash
Answer an hash value for the receiver


@end table

@node True
@section True
@clindex True

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Boolean
@itemx Category: Language-Data types
I represent truth and justice in the world.  My motto is "semper veritatis".
@end table

@menu
* True-basic::  (instance)
* True-C hacks::  (instance)
* True-printing::  (instance)
@end menu



@node True-basic
@subsection True:@- basic

@table @b
@meindex &
@item & aBoolean
We are true -- anded with anything, we always answer the other operand


@meindex and:@-
@item and:@- aBlock
We are true -- anded with anything, we always answer the other operand,
so evaluate aBlock


@meindex eqv:@-
@item eqv:@- aBoolean
Answer whether the receiver and aBoolean represent the
same boolean value


@meindex ifFalse:@-
@item ifFalse:@- falseBlock
We are true -- answer nil


@meindex ifFalse:@-ifTrue:@-
@item ifFalse:@- falseBlock ifTrue:@- trueBlock
We are true -- evaluate trueBlock


@meindex ifTrue:@-
@item ifTrue:@- trueBlock
We are true -- evaluate trueBlock


@meindex ifTrue:@-ifFalse:@-
@item ifTrue:@- trueBlock ifFalse:@- falseBlock
We are true -- evaluate trueBlock


@meindex not
@item not
We are true -- answer false


@meindex or:@-
@item or:@- aBlock
We are true -- ored with anything, we always answer true


@meindex xor:@-
@item xor:@- aBoolean
Answer whether the receiver and aBoolean represent different
boolean values


@meindex |
@item | aBoolean
We are true -- ored with anything, we always answer true


@end table



@node True-C hacks
@subsection True:@- C hacks

@table @b
@meindex asCBooleanValue
@item asCBooleanValue
Answer `1'.

@end table



@node True-printing
@subsection True:@- printing

@table @b
@meindex printOn:@-
@item printOn:@- aStream
Print a representation of the receiver on aStream


@end table

@node UndefinedObject
@section UndefinedObject
@clindex UndefinedObject

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Object
@itemx Category: Language-Implementation
I have the questionable distinction of being a class with only one
instance, which is the object "nil".
@end table

@menu
* UndefinedObject-basic::  (instance)
* UndefinedObject-class creation - alternative::  (instance)
* UndefinedObject-class polymorphism::  (instance)
* UndefinedObject-CObject interoperability::  (instance)
* UndefinedObject-dependents access::  (instance)
* UndefinedObject-iteration::  (instance)
* UndefinedObject-printing::  (instance)
* UndefinedObject-still unclassified::  (instance)
* UndefinedObject-storing::  (instance)
* UndefinedObject-testing::  (instance)
@end menu



@node UndefinedObject-basic
@subsection UndefinedObject:@- basic

@table @b
@meindex copy
@item copy
Answer the receiver.

@meindex deepCopy
@item deepCopy
Answer the receiver.

@meindex shallowCopy
@item shallowCopy
Answer the receiver.

@end table



@node UndefinedObject-class creation - alternative
@subsection UndefinedObject:@- class creation - alternative

@table @b
@meindex subclass:@-classInstanceVariableNames:@-instanceVariableNames:@-classVariableNames:@-poolDictionaries:@-
@item subclass:@- classNameString classInstanceVariableNames:@- stringClassInstVarNames instanceVariableNames:@- stringInstVarNames classVariableNames:@- stringOfClassVarNames poolDictionaries:@- stringOfPoolNames
Don't use this, it is only present to file in from IBM Smalltalk


@meindex subclass:@-instanceVariableNames:@-classVariableNames:@-poolDictionaries:@-
@item subclass:@- classNameString instanceVariableNames:@- stringInstVarNames classVariableNames:@- stringOfClassVarNames poolDictionaries:@- stringOfPoolNames
Don't use this, it is only present to file in from IBM Smalltalk


@meindex variableByteSubclass:@-classInstanceVariableNames:@-instanceVariableNames:@-classVariableNames:@-poolDictionaries:@-
@item variableByteSubclass:@- classNameString classInstanceVariableNames:@- stringClassInstVarNames instanceVariableNames:@- stringInstVarNames classVariableNames:@- stringOfClassVarNames poolDictionaries:@- stringOfPoolNames
Don't use this, it is only present to file in from IBM Smalltalk


@meindex variableByteSubclass:@-instanceVariableNames:@-classVariableNames:@-poolDictionaries:@-
@item variableByteSubclass:@- classNameString instanceVariableNames:@- stringInstVarNames classVariableNames:@- stringOfClassVarNames poolDictionaries:@- stringOfPoolNames
Don't use this, it is only present to file in from IBM Smalltalk


@meindex variableLongSubclass:@-classInstanceVariableNames:@-instanceVariableNames:@-classVariableNames:@-poolDictionaries:@-
@item variableLongSubclass:@- classNameString classInstanceVariableNames:@- stringClassInstVarNames instanceVariableNames:@- stringInstVarNames classVariableNames:@- stringOfClassVarNames poolDictionaries:@- stringOfPoolNames
Don't use this, it is only present to file in from IBM Smalltalk


@meindex variableLongSubclass:@-instanceVariableNames:@-classVariableNames:@-poolDictionaries:@-
@item variableLongSubclass:@- classNameString instanceVariableNames:@- stringInstVarNames classVariableNames:@- stringOfClassVarNames poolDictionaries:@- stringOfPoolNames
Don't use this, it is only present to file in from IBM Smalltalk


@meindex variableSubclass:@-classInstanceVariableNames:@-instanceVariableNames:@-classVariableNames:@-poolDictionaries:@-
@item variableSubclass:@- classNameString classInstanceVariableNames:@- stringClassInstVarNames instanceVariableNames:@- stringInstVarNames classVariableNames:@- stringOfClassVarNames poolDictionaries:@- stringOfPoolNames
Don't use this, it is only present to file in from IBM Smalltalk


@meindex variableSubclass:@-instanceVariableNames:@-classVariableNames:@-poolDictionaries:@-
@item variableSubclass:@- classNameString instanceVariableNames:@- stringInstVarNames classVariableNames:@- stringOfClassVarNames poolDictionaries:@- stringOfPoolNames
Don't use this, it is only present to file in from IBM Smalltalk


@end table



@node UndefinedObject-class polymorphism
@subsection UndefinedObject:@- class polymorphism

@table @b
@meindex allSubclasses
@item allSubclasses
Return all the classes in the system.


@meindex instSize
@item instSize
Answer `0'.

@meindex metaclassFor:@-
@item metaclassFor:@- classNameString
Create a Metaclass object for the given class name. The metaclass
is a subclass of Class


@meindex methodDictionary
@item methodDictionary
Answer `nil'.

@meindex removeSubclass:@-
@item removeSubclass:@- aClass
Ignored -- necessary to support disjoint class hierarchies


@meindex subclass:@-
@item subclass:@- classNameString
Define a subclass of the receiver with the given name.  If the class
is already defined, don't modify its instance or class variables
but still, if necessary, recompile everything needed.


@meindex subclass:@-instanceVariableNames:@-classVariableNames:@-poolDictionaries:@-category:@-
@item subclass:@- classNameString instanceVariableNames:@- stringInstVarNames classVariableNames:@- stringOfClassVarNames poolDictionaries:@- stringOfPoolNames category:@- categoryNameString
Define a fixed subclass of the receiver with the given name, instance
variables, class variables, pool dictionaries and category. If the
class is already defined, if necessary, recompile everything needed.


@meindex variable:@-subclass:@-instanceVariableNames:@-classVariableNames:@-poolDictionaries:@-category:@-
@slindex byte
@slindex int8
@slindex character
@slindex short
@slindex ushort
@slindex int
@slindex uint
@slindex int64
@slindex uint64
@slindex utf32
@slindex float
@slindex double
@slindex pointer
@item variable:@- shape subclass:@- classNameString instanceVariableNames:@- stringInstVarNames classVariableNames:@- stringOfClassVarNames poolDictionaries:@- stringOfPoolNames category:@- categoryNameString
Define a variable subclass of the receiver with the given name,
shape, instance variables, class variables, pool dictionaries and
category. If the class is already defined, if necessary, recompile
everything needed.  The shape can be one of #byte #int8 #character
#short #ushort #int #uint #int64 #uint64 #utf32 #float #double or
#pointer.


@meindex variableByteSubclass:@-instanceVariableNames:@-classVariableNames:@-poolDictionaries:@-category:@-
@item variableByteSubclass:@- classNameString instanceVariableNames:@- stringInstVarNames classVariableNames:@- stringOfClassVarNames poolDictionaries:@- stringOfPoolNames category:@- categoryNameString
Define a byte variable subclass of the receiver with the given
name, instance variables, class variables, pool dictionaries
and category. If the class is already defined, if necessary,
recompile everything needed.


@meindex variableSubclass:@-instanceVariableNames:@-classVariableNames:@-poolDictionaries:@-category:@-
@item variableSubclass:@- classNameString instanceVariableNames:@- stringInstVarNames classVariableNames:@- stringOfClassVarNames poolDictionaries:@- stringOfPoolNames category:@- categoryNameString
Define a variable pointer subclass of the receiver with the given
name, instance variables, class variables, pool dictionaries and
category. If the class is already defined, if necessary, recompile
everything needed.


@meindex variableWordSubclass:@-instanceVariableNames:@-classVariableNames:@-poolDictionaries:@-category:@-
@item variableWordSubclass:@- classNameString instanceVariableNames:@- stringInstVarNames classVariableNames:@- stringOfClassVarNames poolDictionaries:@- stringOfPoolNames category:@- categoryNameString
Define a word variable subclass of the receiver with the given
name, instance variables, class variables, pool dictionaries and
category. If the class is already defined, if necessary, recompile
everything needed.


@end table



@node UndefinedObject-CObject interoperability
@subsection UndefinedObject:@- CObject interoperability

@table @b
@meindex free
@item free
Do nothing, a NULL pointer can be safely freed.


@meindex narrow
@item narrow
Return the receiver:@- a NULL pointer is always nil, whatever its type.


@end table



@node UndefinedObject-dependents access
@subsection UndefinedObject:@- dependents access

@table @b
@meindex addDependent:@-
@item addDependent:@- ignored
Fail, nil does not support dependents.


@meindex release
@item release
Ignore this call, nil does not support dependents.


@end table



@node UndefinedObject-iteration
@subsection UndefinedObject:@- iteration

@table @b
@meindex ifNil:@-ifNotNilDo:@-
@item ifNil:@- nilBlock ifNotNilDo:@- iterableBlock
Evaluate nilBlock if the receiver is nil, else evaluate
iterableBlock with each element of the receiver (which
should be an Iterable).


@meindex ifNotNilDo:@-
@item ifNotNilDo:@- iterableBlock
Evaluate iterableBlock with each element of the receiver (which
should be an Iterable) if not nil.  Else answer nil


@meindex ifNotNilDo:@-ifNil:@-
@item ifNotNilDo:@- iterableBlock ifNil:@- nilBlock
Evaluate nilBlock if the receiver is nil, else evaluate
iterableBlock, passing each element of the receiver (which
should be an Iterable).


@end table



@node UndefinedObject-printing
@subsection UndefinedObject:@- printing

@table @b
@meindex printOn:@-
@item printOn:@- aStream
Print a representation of the receiver on aStream.


@meindex printOn:@-in:@-
@slindex printOn:@-
@item printOn:@- aStream in:@- aNamespace
Print on aStream a representation of the receiver as it would be accessed
from aNamespace:@- nil is the same everywhere, so print the same as
#printOn:@-


@end table



@node UndefinedObject-still unclassified
@subsection UndefinedObject:@- still unclassified

@table @b
@meindex inheritsFrom:@-
@item inheritsFrom:@- aClass
Always return false, as nil inherits from nothing.


@end table



@node UndefinedObject-storing
@subsection UndefinedObject:@- storing

@table @b
@meindex isLiteralObject
@item isLiteralObject
Answer whether the receiver is expressible as a Smalltalk literal.


@meindex storeLiteralOn:@-
@item storeLiteralOn:@- aStream
Store on aStream some Smalltalk code which compiles to the receiver


@meindex storeOn:@-
@item storeOn:@- aStream
Store Smalltalk code compiling to the receiver on aStream.


@end table



@node UndefinedObject-testing
@subsection UndefinedObject:@- testing

@table @b
@meindex ifNil:@-
@item ifNil:@- nilBlock
Evaluate nilBlock if the receiver is nil, else answer nil


@meindex ifNil:@-ifNotNil:@-
@item ifNil:@- nilBlock ifNotNil:@- notNilBlock
Evaluate nilBlock if the receiver is nil, else evaluate
notNilBlock, passing the receiver.


@meindex ifNotNil:@-
@item ifNotNil:@- notNilBlock
Evaluate notNilBlock if the receiver is not nil, passing the receiver.
Else answer nil


@meindex ifNotNil:@-ifNil:@-
@item ifNotNil:@- notNilBlock ifNil:@- nilBlock
Evaluate nilBlock if the receiver is nil, else evaluate
notNilBlock, passing the receiver.


@meindex isNil
@item isNil
Answer whether the receiver is the undefined object nil. Always
answer true.


@meindex isNull
@item isNull
Answer whether the receiver represents a NULL C pointer. Always
answer true.


@meindex notNil
@item notNil
Answer whether the receiver is not the undefined object nil. Always
answer false.


@end table

@node UnicodeCharacter
@section UnicodeCharacter
@clindex UnicodeCharacter

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Character
@itemx Category: Language-Data types
My instances represent the over one million characters of the Unicode
character set.  It provides messages to translate between integers and
character objects.

UnicodeCharacter objects are created when accessing UnicodeStrings,
or with Character class>>@-#codePoint:@-.
@end table

@menu
* UnicodeCharacter class-built ins::  (class)
* UnicodeCharacter-coercion methods::  (instance)
@end menu



@node UnicodeCharacter class-built ins
@subsection UnicodeCharacter class:@- built ins

@table @b
@meindex value:@-
@slindex value:@-
@slindex codePoint:@-
@item value:@- anInteger
Returns the character object, possibly a Character, corresponding
to anInteger.  Error if anInteger is not an integer, or not in
0..16r10FFFF.

This is only a primitive for speed.  UnicodeCharacter's #value:@-
method is equivalent to #codePoint:@- (which is the same for
Character and UnicodeCharacter).


@end table



@node UnicodeCharacter-coercion methods
@subsection UnicodeCharacter:@- coercion methods

@table @b
@meindex *
@item * aNumber
Returns a String with aNumber occurrences of the receiver.


@end table

@node UnicodeString
@section UnicodeString
@clindex UnicodeString

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: CharacterArray
@itemx Category: Collections-Text
My instances represent Unicode string data types.  Data is stored
as 4-byte UTF-32 characters
@end table

@menu
* UnicodeString class-converting::  (class)
* UnicodeString class-multibyte encodings::  (class)
* UnicodeString-built ins::  (instance)
* UnicodeString-built-ins::  (instance)
* UnicodeString-converting::  (instance)
* UnicodeString-multibyte encodings::  (instance)
@end menu



@node UnicodeString class-converting
@subsection UnicodeString class:@- converting

@table @b
@meindex fromString:@-
@item fromString:@- aString
Return the String, aString, converted to its Unicode representation.
Unless the I18N package is loaded, this is not implemented.


@end table



@node UnicodeString class-multibyte encodings
@subsection UnicodeString class:@- multibyte encodings

@table @b
@meindex defaultEncoding
@item defaultEncoding
Answer the encoding used by the receiver.  Conventionally, we
answer 'Unicode' to ensure that two UnicodeStrings always have
the same encoding.


@meindex isUnicode
@item isUnicode
Answer true; the receiver stores characters.


@end table



@node UnicodeString-built ins
@subsection UnicodeString:@- built ins

@table @b
@meindex at:@-ifAbsent:@-
@item at:@- anIndex ifAbsent:@- aBlock
Answer the index-th indexed instance variable of the receiver


@end table



@node UnicodeString-built-ins
@subsection UnicodeString:@- built-ins

@table @b
@meindex hash
@item hash
Answer an hash value for the receiver


@end table



@node UnicodeString-converting
@subsection UnicodeString:@- converting

@table @b
@meindex asString
@item asString
Returns the string corresponding to the receiver.  Without the
Iconv package, unrecognized Unicode characters become $?
characters.  When it is loaded, an appropriate single- or
multi-byte encoding could be used.


@meindex asSymbol
@item asSymbol
Returns the symbol corresponding to the receiver


@meindex asUnicodeString
@item asUnicodeString
But I already am a UnicodeString!  Really!


@meindex displayOn:@-
@item displayOn:@- aStream
Print a representation of the receiver on aStream


@meindex printOn:@-
@item printOn:@- aStream
Print a representation of the receiver on aStream


@end table



@node UnicodeString-multibyte encodings
@subsection UnicodeString:@- multibyte encodings

@table @b
@meindex encoding
@item encoding
Answer the encoding used by the receiver.  Conventionally, we
answer 'Unicode' to ensure that two UnicodeStrings always have
the same encoding.


@meindex numberOfCharacters
@slindex size
@item numberOfCharacters
Answer the number of Unicode characters in the receiver.  This is
the same as #size for UnicodeString.


@end table

@node ValueAdaptor
@section ValueAdaptor
@clindex ValueAdaptor

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Object
@itemx Category: Language-Data types
My subclasses are used to access data from different objects with a consistent
protocol. However, I'm an abstract class.
@end table

@menu
* ValueAdaptor class-creating instances::  (class)
* ValueAdaptor-accessing::  (instance)
* ValueAdaptor-printing::  (instance)
@end menu



@node ValueAdaptor class-creating instances
@subsection ValueAdaptor class:@- creating instances

@table @b
@meindex new
@item new
We don't know enough of subclasses to have a shared implementation of new


@end table



@node ValueAdaptor-accessing
@subsection ValueAdaptor:@- accessing

@table @b
@meindex value
@item value
Retrive the value of the receiver. Must be implemented by ValueAdaptor's
subclasses


@meindex value:@-
@item value:@- anObject
Set the value of the receiver. Must be implemented by ValueAdaptor's
subclasses


@end table



@node ValueAdaptor-printing
@subsection ValueAdaptor:@- printing

@table @b
@meindex printOn:@-
@item printOn:@- aStream
Print a representation of the receiver


@end table

@node ValueHolder
@section ValueHolder
@clindex ValueHolder

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: ValueAdaptor
@itemx Category: Language-Data types
I store my value in a variable. For example, you can use me to pass
numbers by reference. Just instance me before calling a method and ask for
my value after that method. There are a lot of other creative uses for
my intances, though.
@end table

@menu
* ValueHolder class-creating instances::  (class)
* ValueHolder-accessing::  (instance)
* ValueHolder-initializing::  (instance)
@end menu



@node ValueHolder class-creating instances
@subsection ValueHolder class:@- creating instances

@table @b
@meindex new
@item new
Create a ValueHolder whose starting value is nil


@meindex null
@item null
Answer the sole instance of NullValueHolder


@meindex with:@-
@item with:@- anObject
Create a ValueHolder whose starting value is anObject


@end table



@node ValueHolder-accessing
@subsection ValueHolder:@- accessing

@table @b
@meindex value
@item value
Get the value of the receiver.


@meindex value:@-
@item value:@- anObject
Set the value of the receiver.


@end table



@node ValueHolder-initializing
@subsection ValueHolder:@- initializing

@table @b
@meindex initialize
@item initialize
Private - set the initial value of the receiver


@end table

@node VariableBinding
@section VariableBinding
@clindex VariableBinding

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: HomedAssociation
@itemx Category: Language-Data types
My instances represent a mapping between a key in a namespace and
its value.  I print different than a normal Association, and know
about my parent namespace, otherwise my behavior is the same.
@end table

@menu
* VariableBinding-compiler::  (instance)
* VariableBinding-printing::  (instance)
* VariableBinding-saving and loading::  (instance)
* VariableBinding-storing::  (instance)
* VariableBinding-testing::  (instance)
@end menu



@node VariableBinding-compiler
@subsection VariableBinding:@- compiler

@table @b
@meindex literalEquals:@-
@item literalEquals:@- anObject
Not commented.

@meindex literalHash
@item literalHash
Not commented.

@end table



@node VariableBinding-printing
@subsection VariableBinding:@- printing

@table @b
@meindex path
@item path
Print a dotted path that compiles to the receiver's value


@meindex printOn:@-
@item printOn:@- aStream
Put on aStream a representation of the receiver


@end table



@node VariableBinding-saving and loading
@subsection VariableBinding:@- saving and loading

@table @b
@meindex binaryRepresentationObject
@slindex at:@-
@item binaryRepresentationObject
This method is implemented to allow for a PluggableProxy to be used
with VariableBindings.  Answer a DirectedMessage which sends #at:@-
to the environment that holds the receiver.


@end table



@node VariableBinding-storing
@subsection VariableBinding:@- storing

@table @b
@meindex isLiteralObject
@item isLiteralObject
Answer whether the receiver is expressible as a Smalltalk literal.


@meindex storeLiteralOn:@-
@item storeLiteralOn:@- aStream
Store on aStream some Smalltalk code which compiles to the receiver


@meindex storeOn:@-
@item storeOn:@- aStream
Put on aStream some Smalltalk code compiling to the receiver


@end table



@node VariableBinding-testing
@subsection VariableBinding:@- testing

@table @b
@meindex isDefined
@item isDefined
Answer true if this VariableBinding lives outside the
Undeclared dictionary


@end table

@node VersionableObjectProxy
@section VersionableObjectProxy
@clindex VersionableObjectProxy

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: NullProxy
@itemx Category: Streams-Files
I am a proxy that stores additional
information to allow different versions of an object's representations
to be handled by the program.  VersionableObjectProxies are backwards
compatible, that is you can support versioning even if you did not use
a VersionableObjectProxy for that class when the object was originarily
dumped.  VersionableObjectProxy does not support classes that changed
shape across different versions.  See the method comments for more
information.
@end table

@menu
* VersionableObjectProxy class-saving and restoring::  (class)
* VersionableObjectProxy-saving and restoring::  (instance)
@end menu



@node VersionableObjectProxy class-saving and restoring
@subsection VersionableObjectProxy class:@- saving and restoring

@table @b
@meindex loadFrom:@-
@slindex binaryRepresentationVersion
@slindex convertFromVersion:@-withFixedVariables:@-instanceVariables:@-for:@-
@slindex nonVersionedInstSize
@item loadFrom:@- anObjectDumper
Retrieve the object.  If the version number doesn't match the
#binaryRepresentationVersion answered by the class, call the class'
#convertFromVersion:@-withFixedVariables:@-instanceVariables:@-for:@- method.
The stored version number will be the first parameter to that method
(or nil if the stored object did not employ a VersionableObjectProxy),
the remaining parameters will be respectively the fixed instance
variables, the indexed instance variables (or nil if the class is
fixed), and the ObjectDumper itself.
If no VersionableObjectProxy, the class is sent #nonVersionedInstSize
to retrieve the number of fixed instance variables stored for the
non-versioned object.


@end table



@node VersionableObjectProxy-saving and restoring
@subsection VersionableObjectProxy:@- saving and restoring

@table @b
@meindex dumpTo:@-
@item dumpTo:@- anObjectDumper
Save the object with extra versioning information.


@end table

@node VFS.ArchiveFile
@section VFS.ArchiveFile
@clindex VFS.ArchiveFile

@table @b
@item Defined in namespace Smalltalk.VFS
@itemx Superclass: VFS.FileWrapper
@itemx Category: Streams-Files
ArchiveFile handles
virtual filesystems that have a directory structure of
their own.  The directories and files in the archive are
instances of ArchiveMember, but the functionality
resides entirely in ArchiveFile because the members
will still ask the archive to get directory information
on them, to extract them to a real file, and so on.
@end table

@menu
* VFS.ArchiveFile-ArchiveMember protocol::  (instance)
* VFS.ArchiveFile-directory operations::  (instance)
* VFS.ArchiveFile-querying::  (instance)
* VFS.ArchiveFile-still unclassified::  (instance)
* VFS.ArchiveFile-TmpFileArchiveMember protocol::  (instance)
@end menu



@node VFS.ArchiveFile-ArchiveMember protocol
@subsection VFS.ArchiveFile:@- ArchiveMember protocol

@table @b
@meindex fillMember:@-
@slindex size:@-stCtime:@-stMtime:@-stAtime:@-isDirectory:@-
@item fillMember:@- anArchiveMember
Extract the information on anArchiveMember.  Answer
false if it actually does not exist in the archive; otherwise,
answer true after having told anArchiveMember about them
by sending #size:@-stCtime:@-stMtime:@-stAtime:@-isDirectory:@- to it.


@meindex member:@-do:@-
@item member:@- anArchiveMember do:@- aBlock
Evaluate aBlock once for each file in the directory represented by
anArchiveMember, passing its name.


@meindex member:@-mode:@-
@item member:@- anArchiveMember mode:@- bits
Set the permission bits for the file in anArchiveMember.


@meindex refresh
@item refresh
Extract the directory listing from the archive


@meindex removeMember:@-
@item removeMember:@- anArchiveMember
Remove the member represented by anArchiveMember.


@meindex updateMember:@-
@item updateMember:@- anArchiveMember
Update the member represented by anArchiveMember by
copying the file into which it was extracted back to the
archive.


@end table



@node VFS.ArchiveFile-directory operations
@subsection VFS.ArchiveFile:@- directory operations

@table @b
@meindex at:@-
@item at:@- aName
Answer a FilePath for a file named `aName' residing in the directory
represented by the receiver.


@meindex nameAt:@-
@item nameAt:@- aString
Answer a FilePath for a file named `aName' residing in the directory
represented by the receiver.


@meindex namesDo:@-
@item namesDo:@- aBlock
Evaluate aBlock once for each file in the directory represented by the
receiver, passing its name.


@meindex release
@item release
Release the resources used by the receiver that don't survive when
reloading a snapshot.


@end table



@node VFS.ArchiveFile-querying
@subsection VFS.ArchiveFile:@- querying

@table @b
@meindex isAccessible
@item isAccessible
Answer whether a directory with the name contained in the receiver does
exist and can be accessed


@meindex isDirectory
@item isDirectory
Answer true.  The archive can always be considered as a directory.


@end table



@node VFS.ArchiveFile-still unclassified
@subsection VFS.ArchiveFile:@- still unclassified

@table @b
@meindex displayOn:@-
@item displayOn:@- aStream
Print a representation of the file identified by the receiver.


@end table



@node VFS.ArchiveFile-TmpFileArchiveMember protocol
@subsection VFS.ArchiveFile:@- TmpFileArchiveMember protocol

@table @b
@meindex extractMember:@-
@item extractMember:@- anArchiveMember
Extract the contents of anArchiveMember into a file
that resides on disk, and answer the name of the file.


@meindex extractMember:@-into:@-
@item extractMember:@- anArchiveMember into:@- file
Extract the contents of anArchiveMember into a file
that resides on disk, and answer the name of the file.


@end table

@node VFS.ArchiveMember
@section VFS.ArchiveMember
@clindex VFS.ArchiveMember

@table @b
@item Defined in namespace Smalltalk.VFS
@itemx Superclass: FilePath
@itemx Category: Streams-Files
TmpFileArchiveMember is a handler
class for members of archive files that creates temporary files when
extracting files from an archive.
@end table

@menu
* VFS.ArchiveMember-accessing::  (instance)
* VFS.ArchiveMember-basic::  (instance)
* VFS.ArchiveMember-delegation::  (instance)
* VFS.ArchiveMember-directory operations::  (instance)
* VFS.ArchiveMember-file operations::  (instance)
* VFS.ArchiveMember-initializing::  (instance)
* VFS.ArchiveMember-still unclassified::  (instance)
* VFS.ArchiveMember-testing::  (instance)
@end menu



@node VFS.ArchiveMember-accessing
@subsection VFS.ArchiveMember:@- accessing

@table @b
@meindex archive
@item archive
Answer the archive of which the receiver is a member.


@meindex asString
@slindex name
@item asString
Answer the name of the file identified by the receiver as answered by
File>>@-#name.


@meindex creationTime
@item creationTime
Answer the creation time of the file identified by the receiver.
On some operating systems, this could actually be the last change time
(the `last change time' has to do with permissions, ownership and the
like).


@meindex lastAccessTime
@item lastAccessTime
Answer the last access time of the file identified by the receiver


@meindex lastChangeTime
@item lastChangeTime
Answer the last change time of the file identified by the receiver
(the `last change time' has to do with permissions, ownership and the
like). On some operating systems, this could actually be the
file creation time.


@meindex lastModifyTime
@item lastModifyTime
Answer the last modify time of the file identified by the receiver
(the `last modify time' has to do with the actual file contents).


@meindex name
@item name
Answer the receiver's file name.


@meindex name:@-
@item name:@- aName
Set the receiver's file name to aName.


@meindex refresh
@item refresh
Refresh the statistics for the receiver


@meindex size
@item size
Answer the size of the file identified by the receiver


@end table



@node VFS.ArchiveMember-basic
@subsection VFS.ArchiveMember:@- basic

@table @b
@meindex =
@item = aFile
Answer whether the receiver represents the same file as the receiver.


@meindex hash
@item hash
Answer a hash value for the receiver.


@end table



@node VFS.ArchiveMember-delegation
@subsection VFS.ArchiveMember:@- delegation

@table @b
@meindex full
@item full
Answer the size of the file identified by the receiver


@end table



@node VFS.ArchiveMember-directory operations
@subsection VFS.ArchiveMember:@- directory operations

@table @b
@meindex at:@-
@item at:@- aName
Answer a FilePath for a file named `aName' residing in the directory
represented by the receiver.


@meindex createDirectory:@-
@item createDirectory:@- dirName
Create a subdirectory of the receiver, naming it dirName.


@meindex namesDo:@-
@item namesDo:@- aBlock
Evaluate aBlock once for each file in the directory represented by the
receiver, passing its name.


@end table



@node VFS.ArchiveMember-file operations
@subsection VFS.ArchiveMember:@- file operations

@table @b
@meindex open:@-mode:@-ifFail:@-
@item open:@- class mode:@- mode ifFail:@- aBlock
Open the receiver in the given mode (as answered by FileStream's
class constant methods)


@meindex remove
@item remove
Remove the file with the given path name


@meindex renameTo:@-
@item renameTo:@- newFileName
Rename the file with the given path name oldFileName to newFileName


@meindex update:@-
@item update:@- aspect
Private - Update the in-archive version of the file before closing.


@end table



@node VFS.ArchiveMember-initializing
@subsection VFS.ArchiveMember:@- initializing

@table @b
@meindex archive:@-
@item archive:@- anArchiveFile
Set the archive of which the receiver is a member.


@meindex fillFrom:@-
@item fillFrom:@- data
Called back by the receiver's archive when the ArchiveMember
asks for file information.


@meindex size:@-stCtime:@-stMtime:@-stAtime:@-mode:@-
@item size:@- bytes stCtime:@- ctime stMtime:@- mtime stAtime:@- atime mode:@- modeBits
Set the file information for the receiver.


@meindex size:@-stMtime:@-mode:@-
@item size:@- bytes stMtime:@- mtime mode:@- modeBits
Set the file information for the receiver.


@end table



@node VFS.ArchiveMember-still unclassified
@subsection VFS.ArchiveMember:@- still unclassified

@table @b
@meindex ,
@item , aName
Answer an object of the same kind as the receiver, whose name
is suffixed with aName.


@meindex displayOn:@-
@item displayOn:@- aStream
Print a representation of the file identified by the receiver.


@meindex isAbsolute
@item isAbsolute
Answer whether the receiver identifies an absolute path.


@end table



@node VFS.ArchiveMember-testing
@subsection VFS.ArchiveMember:@- testing

@table @b
@meindex exists
@item exists
Answer whether a file with the name contained in the receiver does exist.


@meindex isAccessible
@item isAccessible
Answer whether a directory with the name contained in the receiver does exist
and is accessible


@meindex isDirectory
@item isDirectory
Answer whether a file with the name contained in the receiver does exist
and identifies a directory.


@meindex isExecutable
@item isExecutable
Answer whether a file with the name contained in the receiver does exist
and is executable


@meindex isReadable
@item isReadable
Answer whether a file with the name contained in the receiver does exist
and is readable


@meindex isSymbolicLink
@item isSymbolicLink
Answer whether a file with the name contained in the receiver does exist
and identifies a symbolic link.


@meindex isWriteable
@item isWriteable
Answer whether a file with the name contained in the receiver does exist
and is writeable


@meindex mode
@item mode
Answer the octal permissions for the file.


@meindex mode:@-
@item mode:@- mode
Set the octal permissions for the file to be `mode'.


@end table

@node VFS.FileWrapper
@section VFS.FileWrapper
@clindex VFS.FileWrapper

@table @b
@item Defined in namespace Smalltalk.VFS
@itemx Superclass: FilePath
@itemx Category: Streams-Files
FileWrapper gives information for
virtual files that refer to a real file on disk.
@end table

@menu
* VFS.FileWrapper class-initializing::  (class)
* VFS.FileWrapper class-instance creation::  (class)
* VFS.FileWrapper-accessing::  (instance)
* VFS.FileWrapper-basic::  (instance)
* VFS.FileWrapper-delegation::  (instance)
* VFS.FileWrapper-enumerating::  (instance)
* VFS.FileWrapper-file operations::  (instance)
* VFS.FileWrapper-testing::  (instance)
@end menu



@node VFS.FileWrapper class-initializing
@subsection VFS.FileWrapper class:@- initializing

@table @b
@meindex initialize
@item initialize
Register the receiver with ObjectMemory


@meindex update:@-
@item update:@- aspect
Private - Remove the files before quitting, and register the virtual
filesystems specified by the subclasses upon image load.


@end table



@node VFS.FileWrapper class-instance creation
@subsection VFS.FileWrapper class:@- instance creation

@table @b
@meindex on:@-
@item on:@- file
Create an instance of this class representing the contents of the given
file, under the virtual filesystem fsName.


@end table



@node VFS.FileWrapper-accessing
@subsection VFS.FileWrapper:@- accessing

@table @b
@meindex asString
@item asString
Answer the string representation of the receiver's path.


@meindex at:@-
@item at:@- aName
Answer a File or Directory object as appropriate for a file named
'aName' in the directory represented by the receiver.


@meindex lastAccessTime:@-lastModifyTime:@-
@item lastAccessTime:@- accessDateTime lastModifyTime:@- modifyDateTime
Update the timestamps of the file corresponding to the receiver, to be
accessDateTime and modifyDateTime.


@meindex name
@item name
Answer the full path to the receiver.


@meindex owner:@-group:@-
@item owner:@- ownerString group:@- groupString
Set the receiver's owner and group to be ownerString and groupString.


@meindex pathTo:@-
@item pathTo:@- destName
Compute the relative path from the receiver to destName.


@end table



@node VFS.FileWrapper-basic
@subsection VFS.FileWrapper:@- basic

@table @b
@meindex =
@item = aFile
Answer whether the receiver represents the same file as the receiver.


@meindex hash
@item hash
Answer a hash value for the receiver.


@end table



@node VFS.FileWrapper-delegation
@subsection VFS.FileWrapper:@- delegation

@table @b
@meindex creationTime
@item creationTime
Answer the creation time of the file identified by the receiver.
On some operating systems, this could actually be the last change time
(the `last change time' has to do with permissions, ownership and the
like).


@meindex full
@item full
Answer the size of the file identified by the receiver


@meindex isExecutable
@item isExecutable
Answer whether a file with the name contained in the receiver does exist
and is executable


@meindex isReadable
@item isReadable
Answer whether a file with the name contained in the receiver does exist
and is readable


@meindex isWriteable
@item isWriteable
Answer whether a file with the name contained in the receiver does exist
and is writeable


@meindex lastAccessTime
@item lastAccessTime
Answer the last access time of the file identified by the receiver


@meindex lastChangeTime
@item lastChangeTime
Answer the last change time of the file identified by the receiver
(the `last change time' has to do with permissions, ownership and the
like). On some operating systems, this could actually be the
file creation time.


@meindex lastModifyTime
@item lastModifyTime
Answer the last modify time of the file identified by the receiver
(the `last modify time' has to do with the actual file contents).


@meindex mode
@item mode
Answer the permission bits for the file identified by the receiver


@meindex mode:@-
@item mode:@- anInteger
Answer the permission bits for the file identified by the receiver


@meindex open:@-mode:@-ifFail:@-
@item open:@- class mode:@- mode ifFail:@- aBlock
Open the receiver in the given mode (as answered by FileStream's
class constant methods)


@meindex remove
@item remove
Remove the file with the given path name


@meindex size
@item size
Answer the size of the file identified by the receiver


@end table



@node VFS.FileWrapper-enumerating
@subsection VFS.FileWrapper:@- enumerating

@table @b
@meindex namesDo:@-
@item namesDo:@- aBlock
Evaluate aBlock once for each file in the directory represented by the
receiver, passing its name.


@end table



@node VFS.FileWrapper-file operations
@subsection VFS.FileWrapper:@- file operations

@table @b
@meindex pathFrom:@-
@item pathFrom:@- dirName
Compute the relative path from the directory dirName to the receiver


@meindex renameTo:@-
@item renameTo:@- newName
Rename the file identified by the receiver to newName


@meindex symlinkAs:@-
@item symlinkAs:@- destName
Create destName as a symbolic link of the receiver.  The appropriate
relative path is computed automatically.


@meindex symlinkFrom:@-
@item symlinkFrom:@- srcName
Create the receiver as a symbolic link from srcName (relative to the
path of the receiver).


@end table



@node VFS.FileWrapper-testing
@subsection VFS.FileWrapper:@- testing

@table @b
@meindex exists
@item exists
Answer whether a file with the name contained in the receiver
does exist.


@meindex isAbsolute
@item isAbsolute
Answer whether the receiver identifies an absolute path.


@meindex isAccessible
@item isAccessible
Answer whether a directory with the name contained in the receiver does
exist and can be accessed


@meindex isDirectory
@item isDirectory
Answer whether a file with the name contained in the receiver
does exist identifies a directory.


@meindex isSymbolicLink
@item isSymbolicLink
Answer whether a file with the name contained in the receiver
does exist and identifies a symbolic link.


@end table

@node VFS.StoredZipMember
@section VFS.StoredZipMember
@clindex VFS.StoredZipMember

@table @b
@item Defined in namespace Smalltalk.VFS
@itemx Superclass: VFS.TmpFileArchiveMember
@itemx Category: Streams-Files
ArchiveMember is the handler
class for stored ZIP archive members, which are optimized.
@end table

@menu
* VFS.StoredZipMember-accessing::  (instance)
* VFS.StoredZipMember-opening::  (instance)
@end menu



@node VFS.StoredZipMember-accessing
@subsection VFS.StoredZipMember:@- accessing

@table @b
@meindex offset
@item offset
Answer `offset'.

@meindex offset:@-
@item offset:@- anInteger
Not commented.

@end table



@node VFS.StoredZipMember-opening
@subsection VFS.StoredZipMember:@- opening

@table @b
@meindex open:@-mode:@-ifFail:@-
@item open:@- class mode:@- mode ifFail:@- aBlock
Not commented.

@end table

@node VFS.TmpFileArchiveMember
@section VFS.TmpFileArchiveMember
@clindex VFS.TmpFileArchiveMember

@table @b
@item Defined in namespace Smalltalk.VFS
@itemx Superclass: VFS.ArchiveMember
@itemx Category: Streams-Files

@end table

@menu
* VFS.TmpFileArchiveMember-directory operations::  (instance)
* VFS.TmpFileArchiveMember-finalization::  (instance)
* VFS.TmpFileArchiveMember-still unclassified::  (instance)
@end menu



@node VFS.TmpFileArchiveMember-directory operations
@subsection VFS.TmpFileArchiveMember:@- directory operations

@table @b
@meindex file
@item file
Answer the real file name which holds the file contents,
or nil if it does not apply.


@meindex open:@-mode:@-ifFail:@-
@item open:@- class mode:@- mode ifFail:@- aBlock
Open the receiver in the given mode (as answered by FileStream's
class constant methods)


@end table



@node VFS.TmpFileArchiveMember-finalization
@subsection VFS.TmpFileArchiveMember:@- finalization

@table @b
@meindex release
@item release
Release the resources used by the receiver that don't survive when
reloading a snapshot.


@end table



@node VFS.TmpFileArchiveMember-still unclassified
@subsection VFS.TmpFileArchiveMember:@- still unclassified

@table @b
@meindex extracted
@item extracted
Answer whether the file has already been extracted to disk.


@end table

@node VFS.ZipFile
@section VFS.ZipFile
@clindex VFS.ZipFile

@table @b
@item Defined in namespace Smalltalk.VFS
@itemx Superclass: VFS.ArchiveFile
@itemx Category: Streams-Files
ZipFile transparently extracts
files from a ZIP archive.
@end table

@menu
* VFS.ZipFile-members::  (instance)
@end menu



@node VFS.ZipFile-members
@subsection VFS.ZipFile:@- members

@table @b
@meindex centralDirectoryRangeIn:@-
@item centralDirectoryRangeIn:@- f
Not commented.

@meindex createDirectory:@-
@item createDirectory:@- dirName
Create a subdirectory of the receiver, naming it dirName.


@meindex extractMember:@-into:@-
@item extractMember:@- anArchiveMember into:@- temp
Extract the contents of anArchiveMember into a file
that resides on disk, and answer the name of the file.


@meindex fileData
@item fileData
Extract the directory listing from the archive


@meindex member:@-mode:@-
@item member:@- anArchiveMember mode:@- bits
Set the permission bits for the file in anArchiveMember.


@meindex removeMember:@-
@item removeMember:@- anArchiveMember
Remove the member represented by anArchiveMember.


@meindex updateMember:@-
@item updateMember:@- anArchiveMember
Update the member represented by anArchiveMember by
copying the file into which it was extracted back to the
archive.


@end table

@node Warning
@section Warning
@clindex Warning

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Notification
@itemx Category: Language-Exceptions
Warning represents an `important' but resumable error.
@end table

@menu
* Warning-exception description::  (instance)
@end menu



@node Warning-exception description
@subsection Warning:@- exception description

@table @b
@meindex description
@item description
Answer a textual description of the exception.


@end table

@node WeakArray
@section WeakArray
@clindex WeakArray

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Array
@itemx Category: Collections-Weak

I am similar to a plain array, but my items are stored in a weak object,
so I track which of them are garbage collected.
@end table

@menu
* WeakArray class-instance creation::  (class)
* WeakArray-accessing::  (instance)
* WeakArray-conversion::  (instance)
* WeakArray-loading::  (instance)
@end menu



@node WeakArray class-instance creation
@subsection WeakArray class:@- instance creation

@table @b
@meindex new
@item new
Create a new WeakArray of size 0.


@meindex new:@-
@item new:@- size
Create a new WeakArray of the given size.


@end table



@node WeakArray-accessing
@subsection WeakArray:@- accessing

@table @b
@meindex aliveObjectsDo:@-
@item aliveObjectsDo:@- aBlock
Evaluate aBlock for all the elements in the array, excluding the
garbage collected ones. Note:@- a finalized object stays alive until
the next collection (the collector has no means to see whether it was
resuscitated by the finalizer), so an object being alive does not mean
that it is usable.


@meindex at:@-
@item at:@- index
Answer the index-th item of the receiver, or nil if it has been
garbage collected.


@meindex at:@-put:@-
@item at:@- index put:@- object
Store the value associated to the given index; plus,
store in nilValues whether the object is nil.  nil objects whose
associated item of nilValues is 1 were touched by the garbage
collector.


@meindex atAll:@-put:@-
@item atAll:@- indices put:@- object
Put object at every index contained in the indices collection


@meindex atAllPut:@-
@item atAllPut:@- object
Put object at every index in the receiver


@meindex clearGCFlag:@-
@item clearGCFlag:@- index
Clear the `object has been garbage collected' flag for the item
at the given index


@meindex do:@-
@item do:@- aBlock
Evaluate aBlock for all the elements in the array, including the
garbage collected ones (pass nil for those).


@meindex isAlive:@-
@item isAlive:@- index
Answer whether the item at the given index is still alive or has been
garbage collected. Note:@- a finalized object stays alive until the next
collection (the collector has no means to see whether it was resuscitated
by the finalizer), so an object being alive does not mean that it is
usable.


@meindex size
@item size
Answer the number of items in the receiver


@end table



@node WeakArray-conversion
@subsection WeakArray:@- conversion

@table @b
@meindex asArray
@item asArray
Answer a non-weak version of the receiver


@meindex deepCopy
@item deepCopy
Returns a deep copy of the receiver (the instance variables are
copies of the receiver's instance variables)


@meindex shallowCopy
@item shallowCopy
Returns a shallow copy of the receiver (the instance variables are
not copied)


@meindex species
@slindex copyEmpty:@-
@item species
Answer Array; this method is used in the #copyEmpty:@- message, which in
turn is used by all collection-returning methods (collect:@-, select:@-,
reject:@-, etc.).


@end table



@node WeakArray-loading
@subsection WeakArray:@- loading

@table @b
@meindex postLoad
@item postLoad
Called after loading an object; must restore it to the state before
`preStore' was called.  Make it weak again


@end table

@node WeakIdentitySet
@section WeakIdentitySet
@clindex WeakIdentitySet

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: WeakSet
@itemx Category: Collections-Weak

I am similar to a plain identity set, but my keys are stored in a weak
array; I track which of them are garbage collected and, as soon as I
encounter one of them, I swiftly remove all the garbage collected keys
@end table

@menu
* WeakIdentitySet-accessing::  (instance)
@end menu



@node WeakIdentitySet-accessing
@subsection WeakIdentitySet:@- accessing

@table @b
@meindex identityIncludes:@-
@slindex includes:@-
@item identityIncludes:@- anObject
Answer whether I include anObject exactly.  As I am an
identity-set, this is the same as #includes:@-.


@end table

@node WeakKeyDictionary
@section WeakKeyDictionary
@clindex WeakKeyDictionary

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Dictionary
@itemx Category: Collections-Weak

I am similar to a plain Dictionary, but my keys are stored
in a weak array; I track which of them are garbage collected and, as
soon as I encounter one of them, I swiftly remove all the associations
for the garbage collected keys
@end table

@menu
* WeakKeyDictionary class-hacks::  (class)
* WeakKeyDictionary-accessing::  (instance)
@end menu



@node WeakKeyDictionary class-hacks
@subsection WeakKeyDictionary class:@- hacks

@table @b
@meindex postLoad
@item postLoad
Called after loading an object; must restore it to the state before
`preStore' was called.  Make it weak again


@end table



@node WeakKeyDictionary-accessing
@subsection WeakKeyDictionary:@- accessing

@table @b
@meindex add:@-
@item add:@- anAssociation
Store value as associated to the given key.


@meindex at:@-put:@-
@item at:@- key put:@- value
Store value as associated to the given key.


@end table

@node WeakKeyIdentityDictionary
@section WeakKeyIdentityDictionary
@clindex WeakKeyIdentityDictionary

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: WeakKeyDictionary
@itemx Category: Collections-Weak

I am similar to a plain identity dictionary, but my keys are stored
in a weak array; I track which of them are garbage collected and, as
soon as I encounter one of them, I swiftly remove all the associations
for the garbage collected keys
@end table

@menu
@end menu

@node WeakSet
@section WeakSet
@clindex WeakSet

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: Set
@itemx Category: Collections-Weak

I am similar to a plain set, but my items are stored in a weak array;
I track which of them are garbage collected and, as soon as I encounter
one of them, I swiftly remove all.
@end table

@menu
* WeakSet-accessing::  (instance)
* WeakSet-copying::  (instance)
* WeakSet-loading::  (instance)
@end menu



@node WeakSet-accessing
@subsection WeakSet:@- accessing

@table @b
@meindex add:@-
@item add:@- newObject
Add newObject to the set, if and only if the set doesn't already contain
an occurrence of it. Don't fail if a duplicate is found. Answer newObject


@meindex do:@-
@item do:@- aBlock
Enumerate all the non-nil members of the set


@end table



@node WeakSet-copying
@subsection WeakSet:@- copying

@table @b
@meindex deepCopy
@item deepCopy
Returns a deep copy of the receiver (the instance variables are
copies of the receiver's instance variables)


@meindex shallowCopy
@item shallowCopy
Returns a shallow copy of the receiver (the instance variables are
not copied)


@end table



@node WeakSet-loading
@subsection WeakSet:@- loading

@table @b
@meindex postLoad
@item postLoad
Called after loading an object; must restore it to the state before
`preStore' was called.  Make it weak again


@end table

@node WeakValueIdentityDictionary
@section WeakValueIdentityDictionary
@clindex WeakValueIdentityDictionary

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: WeakValueLookupTable
@itemx Category: Collections-Weak

I am similar to a plain identity dictionary, but my values are stored
in a weak array; I track which of the values are garbage collected and,
as soon as one of them is accessed, I swiftly remove the associations
for the garbage collected values
@end table

@menu
@end menu

@node WeakValueLookupTable
@section WeakValueLookupTable
@clindex WeakValueLookupTable

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: LookupTable
@itemx Category: Collections-Weak

I am similar to a plain LookupTable, but my values are stored
in a weak array; I track which of the values are garbage collected and,
as soon as one of them is accessed, I swiftly remove the associations
for the garbage collected values
@end table

@menu
* WeakValueLookupTable class-hacks::  (class)
* WeakValueLookupTable-hacks::  (instance)
* WeakValueLookupTable-rehashing::  (instance)
@end menu



@node WeakValueLookupTable class-hacks
@subsection WeakValueLookupTable class:@- hacks

@table @b
@meindex primNew:@-
@item primNew:@- realSize
Answer a new, uninitialized instance of the receiver with the given size


@end table



@node WeakValueLookupTable-hacks
@subsection WeakValueLookupTable:@- hacks

@table @b
@meindex at:@-ifAbsent:@-
@item at:@- key ifAbsent:@- aBlock
Answer the value associated to the given key, or the result of evaluating
aBlock if the key is not found


@meindex at:@-ifPresent:@-
@item at:@- key ifPresent:@- aBlock
If aKey is absent, answer nil. Else, evaluate aBlock passing the
associated value and answer the result of the invocation


@meindex includesKey:@-
@item includesKey:@- key
Answer whether the receiver contains the given key.


@end table



@node WeakValueLookupTable-rehashing
@subsection WeakValueLookupTable:@- rehashing

@table @b
@meindex rehash
@item rehash
Rehash the receiver


@end table

@node WordArray
@section WordArray
@clindex WordArray

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: ArrayedCollection
@itemx Category: Collections-Sequenceable

I am similar to a plain array, but my items are 32-bit integers.
@end table

@menu
* WordArray-built ins::  (instance)
@end menu



@node WordArray-built ins
@subsection WordArray:@- built ins

@table @b
@meindex at:@-ifAbsent:@-
@item at:@- anIndex ifAbsent:@- aBlock
Answer the index-th indexed instance variable of the receiver


@end table

@node WriteStream
@section WriteStream
@clindex WriteStream

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: PositionableStream
@itemx Category: Streams-Collections
I am the class of writeable streams.  I only allow write operations to
my instances; reading is strictly forbidden.
@end table

@menu
* WriteStream class-instance creation::  (class)
* WriteStream-accessing-writing::  (instance)
* WriteStream-positioning::  (instance)
@end menu



@node WriteStream class-instance creation
@subsection WriteStream class:@- instance creation

@table @b
@meindex on:@-
@item on:@- aCollection
Answer a new instance of the receiver which streams on aCollection.
Every item of aCollection is discarded.


@meindex with:@-
@item with:@- aCollection
Answer a new instance of the receiver which streams from the end
of aCollection.


@meindex with:@-from:@-to:@-
@item with:@- aCollection from:@- firstIndex to:@- lastIndex
Answer a new instance of the receiver which streams from the
firstIndex-th item of aCollection to the lastIndex-th. The
pointer is moved to the last item in that range.


@end table



@node WriteStream-accessing-writing
@subsection WriteStream:@- accessing-writing

@table @b
@meindex contents
@item contents
Returns a collection of the same type that the stream accesses, up to
and including the final element.


@meindex next:@-putAll:@-startingAt:@-
@item next:@- n putAll:@- aCollection startingAt:@- pos
Put n characters or bytes of aCollection, starting at the pos-th,
in the collection buffer.


@meindex nextPut:@-
@item nextPut:@- anObject
Store anObject as the next item in the receiver. Grow the
collection if necessary


@meindex readStream
@item readStream
Answer a ReadStream on the same contents as the receiver


@meindex reverseContents
@item reverseContents
Returns a collection of the same type that the stream accesses, up to
and including the final element, but in reverse order.


@end table



@node WriteStream-positioning
@subsection WriteStream:@- positioning

@table @b
@meindex emptyStream
@item emptyStream
Extension - Reset the stream


@end table

@node ZeroDivide
@section ZeroDivide
@clindex ZeroDivide

@table @b
@item Defined in namespace Smalltalk
@itemx Superclass: ArithmeticError
@itemx Category: Language-Exceptions
A ZeroDivide exception is raised by numeric classes when a program tries
to divide by zero.  Information on the dividend is available to the
handler.
@end table

@menu
* ZeroDivide class-instance creation::  (class)
* ZeroDivide-accessing::  (instance)
* ZeroDivide-description::  (instance)
@end menu



@node ZeroDivide class-instance creation
@subsection ZeroDivide class:@- instance creation

@table @b
@meindex dividend:@-
@item dividend:@- aNumber
Create a new ZeroDivide object remembering that the dividend was
aNumber.


@meindex new
@item new
Create a new ZeroDivide object; the dividend is conventionally
set to zero.


@end table



@node ZeroDivide-accessing
@subsection ZeroDivide:@- accessing

@table @b
@meindex dividend
@item dividend
Answer the number that was being divided by zero


@end table



@node ZeroDivide-description
@subsection ZeroDivide:@- description

@table @b
@meindex description
@item description
Answer a textual description of the exception.


@end table

